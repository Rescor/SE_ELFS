//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:59:59 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\HelloWorld\ma /
//                       in.c                                                /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\HelloWorld\ma /
//                       in.c -D NDEBUG -D OLDFUNCTIONS -lC                  /
//                       Z:\home\perk11\www\perk11.info\svn\SE\HelloWorld\Re /
//                       lease\List\ -lA Z:\home\perk11\www\perk11.info\svn\ /
//                       SE\HelloWorld\Release\List\ -o                      /
//                       Z:\home\perk11\www\perk11.info\svn\SE\HelloWorld\Re /
//                       lease\Obj\ -s9 --no_unroll --no_inline --cpu_mode   /
//                       arm --endian little --cpu ARM926EJ-S --stack_align  /
//                       4 --interwork -e --fpu None --eec++ --dlib_config   /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\                        /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\HelloWorld\Re /
//                       lease\List\main.s79                                 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
        PUBLIC ??CreateHWBook
        FUNCTION ??CreateHWBook,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??CreateHWBook??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
        PUBWEAK ??LPARAM
        FUNCTION ??LPARAM,0203H
        MULTWEAK ??LPARAM??rA
        PUBLIC ??ShowAuthorInfo
        FUNCTION ??ShowAuthorInfo,0603H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??ShowAuthorInfo??rT
        PUBLIC ??TerminateElf
        FUNCTION ??TerminateElf,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??TerminateElf??rT
        PUBLIC ??elf_exit
        FUNCTION ??elf_exit,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??elf_exit??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        PUBLIC ??onCloseHWBook
        FUNCTION ??onCloseHWBook,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??onCloseHWBook??rT
        PUBLIC ??onTimer
        FUNCTION ??onTimer,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??onTimer??rT
        MULTWEAK `??operator new??rA`
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC HWBook
        PUBLIC base_page
        PUBLIC lamp
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC timer
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        

kill_data           SYMBOL "kill_data"

??CreateHWBook??rT  SYMBOL "??rT", ??CreateHWBook

??LPARAM??rA        SYMBOL "??rA", ??LPARAM

??ShowAuthorInfo??rT SYMBOL "??rT", ??ShowAuthorInfo

??TerminateElf??rT  SYMBOL "??rT", ??TerminateElf

??elf_exit??rT      SYMBOL "??rT", ??elf_exit
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main

??onCloseHWBook??rT SYMBOL "??rT", ??onCloseHWBook

??onTimer??rT       SYMBOL "??rT", ??onTimer
`??operator new??rA` SYMBOL "??rA", `??operator new`

        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0202H

// Z:\home\perk11\www\perk11.info\svn\SE\HelloWorld\main.c
//    1 #include "..\\include\Lib_Clara.h"

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ??LPARAM
        ARM
// __??Code32?? __code __interwork __atpcs LPARAM::LPARAM(int)
??LPARAM:
        STR      R1,[R0, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock0

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI NoFunction
        THUMB
??TerminateElf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock1
        REQUIRE ??TerminateElf
//    2 #include "..\\include\Dir.h"
//    3 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//    4 u16 timer; // ID таймера
timer:
        DS8 2
        DS8 2
//    5 int lamp=0; // текуща€ €ркость лампы
lamp:
        DS8 4
//    6 BOOK * HWBook;
//    7 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ??TerminateElf
        ARM
//    8 int TerminateElf(void * ,BOOK* book)
//    9 {
??TerminateElf:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,R1
//   10   FreeBook(book);
        SWI      +303
//   11   return(1);
        MOV      R0,#+1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock2
//   12 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI NoFunction
        THUMB
??ShowAuthorInfo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock3
        REQUIRE ??ShowAuthorInfo
//   13 
//   14 typedef struct
//   15 {
//   16   BOOK * book;
//   17 }MSG;
//   18 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function ??ShowAuthorInfo
        ARM
//   19 int ShowAuthorInfo(void *mess ,BOOK* book)
//   20 {
??ShowAuthorInfo:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   21   MSG * msg = (MSG*)mess;
//   22   MessageBox(EMPTY_TEXTID,STR("Hello Wordl!\n\nExample elf.."), NOIMAGE, 1, 5000,msg->book);
        MOV      R1,#+0
        MOV      R4,R0
        LDR      R0,??ShowAuthorInfo_1  ;; `?<Constant L"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\`
        MOV      R5,#+255
        ORR      R5,R5,#0xFF00
        MOV      R2,R5
        SWI      +349
        LDR      R1,[R4, #+0]
        MOV      R3,#+1
        PUSH     {R1}
        CFI CFA R13+16
        MOV      R2,R5
        MOV      R1,#+136
        ORR      R1,R1,#0x1300
        PUSH     {R1}
        CFI CFA R13+20
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
//   23   return(1);
        MOV      R0,#+1
        POP      {R1,R2,R4,R5,PC}  ;; return
        DATA
??ShowAuthorInfo_1:
        DC32     `?<Constant L"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\`
        CFI EndBlock cfiBlock4
//   24 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI NoFunction
        THUMB
??elf_exit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock5
        REQUIRE ??elf_exit
//   25 

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
//   26 const PAGE_MSG HW_PageEvents[]@ "DYN_PAGE" ={
HW_PageEvents:
        DATA
        DC32 997, ??TerminateElf, 998, ??ShowAuthorInfo, 0, 0H

        RSEG DATA_I:DATA:SORT:NOROOT(2)
HWBook:
        DS8 4
        REQUIRE `?<Initializer for HWBook>`
//   27   ELF_TERMINATE_EVENT , TerminateElf,
//   28   ELF_SHOW_INFO_EVENT  , ShowAuthorInfo,
//   29   0,0
//   30 };
//   31 
//   32 PAGE_DESC base_page ={"HW_BasePage",0,HW_PageEvents};
base_page:
        DS8 12
        REQUIRE `?<Initializer for base_page>`
//   33 
//   34 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ??elf_exit
        ARM
//   35 void elf_exit(void)
//   36 
//   37 {
??elf_exit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   38   kill_data(&ELF_BEGIN, (void(*)(void*))mfree_adr());
        SWI      +33028
        MOV      R1,R0
        LDR      R0,??elf_exit_1  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??elf_exit_1:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock6
//   39 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI NoFunction
        THUMB
??onTimer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock7
        REQUIRE ??onTimer
//   40 
//   41 
//   42 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ??onTimer
        ARM
//   43 void onTimer (u16 unk , LPARAM)
//   44 {
??onTimer:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   45   {
//   46     // перезапускаем таймер
//   47     Timer_ReSet(&timer,500,onTimer,0);
        LDR      R4,??DataTable4  ;; timer
        SUB      SP,SP,#+4
        CFI CFA R13+12
        MOV      R1,#+0
        MOV      R0,SP
        _BLF     ??LPARAM,??LPARAM??rA
        LDR      R3,[SP, #+0]
        LDR      R2,??DataTable3  ;; ??onTimer
        MOV      R1,#+500
        MOV      R0,R4
        SWI      +296
//   48     // переключаем лампу
//   49     SetLampLevel(lamp^=0x10);
        LDR      R0,[R4, #+4]
        EOR      R0,R0,#0x10
        STR      R0,[R4, #+4]
        SWI      +376
//   50   }
//   51 }
        POP      {R0,R4,PC}       ;; return
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI NoFunction
        THUMB
??onCloseHWBook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock9
        REQUIRE ??onCloseHWBook
//   52 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function ??onCloseHWBook
        ARM
//   53 void onCloseHWBook(BOOK * book)
//   54 {
??onCloseHWBook:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   55   if (book)
        CMP      R0,#+0
        POPEQ    {PC}
//   56   {
//   57     Timer_Kill(&timer);
        LDR      R0,??DataTable4  ;; timer
        SWI      +298
//   58     StatusIndication_ShowNotes(EMPTY_TEXTID);
        MVN      R0,#-1879048192
        SWI      +323
//   59     SetLampLevel(0);
        MOV      R0,#+0
        SWI      +376
//   60     SUBPROC(elf_exit);
        LDR      R0,??onCloseHWBook_1  ;; ??elf_exit
        SWI      +264
//   61   }
//   62 }
        POP      {PC}             ;; return
        DATA
??onCloseHWBook_1:
        DC32     ??elf_exit
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI NoFunction
        THUMB
??CreateHWBook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock11
        REQUIRE ??CreateHWBook
//   63 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function ??CreateHWBook
        ARM
//   64 BOOK * CreateHWBook()
//   65 {
??CreateHWBook:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   66   HWBook= new BOOK;
        LDR      R4,??CreateHWBook_1  ;; HWBook
        MOV      R0,#+24
        _BLF     `??operator new`,`??operator new??rA`
//   67   CreateBook(HWBook,onCloseHWBook,&base_page,"Example",-1,0);
        LDR      R3,??CreateHWBook_1+0x4  ;; `?<Constant "Example">`
        LDR      R1,??CreateHWBook_1+0x8  ;; ??onCloseHWBook
        STR      R0,[R4, #+0]
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+12
        ADD      R2,R4,#+4
        MVN      R0,R0
        PUSH     {R0}
        CFI CFA R13+16
        LDR      R0,[R4, #+0]
        SWI      +299
//   68   return(HWBook);
        LDR      R0,[R4, #+0]
        POP      {R1,R2,R4,PC}    ;; return
        DATA
??CreateHWBook_1:
        DC32     HWBook
        DC32     `?<Constant "Example">`
        DC32     ??onCloseHWBook
        CFI EndBlock cfiBlock12
//   69 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock13
        REQUIRE main
//   70 
//   71 
//   72 
//   73 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function main
        ARM
//   74 int main (void)
//   75 {
main:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+4
        CFI CFA R13+8
//   76   CreateHWBook();
        BL       ??CreateHWBook
//   77   // выводим текст в "заметки" на StandBy
//   78   StatusIndication_ShowNotes(STR("Hello World!"));
        LDR      R0,??main_0      ;; `?<Constant L"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\_1`
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        MOV      R1,#+0
        SWI      +349
        SWI      +323
//   79   // запускаем таймер на 0.5 сек.
//   80   timer=Timer_Set(500,onTimer,0);
        MOV      R1,#+0
        MOV      R0,SP
        _BLF     ??LPARAM,??LPARAM??rA
        LDR      R2,[SP, #+0]
        LDR      R1,??DataTable3  ;; ??onTimer
        MOV      R0,#+500
        SWI      +297
        LDR      R1,??DataTable4  ;; timer
        STRH     R0,[R1, #+0]
//   81   return(0);
        MOV      R0,#+0
        POP      {R1,PC}          ;; return
        DATA
??main_0:
        DC32     `?<Constant L"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\_1`
        CFI EndBlock cfiBlock14
//   82 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     ??onTimer

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     timer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine7_0  ;; kill_data
        BX       R12
        DATA
??Subroutine7_0:
        DC32     kill_data
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        ARM
??LPARAM??rA:
        LDR      R12,??Subroutine8_0  ;; ??LPARAM
        BX       R12
        DATA
??Subroutine8_0:
        DC32     ??LPARAM
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon0
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine9_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine9_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock17

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for HWBook>`:
        DATA
        DC8 0, 0, 0, 0
`?<Initializer for base_page>`:
        DC32 `?<Constant "HW_BasePage">`, 0H, HW_PageEvents

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "HW_BasePage">`:
        DATA
        DC8 "HW_BasePage"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\`:
        DATA
        DC8 48H, 0, 65H, 0, 6CH, 0, 6CH, 0
        DC8 6FH, 0, 20H, 0, 57H, 0, 6FH, 0
        DC8 72H, 0, 64H, 0, 6CH, 0, 21H, 0
        DC8 0AH, 0, 0AH, 0, 45H, 0, 78H, 0
        DC8 61H, 0, 6DH, 0, 70H, 0, 6CH, 0
        DC8 65H, 0, 20H, 0, 65H, 0, 6CH, 0
        DC8 66H, 0, 2EH, 0, 2EH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Example">`:
        DATA
        DC8 "Example"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\_1`:
        DATA
        DC8 48H, 0, 65H, 0, 6CH, 0, 6CH, 0
        DC8 6FH, 0, 20H, 0, 57H, 0, 6FH, 0
        DC8 72H, 0, 6CH, 0, 64H, 0, 21H, 0
        DC8 0, 0
        DC8 0, 0

        END
// 
// 488 bytes in segment CODE
// 104 bytes in segment DATA_C
//  16 bytes in segment DATA_I
//  16 bytes in segment DATA_ID
//   8 bytes in segment DATA_Z
//  24 bytes in segment DYN_PAGE
//  24 bytes in segment INITTAB
// 
// 416 bytes of CODE  memory (+ 96 bytes shared)
// 144 bytes of CONST memory
//  24 bytes of DATA  memory
//
//Errors: none
//Warnings: none
