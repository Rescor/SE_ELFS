##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  23:08:42 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\cryp #
#                       t.c                                                  #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\cryp #
#                       t.c -D NDEBUG -D LANG_CN -D OLDFUNCTIONS -lC         #
#                       Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\Rele #
#                       ase_CN\List\ -lA Z:\home\perk11\www\perk11.info\svn\ #
#                       SE\Tamagochi\Release_CN\List\ -o                     #
#                       Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\Rele #
#                       ase_CN\Obj\ -s9 --no_unroll --no_inline --cpu_mode   #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 --interwork -e --enable_multibytes --fpu None      #
#                       --eec++ --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl #
#                       5tpainl8n.h -I Z:\home\perk11\IAR2\arm\INC\          #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\Rele #
#                       ase_CN\List\crypt.lst                                #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\Rele #
#                       ase_CN\Obj\crypt.r79                                 #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\crypt.c
      1          #include "..\include\Lib_Clara.h"
      2          
      3          #include "crypt.h"

   \                                 In segment DATA_Z, align 4, align-sorted
      4          unsigned long mycrc_table[256];
   \                     mycrc_table:
   \   00000000                      DS8 1024
      5          

   \                                 In segment CODE, align 4, keep-with-next
      6          void make_mycrc_table(unsigned long poly)
      7          {
      8            unsigned long crc;
      9            for (int i = 0; i < 256; i++)
   \                     ??make_mycrc_table:
   \   00000000   0010A0E3           MOV      R1,#+0
     10            {
     11              crc = i;
   \                     ??make_mycrc_table_1:
   \   00000004   0120A0E1           MOV      R2,R1
     12              for (int j = 0; j < 8; j++)
   \   00000008   0030A0E3           MOV      R3,#+0
     13                crc = crc & 1 ? (crc >> 1) ^ poly : crc >> 1;
   \                     ??make_mycrc_table_2:
   \   0000000C   A2C0A0E1           LSR      R12,R2,#+1
   \   00000010   010012E3           TST      R2,#0x1
   \   00000014   0C202010           EORNE    R2,R0,R12
   \   00000018   0C20A001           MOVEQ    R2,R12
   \   0000001C   013083E2           ADD      R3,R3,#+1
   \   00000020   080053E3           CMP      R3,#+8
   \   00000024   F8FFFFBA           BLT      ??make_mycrc_table_2
     14              mycrc_table[i] = crc;
   \   00000028   ........           LDR      R3,??DataTable2  ;; mycrc_table
   \   0000002C   012183E7           STR      R2,[R3, +R1, LSL #+2]
     15            }
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   400F51E3           CMP      R1,#+256
   \   00000038   F1FFFFBA           BLT      ??make_mycrc_table_1
     16          }
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          unsigned long myCrc32(unsigned char *buf, unsigned long len)
     19          {
   \                     ??myCrc32:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     20            unsigned long crc = 0xFFFFFFFFUL;
     21            make_mycrc_table(0xEDB89320UL);
   \   00000008   40009FE5           LDR      R0,??myCrc32_1   ;; 0xffffffffedb89320
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0060E0E3           MVN      R6,#+0
   \   00000014   ........           BL       ??make_mycrc_table
   \   00000018   ........           LDR      R1,??DataTable2  ;; mycrc_table
   \   0000001C   040000EA           B        ??myCrc32_2
     22            while (len--)
     23              crc = mycrc_table[(crc ^ *buf++) & 0xFF] ^ (crc >> 8);
   \                     ??myCrc32_3:
   \   00000020   ........           LDRB     R0,[R4], #+1
   \   00000024   060020E0           EOR      R0,R0,R6
   \   00000028   FF0000E2           AND      R0,R0,#0xFF
   \   0000002C   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000030   266420E0           EOR      R6,R0,R6, LSR #+8
   \                     ??myCrc32_2:
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   015040E2           SUB      R5,R0,#+1
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   F6FFFF1A           BNE      ??myCrc32_3
     24            return crc ^ 0xFFFFFFFFUL;
   \   00000044   0000E0E3           MVN      R0,#+0
   \   00000048   060020E0           EOR      R0,R0,R6
   \   0000004C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??myCrc32_1:
   \   00000050   2093B8ED           DC32     0xffffffffedb89320
     25          };
     26          

   \                                 In segment CODE, align 4, keep-with-next
     27          void *encrypt(void *outbuf, void *inpbuf, unsigned long len, unsigned long poly)
     28          {
   \                     ??encrypt:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0300A0E1           MOV      R0,R3
     29            unsigned char *y = (unsigned char *)outbuf;
     30            unsigned char *x = (unsigned char *)inpbuf;
     31            make_mycrc_table(poly);
   \   00000014   ........           BL       ??make_mycrc_table
     32            if(len > 256) len = 256;
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   400F80E3           ORR      R0,R0,#0x100
   \   00000020   000056E1           CMP      R6,R0
   \   00000024   406FA023           MOVCS    R6,#+256
     33            for(int i=0; i<len; i++)
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   000056E3           CMP      R6,#+0
   \   00000030   0700001A           BNE      ??encrypt_1
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   7080BDE8           POP      {R4-R6,PC}
     34            {
     35              y[i] = x[i]^mycrc_table[i];
   \                     ??encrypt_2:
   \   0000003C   0510D0E7           LDRB     R1,[R0, +R5]
   \   00000040   ........           LDR      R2,??DataTable2  ;; mycrc_table
   \   00000044   002192E7           LDR      R2,[R2, +R0, LSL #+2]
   \   00000048   011022E0           EOR      R1,R2,R1
   \   0000004C   0410C0E7           STRB     R1,[R0, +R4]
     36            }
   \   00000050   010080E2           ADD      R0,R0,#+1
   \                     ??encrypt_1:
   \   00000054   060050E1           CMP      R0,R6
   \   00000058   F7FFFF3A           BCC      ??encrypt_2
     37            return outbuf;
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   7080BDE8           POP      {R4-R6,PC}       ;; return
     38          }
     39          

   \                                 In segment CODE, align 4, keep-with-next
     40          void *decrypt(void *outbuf, void *inpbuf, unsigned long len, unsigned long poly)
     41          {
     42            return encrypt(outbuf, inpbuf, len, poly);
   \                     ??decrypt:
   \   00000000   ........           B        ??encrypt        ;; tailcall
     43          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     mycrc_table
     44          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     decrypt(void *, void *, unsigned long, unsigned long)
                                        4
     encrypt(void *, void *, unsigned long, unsigned long)
                                       16
     make_mycrc_table(unsigned long)
                                        0
     myCrc32(unsigned char *, unsigned long)
                                       16


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     mycrc_table                    1024
     make_mycrc_table(unsigned long)
                                      64
     myCrc32(unsigned char *, unsigned long)
                                      84
     encrypt(void *, void *, unsigned long, unsigned long)
                                     100
     decrypt(void *, void *, unsigned long, unsigned long)
                                       4
     ??DataTable2                      4
      Others                          28

 
   272 bytes in segment CODE
 1 024 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
   256 bytes of CODE memory (+ 28 bytes shared)
 1 024 bytes of DATA memory

Errors: none
Warnings: none
