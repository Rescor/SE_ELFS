//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  23:08:56 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\str /
//                       ncmpi.c                                             /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\str /
//                       ncmpi.c -D NDEBUG -D LANG_CN -D OLDFUNCTIONS -lC    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\Rel /
//                       ease_CN\List\ -lA Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\Tamagochi\Release_CN\List\ -o                  /
//                       Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\Rel /
//                       ease_CN\Obj\ -s9 --no_unroll --no_inline            /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --enable_multibytes  /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\                        /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\Rel /
//                       ease_CN\List\strncmpi.s79                           /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME strncmpi

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK ??islower
        FUNCTION ??islower,0203H
        MULTWEAK ??islower??rA
        PUBLIC ??strncmpi
        FUNCTION ??strncmpi,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??strncmpi??rT
        PUBWEAK ??toupper
        FUNCTION ??toupper,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??toupper??rA
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        

??islower??rA       SYMBOL "??rA", ??islower

??strncmpi??rT      SYMBOL "??rT", ??strncmpi

??toupper??rA       SYMBOL "??rA", ??toupper

// Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\strncmpi.c
//    1 #include "misc_util.h"

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ??islower
        ARM
// __??Code32?? __code __interwork __atpcs int islower(int)
??islower:
        CMP      R0,#+97
        BLT      ??islower_1
        CMP      R0,#+123
        MOVLT    R0,#+1
        BXLT     LR
??islower_1:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock0

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function ??toupper
        ARM
// __??Code32?? __code __interwork __atpcs int toupper(int)
??toupper:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        _BLF     ??islower,??islower??rA
        CMP      R0,#+0
        SUBNE    R4,R4,#+32
        MOV      R0,R4
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon1
        CFI NoFunction
        THUMB
??strncmpi??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??strncmpi
//    2 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function ??strncmpi
        ARM
//    3 int strncmpi(const char* s1, const char* s2, size_t len)
//    4 {
??strncmpi:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
        B        ??strncmpi_1
//    5     char c1, c2;
//    6     for(; *s1 && *s2 && len; len--, s1++, s2++)
??strncmpi_2:
        SUB      R6,R6,#+1
??strncmpi_1:
        LDRB     R1,[R4, #+0]
        CMP      R1,#+0
        LDRBNE   R1,[R5, #+0]
        CMPNE    R1,#+0
        CMPNE    R6,#+0
        BEQ      ??strncmpi_3
//    7     {
//    8         c1=toupper(*s1);
        LDRB     R0,[R4], #+1
        _BLF     ??toupper,??toupper??rA
        AND      R7,R0,#0xFF
//    9         c2=toupper(*s2);
        LDRB     R0,[R5], #+1
        _BLF     ??toupper,??toupper??rA
        AND      R0,R0,#0xFF
//   10         if(c1-c2)return c1-c2;
        SUBS     R1,R7,R0
        BEQ      ??strncmpi_2
        MOV      R0,R1
        POP      {R4-R7,PC}
//   11     }
//   12     if(len)return c1-c2;
??strncmpi_3:
        CMP      R6,#+0
        BEQ      ??strncmpi_4
        AND      R7,R7,#0xFF
        AND      R0,R0,#0xFF
        SUB      R0,R7,R0
        POP      {R4-R7,PC}
//   13     return 0;
??strncmpi_4:
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock3
//   14 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        ARM
??islower??rA:
        LDR      R12,??Subroutine1_0  ;; ??islower
        BX       R12
        DATA
??Subroutine1_0:
        DC32     ??islower
        CFI EndBlock cfiBlock4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        ARM
??toupper??rA:
        LDR      R12,??Subroutine2_0  ;; ??toupper
        BX       R12
        DATA
??Subroutine2_0:
        DC32     ??toupper
        CFI EndBlock cfiBlock5

        END
// 
// 204 bytes in segment CODE
// 
// 120 bytes of CODE memory (+ 84 bytes shared)
//
//Errors: none
//Warnings: none
