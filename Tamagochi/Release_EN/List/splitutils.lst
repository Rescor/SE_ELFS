##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  23:08:19 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\spli #
#                       tutils.c                                             #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\spli #
#                       tutils.c -D NDEBUG -D LANG_EN -D OLDFUNCTIONS -lC    #
#                       Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\Rele #
#                       ase_EN\List\ -lA Z:\home\perk11\www\perk11.info\svn\ #
#                       SE\Tamagochi\Release_EN\List\ -o                     #
#                       Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\Rele #
#                       ase_EN\Obj\ -s9 --no_unroll --no_inline --cpu_mode   #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 --interwork -e --enable_multibytes --fpu None      #
#                       --eec++ --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl #
#                       5tpainl8n.h -I Z:\home\perk11\IAR2\arm\INC\          #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\Rele #
#                       ase_EN\List\splitutils.lst                           #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\Rele #
#                       ase_EN\Obj\splitutils.r79                            #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\Tamagochi\splitutils.c
      1          #include "misc_util.h"
      2          #include "..\include\Lib_Clara.h"
      3          #include "..\include\Dir.h"
      4          
      5          struct
      6          {
      7                  char* name;
      8                  int value;

   \                                 In segment DATA_I, align 4, align-sorted
      9          }cfgmacro []=
   \                     cfgmacro:
   \   00000000                      DS8 72
   \   00000048                      REQUIRE `?<Initializer for cfgmacro>`
     10          {
     11                  "AUDIO",DIR_AUDIO
     12                  ,"IMAGE",DIR_IMAGE
     13                  ,"VIDEO",DIR_VIDEO
     14                  ,"THEME",DIR_THEME
     15                  ,"OTHER",DIR_OTHER
     16                  ,"ELFS",DIR_ELFS
     17                  ,"ELFS_DAEMONS",DIR_ELFS_DAEMONS
     18                  ,"ELFS_CONFIG",DIR_ELFS_CONFIG
     19                  ,"INI",DIR_INI
     20          };
     21          

   \                                 In segment CODE, align 4, keep-with-next
     22          void splitfilename(const wchar_t* src, wchar_t* destpath, wchar_t* destname)
     23          {
   \                     ??splitfilename:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     24                  wchar_t* fname=wstrrchr(src,'/');
   \   00000010   2F10A0E3           MOV      R1,#+47
   \   00000014   AE0100EF           SWI      +430
   \   00000018   0070B0E1           MOVS     R7,R0
     25                  if(fname)
   \   0000001C   0080A0E3           MOV      R8,#+0
   \   00000020   0B00000A           BEQ      ??splitfilename_1
     26                  {
     27                    wstrncpy(destpath,src,fname-src);
   \   00000024   A700A0E1           LSR      R0,R7,#+1
   \   00000028   A49040E0           SUB      R9,R0,R4, LSR #+1
   \   0000002C   0920A0E1           MOV      R2,R9
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   530100EF           SWI      +339
     28                    destpath[fname-src] = 0;
   \   0000003C   890085E0           ADD      R0,R5,R9, LSL #+1
   \   00000040   B080C0E1           STRH     R8,[R0, #+0]
     29                    wstrcpy(destname,fname+1);
   \   00000044   021087E2           ADD      R1,R7,#+2
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   520100EF           SWI      +338
   \   00000050   F083BDE8           POP      {R4-R9,PC}
     30                  }
     31                  else
     32                  {
     33                    destpath[0] = 0;
   \                     ??splitfilename_1:
   \   00000054   B080C5E1           STRH     R8,[R5, #+0]
     34                    wstrcpy(destname,src);
   \   00000058   0410A0E1           MOV      R1,R4
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   520100EF           SWI      +338
     35                  }
     36          }
   \   00000064   F083BDE8           POP      {R4-R9,PC}       ;; return
     37          

   \                                 In segment CODE, align 4, keep-with-next
     38          void extractdir(wchar_t* path,wchar_t* name, const char* src)
     39          {
   \                     ??extractdir:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   88DF4DE2           SUB      SP,SP,#+544
     40                  int dir=-1;
     41                  wchar_t dest[256];
     42          
     43                  for(int i=0;i<sizeof(cfgmacro)/sizeof(cfgmacro[0]);i++)
   \   00000008   ........           LDR      R9,??DataTable2  ;; `?<Constant "%%%s_INT%%">`
   \   0000000C   ........           LDR      R10,??DataTable3  ;; cfgmacro
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0080A0E3           MOV      R8,#+0
   \   00000020   000000EA           B        ??extractdir_1
   \                     ??extractdir_2:
   \   00000024   018088E2           ADD      R8,R8,#+1
   \                     ??extractdir_1:
   \   00000028   090058E3           CMP      R8,#+9
   \   0000002C   2300002A           BCS      ??extractdir_3
     44                  {
     45                          char tmp[32];
     46                          int sz;
     47                          sz=sprintf(tmp,"%%%s_INT%%",cfgmacro[i].name);
   \   00000030   88219AE7           LDR      R2,[R10, +R8, LSL #+3]
   \   00000034   0910A0E1           MOV      R1,R9
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   140100EF           SWI      +276
   \   00000040   0070A0E1           MOV      R7,R0
     48                          if(!strncmpi(src,tmp,sz))
   \   00000044   0720A0E1           MOV      R2,R7
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           _BLF     ??strncmpi,??strncmpi??rA
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0300001A           BNE      ??extractdir_4
     49                          {
     50                                  dir=cfgmacro[i].value|MEM_INTERNAL;
   \   0000005C   88018AE0           ADD      R0,R10,R8, LSL #+3
   \   00000060   040090E5           LDR      R0,[R0, #+4]
   \   00000064   010080E3           ORR      R0,R0,#0x1
     51                                  src+=sz;
   \   00000068   0C0000EA           B        ??extractdir_5
     52                                  break;
     53                          }
     54                          sz=sprintf(tmp,"%%%s_EXT%%",cfgmacro[i].name);
   \                     ??extractdir_4:
   \   0000006C   88219AE7           LDR      R2,[R10, +R8, LSL #+3]
   \   00000070   0C1089E2           ADD      R1,R9,#+12
   \   00000074   0D00A0E1           MOV      R0,SP
   \   00000078   140100EF           SWI      +276
   \   0000007C   0070A0E1           MOV      R7,R0
     55                          if(!strncmpi(src,tmp,sz))
   \   00000080   0720A0E1           MOV      R2,R7
   \   00000084   0D10A0E1           MOV      R1,SP
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   ........           _BLF     ??strncmpi,??strncmpi??rA
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   E2FFFF1A           BNE      ??extractdir_2
     56                          {
     57                                  dir=cfgmacro[i].value|MEM_EXTERNAL;
   \   00000098   88018AE0           ADD      R0,R10,R8, LSL #+3
   \   0000009C   040090E5           LDR      R0,[R0, #+4]
     58                                  src+=sz;
   \                     ??extractdir_5:
   \   000000A0   066087E0           ADD      R6,R7,R6
     59                                  break;
     60                          }
     61                  }
     62                  if(dir!=-1)
   \   000000A4   010070E3           CMN      R0,#+1
   \   000000A8   0400000A           BEQ      ??extractdir_3
     63                          wstrcpy(dest,GetDir(dir));
   \   000000AC   050100EF           SWI      +261
   \   000000B0   0010A0E1           MOV      R1,R0
   \   000000B4   20008DE2           ADD      R0,SP,#+32
   \   000000B8   520100EF           SWI      +338
   \   000000BC   010000EA           B        ??extractdir_6
     64                  else
     65                          dest[0]=0;
   \                     ??extractdir_3:
   \   000000C0   0010A0E3           MOV      R1,#+0
   \   000000C4   B012CDE1           STRH     R1,[SP, #+32]
     66                  str2wstr(dest+wstrlen(dest),src);
   \                     ??extractdir_6:
   \   000000C8   20008DE2           ADD      R0,SP,#+32
   \   000000CC   570100EF           SWI      +343
   \   000000D0   0610A0E1           MOV      R1,R6
   \   000000D4   20208DE2           ADD      R2,SP,#+32
   \   000000D8   800082E0           ADD      R0,R2,R0, LSL #+1
   \   000000DC   580100EF           SWI      +344
     67                  splitfilename(dest,path,name);
   \   000000E0   0520A0E1           MOV      R2,R5
   \   000000E4   0410A0E1           MOV      R1,R4
   \   000000E8   20008DE2           ADD      R0,SP,#+32
   \   000000EC   ........           BL       ??splitfilename
     68          }
   \   000000F0   88DF8DE2           ADD      SP,SP,#+544
   \   000000F4   F087BDE8           POP      {R4-R10,PC}      ;; return
     69          

   \                                 In segment CODE, align 4, keep-with-next
     70          void getdir(wchar_t* path, const char* src)
     71          {
   \                     ??getdir:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
     72                  int dir=-1;
     73          
     74                  for(int i=0;i<sizeof(cfgmacro)/sizeof(cfgmacro[0]);i++)
   \   00000008   ........           LDR      R8,??DataTable2  ;; `?<Constant "%%%s_INT%%">`
   \   0000000C   ........           LDR      R9,??DataTable3  ;; cfgmacro
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0070A0E3           MOV      R7,#+0
   \   0000001C   000000EA           B        ??getdir_1
   \                     ??getdir_2:
   \   00000020   017087E2           ADD      R7,R7,#+1
   \                     ??getdir_1:
   \   00000024   090057E3           CMP      R7,#+9
   \   00000028   2300002A           BCS      ??getdir_3
     75                  {
     76                          char tmp[32];
     77                          int sz;
     78                          sz=sprintf(tmp,"%%%s_INT%%",cfgmacro[i].name);
   \   0000002C   872199E7           LDR      R2,[R9, +R7, LSL #+3]
   \   00000030   0810A0E1           MOV      R1,R8
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   140100EF           SWI      +276
   \   0000003C   0060A0E1           MOV      R6,R0
     79                          if(!strncmpi(src,tmp,sz))
   \   00000040   0620A0E1           MOV      R2,R6
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   ........           _BLF     ??strncmpi,??strncmpi??rA
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0300001A           BNE      ??getdir_4
     80                          {
     81                                  dir=cfgmacro[i].value|MEM_INTERNAL;
   \   00000058   870189E0           ADD      R0,R9,R7, LSL #+3
   \   0000005C   040090E5           LDR      R0,[R0, #+4]
   \   00000060   010080E3           ORR      R0,R0,#0x1
     82                                  src+=sz;
   \   00000064   0C0000EA           B        ??getdir_5
     83                                  break;
     84                          }
     85                          sz=sprintf(tmp,"%%%s_EXT%%",cfgmacro[i].name);
   \                     ??getdir_4:
   \   00000068   872199E7           LDR      R2,[R9, +R7, LSL #+3]
   \   0000006C   0C1088E2           ADD      R1,R8,#+12
   \   00000070   0D00A0E1           MOV      R0,SP
   \   00000074   140100EF           SWI      +276
   \   00000078   0060A0E1           MOV      R6,R0
     86                          if(!strncmpi(src,tmp,sz))
   \   0000007C   0620A0E1           MOV      R2,R6
   \   00000080   0D10A0E1           MOV      R1,SP
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           _BLF     ??strncmpi,??strncmpi??rA
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   E2FFFF1A           BNE      ??getdir_2
     87                          {
     88                                  dir=cfgmacro[i].value|MEM_EXTERNAL;
   \   00000094   870189E0           ADD      R0,R9,R7, LSL #+3
   \   00000098   040090E5           LDR      R0,[R0, #+4]
     89                                  src+=sz;
   \                     ??getdir_5:
   \   0000009C   055086E0           ADD      R5,R6,R5
     90                                  break;
     91                          }
     92                  }
     93                  if(dir!=-1)
   \   000000A0   010070E3           CMN      R0,#+1
   \   000000A4   0400000A           BEQ      ??getdir_3
     94                          wstrcpy(path,GetDir(dir));
   \   000000A8   050100EF           SWI      +261
   \   000000AC   0010A0E1           MOV      R1,R0
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   520100EF           SWI      +338
   \   000000B8   010000EA           B        ??getdir_6
     95                  else
     96                          path[0]=0;
   \                     ??getdir_3:
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   B000C4E1           STRH     R0,[R4, #+0]
     97                  str2wstr(path+wstrlen(path),src);
   \                     ??getdir_6:
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   570100EF           SWI      +343
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   800084E0           ADD      R0,R4,R0, LSL #+1
   \   000000D4   580100EF           SWI      +344
     98          }
   \   000000D8   20D08DE2           ADD      SP,SP,#+32
   \   000000DC   F083BDE8           POP      {R4-R9,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     `?<Constant "%%%s_INT%%">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     cfgmacro

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for cfgmacro>`:
   \   00000000   ........0000       DC32 `?<Constant "AUDIO">`, 0, `?<Constant "IMAGE">`, 2
   \              0000........
   \              02000000    
   \   00000010   ........0400       DC32 `?<Constant "VIDEO">`, 4, `?<Constant "THEME">`, 6
   \              0000........
   \              06000000    
   \   00000020   ........0800       DC32 `?<Constant "OTHER">`, 8, `?<Constant "ELFS">`, 16
   \              0000........
   \              10000000    
   \   00000030   ........1200       DC32 `?<Constant "ELFS_DAEMONS">`, 18, `?<Constant "ELFS_CONFIG">`, 20
   \              0000........
   \              14000000    
   \   00000040   ........1600       DC32 `?<Constant "INI">`, 22
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "AUDIO">`:
   \   00000000   415544494F00       DC8 "AUDIO"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "IMAGE">`:
   \   00000000   494D41474500       DC8 "IMAGE"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "VIDEO">`:
   \   00000000   564944454F00       DC8 "VIDEO"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "THEME">`:
   \   00000000   5448454D4500       DC8 "THEME"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "OTHER">`:
   \   00000000   4F5448455200       DC8 "OTHER"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ELFS">`:
   \   00000000   454C465300         DC8 "ELFS"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ELFS_DAEMONS">`:
   \   00000000   454C46535F44       DC8 "ELFS_DAEMONS"
   \              41454D4F4E53
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ELFS_CONFIG">`:
   \   00000000   454C46535F43       DC8 "ELFS_CONFIG"
   \              4F4E46494700

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "INI">`:
   \   00000000   494E4900           DC8 "INI"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%%%s_INT%%">`:
   \   00000000   252525735F49       DC8 "%%%s_INT%%"
   \              4E54252500  
   \   0000000B   00                 DC8 0
   \   0000000C   252525735F45       DC8 "%%%s_EXT%%"
   \              5854252500  
   \   00000017   00                 DC8 0
     99          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     extractdir(wchar_t *, wchar_t *, char const *)
                                      576
     getdir(wchar_t *, char const *)
                                       60
     splitfilename(wchar_t const *, wchar_t *, wchar_t *)
                                       28


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     cfgmacro                         72
     splitfilename(wchar_t const *, wchar_t *, wchar_t *)
                                     104
     extractdir(wchar_t *, wchar_t *, char const *)
                                     248
     getdir(wchar_t *, char const *)
                                     224
     ??DataTable2                      4
     ??DataTable3                      4
     ?<Initializer for cfgmacro>      72
     ?<Constant "AUDIO">               8
     ?<Constant "IMAGE">               8
     ?<Constant "VIDEO">               8
     ?<Constant "THEME">               8
     ?<Constant "OTHER">               8
     ?<Constant "ELFS">                8
     ?<Constant "ELFS_DAEMONS">       16
     ?<Constant "ELFS_CONFIG">        12
     ?<Constant "INI">                 4
     ?<Constant "%%%s_INT%%">         24
      Others                          36

 
 608 bytes in segment CODE
 104 bytes in segment DATA_C
  72 bytes in segment DATA_I
  72 bytes in segment DATA_ID
  12 bytes in segment INITTAB
 
 584 bytes of CODE  memory (+ 36 bytes shared)
 176 bytes of CONST memory
  72 bytes of DATA  memory

Errors: none
Warnings: none
