//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  23:09:08 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\WalkmanDispla /
//                       y\accelctrl.cpp                                     /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\WalkmanDispla /
//                       y\accelctrl.cpp -D NDEBUG -D RUS -D OLDFUNCTIONS    /
//                       -lC Z:\home\perk11\www\perk11.info\svn\SE\WalkmanDi /
//                       splay\Release_RU\List\ -lA                          /
//                       Z:\home\perk11\www\perk11.info\svn\SE\WalkmanDispla /
//                       y\Release_RU\List\ -o Z:\home\perk11\www\perk11.inf /
//                       o\svn\SE\WalkmanDisplay\Release_RU\Obj\ -s9         /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --enable_multibytes  /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\WalkmanDispla /
//                       y\Release_RU\List\accelctrl.s79                     /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME accelctrl

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??AddHook
        FUNCTION ??AddHook,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??AddHook??rT
        PUBLIC ??CAccelCtrl
        FUNCTION ??CAccelCtrl,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??CAccelCtrl??rT
??DataTable0 EQU 0
        PUBWEAK ??MKTIMERPROC
        FUNCTION ??MKTIMERPROC,0203H
        PUBLIC `??delete ~CAccelCtrl`
        FUNCTION `??delete ~CAccelCtrl`,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK `??delete ~CAccelCtrl??rT`
        PUBLIC ??gethooks
        FUNCTION ??gethooks,0203H
        MULTWEAK ??gethooks??rT
        PUBLIC ??getorientation
        FUNCTION ??getorientation,0203H
        MULTWEAK ??getorientation??rT
        PUBLIC ??getstatus
        FUNCTION ??getstatus,0203H
        MULTWEAK ??getstatus??rT
        PUBLIC ??gettimer
        FUNCTION ??gettimer,0203H
        MULTWEAK ??gettimer??rT
        PUBLIC ??getvector
        FUNCTION ??getvector,0203H
        MULTWEAK ??getvector??rT
        PUBLIC ??identify_phone
        FUNCTION ??identify_phone,0203H
        MULTWEAK ??identify_phone??rT
        PUBLIC ??isbetween
        FUNCTION ??isbetween,0203H
        MULTWEAK ??isbetween??rT
        PUBLIC `??new CAccelCtrl`
        FUNCTION `??new CAccelCtrl`,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK `??new CAccelCtrl??rT`
        PUBLIC ??onAccTimer
        FUNCTION ??onAccTimer,0603H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??onAccTimer??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        PUBLIC `?~CAccelCtrl`
        FUNCTION `?~CAccelCtrl`,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK `?~CAccelCtrl??rT`
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        



??AddHook??rT       SYMBOL "??rT", ??AddHook

??CAccelCtrl??rT    SYMBOL "??rT", ??CAccelCtrl

`??delete ~CAccelCtrl??rT` SYMBOL "??rT", `??delete ~CAccelCtrl`

??gethooks??rT      SYMBOL "??rT", ??gethooks

??getorientation??rT SYMBOL "??rT", ??getorientation

??getstatus??rT     SYMBOL "??rT", ??getstatus

??gettimer??rT      SYMBOL "??rT", ??gettimer

??getvector??rT     SYMBOL "??rT", ??getvector

??identify_phone??rT SYMBOL "??rT", ??identify_phone

??isbetween??rT     SYMBOL "??rT", ??isbetween

`??new CAccelCtrl??rT` SYMBOL "??rT", `??new CAccelCtrl`

??onAccTimer??rT    SYMBOL "??rT", ??onAccTimer
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`

`?~CAccelCtrl??rT`  SYMBOL "??rT", `?~CAccelCtrl`

        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
`??new CAccelCtrl??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE `??new CAccelCtrl`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function `??new CAccelCtrl`
        ARM
// __??Code32?? __code __interwork __atpcs CAccelCtrl &CAccelCtrl::new CAccelCtrl()
`??new CAccelCtrl`:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,#+16
        _BLF     `??operator new`,`??operator new??rA`
        CMP      R0,#+0
        POPEQ    {PC}
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        B        ??CAccelCtrl     ;; tailcall
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
`??delete ~CAccelCtrl??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE `??delete ~CAccelCtrl`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function `??delete ~CAccelCtrl`
        ARM
// __??Code32?? __code __interwork __atpcs void CAccelCtrl::delete ~CAccelCtrl(CAccelCtrl *)
`??delete ~CAccelCtrl`:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
        POPEQ    {R4,PC}
        BL       `?~CAccelCtrl`
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??onAccTimer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??onAccTimer
// Z:\home\perk11\www\perk11.info\svn\SE\WalkmanDisplay\accelctrl.cpp
//    1 #include "..\deleaker\mem2.h"
//    2 #include "..\include\Lib_Clara.h"
//    3 #include "header\accelctrl.h"
//    4 
//    5 /*   Accelerometer class for ElfPack
//    6      Author: UltraShot
//    7      Supported phones: W580 R8BE001, W580 R8BA024, W580 R8BE001 Orange, W580 R6CA001 Orange, W710 R1JC002
//    8 */
//    9 
//   10 #pragma optimize = z 9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??onAccTimer
        ARM
//   11 void onAccTimer(u16 timerID, CAccelCtrl *cac)
//   12 {
??onAccTimer:
        PUSH     {R0,R1,R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+28
        MOV      R4,R1
//   13   if (cac->getstatus()==ACC_ACTIVE)
        LDR      R0,[R4, #+8]
        CMP      R0,#+1
        BNE      ??onAccTimer_1
//   14   {
//   15     LIST *acc_lst=cac->gethooks();
        LDR      R5,[R4, #+0]
//   16     if (acc_lst)
        CMP      R5,#+0
        BEQ      ??onAccTimer_1
//   17     {
//   18       int x;
//   19       for (x=0;x<acc_lst->FirstFree;x++)
        MOV      R6,#+0
        B        ??onAccTimer_2
//   20       {
//   21         void (*proc)(CAccelCtrl*,int,int)=(void (*)(CAccelCtrl*,int,int))(List_Get(acc_lst,x));
??onAccTimer_3:
        MOV      R1,R6
        MOV      R0,R5
        SWI      +429
//   22         char x,y;
//   23         cac->GetCoords(&x,&y);
        LDR      R2,[R4, #+12]
        MOV      R7,R0
        ADD      R1,SP,#+1
        MOV      R0,SP
        BLX      R2
//   24         if (x>100 && y>100)
        LDRB     R0,[SP, #+0]
        CMP      R0,#+101
        LDRBCS   R0,[SP, #+1]
        CMPCS    R0,#+101
        BCC      ??onAccTimer_4
//   25           proc(cac,x,y);
        LDRB     R1,[SP, #+0]
        MOV      R2,R0
        MOV      R0,R4
        BLX      R7
//   26       }
??onAccTimer_4:
        ADD      R6,R6,#+1
??onAccTimer_2:
        LDRH     R0,[R5, #+2]
        CMP      R6,R0
        BLT      ??onAccTimer_3
//   27     }
//   28   }
//   29   Timer_ReSet(cac->gettimer(),1000,MKTIMERPROC(onAccTimer),cac);
??onAccTimer_1:
        LDR      R2,??DataTable1  ;; ??onAccTimer
        STR      R4,[SP, #+4]
        MOV      R3,R4
        MOV      R1,#+1000
        ADD      R0,R4,#+4
        SWI      +296
//   30 };
        POP      {R0,R1,R4-R7,PC}  ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??CAccelCtrl??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??CAccelCtrl
//   31 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??CAccelCtrl
        ARM
//   32 CAccelCtrl::CAccelCtrl()
//   33 {
??CAccelCtrl:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   34   hooks=List_Create();
        SWI      +361
        STR      R0,[R4, #+0]
//   35   if (identify_phone())
        MOV      R0,R4
        BL       ??identify_phone
        CMP      R0,#+0
        BEQ      ??CAccelCtrl_1
//   36   {
//   37     timer=Timer_Set(1000, MKTIMERPROC(onAccTimer), this);
        LDR      R1,??DataTable1  ;; ??onAccTimer
        MOV      R2,R4
        MOV      R0,#+1000
        SWI      +297
        STRH     R0,[R4, #+4]
//   38     status=ACC_ACTIVE;
        MOV      R0,#+1
        STR      R0,[R4, #+8]
        MOV      R0,R4
        POP      {R4,PC}
//   39   }
//   40   else
//   41   {
//   42     status=ACC_NOT_SUPPORTED;
??CAccelCtrl_1:
        MOV      R0,#+2
        STR      R0,[R4, #+8]
//   43   }
//   44 };
        MOV      R0,R4
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     ??onAccTimer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
`?~CAccelCtrl??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE `?~CAccelCtrl`
//   45 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function `?~CAccelCtrl`
        ARM
//   46 CAccelCtrl::~CAccelCtrl(void)
//   47 {
`?~CAccelCtrl`:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   48   if (timer)
        LDRH     R0,[R4, #+4]
        CMP      R0,#+0
        BEQ      `?~CAccelCtrl_1`
//   49   {
//   50     Timer_Kill(gettimer());
        ADD      R0,R4,#+4
        SWI      +298
//   51   }
//   52   if (hooks)
`?~CAccelCtrl_1`:
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        BEQ      `?~CAccelCtrl_2`
        B        `?~CAccelCtrl_3`
//   53   {
//   54     while (hooks->FirstFree)
//   55     {
//   56       List_RemoveAt(hooks,0);
`?~CAccelCtrl_4`:
        MOV      R1,#+0
        SWI      +377
//   57     }
`?~CAccelCtrl_3`:
        LDR      R0,[R4, #+0]
        LDRH     R1,[R0, #+2]
        CMP      R1,#+0
        BNE      `?~CAccelCtrl_4`
//   58     List_Destroy(hooks);
        SWI      +362
//   59   }
//   60   timer=0;
        MOV      R0,#+0
`?~CAccelCtrl_2`:
        STRH     R0,[R4, #+4]
//   61   hooks=0;
        STR      R0,[R4, #+0]
//   62   status=ACC_INACTIVE;
        STR      R0,[R4, #+8]
//   63 };
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??identify_phone??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??identify_phone
//   64 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??identify_phone
        ARM
//   65 int CAccelCtrl::identify_phone()
//   66 {
//   67   char *hz=(char*)(0x453FEFD4);
//   68   if (hz[0]==0x70 && hz[1]==0xB5)
??identify_phone:
        LDR      R1,??identify_phone_1  ;; 0x453fefd4
        LDRB     R1,[R1, #+0]
        CMP      R1,#+112
        BNE      ??identify_phone_2
        LDR      R1,??identify_phone_1+0x4  ;; 0x453fefd5
        LDRB     R1,[R1, #+0]
        CMP      R1,#+181
        BNE      ??identify_phone_2
//   69   {
//   70     //W580 R8BE001
//   71     GetCoords=(void(*)(char * x,char * y))0x453FEFD5;
        LDR      R1,??identify_phone_1+0x4  ;; 0x453fefd5
??identify_phone_3:
        STR      R1,[R0, #+12]
//   72   }
//   73   else if (hz[0]==0xA1 && hz[1]==0x6A)
//   74   {
//   75     //W580 R8BE001 Orange
//   76     GetCoords=(void(*)(char * x,char * y))0x4543AD01;
//   77   }
//   78   else if (hz[0]==0x01 && hz[1]==0x28)
//   79   {
//   80     //W580 R8BA024
//   81     GetCoords=(void(*)(char * x,char * y))0x453FD1B1;
//   82   }
//   83   else if (hz[0]==0xAC && hz[1]==0x33)
//   84   {
//   85     //W710 R1JC002
//   86     GetCoords=(void(*)(char * x,char * y))0x453D80A9;
//   87   }
//   88   else if (hz[0]==0x01 && hz[1]==0x26)
//   89   {
//   90     //W580 R6CA001 Orange
//   91     GetCoords=(void(*)(char * x,char * y))0x4542BE31;
//   92   }
//   93   else
//   94   {
//   95     return 0;
//   96   }
//   97   return 1;
        MOV      R0,#+1
        BX       LR               ;; return
??identify_phone_2:
        LDR      R1,??identify_phone_1  ;; 0x453fefd4
        LDRB     R1,[R1, #+0]
        CMP      R1,#+161
        BNE      ??identify_phone_4
        LDR      R1,??identify_phone_1+0x4  ;; 0x453fefd5
        LDRB     R1,[R1, #+0]
        CMP      R1,#+106
        LDREQ    R1,??identify_phone_1+0x8  ;; 0x4543ad01
        BEQ      ??identify_phone_3
??identify_phone_4:
        LDR      R1,??identify_phone_1  ;; 0x453fefd4
        LDRB     R1,[R1, #+0]
        CMP      R1,#+1
        BNE      ??identify_phone_5
        LDR      R1,??identify_phone_1+0x4  ;; 0x453fefd5
        LDRB     R1,[R1, #+0]
        CMP      R1,#+40
        LDREQ    R1,??identify_phone_1+0xC  ;; 0x453fd1b1
        BEQ      ??identify_phone_3
??identify_phone_5:
        LDR      R1,??identify_phone_1  ;; 0x453fefd4
        LDRB     R1,[R1, #+0]
        CMP      R1,#+172
        BNE      ??identify_phone_6
        LDR      R1,??identify_phone_1+0x4  ;; 0x453fefd5
        LDRB     R1,[R1, #+0]
        CMP      R1,#+51
        LDREQ    R1,??identify_phone_1+0x10  ;; 0x453d80a9
        BEQ      ??identify_phone_3
??identify_phone_6:
        LDR      R1,??identify_phone_1  ;; 0x453fefd4
        LDRB     R1,[R1, #+0]
        CMP      R1,#+1
        BNE      ??identify_phone_7
        LDR      R1,??identify_phone_1+0x4  ;; 0x453fefd5
        LDRB     R1,[R1, #+0]
        CMP      R1,#+38
        LDREQ    R1,??identify_phone_1+0x14  ;; 0x4542be31
        BEQ      ??identify_phone_3
??identify_phone_7:
        MOV      R0,#+0
        BX       LR
        DATA
??identify_phone_1:
        DC32     0x453fefd4
        DC32     0x453fefd5
        DC32     0x4543ad01
        DC32     0x453fd1b1
        DC32     0x453d80a9
        DC32     0x4542be31
        CFI EndBlock cfiBlock11
//   98 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??getstatus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??getstatus
//   99 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??getstatus
        ARM
//  100 int CAccelCtrl::getstatus()
//  101 {
//  102   return status;
??getstatus:
        LDR      R0,[R0, #+8]
        BX       LR               ;; return
        CFI EndBlock cfiBlock13
//  103 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??AddHook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??AddHook
//  104 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??AddHook
        ARM
//  105 void CAccelCtrl::AddHook(void (*proc)(void*, int, int), char on)
//  106 {
??AddHook:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
//  107   if (status!=ACC_ACTIVE)
        LDR      R0,[R4, #+8]
        MOV      R5,R1
        MOV      R6,R2
        CMP      R0,#+1
        POPNE    {R4-R6,PC}
//  108     return;
//  109   int i=ListElement_Prt2NumElement(hooks,(void*)proc);
        LDR      R0,[R4, #+0]
        SWI      +379
//  110   if (on)
        MOV      R1,#+255
        ORR      R1,R1,#0xFF00
        CMP      R6,#+0
        BEQ      ??AddHook_1
//  111   {
//  112     if (i==LIST_ERROR)
        CMP      R0,R1
        POPNE    {R4-R6,PC}
//  113     {
//  114       List_InsertLast(hooks, (void*)proc);
        LDR      R0,[R4, #+0]
        MOV      R1,R5
        SWI      +432
        POP      {R4-R6,PC}
//  115     }
//  116   }
//  117   else
//  118   {
//  119     if (i!=LIST_ERROR)
??AddHook_1:
        CMP      R0,R1
        POPEQ    {R4-R6,PC}
//  120     {
//  121       List_RemoveAt(hooks, i);
        MOV      R1,R0
        LDR      R0,[R4, #+0]
        SWI      +377
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock15
//  122     }
//  123   }
//  124 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??isbetween??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??isbetween
//  125 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??isbetween
        ARM
//  126 bool CAccelCtrl::isbetween(char num, int min, int max)
//  127 {
//  128   if (num >= min && num <=max)
??isbetween:
        CMP      R1,R2
        CMPGE    R3,R1
//  129   {
//  130     return true;
        MOVGE    R0,#+1
        BXGE     LR
//  131   }
//  132   return false;
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock17
//  133 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??gethooks??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??gethooks
//  134 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??gethooks
        ARM
//  135 LIST * CAccelCtrl::gethooks()
//  136 {
//  137   return hooks;
??gethooks:
        LDR      R0,[R0, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock19
//  138 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??gettimer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ??gettimer
//  139 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ??gettimer
        ARM
//  140 u16 *CAccelCtrl::gettimer()
//  141 {
//  142   return &timer;
??gettimer:
        ADD      R0,R0,#+4
        BX       LR               ;; return
        CFI EndBlock cfiBlock21
//  143 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??getvector??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE ??getvector
//  144 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function ??getvector
        ARM
//  145 int CAccelCtrl::getvector(int x, int y)
//  146 {
//  147   int res=0;
??getvector:
        MOV      R0,#+0
//  148   if (isbetween(x,120,130) && y<115)
        AND      R3,R1,#0xFF
        CMP      R3,#+120
        BCC      ??getvector_1
        CMP      R3,#+131
        BCS      ??getvector_1
        CMP      R2,#+115
//  149     res=res|V_UP;
        MOVLT    R0,#+1
        BXLT     LR
//  150   else if (x>133 && isbetween(y,120,130))
??getvector_1:
        CMP      R1,#+134
        BLT      ??getvector_2
        AND      R3,R2,#0xFF
        CMP      R3,#+120
        BCC      ??getvector_2
        CMP      R3,#+131
//  151     res=res|V_RIGHT;
        MOVCC    R0,#+8
        BXCC     LR
//  152   else if (isbetween(x,120,130) && y>133)
??getvector_2:
        AND      R3,R1,#0xFF
        CMP      R3,#+120
        BCC      ??getvector_3
        CMP      R3,#+131
        BCS      ??getvector_3
        CMP      R2,#+134
//  153     res=res|V_DOWN;
        MOVGE    R0,#+2
        BXGE     LR
//  154   else if (x<115 && isbetween(y,120,130))
??getvector_3:
        CMP      R1,#+115
        BXGE     LR
        AND      R2,R2,#0xFF
        CMP      R2,#+120
        BXCC     LR
        CMP      R2,#+131
//  155     res=res|V_LEFT;
        MOVCC    R0,#+4
//  156   return res;
        BX       LR               ;; return
        CFI EndBlock cfiBlock23
//  157 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??getorientation??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE ??getorientation
//  158 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function ??getorientation
        ARM
//  159 int CAccelCtrl::getorientation(int x, int y)
//  160 {
//  161   if (isbetween(x, 116, 136) && isbetween(y, 116, 136))
??getorientation:
        AND      R0,R1,#0xFF
        CMP      R0,#+116
        BCC      ??getorientation_1
        CMP      R0,#+137
        BCS      ??getorientation_1
        AND      R0,R2,#0xFF
        CMP      R0,#+116
        BCC      ??getorientation_1
        CMP      R0,#+137
//  162     return 0;
        MOVCC    R0,#+0
        BXCC     LR
//  163   if (isbetween(x,112,144))
??getorientation_1:
        AND      R1,R1,#0xFF
        CMP      R1,#+112
        BCC      ??getorientation_2
        CMP      R1,#+145
        BCS      ??getorientation_2
//  164   {
//  165     if (!isbetween(y, 132, 144))
        AND      R2,R2,#0xFF
        CMP      R2,#+132
        BCC      ??getorientation_2
        CMP      R2,#+145
//  166     {
//  167       return HOR;
//  168     }
//  169     return VERT;
        MOVCC    R0,#+2
        BXCC     LR
??getorientation_2:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock25
//  170   }
//  171   else
//  172   {
//  173     return HOR;
//  174   }
//  175 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine13_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine13_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock26

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine14_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine14_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon1
        CFI Function ??MKTIMERPROC
        ARM
// __??Code32?? __code __interwork __atpcs TIMERPROC MKTIMERPROC(void (*)(u16, CAccelCtrl *))
??MKTIMERPROC:
        BX       LR               ;; return
        CFI EndBlock cfiBlock28

        END
// 
// 1 068 bytes in segment CODE
// 
// 988 bytes of CODE memory (+ 80 bytes shared)
//
//Errors: none
//Warnings: none
