##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  23:10:16 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\WalkmanDisplay #
#                       \main.cpp                                            #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\WalkmanDisplay #
#                       \main.cpp -D NDEBUG -D RUS -D OLDFUNCTIONS -lC       #
#                       Z:\home\perk11\www\perk11.info\svn\SE\WalkmanDisplay #
#                       \Release_RU\List\ -lA Z:\home\perk11\www\perk11.info #
#                       \svn\SE\WalkmanDisplay\Release_RU\List\ -o           #
#                       Z:\home\perk11\www\perk11.info\svn\SE\WalkmanDisplay #
#                       \Release_RU\Obj\ -s9 --cpu_mode arm --endian little  #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --enable_multibytes --fpu None --eec++               #
#                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8 #
#                       n.h -I Z:\home\perk11\IAR2\arm\INC\                  #
#                       --inline_threshold=2                                 #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\WalkmanDisplay #
#                       \Release_RU\List\main.lst                            #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\WalkmanDisplay #
#                       \Release_RU\Obj\main.r79                             #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\WalkmanDisplay\main.cpp
      1          #include "..\deleaker\mem2.h"
      2          #include "..\include\Lib_Clara.h"
      3          #include "..\include\Dir.h"
      4          #include "header\cl.h"
      5          #include "header\accelctrl.h"
      6          #include "header\wdisplay.h"
      7          #include "header\images.h"
      8          #include "..\include\cfg_items.h"
      9          #include "header\conf_loader.h"
     10          #include "header\config_data.h"
     11          #include "header\skin_data.h"
     12          #include "header\skin_loader.h"
     13          //#include "gvi.h"
     14          
     15          #include "header\rus.h"
     16          #include "header\eng.h"
     17          
     18          
     19          #define PROJECT_ABOUT "WalkmanDisplay v2.1\n© Fernandodks, UltraShot"
     20          #define PROJECT_NAME "WalkmanDisplay"
     21          #define PROJECT_BASEPAGE_NAME "WalkmanDisplay_Base_Page"
     22          
     23          #define MP_STATUS_STOP 0
     24          #define MP_STATUS_PLAY 1 
     25          #define MP_STATUS_PAUSE 2
     26          #define MP_STATUS_FORWARD 3
     27          #define MP_STATUS_REWIND 5
     28          
     29          DISP_DESC *Softkey_DD;
     30          DISP_OBJ *Softkey_DO;
     31          DISP_OBJ_ONREDRAW_METHOD Softkey_DefaultRedraw;
     32          
     33          
     34          #ifndef NDEBUG
     35          PROCESS proc_bench;
     36          int bench_n=0;
     37          #endif
     38          
     39          extern MyBOOK *MyBook;
     40          extern wchar_t playview_h;
     41          extern wchar_t browserview_h;
     42          extern wchar_t playnow_h;
     43          extern wchar_t imageID;
     44          extern wchar_t cover_h_;
     45          extern wchar_t cover_v_;
     46          
     47          extern wchar_t playicn;
     48          extern wchar_t stopicn;
     49          extern wchar_t pauseicn;
     50          extern MUSIC nowmusic;
     51          
     52          extern wchar_t v_MPA_ID;
     53          extern bool accel_wrk;
     54          
     55          bool RedrawUsed=false;
     56          TRACK_DESC *currenttrack=0;

   \                                 In segment DATA_Z, align 4, align-sorted
     57          wchar_t intFolder[512];
   \                     intFolder:
   \   00000000                      DS8 1024
     58          wchar_t extFolder[512];
   \                     extFolder:
   \   00000400                      DS8 1024
     59          DISP_OBJ* g_DO=0;
     60          CAccelCtrl *AccelCtrl=0;
     61          bool working=false;
     62          bool accel_wrk=true;
     63          int curmode=2;
     64          wchar_t v_MPA_ID=NOIMAGE;
     65          int StatusSize=18;
     66          int SoftSize=26;
     67          int ScreenHeight;
     68          int ScreenWidth;
     69          bool ELF_KILL_RECEIVED=false;
     70          wchar_t skin_str[512];
     71          bool inMenu=false;
     72          wchar_t *modes[]={
     73            L"Stereo",
     74            L"Joint Stereo",
     75            L"Dual Channel",
     76            L"Single Channel"
     77          };
     78          
     79          void decoder_Init(wchar_t *path, wchar_t *name);
     80          void TrackDesc_Free(TRACK_DESC *track_desc);
     81          TRACK_DESC * TrackDesc_Get(BOOK *bk);
     82          void onAccel(void*,int,int);
     83          void init_resources(wchar_t*);
     84          void deinit_resources();
     85          int NewKey(int key,int,int mode, LPARAM, DISP_OBJ*);
     86          GUI *FindGuiInBook(BOOK *bk, char *name);
     87          void walkman_Redraw(DISP_OBJ* DO,int a,int b,int c);
     88          void set_vertical();
     89          void set_horizontal();
     90          
     91          typedef int (*GetInfo)(void *, int id, wchar_t *path, int bufsize1, wchar_t *fname, int bufsize2);
     92          typedef struct
     93          {
     94            char dummy[0x2C];
     95            GetInfo GetINFO;
     96          }CSkinManager_Table;
     97          
     98          typedef struct
     99          {
    100            CSkinManager_Table *SkinManager_Table;
    101          }CSkinManager;
    102          
    103          typedef struct
    104          {
    105            char dummy[0xB0];
    106            CSkinManager *SkinManager;
    107          }WBOOK;
    108          
    109          #pragma pack(1)
    110          
    111          
    112          typedef struct
    113          {
    114            char dummy6[0x70];
    115            int artist_str;
    116            int title_str;
    117            int album_str;
    118            int fulltime;
    119            char dummy7[8];
    120            int currenttime;
    121          }MM_INFO;
    122          typedef struct
    123          {
    124            char dummy[0xB6];
    125            char dummy2[0xC];
    126            char status;
    127            char dummy3[0x11];
    128            wchar_t artist_icn;
    129            wchar_t title_icn;
    130            wchar_t album_icn;
    131            char dummy4[0x74];
    132            wchar_t prev_icn;
    133            wchar_t prev_icn2;
    134            wchar_t next_icn;
    135            wchar_t next_icn2;
    136            wchar_t play_icn;
    137            wchar_t stop_icn;
    138            char dummy5[0x42];
    139            MM_INFO mm_info;
    140          }DISP_OBJ_;
    141          
    142          typedef struct
    143          {
    144            char dummy[0x126];
    145            char dummy2[0x20];
    146            wchar_t up;
    147            wchar_t down;
    148          }ARROWS;
    149          
    150          typedef struct
    151          {
    152            char dummy[0x19];
    153            char status;
    154            char dummy_[0x1A];
    155            char preset;
    156            char dummy2[0x27];
    157            wchar_t pos;
    158            char dummy3[14];
    159            BOOK_PLAYER_TRACK_DESC *dsc;
    160            char dummy5[2];
    161            wchar_t pos2;
    162            wchar_t pos3;
    163            char dummy6[22];
    164            int tracks_count;
    165            char dummy7[8];
    166            char RepeatMode;
    167            char ShuffleMode;
    168            char unk_[6];
    169            char StereoWidening;
    170          }WALKMAN_BOOK;
    171          
    172          typedef struct
    173          {
    174            char dummy[0x22B];
    175            char status;
    176          }DISP_OBJ_NOWPLAYING;
    177          
    178          #pragma pack()

   \                                 In segment CODE, align 4, keep-with-next
    179          void elf_exit(void)
    180          {
   \                     ??elf_exit:
   \   00000000   00402DE9           PUSH     {LR}
    181            trace_done();
    182            kill_data(&ELF_BEGIN, (void(*)(void*))mfree_adr());
   \   00000004   048100EF           SWI      +33028
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??elf_exit_1  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??elf_exit_1:
   \   00000018   ........           DC32     ELF_BEGIN
    183          };
    184          

   \                                 In segment CODE, align 4, keep-with-next
    185          class CMyBook:public CBook
   \                     `?~CMyBook`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000054E3           CMP      R4,#+0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   3080BD08           POPEQ    {R4,R5,PC}
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~CBook`,`?~CBook??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   3080BD08           POPEQ    {R4,R5,PC}
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   3080BDE8           POP      {R4,R5,PC}       ;; return
    186          {
    187          public:
    188            CMyBook();
    189            void onClose();
    190          };
    191          
    192          
    193          #pragma optimize = s 9

   \                                 In segment CODE, align 4, keep-with-next
    194          __EVENT( TerminateElf )
    195          {
    196            ELF_KILL_RECEIVED=true;
   \                     ??TerminateElf:
   \   00000000   30009FE5           LDR      R0,??TerminateElf_1  ;; v_MPA_ID + 83
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0010C0E5           STRB     R1,[R0, #+0]
    197            if (BOOK*bk=FindBook(get_IsAudioPlayerBook()))
   \   00000014   8B8200EF           SWI      +33419
   \   00000018   300100EF           SWI      +304
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0000000A           BEQ      ??TerminateElf_2
    198            {
    199              BookObj_KillBook(bk);
   \   00000024   2C0100EF           SWI      +300
    200            }
    201            ((CMyBook*)book)->destroy();
   \                     ??TerminateElf_2:
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??destroy,??destroy??rA
    202            return(1);
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??TerminateElf_1:
   \   00000038   ........           DC32     v_MPA_ID + 83
    203          };
    204          
    205          #pragma optimize = s 9

   \                                 In segment CODE, align 4, keep-with-next
    206          __EVENT( ShowAuthorInfo )
    207          {
   \                     ??ShowAuthorInfo:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    208            MessageBox(EMPTY_TEXTID,STR(PROJECT_ABOUT), NOIMAGE, 1, 5000, ((BOOKMANMSG*)msg)->bookmanbook);
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   3C009FE5           LDR      R0,??ShowAuthorInfo_1  ;; `?<Constant L"\\x57\\x61\\x6c\\x6b\\x6d\\x61\\x6e\\x44\\`
   \   00000010   FF50A0E3           MOV      R5,#+255
   \   00000014   FF5C85E3           ORR      R5,R5,#0xFF00
   \   00000018   0520A0E1           MOV      R2,R5
   \   0000001C   5D0100EF           SWI      +349
   \   00000020   001094E5           LDR      R1,[R4, #+0]
   \   00000024   0130A0E3           MOV      R3,#+1
   \   00000028   02002DE9           PUSH     {R1}
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   8810A0E3           MOV      R1,#+136
   \   00000034   4C1D81E3           ORR      R1,R1,#0x1300
   \   00000038   02002DE9           PUSH     {R1}
   \   0000003C   0010A0E1           MOV      R1,R0
   \   00000040   9004E0E3           MVN      R0,#-1879048192
   \   00000044   570200EF           SWI      +599
    209            return(1);
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   3680BDE8           POP      {R1,R2,R4,R5,PC}  ;; return
   \                     ??ShowAuthorInfo_1:
   \   00000050   ........           DC32     `?<Constant L"\\x57\\x61\\x6c\\x6b\\x6d\\x61\\x6e\\x44\\`
    210          };
    211          
    212          void Send_REDRAW_RELEASE();
    213          void ReturnRedraw();
    214          
    215          bool TrackDesc_Compare(TRACK_DESC *t1, TRACK_DESC *t2);
    216          

   \                                 In segment CODE, align 4, keep-with-next
    217          __EVENT( onPlayerClosed )
    218          {
   \                     ??onPlayerClosed:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    219            if (ELF_KILL_RECEIVED)
   \   00000004   ........           LDR      R4,??DataTable32  ;; v_MPA_ID
   \   00000008   5300D4E5           LDRB     R0,[R4, #+83]
   \   0000000C   000050E3           CMP      R0,#+0
    220              return 0;
   \   00000010   0000A013           MOVNE    R0,#+0
   \   00000014   3080BD18           POPNE    {R4,R5,PC}
    221            ModifyKeyHook(NewKey, KEY_HOOK_REMOVE, NULL);
   \   00000018   ........           LDR      R0,??DataTable1  ;; ??NewKey
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   0210A0E1           MOV      R1,R2
   \   00000024   070100EF           SWI      +263
    222            if (RedrawUsed)
   \   00000028   5000D4E5           LDRB     R0,[R4, #+80]
   \   0000002C   0050A0E3           MOV      R5,#+0
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0100000A           BEQ      ??onPlayerClosed_1
    223            {
    224              Send_REDRAW_RELEASE();
   \   00000038   ........           BL       ??Send_REDRAW_RELEASE
    225              ReturnRedraw();
   \   0000003C   ........           BL       ??ReturnRedraw
    226            }
    227            curmode=VERT;
   \                     ??onPlayerClosed_1:
   \   00000040   0200A0E3           MOV      R0,#+2
   \   00000044   2C0084E5           STR      R0,[R4, #+44]
    228            deinit_resources();
   \   00000048   ........           _BLF     ??deinit_resources,??deinit_resources??rA
    229            working=false;
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   5100C4E5           STRB     R0,[R4, #+81]
    230            if (AccelCtrl)
   \   00000054   280094E5           LDR      R0,[R4, #+40]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0D00000A           BEQ      ??onPlayerClosed_2
    231            {
    232              if (AccelCtrl->getstatus()==ACC_ACTIVE)
   \   00000060   ........           _BLF     ??getstatus,??getstatus??rA
   \   00000064   010050E3           CMP      R0,#+1
   \   00000068   0700001A           BNE      ??onPlayerClosed_3
    233              {
    234                if (use_accel!=2)
   \   0000006C   ........           LDR      R0,??DataTable2  ;; use_accel
   \   00000070   000090E5           LDR      R0,[R0, #+0]
   \   00000074   020050E3           CMP      R0,#+2
   \   00000078   0300000A           BEQ      ??onPlayerClosed_3
    235                  AccelCtrl->AddHook(onAccel,0);
   \   0000007C   ........           LDR      R1,??DataTable3  ;; ??onAccel
   \   00000080   280094E5           LDR      R0,[R4, #+40]
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   ........           _BLF     ??AddHook,??AddHook??rA
    236              }
    237              delete(AccelCtrl);
   \                     ??onPlayerClosed_3:
   \   0000008C   280094E5           LDR      R0,[R4, #+40]
   \   00000090   ........           _BLF     `??delete ~CAccelCtrl`,`??delete ~CAccelCtrl??rA`
    238              AccelCtrl=0;
   \   00000094   285084E5           STR      R5,[R4, #+40]
    239            }
    240            if (currenttrack)
   \                     ??onPlayerClosed_2:
   \   00000098   200094E5           LDR      R0,[R4, #+32]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0000000A           BEQ      ??onPlayerClosed_4
    241              TrackDesc_Free(currenttrack);
   \   000000A4   ........           _BLF     ??TrackDesc_Free,??TrackDesc_Free??rA
    242            currenttrack=0;
   \                     ??onPlayerClosed_4:
   \   000000A8   205084E5           STR      R5,[R4, #+32]
    243            g_DO=0;
   \   000000AC   245084E5           STR      R5,[R4, #+36]
    244            return 0;
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   3080BDE8           POP      {R4,R5,PC}       ;; return
    245          };
    246          
    247          DISP_OBJ_ONREDRAW_METHOD oldredr;
    248          
    249          #pragma optimize = z 9

   \                                 In segment CODE, align 4, keep-with-next
    250          __EVENT( onPlayerOpened )
    251          {
   \                     ??onPlayerOpened:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    252            if (working)
   \   00000004   ........           LDR      R5,??DataTable32  ;; v_MPA_ID
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   5100D5E5           LDRB     R0,[R5, #+81]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3080BD08           POPEQ    {R4,R5,PC}
    253            {
    254              if (FindBook(get_IsAudioPlayerBook()))
   \   00000018   8B8200EF           SWI      +33419
   \   0000001C   300100EF           SWI      +304
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   3080BD08           POPEQ    {R4,R5,PC}
    255              {
    256                DISP_OBJ *DO=(DISP_OBJ*)msg;
    257                g_DO=DO;
   \   00000028   244085E5           STR      R4,[R5, #+36]
    258                DISP_DESC_SetOnRedraw(DispObject_GetDESC(DO), walkman_Redraw);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   1F0200EF           SWI      +543
   \   00000034   ........           LDR      R1,??DataTable5  ;; ??walkman_Redraw
   \   00000038   280200EF           SWI      +552
    259              }
    260            }
    261            return 0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   3080BDE8           POP      {R4,R5,PC}       ;; return
    262          };
    263          
    264          #pragma optimize = s 9

   \                                 In segment CODE, align 4, keep-with-next
    265          __NEEDED_BOOK(isKeylockBook)
    266          {
    267            if (!strcmp(book->xbook->name, "ScreensaverBook"))
   \                     ??isKeylockBook:
   \   00000000   20109FE5           LDR      R1,??isKeylockBook_1  ;; `?<Constant "ScreensaverBook">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   040090E5           LDR      R0,[R0, #+4]
   \   00000010   590100EF           SWI      +345
   \   00000014   000050E3           CMP      R0,#+0
    268              return 1;
   \   00000018   0100A003           MOVEQ    R0,#+1
   \   0000001C   0080BD08           POPEQ    {PC}
    269            return 0;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   0080BDE8           POP      {PC}             ;; return
   \                     ??isKeylockBook_1:
   \   00000028   ........           DC32     `?<Constant "ScreensaverBook">`
    270          };
    271          
    272          

   \                                 In segment CODE, align 4, keep-with-next
    273          __EVENT(onKeylock)
    274          {
   \                     ??onKeylock:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    275            if (working)
   \   00000004   ........           LDR      R4,??DataTable30  ;; v_MPA_ID
   \   00000008   5100D4E5           LDRB     R0,[R4, #+81]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   F080BD08           POPEQ    {R4-R7,PC}
    276            {
    277              BOOK *bk=FindBook(get_IsAudioPlayerBook());
   \   00000014   8B8200EF           SWI      +33419
   \   00000018   300100EF           SWI      +304
   \   0000001C   0050A0E1           MOV      R5,R0
    278              if (bk==Display_GetTopBook(0) && curmode==HOR)
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   1B0300EF           SWI      +795
   \   00000028   000055E1           CMP      R5,R0
   \   0000002C   2C009405           LDREQ    R0,[R4, #+44]
   \   00000030   01005003           CMPEQ    R0,#+1
   \   00000034   2500001A           BNE      ??onKeylock_1
    279              {
    280                if (DISPBASE_GetFocused(0)!=g_DO)
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   1D0200EF           SWI      +541
   \   00000040   0010A0E1           MOV      R1,R0
   \   00000044   240094E5           LDR      R0,[R4, #+36]
   \   00000048   000051E1           CMP      R1,R0
   \   0000004C   0100000A           BEQ      ??onKeylock_2
    281                {
    282                  MediaPlayer_ShowNowPlaying(g_DO,1);
   \   00000050   0110A0E3           MOV      R1,#+1
   \   00000054   6D0300EF           SWI      +877
    283                }
    284                GUI *g=FindGuiInBook(bk,"MediaPlayer_Audio");
   \                     ??onKeylock_2:
   \   00000058   ........           LDR      R1,??DataTable31  ;; `?<Constant "MediaPlayer_Audio">`
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   ........           BL       ??FindGuiInBook
   \   00000064   0060A0E1           MOV      R6,R0
    285                DISP_OBJ_WALKMAN *d=(DISP_OBJ_WALKMAN*)GUIObject_GetDispObject(g);
   \   00000068   680100EF           SWI      +360
   \   0000006C   0070A0E1           MOV      R7,R0
    286                GUIObject_SetStyle(g,2);
   \   00000070   0210A0E3           MOV      R1,#+2
   \   00000074   0600A0E1           MOV      R0,R6
   \   00000078   360100EF           SWI      +310
    287                d->imageID=v_MPA_ID;
   \   0000007C   B000D4E1           LDRH     R0,[R4, #+0]
    288                GUIObject_SetTitleType(g, 0);
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   B600C7E5           STRB     R0,[R7, #+182]
   \   00000088   2004A0E1           LSR      R0,R0,#+8
   \   0000008C   B700C7E5           STRB     R0,[R7, #+183]
   \   00000090   0600A0E1           MOV      R0,R6
   \   00000094   810200EF           SWI      +641
    289                GUIObject_ShowSoftkeys(g);
   \   00000098   0600A0E1           MOV      R0,R6
   \   0000009C   A20200EF           SWI      +674
    290                DispObject_InvalidateRect(GUIObject_GetDispObject(g),0);
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   680100EF           SWI      +360
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   EF0100EF           SWI      +495
    291                
    292                
    293                BookObj_Hide(bk,0);
   \   000000B0   0010A0E3           MOV      R1,#+0
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   710100EF           SWI      +369
    294                BookObj_Show(bk,0);
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   720100EF           SWI      +370
    295                
    296                curmode=VERT;
   \   000000C8   0200A0E3           MOV      R0,#+2
   \   000000CC   2C0084E5           STR      R0,[R4, #+44]
    297              }
    298            }
    299            return 0;
   \                     ??onKeylock_1:
   \   000000D0   0000A0E3           MOV      R0,#+0
   \   000000D4   F080BDE8           POP      {R4-R7,PC}       ;; return
    300          };
    301          

   \                                 In segment CODE, align 4, keep-with-next
    302          __EVENT( onPlay )
    303          {
   \                     ??onPlay:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    304            if (working)
   \   00000004   ........           LDR      R4,??DataTable32  ;; v_MPA_ID
   \   00000008   5100D4E5           LDRB     R0,[R4, #+81]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   3080BD08           POPEQ    {R4,R5,PC}
    305            {
    306              if (FindBook(get_IsAudioPlayerBook()))
   \   00000014   8B8200EF           SWI      +33419
   \   00000018   300100EF           SWI      +304
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   3080BD08           POPEQ    {R4,R5,PC}
    307              {
    308                TRACK_DESC *ntrack=TrackDesc_Get(FindBook(get_IsAudioPlayerBook()));
   \   00000024   8B8200EF           SWI      +33419
   \   00000028   300100EF           SWI      +304
   \   0000002C   ........           _BLF     ??TrackDesc_Get,??TrackDesc_Get??rA
   \   00000030   0050A0E1           MOV      R5,R0
    309                if (TrackDesc_Compare(currenttrack,ntrack)==false)
   \   00000034   200094E5           LDR      R0,[R4, #+32]
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   ........           _BLF     ??TrackDesc_Compare,??TrackDesc_Compare??rA
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0A00001A           BNE      ??onPlay_1
    310                {
    311                  TrackDesc_Free(currenttrack);
   \   00000048   200094E5           LDR      R0,[R4, #+32]
   \   0000004C   ........           _BLF     ??TrackDesc_Free,??TrackDesc_Free??rA
    312                  currenttrack=ntrack;
   \   00000050   205084E5           STR      R5,[R4, #+32]
    313                  decoder_Init(currenttrack->path,currenttrack->name);
   \   00000054   041095E5           LDR      R1,[R5, #+4]
   \   00000058   000095E5           LDR      R0,[R5, #+0]
   \   0000005C   ........           _BLF     ??decoder_Init,??decoder_Init??rA
    314                  nowmusic.hdr.LengthInSeconds=currenttrack->fulltime;
   \   00000060   201094E5           LDR      R1,[R4, #+32]
   \   00000064   ........           LDR      R0,??DataTable9  ;; nowmusic + 8
   \   00000068   081091E5           LDR      R1,[R1, #+8]
   \   0000006C   001080E5           STR      R1,[R0, #+0]
   \   00000070   010000EA           B        ??onPlay_2
    315                }
    316                else
    317                {
    318                  TrackDesc_Free(ntrack);
   \                     ??onPlay_1:
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   ........           _BLF     ??TrackDesc_Free,??TrackDesc_Free??rA
    319                }
    320                if (g_DO)
   \                     ??onPlay_2:
   \   0000007C   240094E5           LDR      R0,[R4, #+36]
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   3080BD08           POPEQ    {R4,R5,PC}
    321                  DispObject_InvalidateRect(g_DO,0);
   \   00000088   0010A0E3           MOV      R1,#+0
   \   0000008C   EF0100EF           SWI      +495
    322              }
    323            }
    324            return 0;
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   3080BDE8           POP      {R4,R5,PC}       ;; return
    325          };
    326          

   \                                 In segment CODE, align 4, keep-with-next
    327          __EVENT( onUnlock )
    328          {
    329            if (working)
   \                     ??onUnlock:
   \   00000000   3C009FE5           LDR      R0,??onUnlock_1  ;; v_MPA_ID + 81
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0080BD08           POPEQ    {PC}
    330            {
    331              if (FindBook(get_IsAudioPlayerBook()))
   \   00000014   8B8200EF           SWI      +33419
   \   00000018   300100EF           SWI      +304
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0080BD08           POPEQ    {PC}
    332              {
    333                if (BookObj_GetDisplayOrientation(FindBook(get_IsAudioPlayerBook())))
   \   00000024   8B8200EF           SWI      +33419
   \   00000028   300100EF           SWI      +304
   \   0000002C   190300EF           SWI      +793
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0080BD08           POPEQ    {PC}
    334                {
    335                  set_horizontal();
   \   00000038   ........           BL       ??set_horizontal
    336                }
    337              }
    338            }
    339            return 0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   0080BDE8           POP      {PC}             ;; return
   \                     ??onUnlock_1:
   \   00000044   ........           DC32     v_MPA_ID + 81
    340          };
    341          

   \                                 In segment CODE, align 4, keep-with-next
    342          __EVENT( onReconfig )
    343          {
   \                     ??onReconfig:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    344              // Ïåðåêîíôèãóðèðóåìñÿ
    345            RECONFIG_EVENT_DATA *reconf=(RECONFIG_EVENT_DATA *)msg;
    346            debug_printf("\nWalkmanDisplay: onReconfig: %ls/%ls asked. Our skin bcfg: %ls/%ls\n", reconf->path,reconf->name,successed_skin_path,successed_skin_name);
   \   00000004   ........           LDR      R5,??DataTable20  ;; successed_skin_path
   \   00000008   ........           LDR      R6,??DataTable21  ;; successed_skin_name
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   01002DE9           PUSH     {R0}
   \   00000018   0530A0E1           MOV      R3,R5
   \   0000001C   802084E2           ADD      R2,R4,#+128
   \   00000020   84009FE5           LDR      R0,??onReconfig_1  ;; `?<Constant "\\nWalkmanDisplay: onRe...">`
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   B10100EF           SWI      +433
    347            int result=0;
    348            // Åñëè êîíôèã íàø, ïåðåãðóçèì åãî
    349            if (wstrcmpi(reconf->path,successed_config_path)==0 && wstrcmpi(reconf->name,successed_config_name)==0)
   \   0000002C   ........           LDR      R0,??DataTable12  ;; successed_config_path
   \   00000030   0070A0E3           MOV      R7,#+0
   \   00000034   001090E5           LDR      R1,[R0, #+0]
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   9F0200EF           SWI      +671
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   04D08DE2           ADD      SP,SP,#+4
   \   00000048   0700001A           BNE      ??onReconfig_2
   \   0000004C   ........           LDR      R0,??DataTable13  ;; successed_config_name
   \   00000050   001090E5           LDR      R1,[R0, #+0]
   \   00000054   800084E2           ADD      R0,R4,#+128
   \   00000058   9F0200EF           SWI      +671
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0100001A           BNE      ??onReconfig_2
    350            {
    351              InitConfig();
   \   00000064   ........           _BLF     ??InitConfig,??InitConfig??rA
    352              result=1;
   \   00000068   0170A0E3           MOV      R7,#+1
    353            }
    354            if (wstrcmpi(reconf->path,successed_skin_path)==0 && wstrcmpi(reconf->name,successed_skin_name)==0)
   \                     ??onReconfig_2:
   \   0000006C   0510A0E1           MOV      R1,R5
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   9F0200EF           SWI      +671
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0800001A           BNE      ??onReconfig_3
   \   00000080   0610A0E1           MOV      R1,R6
   \   00000084   800084E2           ADD      R0,R4,#+128
   \   00000088   9F0200EF           SWI      +671
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0300001A           BNE      ??onReconfig_3
    355            {
    356              skin_InitConfig(reconf->path, 1);
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           _BLF     ??skin_InitConfig,??skin_InitConfig??rA
    357              result=1;
   \   000000A0   0170A0E3           MOV      R7,#+1
    358            }
    359            return(result);
   \                     ??onReconfig_3:
   \   000000A4   0700A0E1           MOV      R0,R7
   \   000000A8   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??onReconfig_1:
   \   000000AC   ........           DC32     `?<Constant "\\nWalkmanDisplay: onRe...">`
    360          };
    361          
    362          
    363          #define EVENT_HOOK(a,b) a,b,
    364          #define EVENT_HOOK_TABLE(x) const PAGE_MSG x[]@ "DYN_PAGE" = {
    365          #define EVENT_HOOK_TABLE_END 0,0}
    366          
    367          extern GC* hMGC;
    368          extern GVI_GC imggc;

   \                                 In segment DATA_Z, align 1, align-sorted
    369          bool test=false;
   \                     test:
   \   00000000                      DS8 1

   \                                 In segment CODE, align 4, keep-with-next
    370          __EVENT ( onStyleChanged )
    371          {
   \                     ??onStyleChanged:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    372            if (working)
   \   00000004   ........           LDR      R4,??DataTable30  ;; v_MPA_ID
   \   00000008   5100D4E5           LDRB     R0,[R4, #+81]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   F083BD08           POPEQ    {R4-R9,PC}
    373            {
    374              WBOOK *wb=(WBOOK*)FindBook(get_IsAudioPlayerBook());
   \   00000014   8B8200EF           SWI      +33419
   \   00000018   300100EF           SWI      +304
   \   0000001C   0070B0E1           MOVS     R7,R0
    375              if (wb)
   \   00000020   4700000A           BEQ      ??onStyleChanged_1
    376              {
    377                wchar_t *str=new wchar_t[0x100];
   \   00000024   800FA0E3           MOV      R0,#+512
   \   00000028   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   0000002C   0050A0E1           MOV      R5,R0
    378                wchar_t *str2=new wchar_t[0x100];
   \   00000030   800FA0E3           MOV      R0,#+512
   \   00000034   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
    379                GetInfo SkinManager_GetSkinInfo=wb->SkinManager->SkinManager_Table->GetINFO;
    380                
    381                SkinManager_GetSkinInfo(wb->SkinManager,1,str,0xFF,str2,0xFF);
   \   00000038   B08097E5           LDR      R8,[R7, #+176]
   \   0000003C   0060A0E1           MOV      R6,R0
   \   00000040   FF00A0E3           MOV      R0,#+255
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   FF30A0E3           MOV      R3,#+255
   \   0000004C   0520A0E1           MOV      R2,R5
   \   00000050   0110A0E3           MOV      R1,#+1
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   0800A0E1           MOV      R0,R8
   \   00000060   008098E5           LDR      R8,[R8, #+0]
   \   00000064   2C8098E5           LDR      R8,[R8, #+44]
   \   00000068   38FF2FE1           BLX      R8
    382                if (wstrcmp(skin_str,str)!=0)
   \   0000006C   0510A0E1           MOV      R1,R5
   \   00000070   580084E2           ADD      R0,R4,#+88
   \   00000074   560100EF           SWI      +342
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   08D08DE2           ADD      SP,SP,#+8
   \   00000080   2B00000A           BEQ      ??onStyleChanged_2
    383                {
    384                  wstrcpy(skin_str,str);
    385                  skin_InitConfig(skin_str, 0);
    386                  deinit_resources();
    387                  init_resources(skin_str);
    388                  
    389                  GUI *g=FindGuiInBook((BOOK*)wb,"MediaPlayer_Audio");
   \   00000084   ........           LDR      R8,??DataTable31  ;; `?<Constant "MediaPlayer_Audio">`
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   580084E2           ADD      R0,R4,#+88
   \   00000090   520100EF           SWI      +338
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   580084E2           ADD      R0,R4,#+88
   \   0000009C   ........           _BLF     ??skin_InitConfig,??skin_InitConfig??rA
   \   000000A0   ........           _BLF     ??deinit_resources,??deinit_resources??rA
   \   000000A4   580084E2           ADD      R0,R4,#+88
   \   000000A8   ........           _BLF     ??init_resources,??init_resources??rA
   \   000000AC   0810A0E1           MOV      R1,R8
   \   000000B0   0700A0E1           MOV      R0,R7
   \   000000B4   ........           BL       ??FindGuiInBook
    390                  DISP_OBJ_WALKMAN *d=(DISP_OBJ_WALKMAN*)GUIObject_GetDispObject(g);
   \   000000B8   680100EF           SWI      +360
   \   000000BC   0090A0E1           MOV      R9,R0
    391                  
    392                  if (d->imageID!=NOIMAGE)
   \   000000C0   B700D9E5           LDRB     R0,[R9, #+183]
   \   000000C4   B610D9E5           LDRB     R1,[R9, #+182]
   \   000000C8   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000000CC   FF10A0E3           MOV      R1,#+255
   \   000000D0   FF1C81E3           ORR      R1,R1,#0xFF00
   \   000000D4   010050E1           CMP      R0,R1
    393                    v_MPA_ID=d->imageID;
   \   000000D8   B000C411           STRHNE   R0,[R4, #+0]
    394                  
    395                  if (BookObj_GetDisplayOrientation((BOOK*)wb))
   \   000000DC   0700A0E1           MOV      R0,R7
   \   000000E0   190300EF           SWI      +793
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   0400000A           BEQ      ??onStyleChanged_3
    396                    d->imageID=playview_h;
   \   000000EC   ........           LDR      R0,??DataTable29  ;; playview_h
   \   000000F0   B000D0E1           LDRH     R0,[R0, #+0]
   \   000000F4   B600C9E5           STRB     R0,[R9, #+182]
   \   000000F8   2004A0E1           LSR      R0,R0,#+8
   \   000000FC   B700C9E5           STRB     R0,[R9, #+183]
    397                  DispObject_InvalidateRect((DISP_OBJ*)d, 0);
   \                     ??onStyleChanged_3:
   \   00000100   0010A0E3           MOV      R1,#+0
   \   00000104   0900A0E1           MOV      R0,R9
   \   00000108   EF0100EF           SWI      +495
    398                  if (hMGC)
   \   0000010C   440094E5           LDR      R0,[R4, #+68]
   \   00000110   000050E3           CMP      R0,#+0
   \   00000114   0100000A           BEQ      ??onStyleChanged_4
    399                    GC_FreeGC(hMGC);
   \   00000118   960300EF           SWI      +918
    400                  hMGC=0;
   \   0000011C   0000A0E3           MOV      R0,#+0
   \                     ??onStyleChanged_4:
   \   00000120   440084E5           STR      R0,[R4, #+68]
    401                  imggc=0;
   \   00000124   480084E5           STR      R0,[R4, #+72]
    402                  debug_printf("\nWalkmanDisplay: onStyleChanged. New skin: %ls\n", skin_str);
   \   00000128   581084E2           ADD      R1,R4,#+88
   \   0000012C   140088E2           ADD      R0,R8,#+20
   \   00000130   B10100EF           SWI      +433
    403                }
    404                delete(str);
   \                     ??onStyleChanged_2:
   \   00000134   0500A0E1           MOV      R0,R5
   \   00000138   ........           _BLF     `??operator delete`,`??operator delete??rA`
    405                delete(str2);
   \   0000013C   0600A0E1           MOV      R0,R6
   \   00000140   ........           _BLF     `??operator delete`,`??operator delete??rA`
    406              }
    407            }
    408            return 0;
   \                     ??onStyleChanged_1:
   \   00000144   0000A0E3           MOV      R0,#+0
   \   00000148   F083BDE8           POP      {R4-R9,PC}       ;; return
    409          };
    410          

   \                                 In segment CODE, align 4, keep-with-next
    411          void ReturnRedraw()
    412          { 
    413            if (RedrawUsed==true)
   \                     ??ReturnRedraw:
   \   00000000   ........           LDR      R0,??DataTable32  ;; v_MPA_ID
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   5010D0E5           LDRB     R1,[R0, #+80]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0080BD08           POPEQ    {PC}
    414            {
    415              RedrawUsed=false;
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   5010C0E5           STRB     R1,[R0, #+80]
    416              DISP_DESC_SetOnRedraw(Softkey_DD, Softkey_DefaultRedraw);
   \   0000001C   1C1090E5           LDR      R1,[R0, #+28]
   \   00000020   140090E5           LDR      R0,[R0, #+20]
   \   00000024   280200EF           SWI      +552
    417              debug_printf("\nWalkmanDisplay: own redraw deinstalled\n");
   \   00000028   04009FE5           LDR      R0,??ReturnRedraw_1  ;; `?<Constant "\\nWalkmanDisplay: own ...">`
   \   0000002C   B10100EF           SWI      +433
    418            }
    419          };
   \   00000030   0080BDE8           POP      {PC}             ;; return
   \                     ??ReturnRedraw_1:
   \   00000034   ........           DC32     `?<Constant "\\nWalkmanDisplay: own ...">`
    420          
    421          
    422          void softredraw(DISP_OBJ*,int,int,int);

   \                                 In segment CODE, align 4, keep-with-next
    423          int SB_ELF_Killed(void *mess ,BOOK* book)
    424          {
   \                     ??SB_ELF_Killed:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    425            REDRAW_RELEASE_MESSAGE * sbm=(REDRAW_RELEASE_MESSAGE*)mess;
    426            REDRAW_RELEASE_MESSAGE *res=0;
    427            if (sbm->SK_NewOnRedraw==Softkey_DefaultRedraw)
   \   00000004   ........           LDR      R5,??DataTable32  ;; v_MPA_ID
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   140094E5           LDR      R0,[R4, #+20]
   \   00000010   1C1095E5           LDR      R1,[R5, #+28]
   \   00000014   010050E1           CMP      R0,R1
   \   00000018   1B00001A           BNE      ??SB_ELF_Killed_1
    428            {
    429              if (!res)
    430              {
    431                res=new REDRAW_RELEASE_MESSAGE;
   \   0000001C   1800A0E3           MOV      R0,#+24
   \   00000020   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000024   0060A0E1           MOV      R6,R0
    432                memcpy(res,sbm,sizeof(REDRAW_RELEASE_MESSAGE));
   \   00000028   1820A0E3           MOV      R2,#+24
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   130100EF           SWI      +275
    433              }
    434              if (sbm->SK_OldOnRedraw!=EMPTY_REDRAW_METHOD) Softkey_DefaultRedraw=sbm->SK_OldOnRedraw;
   \   00000034   100094E5           LDR      R0,[R4, #+16]
    435              DISP_DESC_SetOnRedraw(DispObject_GetDESC(Softkey_DO),softredraw);
   \   00000038   ........           LDR      R4,??DataTable19  ;; ??softredraw
   \   0000003C   0070E0E3           MVN      R7,#+0
   \   00000040   070050E1           CMP      R0,R7
   \   00000044   1C008515           STRNE    R0,[R5, #+28]
   \   00000048   180095E5           LDR      R0,[R5, #+24]
   \   0000004C   1F0200EF           SWI      +543
   \   00000050   0410A0E1           MOV      R1,R4
   \   00000054   280200EF           SWI      +552
    436              res->SK_OldOnRedraw=EMPTY_REDRAW_METHOD;
   \   00000058   107086E5           STR      R7,[R6, #+16]
    437              res->SK_NewOnRedraw=softredraw;
   \   0000005C   144086E5           STR      R4,[R6, #+20]
    438            }
    439            if (res)
   \   00000060   000056E3           CMP      R6,#+0
   \   00000064   0800000A           BEQ      ??SB_ELF_Killed_1
    440            {
    441              UI_Event_wData(SBY_REDRAW_RELEASE_EVENT ,res,(void (*)(void*))mfree_adr());
   \   00000068   048100EF           SWI      +33028
   \   0000006C   0020A0E1           MOV      R2,R0
   \   00000070   0610A0E1           MOV      R1,R6
   \   00000074   E300A0E3           MOV      R0,#+227
   \   00000078   C00F80E3           ORR      R0,R0,#0x300
   \   0000007C   A90100EF           SWI      +425
    442              return BLOCK_EVENT_GLOBALLY;
   \   00000080   9A00A0E3           MOV      R0,#+154
   \   00000084   800F80E3           ORR      R0,R0,#0x200
   \   00000088   F080BDE8           POP      {R4-R7,PC}
    443            }
    444            return 0;
   \                     ??SB_ELF_Killed_1:
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   F080BDE8           POP      {R4-R7,PC}       ;; return
    445          };
    446          

   \                                 In segment CODE, align 4, keep-with-next
    447          __EVENT( onBcfgConfig )
    448          {
   \                     ??onBcfgConfig:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    449            if (successed_skin_path && successed_skin_name)
    450            {
    451              FILEITEM *fli=FILEITEM_Create();
    452              FILEITEM_SetPathAndContentType(fli,successed_skin_path);
   \   00000004   ........           LDR      R5,??DataTable20  ;; successed_skin_path
    453              FILEITEM_SetFnameAndContentType(fli,successed_skin_name);
   \   00000008   ........           LDR      R6,??DataTable21  ;; successed_skin_name
   \   0000000C   B30200EF           SWI      +691
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0510A0E1           MOV      R1,R5
   \   00000018   D50200EF           SWI      +725
   \   0000001C   0610A0E1           MOV      R1,R6
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   D40200EF           SWI      +724
    454              int bookid=BookObj_GetBookID(&MyBook->bk);
   \   00000028   ........           LDR      R0,??DataTable22  ;; MyBook
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   FA0100EF           SWI      +506
    455              SUB_EXECUTE*se=DataBrowser_CreateSubExecute(bookid, fli);
   \   00000034   0410A0E1           MOV      R1,R4
   \   00000038   CE0200EF           SWI      +718
   \   0000003C   0070A0E1           MOV      R7,R0
    456              DataBrowser_ExecuteSubroutine(se,1,0);
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   CF0200EF           SWI      +719
    457              DataBrowser_ExecuteSubroutine(se,0x2D,0);
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   2D10A0E3           MOV      R1,#+45
   \   00000054   0700A0E1           MOV      R0,R7
   \   00000058   CF0200EF           SWI      +719
    458              debug_printf("\nWalkmanDisplay: onBcfgConfig: executing data browser's subroutine for %ls/%ls\n", successed_skin_path, successed_skin_name);
   \   0000005C   18009FE5           LDR      R0,??onBcfgConfig_1  ;; `?<Constant "\\nWalkmanDisplay: onBc...">`
   \   00000060   0620A0E1           MOV      R2,R6
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   B10100EF           SWI      +433
    459              FILEITEM_Destroy(fli);
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   B40200EF           SWI      +692
    460            }
    461            else
    462            {
    463              MessageBox(EMPTY_TEXTID,TextID_Create(lng_msgSkinNotLoaded,ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE,1,0,0);
    464            }
    465            return 1;
   \   00000074   0100A0E3           MOV      R0,#+1
   \   00000078   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??onBcfgConfig_1:
   \   0000007C   ........           DC32     `?<Constant "\\nWalkmanDisplay: onBc...">`
    466          }
    467          
    468          u16 timer;

   \                                 In segment CODE, align 4, keep-with-next
    469          void onTimer(u16 timerID, LPARAM lparam)
    470          {
   \                     ??onTimer:
   \   00000000   10402DE9           PUSH     {R4,LR}
    471            BOOK *bk=FindBook(get_IsAudioPlayerBook());
    472            if (bk)
   \   00000004   ........           LDR      R4,??DataTable32  ;; v_MPA_ID
   \   00000008   8B8200EF           SWI      +33419
   \   0000000C   300100EF           SWI      +304
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0500000A           BEQ      ??onTimer_1
    473            {
    474              if (BookObj_GetDisplayOrientation(bk))
   \   00000018   190300EF           SWI      +793
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0200000A           BEQ      ??onTimer_1
    475              {
    476                DispObject_InvalidateRect(g_DO,(RECT*)&volrect);
   \   00000024   ........           LDR      R1,??DataTable26  ;; volrect
   \   00000028   240094E5           LDR      R0,[R4, #+36]
   \   0000002C   EF0100EF           SWI      +495
    477              }
    478            }
    479            Timer_Kill(&timer);
   \                     ??onTimer_1:
   \   00000030   020084E2           ADD      R0,R4,#+2
   \   00000034   2A0100EF           SWI      +298
    480            timer=0;
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   B200C4E1           STRH     R0,[R4, #+2]
    481          };
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
    482          __EVENT( onVolumeChange )
    483          {
   \                     ??onVolumeChange:
   \   00000000   10402DE9           PUSH     {R4,LR}
    484            if (working && g_DO)
   \   00000004   ........           LDR      R4,??DataTable32  ;; v_MPA_ID
   \   00000008   5100D4E5           LDRB     R0,[R4, #+81]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   24009415           LDRNE    R0,[R4, #+36]
   \   00000014   00005013           CMPNE    R0,#+0
   \   00000018   1080BD08           POPEQ    {R4,PC}
    485            {
    486              BOOK *bk=FindBook(get_IsAudioPlayerBook());
   \   0000001C   8B8200EF           SWI      +33419
   \   00000020   300100EF           SWI      +304
    487              if (bk)
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   1080BD08           POPEQ    {R4,PC}
    488              {
    489                if (BookObj_GetDisplayOrientation(bk))
   \   0000002C   190300EF           SWI      +793
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   1080BD08           POPEQ    {R4,PC}
    490                {
    491                  DispObject_InvalidateRect(g_DO,(RECT*)&volrect);
   \   00000038   ........           LDR      R1,??DataTable26  ;; volrect
   \   0000003C   240094E5           LDR      R0,[R4, #+36]
   \   00000040   EF0100EF           SWI      +495
    492                  if (timer==0)
   \   00000044   B230D4E1           LDRH     R3,[R4, #+2]
   \   00000048   3C109FE5           LDR      R1,??onVolumeChange_1  ;; ??onTimer
   \   0000004C   B800A0E3           MOV      R0,#+184
   \   00000050   B00E80E3           ORR      R0,R0,#0xB00
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   000053E3           CMP      R3,#+0
   \   0000005C   0300001A           BNE      ??onVolumeChange_2
    493                    timer=Timer_Set(3000, onTimer, 0);
   \   00000060   290100EF           SWI      +297
   \   00000064   B200C4E1           STRH     R0,[R4, #+2]
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   1080BDE8           POP      {R4,PC}
    494                  else
    495                    Timer_ReSet(&timer, 3000, onTimer, 0);
   \                     ??onVolumeChange_2:
   \   00000070   0030A0E3           MOV      R3,#+0
   \   00000074   0120A0E1           MOV      R2,R1
   \   00000078   0010A0E1           MOV      R1,R0
   \   0000007C   020084E2           ADD      R0,R4,#+2
   \   00000080   280100EF           SWI      +296
    496                }
    497              }
    498            }
    499            return 0;
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??onVolumeChange_1:
   \   0000008C   ........           DC32     ??onTimer
    500          };
    501          
    502          //0x29CF - UI_MEDIAPLAYER_VISUALIZATION_OPTIONS_CHANGED_EVENT

   \                                 In segment DYN_PAGE, align 4, align-sorted
    503          EVENT_HOOK_TABLE(BasePageEvents)
   \                     BasePageEvents:
   \   00000000   E4030000....       DC32 996, ??onReconfig, 997, ??TerminateElf, 998, ??ShowAuthorInfo, 995
   \              ....E5030000
   \              ........E603
   \              0000........
   \              E3030000    
   \   0000001C   ........D901       DC32 ??SB_ELF_Killed, 473, ??onPlayerClosed, 470, ??onPlay, 106
   \              0000........
   \              D6010000....
   \              ....6A000000
   \   00000034   ........6D00       DC32 ??onVolumeChange, 109, ??onVolumeChange, 373, ??onStyleChanged
   \              0000........
   \              75010000....
   \              ....        
   \   00000048   E1030000....       DC32 993, ??onPlayerOpened, 994, ??onBcfgConfig, 432, ??onKeylock, 433
   \              ....E2030000
   \              ........B001
   \              0000........
   \              B1010000    
   \   00000064   ........0000       DC32 ??onUnlock, 0, 0H
   \              000000000000
    504            EVENT_HOOK(ELF_RECONFIG_EVENT, onReconfig)
    505            EVENT_HOOK(ELF_TERMINATE_EVENT , TerminateElf)
    506            EVENT_HOOK(ELF_SHOW_INFO_EVENT  , ShowAuthorInfo)
    507            EVENT_HOOK(SBY_REDRAW_RELEASE_EVENT  , SB_ELF_Killed)
    508            EVENT_HOOK(UI_MEDIAPLAYER_DESTROYED_EVENT_TAG , onPlayerClosed)
    509            EVENT_HOOK(UI_MEDIAPLAYER_PLAY_PRESSED_EVENT_TAG, onPlay)
    510            EVENT_HOOK(VOLUMEUPKEY_SHORT_PRESS_EVENT_TAG, onVolumeChange)
    511            EVENT_HOOK(VOLUMEDOWNKEY_SHORT_PRESS_EVENT_TAG, onVolumeChange)
    512            EVENT_HOOK(SESSION_DESTROYED_EVENT_TAG,onStyleChanged)
    513            EVENT_HOOK(993, onPlayerOpened)
    514            EVENT_HOOK(994, onBcfgConfig)
    515            EVENT_HOOK(UI_KEYLOCK_ACTIVATE_EVENT_TAG, onKeylock)
    516            EVENT_HOOK(UI_KEYLOCK_DEACTIVATE_EVENT_TAG, onUnlock)
    517          EVENT_HOOK_TABLE_END;
    518          

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "WalkmanDisplay">`:
   \   00000000   57616C6B6D61       DC8 "WalkmanDisplay"
   \              6E446973706C
   \              617900      
   \   0000000F   00                 DC8 0
   \   __vtbl_entry const __data CMyBook::__vtbl[2]
   \                     ??__vtbl:
   \   00000010   ............       DC32 `?~CMyBook`, ??onClose
   \              ....        
   \   00000018   2F0057006100       DC8 2FH, 0, 57H, 0, 61H, 0, 6CH, 0
   \              6C00        
   \   00000020   6B006D006100       DC8 6BH, 0, 6DH, 0, 61H, 0, 6EH, 0
   \              6E00        
   \   00000028   440069007300       DC8 44H, 0, 69H, 0, 73H, 0, 70H, 0
   \              7000        
   \   00000030   6C0061007900       DC8 6CH, 0, 61H, 0, 79H, 0, 2FH, 0
   \              2F00        
   \   00000038   0000               DC8 0, 0
   \   0000003A   0000               DC8 0, 0
   \   0000003C   ........0000       DC32 `?<Constant "WalkmanDisplay_Base_Page">`, 0H, BasePageEvents
   \              0000........
    519          const PAGE_DESC base_page ={PROJECT_BASEPAGE_NAME,0,BasePageEvents};
    520          
    521          #pragma optimize = s 9

   \                                 In segment CODE, align 4, keep-with-next
    522          GUI *FindGuiInBook(BOOK *bk, char *name)
    523          {
   \                     ??FindGuiInBook:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    524            LIST *lst=bk->xguilist->guilist;
   \   00000004   140090E5           LDR      R0,[R0, #+20]
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   045090E5           LDR      R5,[R0, #+4]
    525            for (int x=0;x<lst->FirstFree;x++)
   \   00000010   0060A0E3           MOV      R6,#+0
   \   00000014   000000EA           B        ??FindGuiInBook_1
   \                     ??FindGuiInBook_2:
   \   00000018   016086E2           ADD      R6,R6,#+1
   \                     ??FindGuiInBook_1:
   \   0000001C   B200D5E1           LDRH     R0,[R5, #+2]
   \   00000020   000056E1           CMP      R6,R0
   \   00000024   0B0000AA           BGE      ??FindGuiInBook_3
    526            {
    527              GUI * g=(GUI*)List_Get(lst,x);
   \   00000028   0610A0E1           MOV      R1,R6
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   AD0100EF           SWI      +429
   \   00000034   0070A0E1           MOV      R7,R0
    528              if (strcmp(DISP_OBJ_GetName(GUIObject_GetDispObject(g)),name)==0)
   \   00000038   680100EF           SWI      +360
   \   0000003C   210200EF           SWI      +545
   \   00000040   0410A0E1           MOV      R1,R4
   \   00000044   590100EF           SWI      +345
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   F1FFFF1A           BNE      ??FindGuiInBook_2
    529                return g;
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   F080BDE8           POP      {R4-R7,PC}
    530            }
    531            return 0;
   \                     ??FindGuiInBook_3:
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   F080BDE8           POP      {R4-R7,PC}       ;; return
    532          };
    533          
    534          #pragma optimize = z 9

   \                                 In segment CODE, align 4, keep-with-next
    535          void set_horizontal()
    536          {
   \                     ??set_horizontal:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    537            if (working)
   \   00000004   ........           LDR      R4,??DataTable32  ;; v_MPA_ID
   \   00000008   5100D4E5           LDRB     R0,[R4, #+81]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   7080BD08           POPEQ    {R4-R6,PC}
    538            {
    539              debug_printf("\nWalkmanDisplay: horizontal mode setted\n");
   \   00000014   ........           LDR      R6,??DataTable31  ;; `?<Constant "MediaPlayer_Audio">`
   \   00000018   440086E2           ADD      R0,R6,#+68
   \   0000001C   B10100EF           SWI      +433
    540              BOOK *mybook=FindBook(get_IsAudioPlayerBook());
   \   00000020   8B8200EF           SWI      +33419
   \   00000024   300100EF           SWI      +304
   \   00000028   0050A0E1           MOV      R5,R0
    541              if (Display_GetTopBook(0)==mybook)
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   1B0300EF           SWI      +795
   \   00000034   050050E1           CMP      R0,R5
   \   00000038   1C00001A           BNE      ??set_horizontal_1
    542              {
    543                BookObj_SetDisplayOrientation(mybook, 1);
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   1A0300EF           SWI      +794
    544                
    545                GUI *g=FindGuiInBook(mybook,"MediaPlayer_Audio");
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           BL       ??FindGuiInBook
   \   00000054   0060A0E1           MOV      R6,R0
    546                DISP_OBJ_WALKMAN *d=(DISP_OBJ_WALKMAN*)GUIObject_GetDispObject(g);
   \   00000058   680100EF           SWI      +360
    547                d->imageID=playview_h;
   \   0000005C   ........           LDR      R1,??DataTable29  ;; playview_h
   \   00000060   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000064   B610C0E5           STRB     R1,[R0, #+182]
   \   00000068   2114A0E1           LSR      R1,R1,#+8
   \   0000006C   B710C0E5           STRB     R1,[R0, #+183]
    548                GUIObject_SetStyle(g,4);
   \   00000070   0410A0E3           MOV      R1,#+4
   \   00000074   0600A0E1           MOV      R0,R6
   \   00000078   360100EF           SWI      +310
    549                GUIObject_SetTitleType(g, 1);
   \   0000007C   0110A0E3           MOV      R1,#+1
   \   00000080   0600A0E1           MOV      R0,R6
   \   00000084   810200EF           SWI      +641
    550                DispObject_InvalidateRect(GUIObject_GetDispObject(g),0);
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   680100EF           SWI      +360
   \   00000090   0010A0E3           MOV      R1,#+0
   \   00000094   EF0100EF           SWI      +495
    551                
    552                BookObj_Hide(mybook, 0);
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   710100EF           SWI      +369
    553                BookObj_Show(mybook, 0);
   \   000000A4   0010A0E3           MOV      R1,#+0
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   720100EF           SWI      +370
    554              }
    555              curmode=HOR;
   \                     ??set_horizontal_1:
   \   000000B0   0100A0E3           MOV      R0,#+1
   \   000000B4   2C0084E5           STR      R0,[R4, #+44]
    556            }
    557          };
   \   000000B8   7080BDE8           POP      {R4-R6,PC}       ;; return
    558          
    559          #pragma optimize = z 9

   \                                 In segment CODE, align 4, keep-with-next
    560          void set_vertical()
    561          {
   \                     ??set_vertical:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    562            if (working)
   \   00000004   ........           LDR      R4,??DataTable30  ;; v_MPA_ID
   \   00000008   5100D4E5           LDRB     R0,[R4, #+81]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   7080BD08           POPEQ    {R4-R6,PC}
    563            {
    564              debug_printf("\nWalkmanDisplay: vertical mode setted\n");
   \   00000014   ........           LDR      R5,??DataTable31  ;; `?<Constant "MediaPlayer_Audio">`
   \   00000018   700085E2           ADD      R0,R5,#+112
   \   0000001C   B10100EF           SWI      +433
    565              BOOK *mybook=FindBook(get_IsAudioPlayerBook());
   \   00000020   8B8200EF           SWI      +33419
   \   00000024   300100EF           SWI      +304
   \   00000028   0060A0E1           MOV      R6,R0
    566              if (Display_GetTopBook(0)==mybook)
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   1B0300EF           SWI      +795
   \   00000034   060050E1           CMP      R0,R6
   \   00000038   7080BD18           POPNE    {R4-R6,PC}
    567              {
    568                MediaPlayer_ShowNowPlaying(g_DO, 1);
   \   0000003C   240094E5           LDR      R0,[R4, #+36]
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   6D0300EF           SWI      +877
    569                BookObj_SetDisplayOrientation(mybook, 0);
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   1A0300EF           SWI      +794
    570                
    571                GUI *g=FindGuiInBook(mybook,"MediaPlayer_Audio");
   \   00000054   0510A0E1           MOV      R1,R5
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   ........           BL       ??FindGuiInBook
   \   00000060   0050A0E1           MOV      R5,R0
    572                DISP_OBJ_WALKMAN *d=(DISP_OBJ_WALKMAN*)GUIObject_GetDispObject(g);
   \   00000064   680100EF           SWI      +360
    573                d->imageID=v_MPA_ID;
   \   00000068   B010D4E1           LDRH     R1,[R4, #+0]
   \   0000006C   B610C0E5           STRB     R1,[R0, #+182]
   \   00000070   2114A0E1           LSR      R1,R1,#+8
   \   00000074   B710C0E5           STRB     R1,[R0, #+183]
    574                GUIObject_SetStyle(g,2);
   \   00000078   0210A0E3           MOV      R1,#+2
   \   0000007C   0500A0E1           MOV      R0,R5
   \   00000080   360100EF           SWI      +310
    575                GUIObject_SetTitleType(g, 1);
   \   00000084   0110A0E3           MOV      R1,#+1
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   810200EF           SWI      +641
    576                
    577                DispObject_InvalidateRect(GUIObject_GetDispObject(g),0);
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   680100EF           SWI      +360
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   EF0100EF           SWI      +495
    578                BookObj_Hide(mybook, 0);
   \   000000A0   0010A0E3           MOV      R1,#+0
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   710100EF           SWI      +369
    579                BookObj_Show(mybook, 0);
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   0600A0E1           MOV      R0,R6
   \   000000B4   720100EF           SWI      +370
    580                curmode=VERT;
   \   000000B8   0200A0E3           MOV      R0,#+2
   \   000000BC   2C0084E5           STR      R0,[R4, #+44]
    581              }
    582            }
    583          };
   \   000000C0   7080BDE8           POP      {R4-R6,PC}       ;; return
    584          
    585          #pragma optimize = z 9

   \                                 In segment CODE, align 4, keep-with-next
    586          void onAccel(void* cac, int x, int y)
    587          {
   \                     ??onAccel:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    588            CAccelCtrl*cac_=(CAccelCtrl*)cac;
    589            if(working && accel_wrk && isKeylocked()==0)
   \   00000004   ........           LDR      R4,??DataTable32  ;; v_MPA_ID
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   5100D4E5           LDRB     R0,[R4, #+81]
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   5210D4E5           LDRB     R1,[R4, #+82]
   \   00000018   0270A0E1           MOV      R7,R2
   \   0000001C   000011E1           TST      R1,R0
   \   00000020   F080BD08           POPEQ    {R4-R7,PC}
   \   00000024   B70100EF           SWI      +439
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   F080BD18           POPNE    {R4-R7,PC}
    590            {
    591              int mode=cac_->getorientation(x,y);
   \   00000030   0720A0E1           MOV      R2,R7
   \   00000034   0610A0E1           MOV      R1,R6
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           _BLF     ??getorientation,??getorientation??rA
   \   00000040   0050A0E1           MOV      R5,R0
    592              WALKMAN_BOOK *wb=(WALKMAN_BOOK*)FindBook(get_IsAudioPlayerBook()); 
   \   00000044   8B8200EF           SWI      +33419
   \   00000048   300100EF           SWI      +304
    593              if (wb->status==MP_STATUS_FORWARD || wb->status==MP_STATUS_REWIND)
   \   0000004C   1900D0E5           LDRB     R0,[R0, #+25]
   \   00000050   030050E3           CMP      R0,#+3
   \   00000054   05005013           CMPNE    R0,#+5
   \   00000058   F080BD08           POPEQ    {R4-R7,PC}
    594              {
    595                return;
    596              }
    597              if (mode==HOR && curmode!=HOR)
   \   0000005C   2C0094E5           LDR      R0,[R4, #+44]
   \   00000060   010055E3           CMP      R5,#+1
   \   00000064   0300001A           BNE      ??onAccel_1
   \   00000068   010050E3           CMP      R0,#+1
   \   0000006C   F080BD08           POPEQ    {R4-R7,PC}
    598              {
    599                set_horizontal();
   \   00000070   ........           BL       ??set_horizontal
   \   00000074   F080BDE8           POP      {R4-R7,PC}
    600              }
    601              else if (mode==VERT && curmode!=VERT)
   \                     ??onAccel_1:
   \   00000078   020055E3           CMP      R5,#+2
   \   0000007C   F080BD18           POPNE    {R4-R7,PC}
   \   00000080   020050E3           CMP      R0,#+2
   \   00000084   F080BD08           POPEQ    {R4-R7,PC}
    602              {
    603                set_vertical();
   \   00000088   ........           BL       ??set_vertical
   \   0000008C   F080BDE8           POP      {R4-R7,PC}       ;; return
    604              }
    605            }
    606          };
    607          
    608          #pragma optimize = z 9

   \                                 In segment CODE, align 4, keep-with-next
    609          void DrawLine(int font,wchar_t *NAME,int CEN, int XPos, int YPos, int XPos2, int YPos2, int NormalColor, int borderColor, bool clean, int type)
    610          {
   \                     ??DrawLine:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   2C809DE5           LDR      R8,[SP, #+44]
   \   00000008   30509DE5           LDR      R5,[SP, #+48]
   \   0000000C   38609DE5           LDR      R6,[SP, #+56]
   \   00000010   00A0A0E1           MOV      R10,R0
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   0240A0E1           MOV      R4,R2
   \   0000001C   0390A0E1           MOV      R9,R3
    611            if (!NAME)
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   F18FBD08           POPEQ    {R0,R4-R11,PC}
    612              return;
    613            int width=0;
    614            int strID=TextID_Create(NAME,ENC_UCS2,TEXTID_ANY_LEN);
   \   00000028   FF20A0E3           MOV      R2,#+255
   \   0000002C   FF2C82E3           ORR      R2,R2,#0xFF00
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   5D0100EF           SWI      +349
   \   00000038   0070A0E1           MOV      R7,R0
    615            SetFont(font);
   \   0000003C   0A00A0E1           MOV      R0,R10
   \   00000040   F10100EF           SWI      +497
    616            if (CEN==2)
   \   00000044   020054E3           CMP      R4,#+2
   \   00000048   0500001A           BNE      ??DrawLine_1
    617            {
    618              XPos=-500;
   \   0000004C   F390E0E3           MVN      R9,#+243
   \   00000050   409FC9E3           BIC      R9,R9,#0x100
    619              width=Display_GetWidth(0);
    620              XPos2=width+500;
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   590200EF           SWI      +601
   \   0000005C   7D8F80E2           ADD      R8,R0,#+500
   \   00000060   050000EA           B        ??DrawLine_2
    621            }
    622            else if (CEN==0)
   \                     ??DrawLine_1:
   \   00000064   000054E3           CMP      R4,#+0
    623            {
    624              XPos2=XPos+500;
   \   00000068   7D8F8902           ADDEQ    R8,R9,#+500
   \   0000006C   0200000A           BEQ      ??DrawLine_2
    625            }
    626            else if (CEN==1)
   \   00000070   010054E3           CMP      R4,#+1
    627            {
    628              XPos=-500;
   \   00000074   F390E003           MVNEQ    R9,#+243
   \   00000078   409FC903           BICEQ    R9,R9,#0x100
    629            }
    630            if (type==0)
   \                     ??DrawLine_2:
   \   0000007C   28109DE5           LDR      R1,[SP, #+40]
   \   00000080   01A089E2           ADD      R10,R9,#+1
   \   00000084   011041E2           SUB      R1,R1,#+1
   \   00000088   00108DE5           STR      R1,[SP, #+0]
   \   0000008C   28009DE5           LDR      R0,[SP, #+40]
   \   00000090   01B080E2           ADD      R11,R0,#+1
   \   00000094   40009DE5           LDR      R0,[SP, #+64]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   7C00001A           BNE      ??DrawLine_3
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   01002DE9           PUSH     {R0}
   \   000000A8   01002DE9           PUSH     {R0}
   \   000000AC   0130A0E1           MOV      R3,R1
   \   000000B0   012049E2           SUB      R2,R9,#+1
   \   000000B4   0410A0E1           MOV      R1,R4
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   01002DE9           PUSH     {R0}
   \   000000C0   01002DE9           PUSH     {R0}
   \   000000C4   010045E2           SUB      R0,R5,#+1
   \   000000C8   01002DE9           PUSH     {R0}
   \   000000CC   010048E2           SUB      R0,R8,#+1
   \   000000D0   01002DE9           PUSH     {R0}
   \   000000D4   0700A0E1           MOV      R0,R7
    631            {
    632              DrawString(strID,CEN,XPos-1,YPos-1,XPos2-1,YPos2-1,0,0,borderColor,borderColor);
   \   000000D8   ED0100EF           SWI      +493
    633              DrawString(strID,CEN,XPos,YPos-1,XPos2,YPos2-1,0,0,borderColor,borderColor);
   \   000000DC   0600A0E1           MOV      R0,R6
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   01002DE9           PUSH     {R0}
   \   000000E8   0920A0E1           MOV      R2,R9
   \   000000EC   0410A0E1           MOV      R1,R4
   \   000000F0   0000A0E3           MOV      R0,#+0
   \   000000F4   01002DE9           PUSH     {R0}
   \   000000F8   01002DE9           PUSH     {R0}
   \   000000FC   010045E2           SUB      R0,R5,#+1
   \   00000100   01002DE9           PUSH     {R0}
   \   00000104   0800A0E1           MOV      R0,R8
   \   00000108   01002DE9           PUSH     {R0}
   \   0000010C   30309DE5           LDR      R3,[SP, #+48]
   \   00000110   0700A0E1           MOV      R0,R7
   \   00000114   ED0100EF           SWI      +493
   \   00000118   30D08DE2           ADD      SP,SP,#+48
    634              DrawString(strID,CEN,XPos+1,YPos-1,XPos2+1,YPos2-1,0,0,borderColor,borderColor);
   \   0000011C   0600A0E1           MOV      R0,R6
   \   00000120   01002DE9           PUSH     {R0}
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   0A20A0E1           MOV      R2,R10
   \   0000012C   0410A0E1           MOV      R1,R4
   \   00000130   0000A0E3           MOV      R0,#+0
   \   00000134   01002DE9           PUSH     {R0}
   \   00000138   01002DE9           PUSH     {R0}
   \   0000013C   010045E2           SUB      R0,R5,#+1
   \   00000140   01002DE9           PUSH     {R0}
   \   00000144   010088E2           ADD      R0,R8,#+1
   \   00000148   01002DE9           PUSH     {R0}
   \   0000014C   18309DE5           LDR      R3,[SP, #+24]
   \   00000150   0700A0E1           MOV      R0,R7
   \   00000154   ED0100EF           SWI      +493
    635              
    636              DrawString(strID,CEN,XPos-1,YPos,XPos2-1,YPos2,0,0,borderColor,borderColor);
   \   00000158   0600A0E1           MOV      R0,R6
   \   0000015C   01002DE9           PUSH     {R0}
   \   00000160   01002DE9           PUSH     {R0}
   \   00000164   012049E2           SUB      R2,R9,#+1
   \   00000168   0410A0E1           MOV      R1,R4
   \   0000016C   0000A0E3           MOV      R0,#+0
   \   00000170   01002DE9           PUSH     {R0}
   \   00000174   01002DE9           PUSH     {R0}
   \   00000178   0500A0E1           MOV      R0,R5
   \   0000017C   01002DE9           PUSH     {R0}
   \   00000180   010048E2           SUB      R0,R8,#+1
   \   00000184   01002DE9           PUSH     {R0}
   \   00000188   58309DE5           LDR      R3,[SP, #+88]
   \   0000018C   0700A0E1           MOV      R0,R7
   \   00000190   ED0100EF           SWI      +493
   \   00000194   30D08DE2           ADD      SP,SP,#+48
    637              DrawString(strID,CEN,XPos+1,YPos,XPos2+1,YPos2,0,0,borderColor,borderColor);
   \   00000198   0600A0E1           MOV      R0,R6
   \   0000019C   01002DE9           PUSH     {R0}
   \   000001A0   01002DE9           PUSH     {R0}
   \   000001A4   0A20A0E1           MOV      R2,R10
   \   000001A8   0410A0E1           MOV      R1,R4
   \   000001AC   0000A0E3           MOV      R0,#+0
   \   000001B0   01002DE9           PUSH     {R0}
   \   000001B4   01002DE9           PUSH     {R0}
   \   000001B8   0500A0E1           MOV      R0,R5
   \   000001BC   01002DE9           PUSH     {R0}
   \   000001C0   010088E2           ADD      R0,R8,#+1
   \   000001C4   01002DE9           PUSH     {R0}
   \   000001C8   40309DE5           LDR      R3,[SP, #+64]
   \   000001CC   0700A0E1           MOV      R0,R7
   \   000001D0   ED0100EF           SWI      +493
    638              
    639              DrawString(strID,CEN,XPos-1,YPos+1,XPos2-1,YPos2+1,0,0,borderColor,borderColor);
   \   000001D4   0600A0E1           MOV      R0,R6
   \   000001D8   01002DE9           PUSH     {R0}
   \   000001DC   01002DE9           PUSH     {R0}
   \   000001E0   0B30A0E1           MOV      R3,R11
   \   000001E4   012049E2           SUB      R2,R9,#+1
   \   000001E8   0410A0E1           MOV      R1,R4
   \   000001EC   0000A0E3           MOV      R0,#+0
   \   000001F0   01002DE9           PUSH     {R0}
   \   000001F4   01002DE9           PUSH     {R0}
   \   000001F8   010085E2           ADD      R0,R5,#+1
   \   000001FC   01002DE9           PUSH     {R0}
   \   00000200   010048E2           SUB      R0,R8,#+1
   \   00000204   01002DE9           PUSH     {R0}
   \   00000208   0700A0E1           MOV      R0,R7
   \   0000020C   ED0100EF           SWI      +493
   \   00000210   30D08DE2           ADD      SP,SP,#+48
    640              DrawString(strID,CEN,XPos,YPos+1,XPos2,YPos2+1,0,0,borderColor,borderColor);
   \   00000214   0600A0E1           MOV      R0,R6
   \   00000218   01002DE9           PUSH     {R0}
   \   0000021C   01002DE9           PUSH     {R0}
   \   00000220   0B30A0E1           MOV      R3,R11
   \   00000224   0920A0E1           MOV      R2,R9
   \   00000228   0410A0E1           MOV      R1,R4
   \   0000022C   0000A0E3           MOV      R0,#+0
   \   00000230   01002DE9           PUSH     {R0}
   \   00000234   01002DE9           PUSH     {R0}
   \   00000238   010085E2           ADD      R0,R5,#+1
   \   0000023C   01002DE9           PUSH     {R0}
   \   00000240   0800A0E1           MOV      R0,R8
   \   00000244   01002DE9           PUSH     {R0}
   \   00000248   0700A0E1           MOV      R0,R7
   \   0000024C   ED0100EF           SWI      +493
    641              DrawString(strID,CEN,XPos+1,YPos+1,XPos2+1,YPos2+1,0,0,borderColor,borderColor);
   \   00000250   0600A0E1           MOV      R0,R6
   \   00000254   01002DE9           PUSH     {R0}
   \   00000258   40002DE9           PUSH     {R6}
   \   0000025C   0B30A0E1           MOV      R3,R11
   \   00000260   0000A0E3           MOV      R0,#+0
   \   00000264   01002DE9           PUSH     {R0}
   \   00000268   01002DE9           PUSH     {R0}
   \   0000026C   0A20A0E1           MOV      R2,R10
   \   00000270   010085E2           ADD      R0,R5,#+1
   \   00000274   01002DE9           PUSH     {R0}
   \   00000278   010088E2           ADD      R0,R8,#+1
   \   0000027C   01002DE9           PUSH     {R0}
   \                     ??DrawLine_4:
   \   00000280   0410A0E1           MOV      R1,R4
   \   00000284   0700A0E1           MOV      R0,R7
   \   00000288   ED0100EF           SWI      +493
   \   0000028C   30D08DE2           ADD      SP,SP,#+48
   \   00000290   4E0000EA           B        ??DrawLine_5
    642            }
    643            else if (type==1)
   \                     ??DrawLine_3:
   \   00000294   010050E3           CMP      R0,#+1
   \   00000298   3A00001A           BNE      ??DrawLine_6
    644            {
    645              DrawString(strID,CEN,XPos+1,YPos,XPos2,YPos2,0,0,borderColor,borderColor);
   \   0000029C   0600A0E1           MOV      R0,R6
   \   000002A0   01002DE9           PUSH     {R0}
   \   000002A4   01002DE9           PUSH     {R0}
   \   000002A8   0A20A0E1           MOV      R2,R10
   \   000002AC   0410A0E1           MOV      R1,R4
   \   000002B0   0000A0E3           MOV      R0,#+0
   \   000002B4   01002DE9           PUSH     {R0}
   \   000002B8   01002DE9           PUSH     {R0}
   \   000002BC   0500A0E1           MOV      R0,R5
   \   000002C0   01002DE9           PUSH     {R0}
   \   000002C4   0800A0E1           MOV      R0,R8
   \   000002C8   01002DE9           PUSH     {R0}
   \   000002CC   40309DE5           LDR      R3,[SP, #+64]
   \   000002D0   0700A0E1           MOV      R0,R7
   \   000002D4   ED0100EF           SWI      +493
    646              DrawString(strID,CEN,XPos,YPos+1,XPos2,YPos2,0,0,borderColor,borderColor);
   \   000002D8   0600A0E1           MOV      R0,R6
   \   000002DC   01002DE9           PUSH     {R0}
   \   000002E0   01002DE9           PUSH     {R0}
   \   000002E4   0B30A0E1           MOV      R3,R11
   \   000002E8   0920A0E1           MOV      R2,R9
   \   000002EC   0410A0E1           MOV      R1,R4
   \   000002F0   0000A0E3           MOV      R0,#+0
   \   000002F4   01002DE9           PUSH     {R0}
   \   000002F8   01002DE9           PUSH     {R0}
   \   000002FC   0500A0E1           MOV      R0,R5
   \   00000300   01002DE9           PUSH     {R0}
   \   00000304   0800A0E1           MOV      R0,R8
   \   00000308   01002DE9           PUSH     {R0}
   \   0000030C   0700A0E1           MOV      R0,R7
   \   00000310   ED0100EF           SWI      +493
   \   00000314   30D08DE2           ADD      SP,SP,#+48
    647              DrawString(strID,CEN,XPos-1,YPos,XPos2,YPos2,0,0,borderColor,borderColor);
   \   00000318   0600A0E1           MOV      R0,R6
   \   0000031C   01002DE9           PUSH     {R0}
   \   00000320   01002DE9           PUSH     {R0}
   \   00000324   012049E2           SUB      R2,R9,#+1
   \   00000328   0410A0E1           MOV      R1,R4
   \   0000032C   0000A0E3           MOV      R0,#+0
   \   00000330   01002DE9           PUSH     {R0}
   \   00000334   01002DE9           PUSH     {R0}
   \   00000338   0500A0E1           MOV      R0,R5
   \   0000033C   01002DE9           PUSH     {R0}
   \   00000340   0800A0E1           MOV      R0,R8
   \   00000344   01002DE9           PUSH     {R0}
   \   00000348   40309DE5           LDR      R3,[SP, #+64]
   \   0000034C   0700A0E1           MOV      R0,R7
   \   00000350   ED0100EF           SWI      +493
    648              DrawString(strID,CEN,XPos,YPos-1,XPos2,YPos2,0,0,borderColor,borderColor);
   \   00000354   0600A0E1           MOV      R0,R6
   \   00000358   01002DE9           PUSH     {R0}
   \   0000035C   40002DE9           PUSH     {R6}
   \   00000360   0920A0E1           MOV      R2,R9
   \   00000364   0000A0E3           MOV      R0,#+0
   \   00000368   01002DE9           PUSH     {R0}
   \   0000036C   01002DE9           PUSH     {R0}
   \   00000370   0500A0E1           MOV      R0,R5
   \   00000374   01002DE9           PUSH     {R0}
   \   00000378   0800A0E1           MOV      R0,R8
   \   0000037C   01002DE9           PUSH     {R0}
   \   00000380   30309DE5           LDR      R3,[SP, #+48]
   \   00000384   BDFFFFEA           B        ??DrawLine_4
    649            }
    650            else if (type==2)
   \                     ??DrawLine_6:
   \   00000388   020050E3           CMP      R0,#+2
   \   0000038C   0F00001A           BNE      ??DrawLine_5
    651            {
    652              DrawString(strID,CEN,XPos+1,YPos+1,XPos2+1,YPos2+1,0,0,borderColor,borderColor);
   \   00000390   0600A0E1           MOV      R0,R6
   \   00000394   01002DE9           PUSH     {R0}
   \   00000398   40002DE9           PUSH     {R6}
   \   0000039C   0B30A0E1           MOV      R3,R11
   \   000003A0   0000A0E3           MOV      R0,#+0
   \   000003A4   01002DE9           PUSH     {R0}
   \   000003A8   01002DE9           PUSH     {R0}
   \   000003AC   0A20A0E1           MOV      R2,R10
   \   000003B0   0410A0E1           MOV      R1,R4
   \   000003B4   010085E2           ADD      R0,R5,#+1
   \   000003B8   01002DE9           PUSH     {R0}
   \   000003BC   010088E2           ADD      R0,R8,#+1
   \   000003C0   01002DE9           PUSH     {R0}
   \   000003C4   0700A0E1           MOV      R0,R7
   \   000003C8   ED0100EF           SWI      +493
   \   000003CC   18D08DE2           ADD      SP,SP,#+24
    653            }
    654            
    655            DrawString(strID,CEN,XPos,YPos,XPos2,YPos2,0,1,NormalColor,NormalColor);
   \                     ??DrawLine_5:
   \   000003D0   34009DE5           LDR      R0,[SP, #+52]
   \   000003D4   0920A0E1           MOV      R2,R9
   \   000003D8   01002DE9           PUSH     {R0}
   \   000003DC   01002DE9           PUSH     {R0}
   \   000003E0   0410A0E1           MOV      R1,R4
   \   000003E4   0100A0E3           MOV      R0,#+1
   \   000003E8   01002DE9           PUSH     {R0}
   \   000003EC   0000A0E3           MOV      R0,#+0
   \   000003F0   01002DE9           PUSH     {R0}
   \   000003F4   20002DE9           PUSH     {R5}
   \   000003F8   00012DE9           PUSH     {R8}
   \   000003FC   40309DE5           LDR      R3,[SP, #+64]
   \   00000400   0700A0E1           MOV      R0,R7
   \   00000404   ED0100EF           SWI      +493
    656            
    657            if (clean)
   \   00000408   5400DDE5           LDRB     R0,[SP, #+84]
   \   0000040C   18D08DE2           ADD      SP,SP,#+24
   \   00000410   000050E3           CMP      R0,#+0
   \   00000414   F18FBD08           POPEQ    {R0,R4-R11,PC}
    658              TextID_Destroy(strID);
   \   00000418   0700A0E1           MOV      R0,R7
   \   0000041C   610100EF           SWI      +353
   \   00000420   F18FBDE8           POP      {R0,R4-R11,PC}   ;; return
    659          };
    660          
    661          #pragma optimize = z 9

   \                                 In segment CODE, align 4, keep-with-next
    662          void DrawLine2(int font, int strID,int CEN, int XPos, int YPos, int XPos2, int YPos2, int NormalColor, int borderColor, int clean, int type)
    663          {
   \                     ??DrawLine2:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   2C709DE5           LDR      R7,[SP, #+44]
   \   00000008   30809DE5           LDR      R8,[SP, #+48]
   \   0000000C   38909DE5           LDR      R9,[SP, #+56]
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   0360A0E1           MOV      R6,R3
    664            int width=0;
    665            SetFont(font);
   \   0000001C   F10100EF           SWI      +497
    666              if (CEN==2)
   \   00000020   020055E3           CMP      R5,#+2
   \   00000024   0500001A           BNE      ??DrawLine2_1
    667            {
    668              XPos=-500;
   \   00000028   F360E0E3           MVN      R6,#+243
   \   0000002C   406FC6E3           BIC      R6,R6,#0x100
    669              width=Display_GetWidth(0);
    670              XPos2=width+500;
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   590200EF           SWI      +601
   \   00000038   7D7F80E2           ADD      R7,R0,#+500
   \   0000003C   050000EA           B        ??DrawLine2_2
    671            }
    672            else if (CEN==0)
   \                     ??DrawLine2_1:
   \   00000040   000055E3           CMP      R5,#+0
    673            {
    674              XPos2=XPos+500;
   \   00000044   7D7F8602           ADDEQ    R7,R6,#+500
   \   00000048   0200000A           BEQ      ??DrawLine2_2
    675            }
    676            else if (CEN==1)
   \   0000004C   010055E3           CMP      R5,#+1
    677            {
    678              XPos=-500;
   \   00000050   F360E003           MVNEQ    R6,#+243
   \   00000054   406FC603           BICEQ    R6,R6,#0x100
    679            }
    680            if (type==0)
   \                     ??DrawLine2_2:
   \   00000058   28109DE5           LDR      R1,[SP, #+40]
   \   0000005C   01A086E2           ADD      R10,R6,#+1
   \   00000060   011041E2           SUB      R1,R1,#+1
   \   00000064   00108DE5           STR      R1,[SP, #+0]
   \   00000068   28009DE5           LDR      R0,[SP, #+40]
   \   0000006C   01B080E2           ADD      R11,R0,#+1
   \   00000070   40009DE5           LDR      R0,[SP, #+64]
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   7C00001A           BNE      ??DrawLine2_3
   \   0000007C   0900A0E1           MOV      R0,R9
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   0130A0E1           MOV      R3,R1
   \   0000008C   012046E2           SUB      R2,R6,#+1
   \   00000090   0510A0E1           MOV      R1,R5
   \   00000094   0000A0E3           MOV      R0,#+0
   \   00000098   01002DE9           PUSH     {R0}
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   010048E2           SUB      R0,R8,#+1
   \   000000A4   01002DE9           PUSH     {R0}
   \   000000A8   010047E2           SUB      R0,R7,#+1
   \   000000AC   01002DE9           PUSH     {R0}
   \   000000B0   0400A0E1           MOV      R0,R4
    681            {
    682              DrawString(strID,CEN,XPos-1,YPos-1,XPos2-1,YPos2-1,0,0,borderColor,borderColor);
   \   000000B4   ED0100EF           SWI      +493
    683              DrawString(strID,CEN,XPos,YPos-1,XPos2,YPos2-1,0,0,borderColor,borderColor);
   \   000000B8   0900A0E1           MOV      R0,R9
   \   000000BC   01002DE9           PUSH     {R0}
   \   000000C0   01002DE9           PUSH     {R0}
   \   000000C4   0620A0E1           MOV      R2,R6
   \   000000C8   0510A0E1           MOV      R1,R5
   \   000000CC   0000A0E3           MOV      R0,#+0
   \   000000D0   01002DE9           PUSH     {R0}
   \   000000D4   01002DE9           PUSH     {R0}
   \   000000D8   010048E2           SUB      R0,R8,#+1
   \   000000DC   01002DE9           PUSH     {R0}
   \   000000E0   0700A0E1           MOV      R0,R7
   \   000000E4   01002DE9           PUSH     {R0}
   \   000000E8   30309DE5           LDR      R3,[SP, #+48]
   \   000000EC   0400A0E1           MOV      R0,R4
   \   000000F0   ED0100EF           SWI      +493
   \   000000F4   30D08DE2           ADD      SP,SP,#+48
    684              DrawString(strID,CEN,XPos+1,YPos-1,XPos2+1,YPos2-1,0,0,borderColor,borderColor);
   \   000000F8   0900A0E1           MOV      R0,R9
   \   000000FC   01002DE9           PUSH     {R0}
   \   00000100   01002DE9           PUSH     {R0}
   \   00000104   0A20A0E1           MOV      R2,R10
   \   00000108   0510A0E1           MOV      R1,R5
   \   0000010C   0000A0E3           MOV      R0,#+0
   \   00000110   01002DE9           PUSH     {R0}
   \   00000114   01002DE9           PUSH     {R0}
   \   00000118   010048E2           SUB      R0,R8,#+1
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   010087E2           ADD      R0,R7,#+1
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   18309DE5           LDR      R3,[SP, #+24]
   \   0000012C   0400A0E1           MOV      R0,R4
   \   00000130   ED0100EF           SWI      +493
    685              
    686              DrawString(strID,CEN,XPos-1,YPos,XPos2-1,YPos2,0,0,borderColor,borderColor);
   \   00000134   0900A0E1           MOV      R0,R9
   \   00000138   01002DE9           PUSH     {R0}
   \   0000013C   01002DE9           PUSH     {R0}
   \   00000140   012046E2           SUB      R2,R6,#+1
   \   00000144   0510A0E1           MOV      R1,R5
   \   00000148   0000A0E3           MOV      R0,#+0
   \   0000014C   01002DE9           PUSH     {R0}
   \   00000150   01002DE9           PUSH     {R0}
   \   00000154   0800A0E1           MOV      R0,R8
   \   00000158   01002DE9           PUSH     {R0}
   \   0000015C   010047E2           SUB      R0,R7,#+1
   \   00000160   01002DE9           PUSH     {R0}
   \   00000164   58309DE5           LDR      R3,[SP, #+88]
   \   00000168   0400A0E1           MOV      R0,R4
   \   0000016C   ED0100EF           SWI      +493
   \   00000170   30D08DE2           ADD      SP,SP,#+48
    687              DrawString(strID,CEN,XPos+1,YPos,XPos2+1,YPos2,0,0,borderColor,borderColor);
   \   00000174   0900A0E1           MOV      R0,R9
   \   00000178   01002DE9           PUSH     {R0}
   \   0000017C   01002DE9           PUSH     {R0}
   \   00000180   0A20A0E1           MOV      R2,R10
   \   00000184   0510A0E1           MOV      R1,R5
   \   00000188   0000A0E3           MOV      R0,#+0
   \   0000018C   01002DE9           PUSH     {R0}
   \   00000190   01002DE9           PUSH     {R0}
   \   00000194   0800A0E1           MOV      R0,R8
   \   00000198   01002DE9           PUSH     {R0}
   \   0000019C   010087E2           ADD      R0,R7,#+1
   \   000001A0   01002DE9           PUSH     {R0}
   \   000001A4   40309DE5           LDR      R3,[SP, #+64]
   \   000001A8   0400A0E1           MOV      R0,R4
   \   000001AC   ED0100EF           SWI      +493
    688              
    689              DrawString(strID,CEN,XPos-1,YPos+1,XPos2-1,YPos2+1,0,0,borderColor,borderColor);
   \   000001B0   0900A0E1           MOV      R0,R9
   \   000001B4   01002DE9           PUSH     {R0}
   \   000001B8   01002DE9           PUSH     {R0}
   \   000001BC   0B30A0E1           MOV      R3,R11
   \   000001C0   012046E2           SUB      R2,R6,#+1
   \   000001C4   0510A0E1           MOV      R1,R5
   \   000001C8   0000A0E3           MOV      R0,#+0
   \   000001CC   01002DE9           PUSH     {R0}
   \   000001D0   01002DE9           PUSH     {R0}
   \   000001D4   010088E2           ADD      R0,R8,#+1
   \   000001D8   01002DE9           PUSH     {R0}
   \   000001DC   010047E2           SUB      R0,R7,#+1
   \   000001E0   01002DE9           PUSH     {R0}
   \   000001E4   0400A0E1           MOV      R0,R4
   \   000001E8   ED0100EF           SWI      +493
   \   000001EC   30D08DE2           ADD      SP,SP,#+48
    690              DrawString(strID,CEN,XPos,YPos+1,XPos2,YPos2+1,0,0,borderColor,borderColor);
   \   000001F0   0900A0E1           MOV      R0,R9
   \   000001F4   01002DE9           PUSH     {R0}
   \   000001F8   01002DE9           PUSH     {R0}
   \   000001FC   0B30A0E1           MOV      R3,R11
   \   00000200   0620A0E1           MOV      R2,R6
   \   00000204   0510A0E1           MOV      R1,R5
   \   00000208   0000A0E3           MOV      R0,#+0
   \   0000020C   01002DE9           PUSH     {R0}
   \   00000210   01002DE9           PUSH     {R0}
   \   00000214   010088E2           ADD      R0,R8,#+1
   \   00000218   01002DE9           PUSH     {R0}
   \   0000021C   0700A0E1           MOV      R0,R7
   \   00000220   01002DE9           PUSH     {R0}
   \   00000224   0400A0E1           MOV      R0,R4
   \   00000228   ED0100EF           SWI      +493
    691              DrawString(strID,CEN,XPos+1,YPos+1,XPos2+1,YPos2+1,0,0,borderColor,borderColor);
   \   0000022C   0900A0E1           MOV      R0,R9
   \   00000230   01002DE9           PUSH     {R0}
   \   00000234   00022DE9           PUSH     {R9}
   \   00000238   0B30A0E1           MOV      R3,R11
   \   0000023C   0000A0E3           MOV      R0,#+0
   \   00000240   01002DE9           PUSH     {R0}
   \   00000244   01002DE9           PUSH     {R0}
   \   00000248   0A20A0E1           MOV      R2,R10
   \   0000024C   010088E2           ADD      R0,R8,#+1
   \   00000250   01002DE9           PUSH     {R0}
   \   00000254   010087E2           ADD      R0,R7,#+1
   \   00000258   01002DE9           PUSH     {R0}
   \                     ??DrawLine2_4:
   \   0000025C   0510A0E1           MOV      R1,R5
   \   00000260   0400A0E1           MOV      R0,R4
   \   00000264   ED0100EF           SWI      +493
   \   00000268   30D08DE2           ADD      SP,SP,#+48
   \   0000026C   4E0000EA           B        ??DrawLine2_5
    692            }
    693            else if (type==1)
   \                     ??DrawLine2_3:
   \   00000270   010050E3           CMP      R0,#+1
   \   00000274   3A00001A           BNE      ??DrawLine2_6
    694            {
    695              DrawString(strID,CEN,XPos+1,YPos,XPos2,YPos2,0,0,borderColor,borderColor);
   \   00000278   0900A0E1           MOV      R0,R9
   \   0000027C   01002DE9           PUSH     {R0}
   \   00000280   01002DE9           PUSH     {R0}
   \   00000284   0A20A0E1           MOV      R2,R10
   \   00000288   0510A0E1           MOV      R1,R5
   \   0000028C   0000A0E3           MOV      R0,#+0
   \   00000290   01002DE9           PUSH     {R0}
   \   00000294   01002DE9           PUSH     {R0}
   \   00000298   0800A0E1           MOV      R0,R8
   \   0000029C   01002DE9           PUSH     {R0}
   \   000002A0   0700A0E1           MOV      R0,R7
   \   000002A4   01002DE9           PUSH     {R0}
   \   000002A8   40309DE5           LDR      R3,[SP, #+64]
   \   000002AC   0400A0E1           MOV      R0,R4
   \   000002B0   ED0100EF           SWI      +493
    696              DrawString(strID,CEN,XPos,YPos+1,XPos2,YPos2,0,0,borderColor,borderColor);
   \   000002B4   0900A0E1           MOV      R0,R9
   \   000002B8   01002DE9           PUSH     {R0}
   \   000002BC   01002DE9           PUSH     {R0}
   \   000002C0   0B30A0E1           MOV      R3,R11
   \   000002C4   0620A0E1           MOV      R2,R6
   \   000002C8   0510A0E1           MOV      R1,R5
   \   000002CC   0000A0E3           MOV      R0,#+0
   \   000002D0   01002DE9           PUSH     {R0}
   \   000002D4   01002DE9           PUSH     {R0}
   \   000002D8   0800A0E1           MOV      R0,R8
   \   000002DC   01002DE9           PUSH     {R0}
   \   000002E0   0700A0E1           MOV      R0,R7
   \   000002E4   01002DE9           PUSH     {R0}
   \   000002E8   0400A0E1           MOV      R0,R4
   \   000002EC   ED0100EF           SWI      +493
   \   000002F0   30D08DE2           ADD      SP,SP,#+48
    697              DrawString(strID,CEN,XPos-1,YPos,XPos2,YPos2,0,0,borderColor,borderColor);
   \   000002F4   0900A0E1           MOV      R0,R9
   \   000002F8   01002DE9           PUSH     {R0}
   \   000002FC   01002DE9           PUSH     {R0}
   \   00000300   012046E2           SUB      R2,R6,#+1
   \   00000304   0510A0E1           MOV      R1,R5
   \   00000308   0000A0E3           MOV      R0,#+0
   \   0000030C   01002DE9           PUSH     {R0}
   \   00000310   01002DE9           PUSH     {R0}
   \   00000314   0800A0E1           MOV      R0,R8
   \   00000318   01002DE9           PUSH     {R0}
   \   0000031C   0700A0E1           MOV      R0,R7
   \   00000320   01002DE9           PUSH     {R0}
   \   00000324   40309DE5           LDR      R3,[SP, #+64]
   \   00000328   0400A0E1           MOV      R0,R4
   \   0000032C   ED0100EF           SWI      +493
    698              DrawString(strID,CEN,XPos,YPos-1,XPos2,YPos2,0,0,borderColor,borderColor);
   \   00000330   0900A0E1           MOV      R0,R9
   \   00000334   01002DE9           PUSH     {R0}
   \   00000338   00022DE9           PUSH     {R9}
   \   0000033C   0620A0E1           MOV      R2,R6
   \   00000340   0000A0E3           MOV      R0,#+0
   \   00000344   01002DE9           PUSH     {R0}
   \   00000348   01002DE9           PUSH     {R0}
   \   0000034C   0800A0E1           MOV      R0,R8
   \   00000350   01002DE9           PUSH     {R0}
   \   00000354   0700A0E1           MOV      R0,R7
   \   00000358   01002DE9           PUSH     {R0}
   \   0000035C   30309DE5           LDR      R3,[SP, #+48]
   \   00000360   BDFFFFEA           B        ??DrawLine2_4
    699            }
    700            else if (type==2)
   \                     ??DrawLine2_6:
   \   00000364   020050E3           CMP      R0,#+2
   \   00000368   0F00001A           BNE      ??DrawLine2_5
    701            {
    702              DrawString(strID,CEN,XPos+1,YPos+1,XPos2+1,YPos2+1,0,0,borderColor,borderColor);
   \   0000036C   0900A0E1           MOV      R0,R9
   \   00000370   01002DE9           PUSH     {R0}
   \   00000374   00022DE9           PUSH     {R9}
   \   00000378   0B30A0E1           MOV      R3,R11
   \   0000037C   0000A0E3           MOV      R0,#+0
   \   00000380   01002DE9           PUSH     {R0}
   \   00000384   01002DE9           PUSH     {R0}
   \   00000388   0A20A0E1           MOV      R2,R10
   \   0000038C   0510A0E1           MOV      R1,R5
   \   00000390   010088E2           ADD      R0,R8,#+1
   \   00000394   01002DE9           PUSH     {R0}
   \   00000398   010087E2           ADD      R0,R7,#+1
   \   0000039C   01002DE9           PUSH     {R0}
   \   000003A0   0400A0E1           MOV      R0,R4
   \   000003A4   ED0100EF           SWI      +493
   \   000003A8   18D08DE2           ADD      SP,SP,#+24
    703            }
    704            DrawString(strID,CEN,XPos,YPos,XPos2,YPos2,0,0,NormalColor,NormalColor);
   \                     ??DrawLine2_5:
   \   000003AC   34009DE5           LDR      R0,[SP, #+52]
   \   000003B0   0620A0E1           MOV      R2,R6
   \   000003B4   01002DE9           PUSH     {R0}
   \   000003B8   01002DE9           PUSH     {R0}
   \   000003BC   0510A0E1           MOV      R1,R5
   \   000003C0   0000A0E3           MOV      R0,#+0
   \   000003C4   01002DE9           PUSH     {R0}
   \   000003C8   01002DE9           PUSH     {R0}
   \   000003CC   00012DE9           PUSH     {R8}
   \   000003D0   80002DE9           PUSH     {R7}
   \   000003D4   40309DE5           LDR      R3,[SP, #+64]
   \   000003D8   0400A0E1           MOV      R0,R4
   \   000003DC   ED0100EF           SWI      +493
    705            
    706            if (clean)
   \   000003E0   54009DE5           LDR      R0,[SP, #+84]
   \   000003E4   18D08DE2           ADD      SP,SP,#+24
   \   000003E8   000050E3           CMP      R0,#+0
   \   000003EC   F18FBD08           POPEQ    {R0,R4-R11,PC}
    707              TextID_Destroy(strID);
   \   000003F0   0400A0E1           MOV      R0,R4
   \   000003F4   610100EF           SWI      +353
    708          };
   \   000003F8   F18FBDE8           POP      {R0,R4-R11,PC}   ;; return
    709          
    710          #pragma optimize = z 9

   \                                 In segment CODE, align 4, keep-with-next
    711          void DrawProgress(int bColor, int cColor, int oColor, RECT rect, int progress, int time, signed int PlusY, int type)
    712          {
   \                     ??DrawProgress:
   \   00000000   08002DE9           PUSH     {R3}
   \   00000004   F64F2DE9           PUSH     {R1,R2,R4-R11,LR}
   \   00000008   08D04DE2           SUB      SP,SP,#+8
    713            // Îáû÷íûé ïðîãðåññáàð
    714            if (type)
   \   0000000C   BA13DDE1           LDRH     R1,[SP, #+58]
   \   00000010   44409DE5           LDR      R4,[SP, #+68]
   \   00000014   B653DDE1           LDRH     R5,[SP, #+54]
   \   00000018   B463DDE1           LDRH     R6,[SP, #+52]
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   B813DDE1           LDRH     R1,[SP, #+56]
   \   00000024   0070A0E1           MOV      R7,R0
   \   00000028   48009DE5           LDR      R0,[SP, #+72]
   \   0000002C   04108DE5           STR      R1,[SP, #+4]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   2A00000A           BEQ      ??DrawProgress_1
    715            {
    716              DrawRect(rect.x1+1,rect.y1+PlusY,rect.x2-1,rect.y1+PlusY+1, bColor, bColor);
   \   00000038   0700A0E1           MOV      R0,R7
   \   0000003C   01002DE9           PUSH     {R0}
   \   00000040   01002DE9           PUSH     {R0}
   \   00000044   018045E2           SUB      R8,R5,#+1
   \   00000048   019084E0           ADD      R9,R4,R1
   \   0000004C   01A086E2           ADD      R10,R6,#+1
   \   00000050   013089E2           ADD      R3,R9,#+1
   \   00000054   0820A0E1           MOV      R2,R8
   \   00000058   0910A0E1           MOV      R1,R9
   \   0000005C   0A00A0E1           MOV      R0,R10
   \   00000060   EC0100EF           SWI      +492
    717              DrawRect(rect.x2-1,rect.y1+PlusY,rect.x2,rect.y2+PlusY, bColor, bColor);
   \   00000064   08009DE5           LDR      R0,[SP, #+8]
   \   00000068   0520A0E1           MOV      R2,R5
   \   0000006C   00B084E0           ADD      R11,R4,R0
   \   00000070   0700A0E1           MOV      R0,R7
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   01002DE9           PUSH     {R0}
   \   0000007C   0B30A0E1           MOV      R3,R11
   \   00000080   0910A0E1           MOV      R1,R9
   \   00000084   0800A0E1           MOV      R0,R8
   \   00000088   EC0100EF           SWI      +492
    718              
    719              DrawRect(rect.x1,rect.y1+PlusY,rect.x1+1,rect.y2+PlusY, bColor, bColor);
   \   0000008C   0700A0E1           MOV      R0,R7
   \   00000090   01002DE9           PUSH     {R0}
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   0B30A0E1           MOV      R3,R11
   \   0000009C   0A20A0E1           MOV      R2,R10
   \   000000A0   0910A0E1           MOV      R1,R9
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   EC0100EF           SWI      +492
    720              DrawRect(rect.x1+1,rect.y2+PlusY-1,rect.x2-1,rect.y2+PlusY, bColor, bColor);
   \   000000AC   0700A0E1           MOV      R0,R7
   \   000000B0   01002DE9           PUSH     {R0}
   \   000000B4   80002DE9           PUSH     {R7}
   \   000000B8   0B30A0E1           MOV      R3,R11
   \   000000BC   0820A0E1           MOV      R2,R8
   \   000000C0   01104BE2           SUB      R1,R11,#+1
   \   000000C4   0A00A0E1           MOV      R0,R10
   \   000000C8   EC0100EF           SWI      +492
   \   000000CC   0130A0E3           MOV      R3,#+1
   \   000000D0   0120A0E3           MOV      R2,#+1
   \   000000D4   0210A0E1           MOV      R1,R2
   \   000000D8   0100A0E1           MOV      R0,R1
   \   000000DC   20D08DE2           ADD      SP,SP,#+32
   \   000000E0   020000EA           B        ??DrawProgress_2
    721            }
    722            DrawRect(rect.x1+ (type ? 1 : 0),rect.y1+(type ? 1 : 0)+PlusY,rect.x2-(type ? 1 : 0),rect.y2-(type ? 1 : 0)+PlusY, oColor, oColor);
   \                     ??DrawProgress_1:
   \   000000E4   0030A0E3           MOV      R3,#+0
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   0210A0E1           MOV      R1,R2
   \                     ??DrawProgress_2:
   \   000000F0   0C709DE5           LDR      R7,[SP, #+12]
   \   000000F4   022045E0           SUB      R2,R5,R2
   \   000000F8   80002DE9           PUSH     {R7}
   \   000000FC   80002DE9           PUSH     {R7}
   \   00000100   08709DE5           LDR      R7,[SP, #+8]
   \   00000104   060080E0           ADD      R0,R0,R6
   \   00000108   033047E0           SUB      R3,R7,R3
   \   0000010C   0C709DE5           LDR      R7,[SP, #+12]
   \   00000110   033084E0           ADD      R3,R4,R3
   \   00000114   071081E0           ADD      R1,R1,R7
   \   00000118   011084E0           ADD      R1,R4,R1
   \   0000011C   EC0100EF           SWI      +492
    723            float Length;
    724            float CurLength=(float)progress;
    725            float inLength=(float)time;
    726            float Procent=(float)CurLength/inLength;
    727            float size=(float)((float)rect.x2-(float)rect.x1);
    728            float start = (float)rect.x1;
    729            Length = start+((Procent)*size);
   \   00000120   BC03DDE1           LDRH     R0,[SP, #+60]
   \   00000124   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000128   0070A0E1           MOV      R7,R0
   \   0000012C   0500A0E1           MOV      R0,R5
   \   00000130   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000134   0710A0E1           MOV      R1,R7
   \   00000138   ........           _BLF     __fSub,??__fSub??rA
   \   0000013C   0050A0E1           MOV      R5,R0
   \   00000140   44009DE5           LDR      R0,[SP, #+68]
   \   00000144   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   00000148   0080A0E1           MOV      R8,R0
   \   0000014C   48009DE5           LDR      R0,[SP, #+72]
   \   00000150   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   00000154   0010A0E1           MOV      R1,R0
   \   00000158   0800A0E1           MOV      R0,R8
   \   0000015C   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000160   0510A0E1           MOV      R1,R5
   \   00000164   ........           _BLF     __fMul,??__fMul??rA
   \   00000168   0710A0E1           MOV      R1,R7
   \   0000016C   ........           _BLF     __fAdd,??__fAdd??rA
    730            DrawRect(rect.x1+(type ? 1 : 0), rect.y1+(type ? 1 : 0)+PlusY,(int)Length - (type ? 1 : 0),rect.y2-(type ? 1 : 0)+PlusY,cColor,cColor);
   \   00000170   50109DE5           LDR      R1,[SP, #+80]
   \   00000174   08D08DE2           ADD      SP,SP,#+8
   \   00000178   08209DE5           LDR      R2,[SP, #+8]
   \   0000017C   000051E3           CMP      R1,#+0
   \   00000180   04002DE9           PUSH     {R2}
   \   00000184   04002DE9           PUSH     {R2}
   \   00000188   08209DE5           LDR      R2,[SP, #+8]
   \   0000018C   0110A013           MOVNE    R1,#+1
   \   00000190   0010A003           MOVEQ    R1,#+0
   \   00000194   0150A0E1           MOV      R5,R1
   \   00000198   0170A0E1           MOV      R7,R1
   \   0000019C   0180A0E1           MOV      R8,R1
   \   000001A0   011042E0           SUB      R1,R2,R1
   \   000001A4   019084E0           ADD      R9,R4,R1
   \   000001A8   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   000001AC   052040E0           SUB      R2,R0,R5
   \   000001B0   0C009DE5           LDR      R0,[SP, #+12]
   \   000001B4   0930A0E1           MOV      R3,R9
   \   000001B8   000087E0           ADD      R0,R7,R0
   \   000001BC   001084E0           ADD      R1,R4,R0
   \   000001C0   060088E0           ADD      R0,R8,R6
   \   000001C4   EC0100EF           SWI      +492
    731          };
   \   000001C8   18D08DE2           ADD      SP,SP,#+24
   \   000001CC   F04FBDE8           POP      {R4-R11,LR}
   \   000001D0   04D08DE2           ADD      SP,SP,#+4
   \   000001D4   1EFF2FE1           BX       LR               ;; return
    732          

   \                                 In segment CODE, align 4, keep-with-next
    733          int isVolCtrl(BOOK *bk)
    734          {
   \                     ??isVolCtrl:
   \   00000000   00402DE9           PUSH     {LR}
    735            if (IsVolumeControllerBook(bk))
   \   00000004   C90100EF           SWI      +457
   \   00000008   000050E3           CMP      R0,#+0
    736              return 1;
   \   0000000C   0100A013           MOVNE    R0,#+1
    737            return 0;
   \   00000010   0080BDE8           POP      {PC}             ;; return
    738          };

   \                                 In segment DATA_I, align 4, align-sorted
   \                     v_MPA_ID:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for v_MPA_ID>`
   \                     timer:
   \   00000002                      DS8 2
   \   00000004                      REQUIRE `?<Initializer for timer>`
   \                     modes:
   \   00000004                      DS8 16
   \   00000014                      REQUIRE `?<Initializer for modes>`
   \                     Softkey_DD:
   \   00000014                      DS8 4
   \   00000018                      REQUIRE `?<Initializer for Softkey_DD>`
   \                     Softkey_DO:
   \   00000018                      DS8 4
   \   0000001C                      REQUIRE `?<Initializer for Softkey_DO>`
   \                     Softkey_DefaultRedraw:
   \   0000001C                      DS8 4
   \   00000020                      REQUIRE `?<Initializer for Softkey_DefaultRedraw>`
   \                     currenttrack:
   \   00000020                      DS8 4
   \   00000024                      REQUIRE `?<Initializer for currenttrack>`
   \                     g_DO:
   \   00000024                      DS8 4
   \   00000028                      REQUIRE `?<Initializer for g_DO>`
   \                     AccelCtrl:
   \   00000028                      DS8 4
   \   0000002C                      REQUIRE `?<Initializer for AccelCtrl>`
   \                     curmode:
   \   0000002C                      DS8 4
   \   00000030                      REQUIRE `?<Initializer for curmode>`
   \                     StatusSize:
   \   00000030                      DS8 4
   \   00000034                      REQUIRE `?<Initializer for StatusSize>`
   \                     SoftSize:
   \   00000034                      DS8 4
   \   00000038                      REQUIRE `?<Initializer for SoftSize>`
   \                     ScreenHeight:
   \   00000038                      DS8 4
   \   0000003C                      REQUIRE `?<Initializer for ScreenHeight>`
   \                     ScreenWidth:
   \   0000003C                      DS8 4
   \   00000040                      REQUIRE `?<Initializer for ScreenWidth>`
   \                     oldredr:
   \   00000040                      DS8 4
   \   00000044                      REQUIRE `?<Initializer for oldredr>`
    739          
    740          GC* hMGC=NULL;
   \                     hMGC:
   \   00000044                      DS8 4
   \   00000048                      REQUIRE `?<Initializer for hMGC>`
    741          GVI_GC imggc=NULL;
   \                     imggc:
   \   00000048                      DS8 4
   \   0000004C                      REQUIRE `?<Initializer for imggc>`
    742          
    743          GVI_GC gvigcdisp=NULL;
   \                     gvigcdisp:
   \   0000004C                      DS8 4
   \   00000050                      REQUIRE `?<Initializer for gvigcdisp>`
   \                     RedrawUsed:
   \   00000050                      DS8 1
   \   00000051                      REQUIRE `?<Initializer for RedrawUsed>`
   \                     working:
   \   00000051                      DS8 1
   \   00000052                      REQUIRE `?<Initializer for working>`
   \                     accel_wrk:
   \   00000052                      DS8 1
   \   00000053                      REQUIRE `?<Initializer for accel_wrk>`
   \                     ELF_KILL_RECEIVED:
   \   00000053                      DS8 1
   \   00000054                      REQUIRE `?<Initializer for ELF_KILL_RECEIVED>`
   \                     inMenu:
   \   00000054                      DS8 1
   \   00000055                      REQUIRE `?<Initializer for inMenu>`
   \   00000055                      DS8 3
   \                     skin_str:
   \   00000058                      DS8 1024
   \   00000458                      REQUIRE `?<Initializer for skin_str>`
    744          
    745          
    746          #define BENCH_START bench_n=0;
    747          #define BENCH_GET bench_n
    748          #pragma optimize= z 9

   \                                 In segment CODE, align 4, keep-with-next
    749          void walkman_Redraw(DISP_OBJ* DO,int a,int b,int c)
    750          {
   \                     ??walkman_Redraw:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
    751          #ifndef NDEBUG
    752            BENCH_START
    753          #endif
    754          #define putchar_(a,b,c,d,e,f) if (f && f!=NOIMAGE) \
    755                                        GC_PutChar(a,b,c,d,e,f)
    756            
    757              BOOK *audio=FindBook(get_IsAudioPlayerBook());
    758            GC *GCanvas=(GC*)get_DisplayGC();
    759            int orient=BookObj_GetDisplayOrientation(audio);
   \   00000004   107F9FE5           LDR      R7,??walkman_Redraw_1  ;; v_MPA_ID
   \   00000008   84D04DE2           SUB      SP,SP,#+132
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   8B8200EF           SWI      +33419
   \   00000014   300100EF           SWI      +304
   \   00000018   0050A0E1           MOV      R5,R0
   \   0000001C   E50100EF           SWI      +485
   \   00000020   0060A0E1           MOV      R6,R0
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   190300EF           SWI      +793
   \   0000002C   0090A0E1           MOV      R9,R0
   \   00000030   200097E5           LDR      R0,[R7, #+32]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0900001A           BNE      ??walkman_Redraw_2
    760            if (!currenttrack)
    761            {
    762              currenttrack=TrackDesc_Get(audio);
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   ........           _BLF     ??TrackDesc_Get,??TrackDesc_Get??rA
   \   00000044   200087E5           STR      R0,[R7, #+32]
    763              decoder_Init(currenttrack->path,currenttrack->name);
   \   00000048   041090E5           LDR      R1,[R0, #+4]
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   ........           _BLF     ??decoder_Init,??decoder_Init??rA
    764              nowmusic.hdr.LengthInSeconds=currenttrack->fulltime;
   \   00000054   201097E5           LDR      R1,[R7, #+32]
   \   00000058   C00E9FE5           LDR      R0,??walkman_Redraw_1+0x4  ;; nowmusic + 8
   \   0000005C   081091E5           LDR      R1,[R1, #+8]
   \   00000060   001080E5           STR      R1,[R0, #+0]
   \                     ??walkman_Redraw_2:
   \   00000064   5100D7E5           LDRB     R0,[R7, #+81]
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   1100000A           BEQ      ??walkman_Redraw_3
    765            }
    766            if (working)
    767            {
    768                //-------------------------------------------------------------------
    769                //checking for closed menu and setting correct horizontal mode, if needed
    770                if (inMenu==true)
   \   00000070   5400D7E5           LDRB     R0,[R7, #+84]
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0A00000A           BEQ      ??walkman_Redraw_4
    771                {
    772                  accel_wrk=true;
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   5200C7E5           STRB     R0,[R7, #+82]
    773                  inMenu=false;
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   5400C7E5           STRB     R0,[R7, #+84]
    774                  if (curmode==HOR)
   \   0000008C   2C0097E5           LDR      R0,[R7, #+44]
   \   00000090   010050E3           CMP      R0,#+1
   \   00000094   0300001A           BNE      ??walkman_Redraw_4
    775                  {
    776                    set_horizontal();
   \   00000098   ........           BL       ??set_horizontal
    777                    BookObj_SetDisplayOrientation(audio,1);
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   1A0300EF           SWI      +794
    778                  }
    779                }
    780                //-------------------------------------------------------------------
    781                g_DO=DO;
   \                     ??walkman_Redraw_4:
   \   000000A8   244087E5           STR      R4,[R7, #+36]
    782                DispObject_SetLayerColor(DO, 0);
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   090300EF           SWI      +777
   \                     ??walkman_Redraw_3:
   \   000000B8   5100D7E5           LDRB     R0,[R7, #+81]
   \   000000BC   FF80A0E3           MOV      R8,#+255
   \   000000C0   FF8C88E3           ORR      R8,R8,#0xFF00
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   5800001A           BNE      ??walkman_Redraw_5
    783                //-------------------------------------------------------------------
    784            }
    785            //-------------------------------------------------------------------
    786            if (working==false)
    787            { 
    788              //-------------------------------------------------------------------
    789              //Create new accelerometer
    790              if (!AccelCtrl)
   \   000000CC   280097E5           LDR      R0,[R7, #+40]
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   0800001A           BNE      ??walkman_Redraw_6
    791                AccelCtrl=new CAccelCtrl();
   \   000000D8   1000A0E3           MOV      R0,#+16
   \   000000DC   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000E0   00A0B0E1           MOVS     R10,R0
   \   000000E4   0200000A           BEQ      ??walkman_Redraw_7
   \   000000E8   ........           _BLF     ??CAccelCtrl,??CAccelCtrl??rA
   \   000000EC   28A087E5           STR      R10,[R7, #+40]
   \   000000F0   010000EA           B        ??walkman_Redraw_6
   \                     ??walkman_Redraw_7:
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   280087E5           STR      R0,[R7, #+40]
    792              if (use_accel!=2)
   \                     ??walkman_Redraw_6:
   \   000000FC   200E9FE5           LDR      R0,??walkman_Redraw_1+0x8  ;; use_accel
   \   00000100   000090E5           LDR      R0,[R0, #+0]
   \   00000104   020050E3           CMP      R0,#+2
   \   00000108   0300000A           BEQ      ??walkman_Redraw_8
    793              {
    794                AccelCtrl->AddHook(onAccel,1);
   \   0000010C   141E9FE5           LDR      R1,??walkman_Redraw_1+0xC  ;; ??onAccel
   \   00000110   280097E5           LDR      R0,[R7, #+40]
   \   00000114   0120A0E3           MOV      R2,#+1
   \   00000118   ........           _BLF     ??AddHook,??AddHook??rA
    795              }
    796              //-------------------------------------------------------------------
    797              WBOOK *wb=(WBOOK*)audio;
    798              wchar_t *str=new wchar_t[0x100];
   \                     ??walkman_Redraw_8:
   \   0000011C   800FA0E3           MOV      R0,#+512
   \   00000120   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000124   00A0A0E1           MOV      R10,R0
    799              wchar_t *str2=new wchar_t[0x100];
   \   00000128   800FA0E3           MOV      R0,#+512
   \   0000012C   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000130   00B0A0E1           MOV      R11,R0
    800              if (wb->SkinManager)
   \   00000134   B00095E5           LDR      R0,[R5, #+176]
   \   00000138   000050E3           CMP      R0,#+0
    801              {
    802                if (wb->SkinManager->SkinManager_Table)
   \   0000013C   00009015           LDRNE    R0,[R0, #+0]
   \   00000140   00005013           CMPNE    R0,#+0
    803                {
    804                  if (wb->SkinManager->SkinManager_Table->GetINFO)
   \   00000144   B0009515           LDRNE    R0,[R5, #+176]
   \   00000148   00009015           LDRNE    R0,[R0, #+0]
   \   0000014C   2C009015           LDRNE    R0,[R0, #+44]
   \   00000150   00005013           CMPNE    R0,#+0
   \   00000154   4300000A           BEQ      ??walkman_Redraw_9
    805                  {
    806                    GetInfo SkinManager_GetSkinInfo=wb->SkinManager->SkinManager_Table->GetINFO;
    807                    
    808                    SkinManager_GetSkinInfo(wb->SkinManager,1,str,0xFF,str2,0xFF);
   \   00000158   FF00A0E3           MOV      R0,#+255
   \   0000015C   01002DE9           PUSH     {R0}
   \   00000160   FF30A0E3           MOV      R3,#+255
   \   00000164   0A20A0E1           MOV      R2,R10
   \   00000168   0110A0E3           MOV      R1,#+1
   \   0000016C   0B00A0E1           MOV      R0,R11
   \   00000170   01002DE9           PUSH     {R0}
   \   00000174   B00095E5           LDR      R0,[R5, #+176]
   \   00000178   00C090E5           LDR      R12,[R0, #+0]
   \   0000017C   2CC09CE5           LDR      R12,[R12, #+44]
   \   00000180   3CFF2FE1           BLX      R12
    809                    wstrcpy(skin_str,str);
   \   00000184   0A10A0E1           MOV      R1,R10
   \   00000188   580087E2           ADD      R0,R7,#+88
   \   0000018C   520100EF           SWI      +338
    810                    skin_InitConfig(skin_str, 0);
   \   00000190   0010A0E3           MOV      R1,#+0
   \   00000194   580087E2           ADD      R0,R7,#+88
   \   00000198   ........           _BLF     ??skin_InitConfig,??skin_InitConfig??rA
    811                    deinit_resources();
   \   0000019C   ........           _BLF     ??deinit_resources,??deinit_resources??rA
    812                    init_resources(skin_str);
   \   000001A0   580087E2           ADD      R0,R7,#+88
   \   000001A4   ........           _BLF     ??init_resources,??init_resources??rA
    813                    goto L_SkinManager_Detected;
    814                  }
    815                }
    816              }
    817              MessageBox(EMPTY_TEXTID,TextID_Create(lng_msgNotSupported,ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE,1,0,0);
    818              UI_Event_toBookID(ELF_TERMINATE_EVENT,BookObj_GetBookID(&MyBook->bk));
    819              return;
    820            L_SkinManager_Detected:
    821              delete(str);
   \   000001A8   0A00A0E1           MOV      R0,R10
   \   000001AC   ........           _BLF     `??operator delete`,`??operator delete??rA`
    822              delete(str2);
   \   000001B0   0B00A0E1           MOV      R0,R11
   \   000001B4   ........           _BLF     `??operator delete`,`??operator delete??rA`
    823              //-------------------------------------------------------------------
    824              //Fixing gui options and setting correct imageID inside, if needed
    825              GUI *g=FindGuiInBook(audio,"MediaPlayer_Audio");
   \   000001B8   6C1D9FE5           LDR      R1,??walkman_Redraw_1+0x10  ;; `?<Constant "MediaPlayer_Audio">`
   \   000001BC   0500A0E1           MOV      R0,R5
   \   000001C0   ........           BL       ??FindGuiInBook
   \   000001C4   00A0A0E1           MOV      R10,R0
    826              DISP_OBJ_WALKMAN *d=(DISP_OBJ_WALKMAN*)GUIObject_GetDispObject(g);
   \   000001C8   680100EF           SWI      +360
    827              if (orient==0)
   \   000001CC   000059E3           CMP      R9,#+0
   \   000001D0   08D08DE2           ADD      SP,SP,#+8
   \   000001D4   0400001A           BNE      ??walkman_Redraw_10
    828              {
    829                if (d->imageID!=NOIMAGE)
   \   000001D8   B710D0E5           LDRB     R1,[R0, #+183]
   \   000001DC   B600D0E5           LDRB     R0,[R0, #+182]
   \   000001E0   010480E1           ORR      R0,R0,R1, LSL #+8
   \   000001E4   080050E1           CMP      R0,R8
    830                  v_MPA_ID=d->imageID;
   \   000001E8   B000C711           STRHNE   R0,[R7, #+0]
    831              }
    832              GUIObject_SetStyle(g,2);
   \                     ??walkman_Redraw_10:
   \   000001EC   0210A0E3           MOV      R1,#+2
   \   000001F0   0A00A0E1           MOV      R0,R10
   \   000001F4   360100EF           SWI      +310
    833              GUIObject_SetTitleType(g, 0);
   \   000001F8   0010A0E3           MOV      R1,#+0
   \   000001FC   0A00A0E1           MOV      R0,R10
   \   00000200   810200EF           SWI      +641
    834              if (cfg_orient==1)
   \   00000204   240D9FE5           LDR      R0,??walkman_Redraw_1+0x14  ;; cfg_orient
   \   00000208   000090E5           LDR      R0,[R0, #+0]
   \   0000020C   010050E3           CMP      R0,#+1
   \   00000210   0000001A           BNE      ??walkman_Redraw_11
    835                set_horizontal();
   \   00000214   ........           BL       ??set_horizontal
    836              DispObject_InvalidateRect(GUIObject_GetDispObject(g),0);
   \                     ??walkman_Redraw_11:
   \   00000218   0A00A0E1           MOV      R0,R10
   \   0000021C   680100EF           SWI      +360
   \   00000220   0010A0E3           MOV      R1,#+0
   \   00000224   EF0100EF           SWI      +495
    837              //-------------------------------------------------------------------
    838              working=true;
   \   00000228   0100A0E3           MOV      R0,#+1
   \   0000022C   5100C7E5           STRB     R0,[R7, #+81]
    839            }
    840          
    841            //-------------------------------------------------------------------
    842            //Use standart player redraw
    843            if (orient==0)
   \                     ??walkman_Redraw_5:
   \   00000230   FC0C9FE5           LDR      R0,??walkman_Redraw_1+0x18  ;; standartwnd
   \   00000234   000059E3           CMP      R9,#+0
   \   00000238   00A090E5           LDR      R10,[R0, #+0]
   \   0000023C   1D00001A           BNE      ??walkman_Redraw_12
    844            {
    845              orient=1;
   \   00000240   0190A0E3           MOV      R9,#+1
    846              if (standartwnd)
   \   00000244   00005AE3           CMP      R10,#+0
   \   00000248   1B00000A           BEQ      ??walkman_Redraw_13
    847              {
    848                oldredr(DO, a, b, c);
   \                     ??walkman_Redraw_14:
   \   0000024C   8C309DE5           LDR      R3,[SP, #+140]
   \   00000250   88209DE5           LDR      R2,[SP, #+136]
   \   00000254   84109DE5           LDR      R1,[SP, #+132]
   \   00000258   0400A0E1           MOV      R0,R4
   \   0000025C   404097E5           LDR      R4,[R7, #+64]
   \   00000260   34FF2FE1           BLX      R4
    849                return;
   \   00000264   FB0700EA           B        ??walkman_Redraw_15
    850              }
    851            }  
   \                     ??walkman_Redraw_9:
   \   00000268   C80C9FE5           LDR      R0,??walkman_Redraw_1+0x1C  ;; `?<Constant "MediaPlayer_Audio">` + 152
   \   0000026C   0820A0E1           MOV      R2,R8
   \   00000270   0010A0E3           MOV      R1,#+0
   \   00000274   5D0100EF           SWI      +349
   \   00000278   0010A0E1           MOV      R1,R0
   \   0000027C   0000A0E3           MOV      R0,#+0
   \   00000280   01002DE9           PUSH     {R0}
   \   00000284   01002DE9           PUSH     {R0}
   \   00000288   0130A0E3           MOV      R3,#+1
   \   0000028C   0820A0E1           MOV      R2,R8
   \   00000290   9004E0E3           MVN      R0,#-1879048192
   \   00000294   570200EF           SWI      +599
   \   00000298   9C0C9FE5           LDR      R0,??walkman_Redraw_1+0x20  ;; MyBook
   \   0000029C   000090E5           LDR      R0,[R0, #+0]
   \   000002A0   FA0100EF           SWI      +506
   \   000002A4   0010A0E1           MOV      R1,R0
   \   000002A8   E500A0E3           MOV      R0,#+229
   \   000002AC   C00F80E3           ORR      R0,R0,#0x300
   \   000002B0   AA0100EF           SWI      +426
   \   000002B4   E60700EA           B        ??walkman_Redraw_16
    852            else
    853              orient=0;
   \                     ??walkman_Redraw_12:
   \   000002B8   0090A0E3           MOV      R9,#+0
    854            //-------------------------------------------------------------------
    855            //If keylock is on top, need to draw vertical orientation
    856            if (Display_GetTopBook(0)!=audio)
   \                     ??walkman_Redraw_13:
   \   000002BC   0000A0E3           MOV      R0,#+0
   \   000002C0   1B0300EF           SWI      +795
   \   000002C4   050050E1           CMP      R0,R5
   \   000002C8   0300000A           BEQ      ??walkman_Redraw_17
    857            {
    858              orient=1;
   \   000002CC   0190A0E3           MOV      R9,#+1
    859              if (standartwnd)
   \   000002D0   00005AE3           CMP      R10,#+0
   \   000002D4   DCFFFF1A           BNE      ??walkman_Redraw_14
   \   000002D8   3C0000EA           B        ??walkman_Redraw_18
    860              {
    861                oldredr(DO, a, b, c);
    862                return;
    863              }
    864            }
    865            if (orient==0)/*>0 && Display_GetTopBook(0)==audio)*/
   \                     ??walkman_Redraw_17:
   \   000002DC   000059E3           CMP      R9,#+0
   \   000002E0   3A00001A           BNE      ??walkman_Redraw_18
    866            {
    867              if(imggc==0)
   \   000002E4   480097E5           LDR      R0,[R7, #+72]
   \   000002E8   000050E3           CMP      R0,#+0
   \   000002EC   2100001A           BNE      ??walkman_Redraw_19
    868              {
    869                //first call initialization
    870                hMGC = GC_CreateMemoryGC(320,240, 16,0,0,0);
   \   000002F0   01002DE9           PUSH     {R0}
   \   000002F4   01002DE9           PUSH     {R0}
   \   000002F8   0030A0E3           MOV      R3,#+0
   \   000002FC   1020A0E3           MOV      R2,#+16
   \   00000300   F010A0E3           MOV      R1,#+240
   \   00000304   500FA0E3           MOV      R0,#+320
   \   00000308   950300EF           SWI      +917
   \   0000030C   440087E5           STR      R0,[R7, #+68]
    871                CANVAS_Get_GviGC(hMGC->pcanvas ,&imggc);
   \   00000310   000090E5           LDR      R0,[R0, #+0]
   \   00000314   481087E2           ADD      R1,R7,#+72
   \   00000318   7C0300EF           SWI      +892
    872                
    873                GC_DrawFRect (hMGC, clBlack, 0,0,20,20);
   \   0000031C   1400A0E3           MOV      R0,#+20
   \   00000320   01002DE9           PUSH     {R0}
   \   00000324   01002DE9           PUSH     {R0}
   \   00000328   0030A0E3           MOV      R3,#+0
   \   0000032C   0020A0E3           MOV      R2,#+0
   \   00000330   440097E5           LDR      R0,[R7, #+68]
   \   00000334   FF14A0E3           MOV      R1,#-16777216
   \   00000338   630200EF           SWI      +611
    874                putchar_(hMGC,0,0,0,0,playnow_h);
   \   0000033C   FC0B9FE5           LDR      R0,??walkman_Redraw_1+0x24  ;; playnow_h
   \   00000340   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000344   10D08DE2           ADD      SP,SP,#+16
   \   00000348   000050E3           CMP      R0,#+0
   \   0000034C   08005011           CMPNE    R0,R8
   \   00000350   0800000A           BEQ      ??walkman_Redraw_19
   \   00000354   01002DE9           PUSH     {R0}
   \   00000358   0030A0E3           MOV      R3,#+0
   \   0000035C   0000A0E3           MOV      R0,#+0
   \   00000360   01002DE9           PUSH     {R0}
   \   00000364   0020A0E1           MOV      R2,R0
   \   00000368   0010A0E1           MOV      R1,R0
   \   0000036C   440097E5           LDR      R0,[R7, #+68]
   \   00000370   400100EF           SWI      +320
   \   00000374   08D08DE2           ADD      SP,SP,#+8
    875              }
    876              CANVAS_Get_GviGC(GCanvas->pcanvas,&gvigcdisp);
   \                     ??walkman_Redraw_19:
   \   00000378   000096E5           LDR      R0,[R6, #+0]
   \   0000037C   4C1087E2           ADD      R1,R7,#+76
   \   00000380   7C0300EF           SWI      +892
    877              GVI_BitBlt(gvigcdisp, 0, 0, 320, 240, imggc, 0, 0, 204, 0, 0, 0);
   \   00000384   0000A0E3           MOV      R0,#+0
   \   00000388   01002DE9           PUSH     {R0}
   \   0000038C   01002DE9           PUSH     {R0}
   \   00000390   01002DE9           PUSH     {R0}
   \   00000394   503FA0E3           MOV      R3,#+320
   \   00000398   0020A0E3           MOV      R2,#+0
   \   0000039C   0010A0E3           MOV      R1,#+0
   \   000003A0   CC00A0E3           MOV      R0,#+204
   \   000003A4   01002DE9           PUSH     {R0}
   \   000003A8   0000A0E3           MOV      R0,#+0
   \   000003AC   01002DE9           PUSH     {R0}
   \   000003B0   01002DE9           PUSH     {R0}
   \   000003B4   480097E5           LDR      R0,[R7, #+72]
   \   000003B8   01002DE9           PUSH     {R0}
   \   000003BC   F000A0E3           MOV      R0,#+240
   \   000003C0   01002DE9           PUSH     {R0}
   \   000003C4   4C0097E5           LDR      R0,[R7, #+76]
   \   000003C8   7D0300EF           SWI      +893
   \   000003CC   20D08DE2           ADD      SP,SP,#+32
    878            }
    879            //-------------------------------------------------------------------
    880            WALKMAN_BOOK *wb=(WALKMAN_BOOK*)audio;
    881            DISP_OBJ_ *do_=(DISP_OBJ_*)DO;
    882            
    883            RECT gc_rc,rc;
    884            GC_GetRect(GCanvas, &gc_rc);
   \                     ??walkman_Redraw_18:
   \   000003D0   10108DE2           ADD      R1,SP,#+16
    885            rc.y1 = gc_rc.y1;
    886            rc.y2 = gc_rc.y2;
    887            putchar_(GCanvas, 
    888                     orient ? cover_rect.x1 : cover_rect_h.x1, 
    889                     orient ? cover_rect.y1 - StatusSize : cover_rect_h.y1,
    890                     orient ? cover_rect.x2-cover_rect.x1 : cover_rect_h.x2-cover_rect_h.x1,
    891                     orient ? cover_rect.y2-cover_rect.y1 : cover_rect_h.y2-cover_rect_h.y1,
    892                     orient ? cover_v_ : cover_h_);
   \   000003D4   68AB9FE5           LDR      R10,??walkman_Redraw_1+0x28  ;; cover_rect_h
   \   000003D8   68BB9FE5           LDR      R11,??walkman_Redraw_1+0x2C  ;; cover_rect
   \   000003DC   0600A0E1           MOV      R0,R6
   \   000003E0   E70100EF           SWI      +487
   \   000003E4   B411DDE1           LDRH     R1,[SP, #+20]
   \   000003E8   000059E3           CMP      R9,#+0
   \   000003EC   B410CDE1           STRH     R1,[SP, #+4]
   \   000003F0   B611DDE1           LDRH     R1,[SP, #+22]
   \   000003F4   B610CDE1           STRH     R1,[SP, #+6]
   \   000003F8   2100000A           BEQ      ??walkman_Redraw_20
   \   000003FC   480B9FE5           LDR      R0,??walkman_Redraw_1+0x30  ;; cover_v_
   \   00000400   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000404   000050E3           CMP      R0,#+0
   \   00000408   0C00000A           BEQ      ??walkman_Redraw_21
   \   0000040C   B420DBE1           LDRH     R2,[R11, #+4]
   \   00000410   B610DBE1           LDRH     R1,[R11, #+6]
   \   00000414   B230DBE1           LDRH     R3,[R11, #+2]
   \   00000418   30E097E5           LDR      LR,[R7, #+48]
   \   0000041C   02C041E0           SUB      R12,R1,R2
   \   00000420   B010DBE1           LDRH     R1,[R11, #+0]
   \   00000424   0E2042E0           SUB      R2,R2,LR
   \                     ??walkman_Redraw_22:
   \   00000428   013043E0           SUB      R3,R3,R1
   \   0000042C   01002DE9           PUSH     {R0}
   \   00000430   00102DE9           PUSH     {R12}
   \   00000434   0600A0E1           MOV      R0,R6
   \   00000438   400100EF           SWI      +320
   \   0000043C   08D08DE2           ADD      SP,SP,#+8
    893              
    894            putchar_(GCanvas, 
    895                     orient ? cover_rect.x1 : cover_rect_h.x1, 
    896                     orient ? cover_rect.y1 - StatusSize : cover_rect_h.y1,
    897                     orient ? cover_rect.x2-cover_rect.x1 : cover_rect_h.x2-cover_rect_h.x1,
    898                     orient ? cover_rect.y2-cover_rect.y1 : cover_rect_h.y2-cover_rect_h.y1,
    899                     nowmusic.meta.ImageID);
   \                     ??walkman_Redraw_21:
   \   00000440   081B9FE5           LDR      R1,??walkman_Redraw_1+0x34  ;; nowmusic + 10272
   \   00000444   0C108DE5           STR      R1,[SP, #+12]
   \   00000448   B000D1E1           LDRH     R0,[R1, #+0]
   \   0000044C   000050E3           CMP      R0,#+0
   \   00000450   08005011           CMPNE    R0,R8
   \   00000454   2000000A           BEQ      ??walkman_Redraw_23
   \   00000458   000059E3           CMP      R9,#+0
   \   0000045C   1200000A           BEQ      ??walkman_Redraw_24
   \   00000460   B420DBE1           LDRH     R2,[R11, #+4]
   \   00000464   B610DBE1           LDRH     R1,[R11, #+6]
   \   00000468   B2A0DBE1           LDRH     R10,[R11, #+2]
   \   0000046C   023041E0           SUB      R3,R1,R2
   \   00000470   B010DBE1           LDRH     R1,[R11, #+0]
   \   00000474   30B097E5           LDR      R11,[R7, #+48]
   \   00000478   01A04AE0           SUB      R10,R10,R1
   \   0000047C   0B2042E0           SUB      R2,R2,R11
   \   00000480   0F0000EA           B        ??walkman_Redraw_25
   \                     ??walkman_Redraw_20:
   \   00000484   C80A9FE5           LDR      R0,??walkman_Redraw_1+0x38  ;; cover_h_
   \   00000488   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000048C   080050E1           CMP      R0,R8
   \   00000490   EAFFFF0A           BEQ      ??walkman_Redraw_21
   \   00000494   B420DAE1           LDRH     R2,[R10, #+4]
   \   00000498   B610DAE1           LDRH     R1,[R10, #+6]
   \   0000049C   B230DAE1           LDRH     R3,[R10, #+2]
   \   000004A0   02C041E0           SUB      R12,R1,R2
   \   000004A4   B010DAE1           LDRH     R1,[R10, #+0]
   \   000004A8   DEFFFFEA           B        ??walkman_Redraw_22
   \                     ??walkman_Redraw_24:
   \   000004AC   B420DAE1           LDRH     R2,[R10, #+4]
   \   000004B0   B610DAE1           LDRH     R1,[R10, #+6]
   \   000004B4   023041E0           SUB      R3,R1,R2
   \   000004B8   B010DAE1           LDRH     R1,[R10, #+0]
   \   000004BC   B2A0DAE1           LDRH     R10,[R10, #+2]
   \   000004C0   01A04AE0           SUB      R10,R10,R1
   \                     ??walkman_Redraw_25:
   \   000004C4   01002DE9           PUSH     {R0}
   \   000004C8   08002DE9           PUSH     {R3}
   \   000004CC   0A30A0E1           MOV      R3,R10
   \   000004D0   0600A0E1           MOV      R0,R6
   \   000004D4   400100EF           SWI      +320
   \   000004D8   08D08DE2           ADD      SP,SP,#+8
    900            MM_INFO *mm_info=&((DISP_OBJ_*)DO)->mm_info;
    901          #define PHONE_AUTO 0
    902          #define PHONE_W580 1
    903          #define PHONE_W610 2
    904            if (phone==PHONE_W610)
   \                     ??walkman_Redraw_23:
   \   000004DC   740A9FE5           LDR      R0,??walkman_Redraw_1+0x3C  ;; phone
   \   000004E0   67AF84E2           ADD      R10,R4,#+412
   \   000004E4   001090E5           LDR      R1,[R0, #+0]
   \   000004E8   020051E3           CMP      R1,#+2
    905              mm_info=(MM_INFO*)(((int)(mm_info))+0xC);
   \   000004EC   0CA08A02           ADDEQ    R10,R10,#+12
   \   000004F0   2400000A           BEQ      ??walkman_Redraw_26
    906            else if (phone==PHONE_AUTO)
   \   000004F4   000051E3           CMP      R1,#+0
   \   000004F8   2200001A           BNE      ??walkman_Redraw_26
    907            {
    908              int SaveConfigData(const wchar_t *path,const wchar_t *fname);
    909              if (mm_info->title_str>0x80000000 && mm_info->title_str<0x90000000)
   \   000004FC   7710DAE5           LDRB     R1,[R10, #+119]
   \   00000500   7620DAE5           LDRB     R2,[R10, #+118]
   \   00000504   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000508   7520DAE5           LDRB     R2,[R10, #+117]
   \   0000050C   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000510   7420DAE5           LDRB     R2,[R10, #+116]
   \   00000514   011482E1           ORR      R1,R2,R1, LSL #+8
   \   00000518   600351E3           CMP      R1,#-2147483647
   \   0000051C   0500003A           BCC      ??walkman_Redraw_27
   \   00000520   900451E3           CMP      R1,#-1879048192
   \   00000524   0300002A           BCS      ??walkman_Redraw_27
    910              {
    911                int *integer=(int*)&phone;
    912                integer[0]=PHONE_W580;
   \   00000528   0110A0E3           MOV      R1,#+1
   \   0000052C   001080E5           STR      R1,[R0, #+0]
    913                MessageBox(EMPTY_TEXTID,TextID_Create(lng_msgW580detected,ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE,1,0,0);
   \   00000530   240A9FE5           LDR      R0,??walkman_Redraw_1+0x40  ;; `?<Constant "MediaPlayer_Audio">` + 372
   \   00000534   020000EA           B        ??walkman_Redraw_28
    914              }
    915              else
    916              {
    917                int *integer=(int*)&phone;
    918                integer[0]=PHONE_W610;
   \                     ??walkman_Redraw_27:
   \   00000538   0210A0E3           MOV      R1,#+2
   \   0000053C   001080E5           STR      R1,[R0, #+0]
    919                MessageBox(EMPTY_TEXTID,TextID_Create(lng_msgW610detected,ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE,1,0,0);
   \   00000540   180A9FE5           LDR      R0,??walkman_Redraw_1+0x44  ;; `?<Constant "MediaPlayer_Audio">` + 436
   \                     ??walkman_Redraw_28:
   \   00000544   0820A0E1           MOV      R2,R8
   \   00000548   0010A0E3           MOV      R1,#+0
   \   0000054C   5D0100EF           SWI      +349
   \   00000550   0010A0E3           MOV      R1,#+0
   \   00000554   02002DE9           PUSH     {R1}
   \   00000558   02002DE9           PUSH     {R1}
   \   0000055C   0130A0E3           MOV      R3,#+1
   \   00000560   0820A0E1           MOV      R2,R8
   \   00000564   0010A0E1           MOV      R1,R0
   \   00000568   9004E0E3           MVN      R0,#-1879048192
   \   0000056C   570200EF           SWI      +599
    920              }
    921              SaveConfigData(successed_config_path,successed_config_name);
   \   00000570   EC099FE5           LDR      R0,??walkman_Redraw_1+0x48  ;; successed_config_name
   \   00000574   08D08DE2           ADD      SP,SP,#+8
   \   00000578   001090E5           LDR      R1,[R0, #+0]
   \   0000057C   E4099FE5           LDR      R0,??walkman_Redraw_1+0x4C  ;; successed_config_path
   \   00000580   000090E5           LDR      R0,[R0, #+0]
   \   00000584   ........           _BLF     ??SaveConfigData,??SaveConfigData??rA
    922            }
    923            int cur=mm_info->currenttime;
   \                     ??walkman_Redraw_26:
   \   00000588   8B10DAE5           LDRB     R1,[R10, #+139]
   \   0000058C   8A20DAE5           LDRB     R2,[R10, #+138]
    924            
    925            //----------------------------------------------------------------------------
    926            //Progressbar
    927            if (orient ? ProgressBar_Show : ProgressBar_Show_h)
   \   00000590   000059E3           CMP      R9,#+0
   \   00000594   D0099F15           LDRNE    R0,??walkman_Redraw_1+0x50  ;; ProgressBar_Show
   \   00000598   011482E1           ORR      R1,R2,R1, LSL #+8
   \   0000059C   8920DAE5           LDRB     R2,[R10, #+137]
   \   000005A0   C8099F05           LDREQ    R0,??walkman_Redraw_1+0x54  ;; ProgressBar_Show_h
   \   000005A4   011482E1           ORR      R1,R2,R1, LSL #+8
   \   000005A8   8820DAE5           LDRB     R2,[R10, #+136]
   \   000005AC   011482E1           ORR      R1,R2,R1, LSL #+8
   \   000005B0   08108DE5           STR      R1,[SP, #+8]
   \   000005B4   000090E5           LDR      R0,[R0, #+0]
   \   000005B8   000050E3           CMP      R0,#+0
   \   000005BC   3900000A           BEQ      ??walkman_Redraw_29
    928            {
    929              DrawProgress(orient ? ProgressBar_bColor : ProgressBar_bColor_h, 
    930                           orient ? ProgressBar_cColor : ProgressBar_cColor_h, 
    931                           orient ? ProgressBar_oColor : ProgressBar_oColor_h, 
    932                           orient ? pbrect : pbrect_h, 
    933                           cur, 
    934                           mm_info->fulltime,
    935                           orient ? - StatusSize : 0, 
    936                           orient ? ProgressBar_highlight : ProgressBar_highlight_h);
   \   000005C0   000059E3           CMP      R9,#+0
   \   000005C4   1000000A           BEQ      ??walkman_Redraw_30
   \   000005C8   A4099FE5           LDR      R0,??walkman_Redraw_1+0x58  ;; ProgressBar_highlight
   \   000005CC   A4199FE5           LDR      R1,??walkman_Redraw_1+0x5C  ;; pbrect
   \   000005D0   003090E5           LDR      R3,[R0, #+0]
   \   000005D4   300097E5           LDR      R0,[R7, #+48]
   \   000005D8   08C0A0E3           MOV      R12,#+8
   \   000005DC   00B060E2           RSB      R11,R0,#+0
   \   000005E0   18008DE2           ADD      R0,SP,#+24
   \                     ??walkman_Redraw_31:
   \   000005E4   02C05CE2           SUBS     R12,R12,#+2
   \   000005E8   BC2091E1           LDRH     R2,[R1, R12]
   \   000005EC   BC2080E1           STRH     R2,[R0, R12]
   \   000005F0   FBFFFF1A           BNE      ??walkman_Redraw_31
   \   000005F4   80099FE5           LDR      R0,??walkman_Redraw_1+0x60  ;; ProgressBar_oColor
   \   000005F8   002090E5           LDR      R2,[R0, #+0]
   \   000005FC   7C099FE5           LDR      R0,??walkman_Redraw_1+0x64  ;; ProgressBar_cColor
   \   00000600   001090E5           LDR      R1,[R0, #+0]
   \   00000604   78099FE5           LDR      R0,??walkman_Redraw_1+0x68  ;; ProgressBar_bColor
   \   00000608   0E0000EA           B        ??walkman_Redraw_32
   \                     ??walkman_Redraw_30:
   \   0000060C   74099FE5           LDR      R0,??walkman_Redraw_1+0x6C  ;; ProgressBar_highlight_h
   \   00000610   74199FE5           LDR      R1,??walkman_Redraw_1+0x70  ;; pbrect_h
   \   00000614   003090E5           LDR      R3,[R0, #+0]
   \   00000618   00B0A0E3           MOV      R11,#+0
   \   0000061C   18008DE2           ADD      R0,SP,#+24
   \   00000620   08C0A0E3           MOV      R12,#+8
   \                     ??walkman_Redraw_33:
   \   00000624   02C05CE2           SUBS     R12,R12,#+2
   \   00000628   BC2091E1           LDRH     R2,[R1, R12]
   \   0000062C   BC2080E1           STRH     R2,[R0, R12]
   \   00000630   FBFFFF1A           BNE      ??walkman_Redraw_33
   \   00000634   54099FE5           LDR      R0,??walkman_Redraw_1+0x74  ;; ProgressBar_oColor_h
   \   00000638   002090E5           LDR      R2,[R0, #+0]
   \   0000063C   50099FE5           LDR      R0,??walkman_Redraw_1+0x78  ;; ProgressBar_cColor_h
   \   00000640   001090E5           LDR      R1,[R0, #+0]
   \   00000644   4C099FE5           LDR      R0,??walkman_Redraw_1+0x7C  ;; ProgressBar_bColor_h
   \                     ??walkman_Redraw_32:
   \   00000648   08E0A0E3           MOV      LR,#+8
   \   0000064C   000090E5           LDR      R0,[R0, #+0]
   \   00000650   08002DE9           PUSH     {R3}
   \   00000654   00082DE9           PUSH     {R11}
   \   00000658   7F30DAE5           LDRB     R3,[R10, #+127]
   \   0000065C   7EB0DAE5           LDRB     R11,[R10, #+126]
   \   00000660   03348BE1           ORR      R3,R11,R3, LSL #+8
   \   00000664   7DB0DAE5           LDRB     R11,[R10, #+125]
   \   00000668   03348BE1           ORR      R3,R11,R3, LSL #+8
   \   0000066C   7CB0DAE5           LDRB     R11,[R10, #+124]
   \   00000670   03348BE1           ORR      R3,R11,R3, LSL #+8
   \   00000674   08002DE9           PUSH     {R3}
   \   00000678   14309DE5           LDR      R3,[SP, #+20]
   \   0000067C   08002DE9           PUSH     {R3}
   \   00000680   28308DE2           ADD      R3,SP,#+40
   \   00000684   08D04DE2           SUB      SP,SP,#+8
   \   00000688   0DC0A0E1           MOV      R12,SP
   \                     ??walkman_Redraw_34:
   \   0000068C   02E05EE2           SUBS     LR,LR,#+2
   \   00000690   BEB093E1           LDRH     R11,[R3, LR]
   \   00000694   BEB08CE1           STRH     R11,[R12, LR]
   \   00000698   FBFFFF1A           BNE      ??walkman_Redraw_34
   \   0000069C   0800BDE8           POP      {R3}
   \   000006A0   ........           BL       ??DrawProgress
   \   000006A4   14D08DE2           ADD      SP,SP,#+20
    937            }
    938            
    939            //----------------------------------------------------------------------------
    940            //Volumebar
    941            if (orient==0)
   \                     ??walkman_Redraw_29:
   \   000006A8   000059E3           CMP      R9,#+0
   \   000006AC   2D00001A           BNE      ??walkman_Redraw_35
    942            {
    943              typedef struct
    944              {
    945                char dummy[0x2C];
    946                wchar_t volume;
    947              }VOLCONTR;
    948              VOLCONTR *book=(VOLCONTR*)FindBook(isVolCtrl);
   \   000006B0   E4089FE5           LDR      R0,??walkman_Redraw_1+0x80  ;; ??isVolCtrl
   \   000006B4   300100EF           SWI      +304
    949              if (book)
   \   000006B8   000050E3           CMP      R0,#+0
    950              {
    951                if (book->volume && VolumeBar_Show)
   \   000006BC   BC02D011           LDRHNE   R0,[R0, #+44]
   \   000006C0   00005013           CMPNE    R0,#+0
   \   000006C4   D4189F15           LDRNE    R1,??walkman_Redraw_1+0x84  ;; VolumeBar_Show
   \   000006C8   00109115           LDRNE    R1,[R1, #+0]
   \   000006CC   00005113           CMPNE    R1,#+0
   \   000006D0   1800000A           BEQ      ??walkman_Redraw_36
    952                {
    953                  DrawProgress(VolumeBar_bColor, 
    954                               VolumeBar_cColor, 
    955                               VolumeBar_oColor, 
    956                               volrect, 
    957                               book->volume, 
    958                               15,
    959                               0, 
    960                               VolumeBar_highlight);
   \   000006D4   C8189FE5           LDR      R1,??walkman_Redraw_1+0x88  ;; VolumeBar_highlight
   \   000006D8   0830A0E3           MOV      R3,#+8
   \   000006DC   001091E5           LDR      R1,[R1, #+0]
   \   000006E0   02002DE9           PUSH     {R1}
   \   000006E4   0010A0E3           MOV      R1,#+0
   \   000006E8   02002DE9           PUSH     {R1}
   \   000006EC   0F10A0E3           MOV      R1,#+15
   \   000006F0   02002DE9           PUSH     {R1}
   \   000006F4   01002DE9           PUSH     {R0}
   \   000006F8   A8089FE5           LDR      R0,??walkman_Redraw_1+0x8C  ;; volrect
   \   000006FC   08D04DE2           SUB      SP,SP,#+8
   \   00000700   0D20A0E1           MOV      R2,SP
   \                     ??walkman_Redraw_37:
   \   00000704   023053E2           SUBS     R3,R3,#+2
   \   00000708   B31090E1           LDRH     R1,[R0, R3]
   \   0000070C   B31082E1           STRH     R1,[R2, R3]
   \   00000710   FBFFFF1A           BNE      ??walkman_Redraw_37
   \   00000714   90089FE5           LDR      R0,??walkman_Redraw_1+0x90  ;; VolumeBar_oColor
   \   00000718   002090E5           LDR      R2,[R0, #+0]
   \   0000071C   8C089FE5           LDR      R0,??walkman_Redraw_1+0x94  ;; VolumeBar_cColor
   \   00000720   001090E5           LDR      R1,[R0, #+0]
   \   00000724   88089FE5           LDR      R0,??walkman_Redraw_1+0x98  ;; VolumeBar_bColor
   \   00000728   000090E5           LDR      R0,[R0, #+0]
   \   0000072C   0800BDE8           POP      {R3}
   \   00000730   ........           BL       ??DrawProgress
   \   00000734   14D08DE2           ADD      SP,SP,#+20
   \                     ??walkman_Redraw_36:
   \   00000738   78089FE5           LDR      R0,??walkman_Redraw_1+0x9C  ;; aricn_show_h
   \                     ??walkman_Redraw_38:
   \   0000073C   78B89FE5           LDR      R11,??walkman_Redraw_1+0xA0  ;; main_icons
   \   00000740   000090E5           LDR      R0,[R0, #+0]
   \   00000744   000050E3           CMP      R0,#+0
   \   00000748   2A00000A           BEQ      ??walkman_Redraw_39
    961                }
    962              }
    963            }
    964            //----------------------------------------------------------------------------
    965            wchar_t buf[50];
    966            //----------------------------------------------------------------------------
    967            //Artist icon
    968            if (orient ? aricn_show : aricn_show_h)
    969            {
    970              putchar_(GCanvas, 
    971                      orient ? aricn_rect.x1 : aricn_rect_h.x1, 
    972                      orient ? aricn_rect.y1 - StatusSize : aricn_rect_h.y1,
    973                      orient ? aricn_rect.x2 - aricn_rect.x1 : aricn_rect_h.x2 - aricn_rect_h.x1,
    974                      orient ? aricn_rect.y2 - aricn_rect.y1 : aricn_rect_h.y2 - aricn_rect_h.y1,
    975                      ICON(main_icons[ICN_ARTIST],do_->artist_icn));
   \   0000074C   B000DBE1           LDRH     R0,[R11, #+0]
   \   00000750   080050E1           CMP      R0,R8
   \   00000754   D510D405           LDRBEQ   R1,[R4, #+213]
   \   00000758   D420D405           LDRBEQ   R2,[R4, #+212]
   \   0000075C   0010A011           MOVNE    R1,R0
   \   00000760   01148201           ORREQ    R1,R2,R1, LSL #+8
   \   00000764   010000EA           B        ??walkman_Redraw_40
   \                     ??walkman_Redraw_35:
   \   00000768   50089FE5           LDR      R0,??walkman_Redraw_1+0xA4  ;; aricn_show
   \   0000076C   F2FFFFEA           B        ??walkman_Redraw_38
   \                     ??walkman_Redraw_40:
   \   00000770   000051E3           CMP      R1,#+0
   \   00000774   1F00000A           BEQ      ??walkman_Redraw_39
   \   00000778   080050E1           CMP      R0,R8
   \   0000077C   0600001A           BNE      ??walkman_Redraw_41
   \   00000780   D500D4E5           LDRB     R0,[R4, #+213]
   \   00000784   D410D4E5           LDRB     R1,[R4, #+212]
   \   00000788   000481E1           ORR      R0,R1,R0, LSL #+8
   \   0000078C   080050E1           CMP      R0,R8
   \   00000790   1800000A           BEQ      ??walkman_Redraw_39
   \   00000794   D500D4E5           LDRB     R0,[R4, #+213]
   \   00000798   000481E1           ORR      R0,R1,R0, LSL #+8
   \                     ??walkman_Redraw_41:
   \   0000079C   000059E3           CMP      R9,#+0
   \   000007A0   0800000A           BEQ      ??walkman_Redraw_42
   \   000007A4   18389FE5           LDR      R3,??walkman_Redraw_1+0xA8  ;; aricn_rect
   \   000007A8   B420D3E1           LDRH     R2,[R3, #+4]
   \   000007AC   B610D3E1           LDRH     R1,[R3, #+6]
   \   000007B0   30E097E5           LDR      LR,[R7, #+48]
   \   000007B4   02C041E0           SUB      R12,R1,R2
   \   000007B8   B010D3E1           LDRH     R1,[R3, #+0]
   \   000007BC   B230D3E1           LDRH     R3,[R3, #+2]
   \   000007C0   0E2042E0           SUB      R2,R2,LR
   \   000007C4   050000EA           B        ??walkman_Redraw_43
   \                     ??walkman_Redraw_42:
   \   000007C8   F8379FE5           LDR      R3,??walkman_Redraw_1+0xAC  ;; aricn_rect_h
   \   000007CC   B420D3E1           LDRH     R2,[R3, #+4]
   \   000007D0   B610D3E1           LDRH     R1,[R3, #+6]
   \   000007D4   02C041E0           SUB      R12,R1,R2
   \   000007D8   B010D3E1           LDRH     R1,[R3, #+0]
   \   000007DC   B230D3E1           LDRH     R3,[R3, #+2]
   \                     ??walkman_Redraw_43:
   \   000007E0   013043E0           SUB      R3,R3,R1
   \   000007E4   01002DE9           PUSH     {R0}
   \   000007E8   00102DE9           PUSH     {R12}
   \   000007EC   0600A0E1           MOV      R0,R6
   \   000007F0   400100EF           SWI      +320
   \   000007F4   08D08DE2           ADD      SP,SP,#+8
    976            }
    977            //----------------------------------------------------------------------------
    978            //Album icon
    979            if (orient ? alicn_show : alicn_show_h)
   \                     ??walkman_Redraw_39:
   \   000007F8   000059E3           CMP      R9,#+0
   \   000007FC   C8079F15           LDRNE    R0,??walkman_Redraw_1+0xB0  ;; alicn_show
   \   00000800   C8079F05           LDREQ    R0,??walkman_Redraw_1+0xB4  ;; alicn_show_h
   \   00000804   000090E5           LDR      R0,[R0, #+0]
   \   00000808   000050E3           CMP      R0,#+0
   \   0000080C   2700000A           BEQ      ??walkman_Redraw_44
    980            {
    981              putchar_(GCanvas, 
    982                      orient ? alicn_rect.x1 : alicn_rect_h.x1, 
    983                      orient ? alicn_rect.y1 - StatusSize: alicn_rect_h.y1,
    984                      orient ? alicn_rect.x2 - alicn_rect.x1 : alicn_rect_h.x2 - alicn_rect_h.x1,
    985                      orient ? alicn_rect.y2 - alicn_rect.y1 : alicn_rect_h.y2 - alicn_rect_h.y1,
    986                      ICON(main_icons[ICN_ALBUM],do_->album_icn));
   \   00000810   B200DBE1           LDRH     R0,[R11, #+2]
   \   00000814   080050E1           CMP      R0,R8
   \   00000818   D910D405           LDRBEQ   R1,[R4, #+217]
   \   0000081C   D820D405           LDRBEQ   R2,[R4, #+216]
   \   00000820   0010A011           MOVNE    R1,R0
   \   00000824   01148201           ORREQ    R1,R2,R1, LSL #+8
   \   00000828   000051E3           CMP      R1,#+0
   \   0000082C   1F00000A           BEQ      ??walkman_Redraw_44
   \   00000830   080050E1           CMP      R0,R8
   \   00000834   0600001A           BNE      ??walkman_Redraw_45
   \   00000838   D900D4E5           LDRB     R0,[R4, #+217]
   \   0000083C   D810D4E5           LDRB     R1,[R4, #+216]
   \   00000840   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000844   080050E1           CMP      R0,R8
   \   00000848   1800000A           BEQ      ??walkman_Redraw_44
   \   0000084C   D900D4E5           LDRB     R0,[R4, #+217]
   \   00000850   000481E1           ORR      R0,R1,R0, LSL #+8
   \                     ??walkman_Redraw_45:
   \   00000854   000059E3           CMP      R9,#+0
   \   00000858   0800000A           BEQ      ??walkman_Redraw_46
   \   0000085C   70379FE5           LDR      R3,??walkman_Redraw_1+0xB8  ;; alicn_rect
   \   00000860   B420D3E1           LDRH     R2,[R3, #+4]
   \   00000864   B610D3E1           LDRH     R1,[R3, #+6]
   \   00000868   30E097E5           LDR      LR,[R7, #+48]
   \   0000086C   02C041E0           SUB      R12,R1,R2
   \   00000870   B010D3E1           LDRH     R1,[R3, #+0]
   \   00000874   B230D3E1           LDRH     R3,[R3, #+2]
   \   00000878   0E2042E0           SUB      R2,R2,LR
   \   0000087C   050000EA           B        ??walkman_Redraw_47
   \                     ??walkman_Redraw_46:
   \   00000880   50379FE5           LDR      R3,??walkman_Redraw_1+0xBC  ;; alicn_rect_h
   \   00000884   B420D3E1           LDRH     R2,[R3, #+4]
   \   00000888   B610D3E1           LDRH     R1,[R3, #+6]
   \   0000088C   02C041E0           SUB      R12,R1,R2
   \   00000890   B010D3E1           LDRH     R1,[R3, #+0]
   \   00000894   B230D3E1           LDRH     R3,[R3, #+2]
   \                     ??walkman_Redraw_47:
   \   00000898   013043E0           SUB      R3,R3,R1
   \   0000089C   01002DE9           PUSH     {R0}
   \   000008A0   00102DE9           PUSH     {R12}
   \   000008A4   0600A0E1           MOV      R0,R6
   \   000008A8   400100EF           SWI      +320
   \   000008AC   08D08DE2           ADD      SP,SP,#+8
    987            }
    988            //----------------------------------------------------------------------------
    989            //Title icon
    990            if (orient ? ticn_show : ticn_show_h)
   \                     ??walkman_Redraw_44:
   \   000008B0   000059E3           CMP      R9,#+0
   \   000008B4   20079F15           LDRNE    R0,??walkman_Redraw_1+0xC0  ;; ticn_show
   \   000008B8   20079F05           LDREQ    R0,??walkman_Redraw_1+0xC4  ;; ticn_show_h
   \   000008BC   000090E5           LDR      R0,[R0, #+0]
   \   000008C0   000050E3           CMP      R0,#+0
   \   000008C4   2700000A           BEQ      ??walkman_Redraw_48
    991            {
    992              putchar_(GCanvas, 
    993                      orient ? ticn_rect.x1 : ticn_rect_h.x1, 
    994                      orient ? ticn_rect.y1 - StatusSize : ticn_rect_h.y1,
    995                      orient ? ticn_rect.x2 - ticn_rect.x1 : ticn_rect_h.y2 - ticn_rect_h.y1,
    996                      orient ? ticn_rect.y2 - ticn_rect.y1 : ticn_rect_h.y2 - ticn_rect_h.y1,
    997                      ICON(main_icons[ICN_TITLE],do_->title_icn));
   \   000008C8   B4B0DBE1           LDRH     R11,[R11, #+4]
   \   000008CC   08005BE1           CMP      R11,R8
   \   000008D0   D700D405           LDRBEQ   R0,[R4, #+215]
   \   000008D4   D610D405           LDRBEQ   R1,[R4, #+214]
   \   000008D8   0B00A011           MOVNE    R0,R11
   \   000008DC   00048101           ORREQ    R0,R1,R0, LSL #+8
   \   000008E0   000050E3           CMP      R0,#+0
   \   000008E4   1F00000A           BEQ      ??walkman_Redraw_48
   \   000008E8   08005BE1           CMP      R11,R8
   \   000008EC   0600001A           BNE      ??walkman_Redraw_49
   \   000008F0   D700D4E5           LDRB     R0,[R4, #+215]
   \   000008F4   D610D4E5           LDRB     R1,[R4, #+214]
   \   000008F8   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000008FC   080050E1           CMP      R0,R8
   \   00000900   1800000A           BEQ      ??walkman_Redraw_48
   \   00000904   D700D4E5           LDRB     R0,[R4, #+215]
   \   00000908   00B481E1           ORR      R11,R1,R0, LSL #+8
   \                     ??walkman_Redraw_49:
   \   0000090C   000059E3           CMP      R9,#+0
   \   00000910   0900000A           BEQ      ??walkman_Redraw_50
   \   00000914   C8369FE5           LDR      R3,??walkman_Redraw_1+0xC8  ;; ticn_rect
   \   00000918   B420D3E1           LDRH     R2,[R3, #+4]
   \   0000091C   B600D3E1           LDRH     R0,[R3, #+6]
   \   00000920   B010D3E1           LDRH     R1,[R3, #+0]
   \   00000924   B230D3E1           LDRH     R3,[R3, #+2]
   \   00000928   304097E5           LDR      R4,[R7, #+48]
   \   0000092C   020040E0           SUB      R0,R0,R2
   \   00000930   013043E0           SUB      R3,R3,R1
   \   00000934   042042E0           SUB      R2,R2,R4
   \   00000938   050000EA           B        ??walkman_Redraw_51
   \                     ??walkman_Redraw_50:
   \   0000093C   A4169FE5           LDR      R1,??walkman_Redraw_1+0xCC  ;; ticn_rect_h
   \   00000940   B420D1E1           LDRH     R2,[R1, #+4]
   \   00000944   B600D1E1           LDRH     R0,[R1, #+6]
   \   00000948   B010D1E1           LDRH     R1,[R1, #+0]
   \   0000094C   023040E0           SUB      R3,R0,R2
   \   00000950   0300A0E1           MOV      R0,R3
   \                     ??walkman_Redraw_51:
   \   00000954   00082DE9           PUSH     {R11}
   \   00000958   01002DE9           PUSH     {R0}
   \   0000095C   0600A0E1           MOV      R0,R6
   \   00000960   400100EF           SWI      +320
   \   00000964   08D08DE2           ADD      SP,SP,#+8
    998            }
    999            
   1000            //----------------------------------------------------------------------------
   1001            //Equalizer preset icon
   1002            if (orient ? eq_preset_show : eq_preset_show_h)
   \                     ??walkman_Redraw_48:
   \   00000968   000059E3           CMP      R9,#+0
   \   0000096C   78069F15           LDRNE    R0,??walkman_Redraw_1+0xD0  ;; eq_preset_show
   \   00000970   78069F05           LDREQ    R0,??walkman_Redraw_1+0xD4  ;; eq_preset_show_h
   \   00000974   000090E5           LDR      R0,[R0, #+0]
   \   00000978   000050E3           CMP      R0,#+0
   \   0000097C   2B00000A           BEQ      ??walkman_Redraw_52
   1003            {
   1004              putchar_(GCanvas, 
   1005                       orient ? eq_preset_rect.x1 : eq_preset_rect_h.x1, 
   1006                       orient ? eq_preset_rect.y1 - StatusSize : eq_preset_rect_h.y1,
   1007                       orient ? eq_preset_rect.x2 - eq_preset_rect.x1 : eq_preset_rect_h.y2 - eq_preset_rect_h.y1,
   1008                       orient ? eq_preset_rect.y2 - eq_preset_rect.y1: eq_preset_rect_h.y2 - eq_preset_rect_h.y1,
   1009                       presets[wb->preset < 7 ? wb->preset : 6]);
   \   00000980   3400D5E5           LDRB     R0,[R5, #+52]
   \   00000984   68469FE5           LDR      R4,??walkman_Redraw_1+0xD8  ;; presets
   \   00000988   070050E3           CMP      R0,#+7
   \   0000098C   0600A023           MOVCS    R0,#+6
   \   00000990   800084E0           ADD      R0,R4,R0, LSL #+1
   \   00000994   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000998   000050E3           CMP      R0,#+0
   \   0000099C   2300000A           BEQ      ??walkman_Redraw_52
   \   000009A0   3400D5E5           LDRB     R0,[R5, #+52]
   \   000009A4   070050E3           CMP      R0,#+7
   \   000009A8   0600A023           MOVCS    R0,#+6
   \   000009AC   800084E0           ADD      R0,R4,R0, LSL #+1
   \   000009B0   B000D0E1           LDRH     R0,[R0, #+0]
   \   000009B4   080050E1           CMP      R0,R8
   \   000009B8   1C00000A           BEQ      ??walkman_Redraw_52
   \   000009BC   3400D5E5           LDRB     R0,[R5, #+52]
   \   000009C0   070050E3           CMP      R0,#+7
   \   000009C4   00B0A031           MOVCC    R11,R0
   \   000009C8   06B0A023           MOVCS    R11,#+6
   \   000009CC   000059E3           CMP      R9,#+0
   \   000009D0   0900000A           BEQ      ??walkman_Redraw_53
   \   000009D4   1C369FE5           LDR      R3,??walkman_Redraw_1+0xDC  ;; eq_preset_rect
   \   000009D8   B420D3E1           LDRH     R2,[R3, #+4]
   \   000009DC   B600D3E1           LDRH     R0,[R3, #+6]
   \   000009E0   B010D3E1           LDRH     R1,[R3, #+0]
   \   000009E4   B230D3E1           LDRH     R3,[R3, #+2]
   \   000009E8   30C097E5           LDR      R12,[R7, #+48]
   \   000009EC   020040E0           SUB      R0,R0,R2
   \   000009F0   013043E0           SUB      R3,R3,R1
   \   000009F4   0C2042E0           SUB      R2,R2,R12
   \   000009F8   050000EA           B        ??walkman_Redraw_54
   \                     ??walkman_Redraw_53:
   \   000009FC   F8159FE5           LDR      R1,??walkman_Redraw_1+0xE0  ;; eq_preset_rect_h
   \   00000A00   B420D1E1           LDRH     R2,[R1, #+4]
   \   00000A04   B600D1E1           LDRH     R0,[R1, #+6]
   \   00000A08   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000A0C   023040E0           SUB      R3,R0,R2
   \   00000A10   0300A0E1           MOV      R0,R3
   \                     ??walkman_Redraw_54:
   \   00000A14   8B4084E0           ADD      R4,R4,R11, LSL #+1
   \   00000A18   B040D4E1           LDRH     R4,[R4, #+0]
   \   00000A1C   10002DE9           PUSH     {R4}
   \   00000A20   01002DE9           PUSH     {R0}
   \   00000A24   0600A0E1           MOV      R0,R6
   \   00000A28   400100EF           SWI      +320
   \   00000A2C   08D08DE2           ADD      SP,SP,#+8
   1010            }
   1011            
   1012            //----------------------------------------------------------------------------
   1013            //Play/Stop icon
   1014            if (orient ? pls_show : pls_show_h)
   \                     ??walkman_Redraw_52:
   \   00000A30   000059E3           CMP      R9,#+0
   \   00000A34   C4059F15           LDRNE    R0,??walkman_Redraw_1+0xE4  ;; pls_show
   \   00000A38   C4059F05           LDREQ    R0,??walkman_Redraw_1+0xE8  ;; pls_show_h
   \   00000A3C   000090E5           LDR      R0,[R0, #+0]
   \   00000A40   000050E3           CMP      R0,#+0
   \   00000A44   5800000A           BEQ      ??walkman_Redraw_55
   1015            {
   1016              putchar_(GCanvas, 
   1017                      orient ? pls_rect.x1 : pls_rect_h.x1, 
   1018                      orient ? pls_rect.y1 - StatusSize : pls_rect_h.y1,
   1019                      orient ? pls_rect.x2 - pls_rect.x1 : pls_rect_h.x2 - pls_rect_h.x1,
   1020                      orient ? pls_rect.y2 - pls_rect.y1 : pls_rect_h.y2 - pls_rect_h.y1,
   1021                      wb->status==MP_STATUS_PLAY ? playicn : 
   1022                        wb->status==MP_STATUS_PAUSE ? use_pauseicn ? pauseicn : stopicn : 
   1023                          wb->status==MP_STATUS_FORWARD ? media_images[IMG_FORWARD] : 
   1024                            wb->status==MP_STATUS_REWIND ? media_images[IMG_REWIND] : stopicn);
   \   00000A48   B8059FE5           LDR      R0,??walkman_Redraw_1+0xEC  ;; media_images + 2
   \   00000A4C   19C0D5E5           LDRB     R12,[R5, #+25]
   \   00000A50   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000A54   B0059FE5           LDR      R0,??walkman_Redraw_1+0xF0  ;; playicn
   \   00000A58   01005CE3           CMP      R12,#+1
   \   00000A5C   B020D0E1           LDRH     R2,[R0, #+0]
   \   00000A60   A8059FE5           LDR      R0,??walkman_Redraw_1+0xF4  ;; media_images
   \   00000A64   B030D0E1           LDRH     R3,[R0, #+0]
   \   00000A68   A4059FE5           LDR      R0,??walkman_Redraw_1+0xF8  ;; pauseicn
   \   00000A6C   B040D0E1           LDRH     R4,[R0, #+0]
   \   00000A70   A0059FE5           LDR      R0,??walkman_Redraw_1+0xFC  ;; use_pauseicn
   \   00000A74   00B090E5           LDR      R11,[R0, #+0]
   \   00000A78   9C059FE5           LDR      R0,??walkman_Redraw_1+0x100  ;; stopicn
   \   00000A7C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000A80   0700001A           BNE      ??walkman_Redraw_56
   \                     ??walkman_Redraw_57:
   \   00000A84   02C0A0E1           MOV      R12,R2
   \                     ??walkman_Redraw_58:
   \   00000A88   00005CE3           CMP      R12,#+0
   \   00000A8C   4600000A           BEQ      ??walkman_Redraw_55
   \                     ??walkman_Redraw_59:
   \   00000A90   19C0D5E5           LDRB     R12,[R5, #+25]
   \   00000A94   01005CE3           CMP      R12,#+1
   \   00000A98   2100001A           BNE      ??walkman_Redraw_60
   \   00000A9C   0200A0E1           MOV      R0,R2
   \   00000AA0   2A0000EA           B        ??walkman_Redraw_61
   \                     ??walkman_Redraw_56:
   \   00000AA4   02005CE3           CMP      R12,#+2
   \   00000AA8   0500001A           BNE      ??walkman_Redraw_62
   \   00000AAC   00005BE3           CMP      R11,#+0
   \   00000AB0   0100000A           BEQ      ??walkman_Redraw_63
   \                     ??walkman_Redraw_64:
   \   00000AB4   04C0A0E1           MOV      R12,R4
   \   00000AB8   F2FFFFEA           B        ??walkman_Redraw_58
   \                     ??walkman_Redraw_63:
   \   00000ABC   00C0A0E1           MOV      R12,R0
   \   00000AC0   F0FFFFEA           B        ??walkman_Redraw_58
   \                     ??walkman_Redraw_62:
   \   00000AC4   03005CE3           CMP      R12,#+3
   \   00000AC8   0100001A           BNE      ??walkman_Redraw_65
   \                     ??walkman_Redraw_66:
   \   00000ACC   03C0A0E1           MOV      R12,R3
   \   00000AD0   ECFFFFEA           B        ??walkman_Redraw_58
   \                     ??walkman_Redraw_65:
   \   00000AD4   05005CE3           CMP      R12,#+5
   \   00000AD8   0100001A           BNE      ??walkman_Redraw_67
   \                     ??walkman_Redraw_68:
   \   00000ADC   01C0A0E1           MOV      R12,R1
   \   00000AE0   E8FFFFEA           B        ??walkman_Redraw_58
   \                     ??walkman_Redraw_67:
   \   00000AE4   000050E3           CMP      R0,#+0
   \   00000AE8   0100000A           BEQ      ??walkman_Redraw_69
   \   00000AEC   01005CE3           CMP      R12,#+1
   \   00000AF0   E3FFFF0A           BEQ      ??walkman_Redraw_57
   \                     ??walkman_Redraw_69:
   \   00000AF4   02005CE3           CMP      R12,#+2
   \   00000AF8   0200001A           BNE      ??walkman_Redraw_70
   \   00000AFC   00005BE3           CMP      R11,#+0
   \   00000B00   EDFFFF0A           BEQ      ??walkman_Redraw_63
   \   00000B04   EAFFFFEA           B        ??walkman_Redraw_64
   \                     ??walkman_Redraw_70:
   \   00000B08   03005CE3           CMP      R12,#+3
   \   00000B0C   EEFFFF0A           BEQ      ??walkman_Redraw_66
   \   00000B10   05005CE3           CMP      R12,#+5
   \   00000B14   F0FFFF0A           BEQ      ??walkman_Redraw_68
   \   00000B18   080050E1           CMP      R0,R8
   \   00000B1C   DBFFFF1A           BNE      ??walkman_Redraw_59
   \   00000B20   210000EA           B        ??walkman_Redraw_55
   \                     ??walkman_Redraw_60:
   \   00000B24   02005CE3           CMP      R12,#+2
   \   00000B28   0300001A           BNE      ??walkman_Redraw_71
   \   00000B2C   00005BE3           CMP      R11,#+0
   \   00000B30   0600000A           BEQ      ??walkman_Redraw_61
   \   00000B34   0400A0E1           MOV      R0,R4
   \   00000B38   040000EA           B        ??walkman_Redraw_61
   \                     ??walkman_Redraw_71:
   \   00000B3C   03005CE3           CMP      R12,#+3
   \   00000B40   0300A001           MOVEQ    R0,R3
   \   00000B44   0100000A           BEQ      ??walkman_Redraw_61
   \   00000B48   05005CE3           CMP      R12,#+5
   \   00000B4C   0100A001           MOVEQ    R0,R1
   \                     ??walkman_Redraw_61:
   \   00000B50   000059E3           CMP      R9,#+0
   \   00000B54   0800000A           BEQ      ??walkman_Redraw_72
   \   00000B58   C0349FE5           LDR      R3,??walkman_Redraw_1+0x104  ;; pls_rect
   \   00000B5C   B420D3E1           LDRH     R2,[R3, #+4]
   \   00000B60   B610D3E1           LDRH     R1,[R3, #+6]
   \   00000B64   30B097E5           LDR      R11,[R7, #+48]
   \   00000B68   024041E0           SUB      R4,R1,R2
   \   00000B6C   B010D3E1           LDRH     R1,[R3, #+0]
   \   00000B70   B230D3E1           LDRH     R3,[R3, #+2]
   \   00000B74   0B2042E0           SUB      R2,R2,R11
   \   00000B78   050000EA           B        ??walkman_Redraw_73
   \                     ??walkman_Redraw_72:
   \   00000B7C   A0349FE5           LDR      R3,??walkman_Redraw_1+0x108  ;; pls_rect_h
   \   00000B80   B420D3E1           LDRH     R2,[R3, #+4]
   \   00000B84   B610D3E1           LDRH     R1,[R3, #+6]
   \   00000B88   024041E0           SUB      R4,R1,R2
   \   00000B8C   B010D3E1           LDRH     R1,[R3, #+0]
   \   00000B90   B230D3E1           LDRH     R3,[R3, #+2]
   \                     ??walkman_Redraw_73:
   \   00000B94   013043E0           SUB      R3,R3,R1
   \   00000B98   01002DE9           PUSH     {R0}
   \   00000B9C   10002DE9           PUSH     {R4}
   \   00000BA0   0600A0E1           MOV      R0,R6
   \   00000BA4   400100EF           SWI      +320
   \   00000BA8   08D08DE2           ADD      SP,SP,#+8
   1025            }
   1026            int MIN,SEC;
   1027            rc.y1=gc_rc.y1;
   \                     ??walkman_Redraw_55:
   \   00000BAC   B411DDE1           LDRH     R1,[SP, #+20]
   1028            rc.y2=gc_rc.y2;
   1029            //----------------------------------------------------------------------------
   1030            //Current time
   1031            if (orient ? ctime_show : ctime_show_h)
   \   00000BB0   000059E3           CMP      R9,#+0
   \   00000BB4   6C049F15           LDRNE    R0,??walkman_Redraw_1+0x10C  ;; ctime_show
   \   00000BB8   B410CDE1           STRH     R1,[SP, #+4]
   \   00000BBC   B611DDE1           LDRH     R1,[SP, #+22]
   \   00000BC0   64049F05           LDREQ    R0,??walkman_Redraw_1+0x110  ;; ctime_show_h
   \   00000BC4   B610CDE1           STRH     R1,[SP, #+6]
   \   00000BC8   000090E5           LDR      R0,[R0, #+0]
   \   00000BCC   000050E3           CMP      R0,#+0
   \   00000BD0   4400000A           BEQ      ??walkman_Redraw_74
   1032            {
   1033              MIN=cur/60;
   1034              SEC=cur%60;
   1035              snwprintf(buf,49, orient ? ctime_mask : ctime_mask_h, MIN, SEC);
   \   00000BD4   08009DE5           LDR      R0,[SP, #+8]
   \   00000BD8   000059E3           CMP      R9,#+0
   \   00000BDC   4C249F15           LDRNE    R2,??walkman_Redraw_1+0x114  ;; ctime_mask
   \   00000BE0   3C10A0E3           MOV      R1,#+60
   \   00000BE4   48249F05           LDREQ    R2,??walkman_Redraw_1+0x118  ;; ctime_mask_h
   1036              
   1037              rc.x1 = orient ? ctime_rc.x1 : ctime_rc_h.x1;
   \   00000BE8   48B49FE5           LDR      R11,??walkman_Redraw_1+0x11C  ;; ctime_rc_h
   \   00000BEC   48449FE5           LDR      R4,??walkman_Redraw_1+0x120  ;; ctime_rc
   \   00000BF0   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000BF4   01002DE9           PUSH     {R0}
   \   00000BF8   0C009DE5           LDR      R0,[SP, #+12]
   \   00000BFC   3C10A0E3           MOV      R1,#+60
   \   00000C00   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000C04   0130A0E1           MOV      R3,R1
   \   00000C08   3110A0E3           MOV      R1,#+49
   \   00000C0C   24008DE2           ADD      R0,SP,#+36
   \   00000C10   150100EF           SWI      +277
   \   00000C14   000059E3           CMP      R9,#+0
   \   00000C18   04D08DE2           ADD      SP,SP,#+4
   \   00000C1C   B000D411           LDRHNE   R0,[R4, #+0]
   1038              rc.x2 = orient ? ctime_rc.x2 : ctime_rc_h.x2;
   1039              GC_ValidateRect(GCanvas,&rc);
   \   00000C20   0D10A0E1           MOV      R1,SP
   \   00000C24   B000DB01           LDRHEQ   R0,[R11, #+0]
   \   00000C28   B000CDE1           STRH     R0,[SP, #+0]
   \   00000C2C   B200D411           LDRHNE   R0,[R4, #+2]
   \   00000C30   B200DB01           LDRHEQ   R0,[R11, #+2]
   \   00000C34   B200CDE1           STRH     R0,[SP, #+2]
   \   00000C38   0600A0E1           MOV      R0,R6
   \   00000C3C   EA0100EF           SWI      +490
   1040              DrawLine(orient ? ctime_font : ctime_font_h, 
   1041                       buf, 
   1042                       orient ? ctime_ct : ctime_ct_h, 
   1043                       rc.x1, 
   1044                       orient ? ctime_rc.y1 - StatusSize : ctime_rc_h.y1, 
   1045                       rc.x2,
   1046                       orient ? ctime_rc.y2 - StatusSize : ctime_rc_h.y2,
   1047                       orient ? ctime_color : ctime_color_h, 
   1048                       orient ? ctime_scolor : ctime_scolor_h,
   1049                       true,
   1050                       orient ? ctime_hl : ctime_hl_h);
   \   00000C40   000059E3           CMP      R9,#+0
   \   00000C44   0E00000A           BEQ      ??walkman_Redraw_75
   \   00000C48   F0039FE5           LDR      R0,??walkman_Redraw_1+0x124  ;; ctime_hl
   \   00000C4C   B620D4E1           LDRH     R2,[R4, #+6]
   \   00000C50   001090E5           LDR      R1,[R0, #+0]
   \   00000C54   E8039FE5           LDR      R0,??walkman_Redraw_1+0x128  ;; ctime_scolor
   \   00000C58   003090E5           LDR      R3,[R0, #+0]
   \   00000C5C   E4039FE5           LDR      R0,??walkman_Redraw_1+0x12C  ;; ctime_color
   \   00000C60   00C090E5           LDR      R12,[R0, #+0]
   \   00000C64   300097E5           LDR      R0,[R7, #+48]
   \   00000C68   00E042E0           SUB      LR,R2,R0
   \   00000C6C   B420D4E1           LDRH     R2,[R4, #+4]
   \   00000C70   004042E0           SUB      R4,R2,R0
   \   00000C74   D0039FE5           LDR      R0,??walkman_Redraw_1+0x130  ;; ctime_ct
   \   00000C78   002090E5           LDR      R2,[R0, #+0]
   \   00000C7C   CC039FE5           LDR      R0,??walkman_Redraw_1+0x134  ;; ctime_font
   \   00000C80   0A0000EA           B        ??walkman_Redraw_76
   \                     ??walkman_Redraw_75:
   \   00000C84   C8039FE5           LDR      R0,??walkman_Redraw_1+0x138  ;; ctime_hl_h
   \   00000C88   B6E0DBE1           LDRH     LR,[R11, #+6]
   \   00000C8C   001090E5           LDR      R1,[R0, #+0]
   \   00000C90   C0039FE5           LDR      R0,??walkman_Redraw_1+0x13C  ;; ctime_scolor_h
   \   00000C94   B440DBE1           LDRH     R4,[R11, #+4]
   \   00000C98   003090E5           LDR      R3,[R0, #+0]
   \   00000C9C   B8039FE5           LDR      R0,??walkman_Redraw_1+0x140  ;; ctime_color_h
   \   00000CA0   00C090E5           LDR      R12,[R0, #+0]
   \   00000CA4   B4039FE5           LDR      R0,??walkman_Redraw_1+0x144  ;; ctime_ct_h
   \   00000CA8   002090E5           LDR      R2,[R0, #+0]
   \   00000CAC   B0039FE5           LDR      R0,??walkman_Redraw_1+0x148  ;; ctime_font_h
   \                     ??walkman_Redraw_76:
   \   00000CB0   000090E5           LDR      R0,[R0, #+0]
   \   00000CB4   02002DE9           PUSH     {R1}
   \   00000CB8   0110A0E3           MOV      R1,#+1
   \   00000CBC   02002DE9           PUSH     {R1}
   \   00000CC0   08002DE9           PUSH     {R3}
   \   00000CC4   00102DE9           PUSH     {R12}
   \   00000CC8   00402DE9           PUSH     {LR}
   \   00000CCC   B611DDE1           LDRH     R1,[SP, #+22]
   \   00000CD0   02002DE9           PUSH     {R1}
   \   00000CD4   10002DE9           PUSH     {R4}
   \   00000CD8   BC31DDE1           LDRH     R3,[SP, #+28]
   \   00000CDC   3C108DE2           ADD      R1,SP,#+60
   \   00000CE0   ........           BL       ??DrawLine
   \   00000CE4   1CD08DE2           ADD      SP,SP,#+28
   1051            }
   1052            //----------------------------------------------------------------------------
   1053            //Full time
   1054            if (orient ? ftime_show : ftime_show_h)
   \                     ??walkman_Redraw_74:
   \   00000CE8   000059E3           CMP      R9,#+0
   \   00000CEC   74039F15           LDRNE    R0,??walkman_Redraw_1+0x14C  ;; ftime_show
   \   00000CF0   74039F05           LDREQ    R0,??walkman_Redraw_1+0x150  ;; ftime_show_h
   \   00000CF4   000090E5           LDR      R0,[R0, #+0]
   \   00000CF8   000050E3           CMP      R0,#+0
   \   00000CFC   4B00000A           BEQ      ??walkman_Redraw_77
   1055            {
   1056              MIN=mm_info->fulltime/60;
   1057              SEC=mm_info->fulltime%60;
   1058              snwprintf(buf,49,orient ? ftime_mask : ftime_mask_h,MIN,SEC);
   \   00000D00   7F00DAE5           LDRB     R0,[R10, #+127]
   \   00000D04   7E10DAE5           LDRB     R1,[R10, #+126]
   1059              rc.x1 = orient ? ftime_rc.x1 : ftime_rc_h.x1;
   \   00000D08   60B39FE5           LDR      R11,??walkman_Redraw_1+0x154  ;; ftime_rc_h
   \   00000D0C   60439FE5           LDR      R4,??walkman_Redraw_1+0x158  ;; ftime_rc
   \   00000D10   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000D14   7D10DAE5           LDRB     R1,[R10, #+125]
   \   00000D18   000059E3           CMP      R9,#+0
   \   00000D1C   54239F15           LDRNE    R2,??walkman_Redraw_1+0x15C  ;; ftime_mask
   \   00000D20   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000D24   7C10DAE5           LDRB     R1,[R10, #+124]
   \   00000D28   4C239F05           LDREQ    R2,??walkman_Redraw_1+0x160  ;; ftime_mask_h
   \   00000D2C   003481E1           ORR      R3,R1,R0, LSL #+8
   \   00000D30   0300A0E1           MOV      R0,R3
   \   00000D34   3C10A0E3           MOV      R1,#+60
   \   00000D38   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000D3C   01002DE9           PUSH     {R0}
   \   00000D40   3C10A0E3           MOV      R1,#+60
   \   00000D44   0300A0E1           MOV      R0,R3
   \   00000D48   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000D4C   0130A0E1           MOV      R3,R1
   \   00000D50   3110A0E3           MOV      R1,#+49
   \   00000D54   24008DE2           ADD      R0,SP,#+36
   \   00000D58   150100EF           SWI      +277
   \   00000D5C   000059E3           CMP      R9,#+0
   \   00000D60   04D08DE2           ADD      SP,SP,#+4
   \   00000D64   B000D411           LDRHNE   R0,[R4, #+0]
   1060              rc.x2 = orient ? ftime_rc.x2 : ftime_rc_h.x2;
   1061              GC_ValidateRect(GCanvas,&rc);
   \   00000D68   0D10A0E1           MOV      R1,SP
   \   00000D6C   B000DB01           LDRHEQ   R0,[R11, #+0]
   \   00000D70   B000CDE1           STRH     R0,[SP, #+0]
   \   00000D74   B200D411           LDRHNE   R0,[R4, #+2]
   \   00000D78   B200DB01           LDRHEQ   R0,[R11, #+2]
   \   00000D7C   B200CDE1           STRH     R0,[SP, #+2]
   \   00000D80   0600A0E1           MOV      R0,R6
   \   00000D84   EA0100EF           SWI      +490
   1062              DrawLine(orient ? ftime_font : ftime_font_h, 
   1063                       buf, 
   1064                       orient ? ftime_ct : ftime_ct_h, 
   1065                       rc.x1, 
   1066                       orient ? ftime_rc.y1 - StatusSize : ftime_rc_h.y1, 
   1067                       rc.x2,
   1068                       orient ? ftime_rc.y2 - StatusSize : ftime_rc_h.y2,
   1069                       orient ? ftime_color : ftime_color_h, 
   1070                       orient ? ftime_scolor : ftime_scolor_h,
   1071                       true,
   1072                       orient ? ftime_hl : ftime_hl_h);
   \   00000D88   000059E3           CMP      R9,#+0
   \   00000D8C   0E00000A           BEQ      ??walkman_Redraw_78
   \   00000D90   E8029FE5           LDR      R0,??walkman_Redraw_1+0x164  ;; ftime_hl
   \   00000D94   B620D4E1           LDRH     R2,[R4, #+6]
   \   00000D98   001090E5           LDR      R1,[R0, #+0]
   \   00000D9C   E0029FE5           LDR      R0,??walkman_Redraw_1+0x168  ;; ftime_scolor
   \   00000DA0   003090E5           LDR      R3,[R0, #+0]
   \   00000DA4   DC029FE5           LDR      R0,??walkman_Redraw_1+0x16C  ;; ftime_color
   \   00000DA8   00C090E5           LDR      R12,[R0, #+0]
   \   00000DAC   300097E5           LDR      R0,[R7, #+48]
   \   00000DB0   00E042E0           SUB      LR,R2,R0
   \   00000DB4   B420D4E1           LDRH     R2,[R4, #+4]
   \   00000DB8   004042E0           SUB      R4,R2,R0
   \   00000DBC   C8029FE5           LDR      R0,??walkman_Redraw_1+0x170  ;; ftime_ct
   \   00000DC0   002090E5           LDR      R2,[R0, #+0]
   \   00000DC4   C4029FE5           LDR      R0,??walkman_Redraw_1+0x174  ;; ftime_font
   \   00000DC8   0A0000EA           B        ??walkman_Redraw_79
   \                     ??walkman_Redraw_78:
   \   00000DCC   C0029FE5           LDR      R0,??walkman_Redraw_1+0x178  ;; ftime_hl_h
   \   00000DD0   B6E0DBE1           LDRH     LR,[R11, #+6]
   \   00000DD4   001090E5           LDR      R1,[R0, #+0]
   \   00000DD8   B8029FE5           LDR      R0,??walkman_Redraw_1+0x17C  ;; ftime_scolor_h
   \   00000DDC   B440DBE1           LDRH     R4,[R11, #+4]
   \   00000DE0   003090E5           LDR      R3,[R0, #+0]
   \   00000DE4   B0029FE5           LDR      R0,??walkman_Redraw_1+0x180  ;; ftime_color_h
   \   00000DE8   00C090E5           LDR      R12,[R0, #+0]
   \   00000DEC   AC029FE5           LDR      R0,??walkman_Redraw_1+0x184  ;; ftime_ct_h
   \   00000DF0   002090E5           LDR      R2,[R0, #+0]
   \   00000DF4   A8029FE5           LDR      R0,??walkman_Redraw_1+0x188  ;; ftime_font_h
   \                     ??walkman_Redraw_79:
   \   00000DF8   000090E5           LDR      R0,[R0, #+0]
   \   00000DFC   02002DE9           PUSH     {R1}
   \   00000E00   0110A0E3           MOV      R1,#+1
   \   00000E04   02002DE9           PUSH     {R1}
   \   00000E08   08002DE9           PUSH     {R3}
   \   00000E0C   00102DE9           PUSH     {R12}
   \   00000E10   00402DE9           PUSH     {LR}
   \   00000E14   B611DDE1           LDRH     R1,[SP, #+22]
   \   00000E18   02002DE9           PUSH     {R1}
   \   00000E1C   10002DE9           PUSH     {R4}
   \   00000E20   BC31DDE1           LDRH     R3,[SP, #+28]
   \   00000E24   3C108DE2           ADD      R1,SP,#+60
   \   00000E28   ........           BL       ??DrawLine
   \   00000E2C   1CD08DE2           ADD      SP,SP,#+28
   1073              
   1074            }
   1075            //----------------------------------------------------------------------------
   1076            //Time left
   1077            if (orient ? ltime_show : ltime_show_h)
   \                     ??walkman_Redraw_77:
   \   00000E30   000059E3           CMP      R9,#+0
   \   00000E34   6C029F15           LDRNE    R0,??walkman_Redraw_1+0x18C  ;; ltime_show
   \   00000E38   6C029F05           LDREQ    R0,??walkman_Redraw_1+0x190  ;; ltime_show_h
   \   00000E3C   000090E5           LDR      R0,[R0, #+0]
   \   00000E40   000050E3           CMP      R0,#+0
   \   00000E44   BB00000A           BEQ      ??walkman_Redraw_80
   1078            {
   1079              MIN=(mm_info->fulltime-cur)/60;
   1080              SEC=(mm_info->fulltime-cur)%60;
   1081              snwprintf(buf,49,orient ? ltime_mask : ltime_mask_h,MIN,SEC);
   \   00000E48   7F00DAE5           LDRB     R0,[R10, #+127]
   \   00000E4C   7E10DAE5           LDRB     R1,[R10, #+126]
   1082              rc.x1 = orient ? ltime_rc.x1 : ltime_rc_h.x1;
   \   00000E50   58B29FE5           LDR      R11,??walkman_Redraw_1+0x194  ;; ltime_rc_h
   \   00000E54   58429FE5           LDR      R4,??walkman_Redraw_1+0x198  ;; ltime_rc
   \   00000E58   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000E5C   7D10DAE5           LDRB     R1,[R10, #+125]
   \   00000E60   000059E3           CMP      R9,#+0
   \   00000E64   4C229F15           LDRNE    R2,??walkman_Redraw_1+0x19C  ;; ltime_mask
   \   00000E68   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000E6C   7C10DAE5           LDRB     R1,[R10, #+124]
   \   00000E70   44229F05           LDREQ    R2,??walkman_Redraw_1+0x1A0  ;; ltime_mask_h
   \   00000E74   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000E78   08109DE5           LDR      R1,[SP, #+8]
   \   00000E7C   013040E0           SUB      R3,R0,R1
   \   00000E80   0300A0E1           MOV      R0,R3
   \   00000E84   3C10A0E3           MOV      R1,#+60
   \   00000E88   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000E8C   01002DE9           PUSH     {R0}
   \   00000E90   3C10A0E3           MOV      R1,#+60
   \   00000E94   0300A0E1           MOV      R0,R3
   \   00000E98   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000E9C   0130A0E1           MOV      R3,R1
   \   00000EA0   3110A0E3           MOV      R1,#+49
   \   00000EA4   24008DE2           ADD      R0,SP,#+36
   \   00000EA8   150100EF           SWI      +277
   \   00000EAC   000059E3           CMP      R9,#+0
   \   00000EB0   04D08DE2           ADD      SP,SP,#+4
   \   00000EB4   B000D411           LDRHNE   R0,[R4, #+0]
   1083              rc.x2 = orient ? ltime_rc.x2 : ltime_rc_h.x2;
   1084              GC_ValidateRect(GCanvas,&rc);
   \   00000EB8   0D10A0E1           MOV      R1,SP
   \   00000EBC   B000DB01           LDRHEQ   R0,[R11, #+0]
   \   00000EC0   B000CDE1           STRH     R0,[SP, #+0]
   \   00000EC4   B200D411           LDRHNE   R0,[R4, #+2]
   \   00000EC8   B200DB01           LDRHEQ   R0,[R11, #+2]
   \   00000ECC   B200CDE1           STRH     R0,[SP, #+2]
   \   00000ED0   0600A0E1           MOV      R0,R6
   \   00000ED4   EA0100EF           SWI      +490
   1085              DrawLine(orient ? ltime_font : ltime_font_h, 
   1086                       buf, 
   1087                       orient ? ltime_ct : ltime_ct_h, 
   1088                       rc.x1, 
   1089                       orient ? ltime_rc.y1 - StatusSize : ltime_rc_h.y1, 
   1090                       rc.x2,
   1091                       orient ? ltime_rc.y2 - StatusSize : ltime_rc_h.y2,
   1092                       orient ? ltime_color : ltime_color_h, 
   1093                       orient ? ltime_scolor : ltime_scolor_h,
   1094                       true,
   1095                       orient ? ltime_hl : ltime_hl_h);
   \   00000ED8   000059E3           CMP      R9,#+0
   \   00000EDC   7C00000A           BEQ      ??walkman_Redraw_81
   \   00000EE0   D8019FE5           LDR      R0,??walkman_Redraw_1+0x1A4  ;; ltime_hl
   \   00000EE4   B620D4E1           LDRH     R2,[R4, #+6]
   \   00000EE8   001090E5           LDR      R1,[R0, #+0]
   \   00000EEC   D0019FE5           LDR      R0,??walkman_Redraw_1+0x1A8  ;; ltime_scolor
   \   00000EF0   003090E5           LDR      R3,[R0, #+0]
   \   00000EF4   CC019FE5           LDR      R0,??walkman_Redraw_1+0x1AC  ;; ltime_color
   \   00000EF8   00C090E5           LDR      R12,[R0, #+0]
   \   00000EFC   300097E5           LDR      R0,[R7, #+48]
   \   00000F00   00E042E0           SUB      LR,R2,R0
   \   00000F04   B420D4E1           LDRH     R2,[R4, #+4]
   \   00000F08   004042E0           SUB      R4,R2,R0
   \   00000F0C   B8019FE5           LDR      R0,??walkman_Redraw_1+0x1B0  ;; ltime_ct
   \   00000F10   002090E5           LDR      R2,[R0, #+0]
   \   00000F14   B4019FE5           LDR      R0,??walkman_Redraw_1+0x1B4  ;; ltime_font
   \   00000F18   780000EA           B        ??walkman_Redraw_82
   \                     ??walkman_Redraw_1:
   \   00000F1C   ........           DC32     v_MPA_ID
   \   00000F20   ........           DC32     nowmusic + 8
   \   00000F24   ........           DC32     use_accel
   \   00000F28   ........           DC32     ??onAccel
   \   00000F2C   ........           DC32     `?<Constant "MediaPlayer_Audio">`
   \   00000F30   ........           DC32     cfg_orient
   \   00000F34   ........           DC32     standartwnd
   \   00000F38   ........           DC32     `?<Constant "MediaPlayer_Audio">` + 152
   \   00000F3C   ........           DC32     MyBook
   \   00000F40   ........           DC32     playnow_h
   \   00000F44   ........           DC32     cover_rect_h
   \   00000F48   ........           DC32     cover_rect
   \   00000F4C   ........           DC32     cover_v_
   \   00000F50   ........           DC32     nowmusic + 10272
   \   00000F54   ........           DC32     cover_h_
   \   00000F58   ........           DC32     phone
   \   00000F5C   ........           DC32     `?<Constant "MediaPlayer_Audio">` + 372
   \   00000F60   ........           DC32     `?<Constant "MediaPlayer_Audio">` + 436
   \   00000F64   ........           DC32     successed_config_name
   \   00000F68   ........           DC32     successed_config_path
   \   00000F6C   ........           DC32     ProgressBar_Show
   \   00000F70   ........           DC32     ProgressBar_Show_h
   \   00000F74   ........           DC32     ProgressBar_highlight
   \   00000F78   ........           DC32     pbrect
   \   00000F7C   ........           DC32     ProgressBar_oColor
   \   00000F80   ........           DC32     ProgressBar_cColor
   \   00000F84   ........           DC32     ProgressBar_bColor
   \   00000F88   ........           DC32     ProgressBar_highlight_h
   \   00000F8C   ........           DC32     pbrect_h
   \   00000F90   ........           DC32     ProgressBar_oColor_h
   \   00000F94   ........           DC32     ProgressBar_cColor_h
   \   00000F98   ........           DC32     ProgressBar_bColor_h
   \   00000F9C   ........           DC32     ??isVolCtrl
   \   00000FA0   ........           DC32     VolumeBar_Show
   \   00000FA4   ........           DC32     VolumeBar_highlight
   \   00000FA8   ........           DC32     volrect
   \   00000FAC   ........           DC32     VolumeBar_oColor
   \   00000FB0   ........           DC32     VolumeBar_cColor
   \   00000FB4   ........           DC32     VolumeBar_bColor
   \   00000FB8   ........           DC32     aricn_show_h
   \   00000FBC   ........           DC32     main_icons
   \   00000FC0   ........           DC32     aricn_show
   \   00000FC4   ........           DC32     aricn_rect
   \   00000FC8   ........           DC32     aricn_rect_h
   \   00000FCC   ........           DC32     alicn_show
   \   00000FD0   ........           DC32     alicn_show_h
   \   00000FD4   ........           DC32     alicn_rect
   \   00000FD8   ........           DC32     alicn_rect_h
   \   00000FDC   ........           DC32     ticn_show
   \   00000FE0   ........           DC32     ticn_show_h
   \   00000FE4   ........           DC32     ticn_rect
   \   00000FE8   ........           DC32     ticn_rect_h
   \   00000FEC   ........           DC32     eq_preset_show
   \   00000FF0   ........           DC32     eq_preset_show_h
   \   00000FF4   ........           DC32     presets
   \   00000FF8   ........           DC32     eq_preset_rect
   \   00000FFC   ........           DC32     eq_preset_rect_h
   \   00001000   ........           DC32     pls_show
   \   00001004   ........           DC32     pls_show_h
   \   00001008   ........           DC32     media_images + 2
   \   0000100C   ........           DC32     playicn
   \   00001010   ........           DC32     media_images
   \   00001014   ........           DC32     pauseicn
   \   00001018   ........           DC32     use_pauseicn
   \   0000101C   ........           DC32     stopicn
   \   00001020   ........           DC32     pls_rect
   \   00001024   ........           DC32     pls_rect_h
   \   00001028   ........           DC32     ctime_show
   \   0000102C   ........           DC32     ctime_show_h
   \   00001030   ........           DC32     ctime_mask
   \   00001034   ........           DC32     ctime_mask_h
   \   00001038   ........           DC32     ctime_rc_h
   \   0000103C   ........           DC32     ctime_rc
   \   00001040   ........           DC32     ctime_hl
   \   00001044   ........           DC32     ctime_scolor
   \   00001048   ........           DC32     ctime_color
   \   0000104C   ........           DC32     ctime_ct
   \   00001050   ........           DC32     ctime_font
   \   00001054   ........           DC32     ctime_hl_h
   \   00001058   ........           DC32     ctime_scolor_h
   \   0000105C   ........           DC32     ctime_color_h
   \   00001060   ........           DC32     ctime_ct_h
   \   00001064   ........           DC32     ctime_font_h
   \   00001068   ........           DC32     ftime_show
   \   0000106C   ........           DC32     ftime_show_h
   \   00001070   ........           DC32     ftime_rc_h
   \   00001074   ........           DC32     ftime_rc
   \   00001078   ........           DC32     ftime_mask
   \   0000107C   ........           DC32     ftime_mask_h
   \   00001080   ........           DC32     ftime_hl
   \   00001084   ........           DC32     ftime_scolor
   \   00001088   ........           DC32     ftime_color
   \   0000108C   ........           DC32     ftime_ct
   \   00001090   ........           DC32     ftime_font
   \   00001094   ........           DC32     ftime_hl_h
   \   00001098   ........           DC32     ftime_scolor_h
   \   0000109C   ........           DC32     ftime_color_h
   \   000010A0   ........           DC32     ftime_ct_h
   \   000010A4   ........           DC32     ftime_font_h
   \   000010A8   ........           DC32     ltime_show
   \   000010AC   ........           DC32     ltime_show_h
   \   000010B0   ........           DC32     ltime_rc_h
   \   000010B4   ........           DC32     ltime_rc
   \   000010B8   ........           DC32     ltime_mask
   \   000010BC   ........           DC32     ltime_mask_h
   \   000010C0   ........           DC32     ltime_hl
   \   000010C4   ........           DC32     ltime_scolor
   \   000010C8   ........           DC32     ltime_color
   \   000010CC   ........           DC32     ltime_ct
   \   000010D0   ........           DC32     ltime_font
   \                     ??walkman_Redraw_81:
   \   000010D4   600F9FE5           LDR      R0,??walkman_Redraw_83  ;; ltime_hl_h
   \   000010D8   B6E0DBE1           LDRH     LR,[R11, #+6]
   \   000010DC   001090E5           LDR      R1,[R0, #+0]
   \   000010E0   580F9FE5           LDR      R0,??walkman_Redraw_83+0x4  ;; ltime_scolor_h
   \   000010E4   B440DBE1           LDRH     R4,[R11, #+4]
   \   000010E8   003090E5           LDR      R3,[R0, #+0]
   \   000010EC   500F9FE5           LDR      R0,??walkman_Redraw_83+0x8  ;; ltime_color_h
   \   000010F0   00C090E5           LDR      R12,[R0, #+0]
   \   000010F4   4C0F9FE5           LDR      R0,??walkman_Redraw_83+0xC  ;; ltime_ct_h
   \   000010F8   002090E5           LDR      R2,[R0, #+0]
   \   000010FC   480F9FE5           LDR      R0,??walkman_Redraw_83+0x10  ;; ltime_font_h
   \                     ??walkman_Redraw_82:
   \   00001100   000090E5           LDR      R0,[R0, #+0]
   \   00001104   02002DE9           PUSH     {R1}
   \   00001108   0110A0E3           MOV      R1,#+1
   \   0000110C   02002DE9           PUSH     {R1}
   \   00001110   08002DE9           PUSH     {R3}
   \   00001114   00102DE9           PUSH     {R12}
   \   00001118   00402DE9           PUSH     {LR}
   \   0000111C   B611DDE1           LDRH     R1,[SP, #+22]
   \   00001120   02002DE9           PUSH     {R1}
   \   00001124   10002DE9           PUSH     {R4}
   \   00001128   BC31DDE1           LDRH     R3,[SP, #+28]
   \   0000112C   3C108DE2           ADD      R1,SP,#+60
   \   00001130   ........           BL       ??DrawLine
   \   00001134   1CD08DE2           ADD      SP,SP,#+28
   1096            }
   1097            //----------------------------------------------------------------------------
   1098            //Title
   1099            if (orient ? title_show : title_show_h)
   \                     ??walkman_Redraw_80:
   \   00001138   000059E3           CMP      R9,#+0
   \   0000113C   0C0F9F15           LDRNE    R0,??walkman_Redraw_83+0x14  ;; title_show
   \   00001140   0C0F9F05           LDREQ    R0,??walkman_Redraw_83+0x18  ;; title_show_h
   \   00001144   000090E5           LDR      R0,[R0, #+0]
   \   00001148   000050E3           CMP      R0,#+0
   \   0000114C   3B00000A           BEQ      ??walkman_Redraw_84
   1100            {
   1101              rc.x1 = orient ? title_rc.x1 : title_rc_h.x1;
   \   00001150   00BF9FE5           LDR      R11,??walkman_Redraw_83+0x1C  ;; title_rc_h
   \   00001154   004F9FE5           LDR      R4,??walkman_Redraw_83+0x20  ;; title_rc
   \   00001158   000059E3           CMP      R9,#+0
   \   0000115C   B000D411           LDRHNE   R0,[R4, #+0]
   1102              rc.x2 = orient ? title_rc.x2 : title_rc_h.x2;
   1103              GC_ValidateRect(GCanvas,&rc);
   \   00001160   0D10A0E1           MOV      R1,SP
   \   00001164   B000DB01           LDRHEQ   R0,[R11, #+0]
   \   00001168   B000CDE1           STRH     R0,[SP, #+0]
   \   0000116C   B200D411           LDRHNE   R0,[R4, #+2]
   \   00001170   B200DB01           LDRHEQ   R0,[R11, #+2]
   \   00001174   B200CDE1           STRH     R0,[SP, #+2]
   \   00001178   0600A0E1           MOV      R0,R6
   \   0000117C   EA0100EF           SWI      +490
   1104              DrawLine2(orient ? title_font : title_font_h, 
   1105                        mm_info->title_str, 
   1106                        orient ? title_ct : title_ct_h, 
   1107                        rc.x1, 
   1108                        orient ? title_rc.y1 - StatusSize : title_rc_h.y1, 
   1109                        rc.x2,
   1110                        orient ? title_rc.y2 - StatusSize : title_rc_h.y2,
   1111                        orient ? title_color : title_color_h, 
   1112                        orient ? title_scolor : title_scolor_h,
   1113                        false,
   1114                        orient ? title_hl : title_hl_h);
   \   00001180   000059E3           CMP      R9,#+0
   \   00001184   0E00000A           BEQ      ??walkman_Redraw_85
   \   00001188   D00E9FE5           LDR      R0,??walkman_Redraw_83+0x24  ;; title_hl
   \   0000118C   B620D4E1           LDRH     R2,[R4, #+6]
   \   00001190   001090E5           LDR      R1,[R0, #+0]
   \   00001194   C80E9FE5           LDR      R0,??walkman_Redraw_83+0x28  ;; title_scolor
   \   00001198   003090E5           LDR      R3,[R0, #+0]
   \   0000119C   C40E9FE5           LDR      R0,??walkman_Redraw_83+0x2C  ;; title_color
   \   000011A0   00C090E5           LDR      R12,[R0, #+0]
   \   000011A4   300097E5           LDR      R0,[R7, #+48]
   \   000011A8   00E042E0           SUB      LR,R2,R0
   \   000011AC   B420D4E1           LDRH     R2,[R4, #+4]
   \   000011B0   004042E0           SUB      R4,R2,R0
   \   000011B4   B00E9FE5           LDR      R0,??walkman_Redraw_83+0x30  ;; title_ct
   \   000011B8   002090E5           LDR      R2,[R0, #+0]
   \   000011BC   AC0E9FE5           LDR      R0,??walkman_Redraw_83+0x34  ;; title_font
   \   000011C0   0A0000EA           B        ??walkman_Redraw_86
   \                     ??walkman_Redraw_85:
   \   000011C4   A80E9FE5           LDR      R0,??walkman_Redraw_83+0x38  ;; title_hl_h
   \   000011C8   B6E0DBE1           LDRH     LR,[R11, #+6]
   \   000011CC   001090E5           LDR      R1,[R0, #+0]
   \   000011D0   A00E9FE5           LDR      R0,??walkman_Redraw_83+0x3C  ;; title_scolor_h
   \   000011D4   B440DBE1           LDRH     R4,[R11, #+4]
   \   000011D8   003090E5           LDR      R3,[R0, #+0]
   \   000011DC   980E9FE5           LDR      R0,??walkman_Redraw_83+0x40  ;; title_color_h
   \   000011E0   00C090E5           LDR      R12,[R0, #+0]
   \   000011E4   940E9FE5           LDR      R0,??walkman_Redraw_83+0x44  ;; title_ct_h
   \   000011E8   002090E5           LDR      R2,[R0, #+0]
   \   000011EC   900E9FE5           LDR      R0,??walkman_Redraw_83+0x48  ;; title_font_h
   \                     ??walkman_Redraw_86:
   \   000011F0   000090E5           LDR      R0,[R0, #+0]
   \   000011F4   02002DE9           PUSH     {R1}
   \   000011F8   0010A0E3           MOV      R1,#+0
   \   000011FC   02002DE9           PUSH     {R1}
   \   00001200   08002DE9           PUSH     {R3}
   \   00001204   00102DE9           PUSH     {R12}
   \   00001208   00402DE9           PUSH     {LR}
   \   0000120C   B611DDE1           LDRH     R1,[SP, #+22]
   \   00001210   02002DE9           PUSH     {R1}
   \   00001214   10002DE9           PUSH     {R4}
   \   00001218   7710DAE5           LDRB     R1,[R10, #+119]
   \   0000121C   BC31DDE1           LDRH     R3,[SP, #+28]
   \   00001220   7640DAE5           LDRB     R4,[R10, #+118]
   \   00001224   011484E1           ORR      R1,R4,R1, LSL #+8
   \   00001228   7540DAE5           LDRB     R4,[R10, #+117]
   \   0000122C   011484E1           ORR      R1,R4,R1, LSL #+8
   \   00001230   7440DAE5           LDRB     R4,[R10, #+116]
   \   00001234   011484E1           ORR      R1,R4,R1, LSL #+8
   \   00001238   ........           BL       ??DrawLine2
   \   0000123C   1CD08DE2           ADD      SP,SP,#+28
   1115            }
   1116            //----------------------------------------------------------------------------
   1117            //Album
   1118            if (restr_CoverAlbum && nowmusic.meta.ImageID==NOIMAGE)
   \                     ??walkman_Redraw_84:
   \   00001240   400E9FE5           LDR      R0,??walkman_Redraw_83+0x4C  ;; restr_CoverAlbum
   \   00001244   000090E5           LDR      R0,[R0, #+0]
   \   00001248   000050E3           CMP      R0,#+0
   \   0000124C   0300000A           BEQ      ??walkman_Redraw_87
   \   00001250   0C009DE5           LDR      R0,[SP, #+12]
   \   00001254   B000D0E1           LDRH     R0,[R0, #+0]
   \   00001258   080050E1           CMP      R0,R8
   \   0000125C   4100000A           BEQ      ??walkman_Redraw_88
   1119              goto L_SkipAlbum;
   1120            if (orient ? album_show : album_show_h)
   \                     ??walkman_Redraw_87:
   \   00001260   000059E3           CMP      R9,#+0
   \   00001264   200E9F15           LDRNE    R0,??walkman_Redraw_83+0x50  ;; album_show
   \   00001268   200E9F05           LDREQ    R0,??walkman_Redraw_83+0x54  ;; album_show_h
   \   0000126C   000090E5           LDR      R0,[R0, #+0]
   \   00001270   000050E3           CMP      R0,#+0
   \   00001274   3B00000A           BEQ      ??walkman_Redraw_88
   1121            {
   1122              rc.x1 = orient ? album_rc.x1 : album_rc_h.x1;
   \   00001278   14BE9FE5           LDR      R11,??walkman_Redraw_83+0x58  ;; album_rc_h
   \   0000127C   144E9FE5           LDR      R4,??walkman_Redraw_83+0x5C  ;; album_rc
   \   00001280   000059E3           CMP      R9,#+0
   \   00001284   B000D411           LDRHNE   R0,[R4, #+0]
   1123              rc.x2 = orient ? album_rc.x2 : album_rc_h.x2;
   1124              GC_ValidateRect(GCanvas,&rc);
   \   00001288   0D10A0E1           MOV      R1,SP
   \   0000128C   B000DB01           LDRHEQ   R0,[R11, #+0]
   \   00001290   B000CDE1           STRH     R0,[SP, #+0]
   \   00001294   B200D411           LDRHNE   R0,[R4, #+2]
   \   00001298   B200DB01           LDRHEQ   R0,[R11, #+2]
   \   0000129C   B200CDE1           STRH     R0,[SP, #+2]
   \   000012A0   0600A0E1           MOV      R0,R6
   \   000012A4   EA0100EF           SWI      +490
   1125              DrawLine2(orient ? album_font : album_font_h, 
   1126                        mm_info->album_str, 
   1127                        orient ? album_ct : album_ct_h, 
   1128                        rc.x1, 
   1129                        orient ? album_rc.y1 - StatusSize : album_rc_h.y1, 
   1130                        rc.x2,
   1131                        orient ? album_rc.y2 - StatusSize : album_rc_h.y2,
   1132                        orient ? album_color : album_color_h, 
   1133                        orient ? album_scolor : album_scolor_h,
   1134                        false,
   1135                        orient ? album_hl : album_hl_h);
   \   000012A8   000059E3           CMP      R9,#+0
   \   000012AC   0E00000A           BEQ      ??walkman_Redraw_89
   \   000012B0   E40D9FE5           LDR      R0,??walkman_Redraw_83+0x60  ;; album_hl
   \   000012B4   B620D4E1           LDRH     R2,[R4, #+6]
   \   000012B8   001090E5           LDR      R1,[R0, #+0]
   \   000012BC   DC0D9FE5           LDR      R0,??walkman_Redraw_83+0x64  ;; album_scolor
   \   000012C0   003090E5           LDR      R3,[R0, #+0]
   \   000012C4   D80D9FE5           LDR      R0,??walkman_Redraw_83+0x68  ;; album_color
   \   000012C8   00C090E5           LDR      R12,[R0, #+0]
   \   000012CC   300097E5           LDR      R0,[R7, #+48]
   \   000012D0   00E042E0           SUB      LR,R2,R0
   \   000012D4   B420D4E1           LDRH     R2,[R4, #+4]
   \   000012D8   004042E0           SUB      R4,R2,R0
   \   000012DC   7C0F9FE5           LDR      R0,??walkman_Redraw_90  ;; album_ct
   \   000012E0   002090E5           LDR      R2,[R0, #+0]
   \   000012E4   780F9FE5           LDR      R0,??walkman_Redraw_90+0x4  ;; album_font
   \   000012E8   0A0000EA           B        ??walkman_Redraw_91
   \                     ??walkman_Redraw_89:
   \   000012EC   740F9FE5           LDR      R0,??walkman_Redraw_90+0x8  ;; album_hl_h
   \   000012F0   B6E0DBE1           LDRH     LR,[R11, #+6]
   \   000012F4   001090E5           LDR      R1,[R0, #+0]
   \   000012F8   6C0F9FE5           LDR      R0,??walkman_Redraw_90+0xC  ;; album_scolor_h
   \   000012FC   B440DBE1           LDRH     R4,[R11, #+4]
   \   00001300   003090E5           LDR      R3,[R0, #+0]
   \   00001304   640F9FE5           LDR      R0,??walkman_Redraw_90+0x10  ;; album_color_h
   \   00001308   00C090E5           LDR      R12,[R0, #+0]
   \   0000130C   600F9FE5           LDR      R0,??walkman_Redraw_90+0x14  ;; album_ct_h
   \   00001310   002090E5           LDR      R2,[R0, #+0]
   \   00001314   5C0F9FE5           LDR      R0,??walkman_Redraw_90+0x18  ;; album_font_h
   \                     ??walkman_Redraw_91:
   \   00001318   000090E5           LDR      R0,[R0, #+0]
   \   0000131C   02002DE9           PUSH     {R1}
   \   00001320   0010A0E3           MOV      R1,#+0
   \   00001324   02002DE9           PUSH     {R1}
   \   00001328   08002DE9           PUSH     {R3}
   \   0000132C   00102DE9           PUSH     {R12}
   \   00001330   00402DE9           PUSH     {LR}
   \   00001334   B611DDE1           LDRH     R1,[SP, #+22]
   \   00001338   02002DE9           PUSH     {R1}
   \   0000133C   10002DE9           PUSH     {R4}
   \   00001340   7B10DAE5           LDRB     R1,[R10, #+123]
   \   00001344   BC31DDE1           LDRH     R3,[SP, #+28]
   \   00001348   7A40DAE5           LDRB     R4,[R10, #+122]
   \   0000134C   011484E1           ORR      R1,R4,R1, LSL #+8
   \   00001350   7940DAE5           LDRB     R4,[R10, #+121]
   \   00001354   011484E1           ORR      R1,R4,R1, LSL #+8
   \   00001358   7840DAE5           LDRB     R4,[R10, #+120]
   \   0000135C   011484E1           ORR      R1,R4,R1, LSL #+8
   \   00001360   ........           BL       ??DrawLine2
   \   00001364   1CD08DE2           ADD      SP,SP,#+28
   1136            }
   1137          L_SkipAlbum:
   1138            //----------------------------------------------------------------------------
   1139            //Artist
   1140            if (orient ? artist_show : artist_show_h)
   \                     ??walkman_Redraw_88:
   \   00001368   000059E3           CMP      R9,#+0
   \   0000136C   080F9F15           LDRNE    R0,??walkman_Redraw_90+0x1C  ;; artist_show
   \   00001370   080F9F05           LDREQ    R0,??walkman_Redraw_90+0x20  ;; artist_show_h
   \   00001374   000090E5           LDR      R0,[R0, #+0]
   \   00001378   000050E3           CMP      R0,#+0
   \   0000137C   3B00000A           BEQ      ??walkman_Redraw_92
   1141            {
   1142              rc.x1 = orient ? artist_rc.x1 : artist_rc_h.x1;
   \   00001380   FCBE9FE5           LDR      R11,??walkman_Redraw_90+0x24  ;; artist_rc_h
   \   00001384   FC4E9FE5           LDR      R4,??walkman_Redraw_90+0x28  ;; artist_rc
   \   00001388   000059E3           CMP      R9,#+0
   \   0000138C   B000D411           LDRHNE   R0,[R4, #+0]
   1143              rc.x2 = orient ? artist_rc.x2 : artist_rc_h.x2;
   1144              GC_ValidateRect(GCanvas,&rc);
   \   00001390   0D10A0E1           MOV      R1,SP
   \   00001394   B000DB01           LDRHEQ   R0,[R11, #+0]
   \   00001398   B000CDE1           STRH     R0,[SP, #+0]
   \   0000139C   B200D411           LDRHNE   R0,[R4, #+2]
   \   000013A0   B200DB01           LDRHEQ   R0,[R11, #+2]
   \   000013A4   B200CDE1           STRH     R0,[SP, #+2]
   \   000013A8   0600A0E1           MOV      R0,R6
   \   000013AC   EA0100EF           SWI      +490
   1145              DrawLine2(orient ? artist_font : artist_font_h, 
   1146                        mm_info->artist_str, 
   1147                        orient ? artist_ct : artist_ct_h, 
   1148                        rc.x1, 
   1149                        orient ? artist_rc.y1 - StatusSize : artist_rc_h.y1, 
   1150                        rc.x2,
   1151                        orient ? artist_rc.y2 - StatusSize : artist_rc_h.y2,
   1152                        orient ? artist_color : artist_color_h, 
   1153                        orient ? artist_scolor : artist_scolor_h,
   1154                        false,
   1155                        orient ? artist_hl : artist_hl_h);
   \   000013B0   000059E3           CMP      R9,#+0
   \   000013B4   0E00000A           BEQ      ??walkman_Redraw_93
   \   000013B8   CC0E9FE5           LDR      R0,??walkman_Redraw_90+0x2C  ;; artist_hl
   \   000013BC   B620D4E1           LDRH     R2,[R4, #+6]
   \   000013C0   001090E5           LDR      R1,[R0, #+0]
   \   000013C4   C40E9FE5           LDR      R0,??walkman_Redraw_90+0x30  ;; artist_scolor
   \   000013C8   003090E5           LDR      R3,[R0, #+0]
   \   000013CC   C00E9FE5           LDR      R0,??walkman_Redraw_90+0x34  ;; artist_color
   \   000013D0   00C090E5           LDR      R12,[R0, #+0]
   \   000013D4   300097E5           LDR      R0,[R7, #+48]
   \   000013D8   00E042E0           SUB      LR,R2,R0
   \   000013DC   B420D4E1           LDRH     R2,[R4, #+4]
   \   000013E0   004042E0           SUB      R4,R2,R0
   \   000013E4   AC0E9FE5           LDR      R0,??walkman_Redraw_90+0x38  ;; artist_ct
   \   000013E8   002090E5           LDR      R2,[R0, #+0]
   \   000013EC   A80E9FE5           LDR      R0,??walkman_Redraw_90+0x3C  ;; artist_font
   \   000013F0   0A0000EA           B        ??walkman_Redraw_94
   \                     ??walkman_Redraw_93:
   \   000013F4   A40E9FE5           LDR      R0,??walkman_Redraw_90+0x40  ;; artist_hl_h
   \   000013F8   B6E0DBE1           LDRH     LR,[R11, #+6]
   \   000013FC   001090E5           LDR      R1,[R0, #+0]
   \   00001400   9C0E9FE5           LDR      R0,??walkman_Redraw_90+0x44  ;; artist_scolor_h
   \   00001404   B440DBE1           LDRH     R4,[R11, #+4]
   \   00001408   003090E5           LDR      R3,[R0, #+0]
   \   0000140C   940E9FE5           LDR      R0,??walkman_Redraw_90+0x48  ;; artist_color_h
   \   00001410   00C090E5           LDR      R12,[R0, #+0]
   \   00001414   900E9FE5           LDR      R0,??walkman_Redraw_90+0x4C  ;; artist_ct_h
   \   00001418   002090E5           LDR      R2,[R0, #+0]
   \   0000141C   8C0E9FE5           LDR      R0,??walkman_Redraw_90+0x50  ;; artist_font_h
   \                     ??walkman_Redraw_94:
   \   00001420   000090E5           LDR      R0,[R0, #+0]
   \   00001424   02002DE9           PUSH     {R1}
   \   00001428   0010A0E3           MOV      R1,#+0
   \   0000142C   02002DE9           PUSH     {R1}
   \   00001430   08002DE9           PUSH     {R3}
   \   00001434   00102DE9           PUSH     {R12}
   \   00001438   00402DE9           PUSH     {LR}
   \   0000143C   B611DDE1           LDRH     R1,[SP, #+22]
   \   00001440   02002DE9           PUSH     {R1}
   \   00001444   10002DE9           PUSH     {R4}
   \   00001448   7310DAE5           LDRB     R1,[R10, #+115]
   \   0000144C   BC31DDE1           LDRH     R3,[SP, #+28]
   \   00001450   7240DAE5           LDRB     R4,[R10, #+114]
   \   00001454   011484E1           ORR      R1,R4,R1, LSL #+8
   \   00001458   7140DAE5           LDRB     R4,[R10, #+113]
   \   0000145C   011484E1           ORR      R1,R4,R1, LSL #+8
   \   00001460   7040DAE5           LDRB     R4,[R10, #+112]
   \   00001464   011484E1           ORR      R1,R4,R1, LSL #+8
   \   00001468   ........           BL       ??DrawLine2
   \   0000146C   1CD08DE2           ADD      SP,SP,#+28
   1156            }
   1157            //----------------------------------------------------------------------------
   1158            //Genre
   1159            if (orient ? genre_show : genre_show_h)
   \                     ??walkman_Redraw_92:
   \   00001470   000059E3           CMP      R9,#+0
   \   00001474   380E9F15           LDRNE    R0,??walkman_Redraw_90+0x54  ;; genre_show
   \   00001478   380E9F05           LDREQ    R0,??walkman_Redraw_90+0x58  ;; genre_show_h
   \   0000147C   000090E5           LDR      R0,[R0, #+0]
   \   00001480   000050E3           CMP      R0,#+0
   \   00001484   3500000A           BEQ      ??walkman_Redraw_95
   1160            {
   1161              rc.x1 = orient ? genre_rc.x1 : genre_rc_h.x1;
   \   00001488   2CAE9FE5           LDR      R10,??walkman_Redraw_90+0x5C  ;; genre_rc_h
   \   0000148C   2C4E9FE5           LDR      R4,??walkman_Redraw_90+0x60  ;; genre_rc
   \   00001490   000059E3           CMP      R9,#+0
   \   00001494   B000D411           LDRHNE   R0,[R4, #+0]
   1162              rc.x2 = orient ? genre_rc.x2 : genre_rc_h.x2;
   1163              GC_ValidateRect(GCanvas,&rc);
   \   00001498   0D10A0E1           MOV      R1,SP
   \   0000149C   B000DA01           LDRHEQ   R0,[R10, #+0]
   \   000014A0   B000CDE1           STRH     R0,[SP, #+0]
   \   000014A4   B200D411           LDRHNE   R0,[R4, #+2]
   \   000014A8   B200DA01           LDRHEQ   R0,[R10, #+2]
   \   000014AC   B200CDE1           STRH     R0,[SP, #+2]
   \   000014B0   0600A0E1           MOV      R0,R6
   \   000014B4   EA0100EF           SWI      +490
   1164              DrawLine(orient ? genre_font : genre_font_h, 
   1165                       nowmusic.meta.Genre, 
   1166                       orient ? genre_ct : genre_ct_h, 
   1167                       rc.x1, 
   1168                       orient ? genre_rc.y1 - StatusSize : genre_rc_h.y1, 
   1169                       rc.x2,
   1170                       orient ? genre_rc.y2 - StatusSize : genre_rc_h.y2,
   1171                       orient ? genre_color : genre_color_h, 
   1172                       orient ? genre_scolor : genre_scolor_h,
   1173                       true,
   1174                       orient ? genre_hl : genre_hl_h);
   \   000014B8   000059E3           CMP      R9,#+0
   \   000014BC   0E00000A           BEQ      ??walkman_Redraw_96
   \   000014C0   FC0D9FE5           LDR      R0,??walkman_Redraw_90+0x64  ;; genre_hl
   \   000014C4   B620D4E1           LDRH     R2,[R4, #+6]
   \   000014C8   001090E5           LDR      R1,[R0, #+0]
   \   000014CC   F40D9FE5           LDR      R0,??walkman_Redraw_90+0x68  ;; genre_scolor
   \   000014D0   003090E5           LDR      R3,[R0, #+0]
   \   000014D4   F00D9FE5           LDR      R0,??walkman_Redraw_90+0x6C  ;; genre_color
   \   000014D8   00B090E5           LDR      R11,[R0, #+0]
   \   000014DC   300097E5           LDR      R0,[R7, #+48]
   \   000014E0   00C042E0           SUB      R12,R2,R0
   \   000014E4   B420D4E1           LDRH     R2,[R4, #+4]
   \   000014E8   004042E0           SUB      R4,R2,R0
   \   000014EC   DC0D9FE5           LDR      R0,??walkman_Redraw_90+0x70  ;; genre_ct
   \   000014F0   002090E5           LDR      R2,[R0, #+0]
   \   000014F4   D80D9FE5           LDR      R0,??walkman_Redraw_90+0x74  ;; genre_font
   \   000014F8   0A0000EA           B        ??walkman_Redraw_97
   \                     ??walkman_Redraw_96:
   \   000014FC   D40D9FE5           LDR      R0,??walkman_Redraw_90+0x78  ;; genre_hl_h
   \   00001500   B6C0DAE1           LDRH     R12,[R10, #+6]
   \   00001504   001090E5           LDR      R1,[R0, #+0]
   \   00001508   CC0D9FE5           LDR      R0,??walkman_Redraw_90+0x7C  ;; genre_scolor_h
   \   0000150C   B440DAE1           LDRH     R4,[R10, #+4]
   \   00001510   003090E5           LDR      R3,[R0, #+0]
   \   00001514   C40D9FE5           LDR      R0,??walkman_Redraw_90+0x80  ;; genre_color_h
   \   00001518   00B090E5           LDR      R11,[R0, #+0]
   \   0000151C   C00D9FE5           LDR      R0,??walkman_Redraw_90+0x84  ;; genre_ct_h
   \   00001520   002090E5           LDR      R2,[R0, #+0]
   \   00001524   BC0D9FE5           LDR      R0,??walkman_Redraw_90+0x88  ;; genre_font_h
   \                     ??walkman_Redraw_97:
   \   00001528   000090E5           LDR      R0,[R0, #+0]
   \   0000152C   02002DE9           PUSH     {R1}
   \   00001530   0110A0E3           MOV      R1,#+1
   \   00001534   02002DE9           PUSH     {R1}
   \   00001538   08002DE9           PUSH     {R3}
   \   0000153C   00082DE9           PUSH     {R11}
   \   00001540   00102DE9           PUSH     {R12}
   \   00001544   B611DDE1           LDRH     R1,[SP, #+22]
   \   00001548   02002DE9           PUSH     {R1}
   \   0000154C   981D9FE5           LDR      R1,??walkman_Redraw_90+0x8C  ;; nowmusic + 8220
   \   00001550   10002DE9           PUSH     {R4}
   \   00001554   BC31DDE1           LDRH     R3,[SP, #+28]
   \   00001558   ........           BL       ??DrawLine
   \   0000155C   1CD08DE2           ADD      SP,SP,#+28
   1175            }
   1176            //----------------------------------------------------------------------------
   1177            //Year
   1178            if (orient ? year_show : year_show_h)
   \                     ??walkman_Redraw_95:
   \   00001560   000059E3           CMP      R9,#+0
   \   00001564   840D9F15           LDRNE    R0,??walkman_Redraw_90+0x90  ;; year_show
   \   00001568   840D9F05           LDREQ    R0,??walkman_Redraw_90+0x94  ;; year_show_h
   \   0000156C   000090E5           LDR      R0,[R0, #+0]
   \   00001570   000050E3           CMP      R0,#+0
   \   00001574   3500000A           BEQ      ??walkman_Redraw_98
   1179            {
   1180              rc.x1 = orient ? year_rc.x1 : year_rc_h.x1;
   \   00001578   78AD9FE5           LDR      R10,??walkman_Redraw_90+0x98  ;; year_rc_h
   \   0000157C   784D9FE5           LDR      R4,??walkman_Redraw_90+0x9C  ;; year_rc
   \   00001580   000059E3           CMP      R9,#+0
   \   00001584   B000D411           LDRHNE   R0,[R4, #+0]
   1181              rc.x2 = orient ? year_rc.x2 : year_rc_h.x2;
   1182              GC_ValidateRect(GCanvas,&rc);
   \   00001588   0D10A0E1           MOV      R1,SP
   \   0000158C   B000DA01           LDRHEQ   R0,[R10, #+0]
   \   00001590   B000CDE1           STRH     R0,[SP, #+0]
   \   00001594   B200D411           LDRHNE   R0,[R4, #+2]
   \   00001598   B200DA01           LDRHEQ   R0,[R10, #+2]
   \   0000159C   B200CDE1           STRH     R0,[SP, #+2]
   \   000015A0   0600A0E1           MOV      R0,R6
   \   000015A4   EA0100EF           SWI      +490
   1183              DrawLine(orient ? year_font : year_font_h, 
   1184                       nowmusic.meta.Year, 
   1185                       orient ? year_ct : year_ct_h, 
   1186                       rc.x1, 
   1187                       orient ? year_rc.y1 - StatusSize : year_rc_h.y1, 
   1188                       rc.x2,
   1189                       orient ? year_rc.y2 - StatusSize : year_rc_h.y2,
   1190                       orient ? year_color : year_color_h, 
   1191                       orient ? year_scolor : year_scolor_h,
   1192                       true,
   1193                       orient ? year_hl : year_hl_h);
   \   000015A8   000059E3           CMP      R9,#+0
   \   000015AC   0E00000A           BEQ      ??walkman_Redraw_99
   \   000015B0   480D9FE5           LDR      R0,??walkman_Redraw_90+0xA0  ;; year_hl
   \   000015B4   B620D4E1           LDRH     R2,[R4, #+6]
   \   000015B8   001090E5           LDR      R1,[R0, #+0]
   \   000015BC   400D9FE5           LDR      R0,??walkman_Redraw_90+0xA4  ;; year_scolor
   \   000015C0   003090E5           LDR      R3,[R0, #+0]
   \   000015C4   3C0D9FE5           LDR      R0,??walkman_Redraw_90+0xA8  ;; year_color
   \   000015C8   00B090E5           LDR      R11,[R0, #+0]
   \   000015CC   300097E5           LDR      R0,[R7, #+48]
   \   000015D0   00C042E0           SUB      R12,R2,R0
   \   000015D4   B420D4E1           LDRH     R2,[R4, #+4]
   \   000015D8   004042E0           SUB      R4,R2,R0
   \   000015DC   280D9FE5           LDR      R0,??walkman_Redraw_90+0xAC  ;; year_ct
   \   000015E0   002090E5           LDR      R2,[R0, #+0]
   \   000015E4   240D9FE5           LDR      R0,??walkman_Redraw_90+0xB0  ;; year_font
   \   000015E8   0A0000EA           B        ??walkman_Redraw_100
   \                     ??walkman_Redraw_99:
   \   000015EC   200D9FE5           LDR      R0,??walkman_Redraw_90+0xB4  ;; year_hl_h
   \   000015F0   B6C0DAE1           LDRH     R12,[R10, #+6]
   \   000015F4   001090E5           LDR      R1,[R0, #+0]
   \   000015F8   180D9FE5           LDR      R0,??walkman_Redraw_90+0xB8  ;; year_scolor_h
   \   000015FC   B440DAE1           LDRH     R4,[R10, #+4]
   \   00001600   003090E5           LDR      R3,[R0, #+0]
   \   00001604   100D9FE5           LDR      R0,??walkman_Redraw_90+0xBC  ;; year_color_h
   \   00001608   00B090E5           LDR      R11,[R0, #+0]
   \   0000160C   0C0D9FE5           LDR      R0,??walkman_Redraw_90+0xC0  ;; year_ct_h
   \   00001610   002090E5           LDR      R2,[R0, #+0]
   \   00001614   080D9FE5           LDR      R0,??walkman_Redraw_90+0xC4  ;; year_font_h
   \                     ??walkman_Redraw_100:
   \   00001618   000090E5           LDR      R0,[R0, #+0]
   \   0000161C   02002DE9           PUSH     {R1}
   \   00001620   0110A0E3           MOV      R1,#+1
   \   00001624   02002DE9           PUSH     {R1}
   \   00001628   08002DE9           PUSH     {R3}
   \   0000162C   00082DE9           PUSH     {R11}
   \   00001630   00102DE9           PUSH     {R12}
   \   00001634   B611DDE1           LDRH     R1,[SP, #+22]
   \   00001638   02002DE9           PUSH     {R1}
   \   0000163C   E41C9FE5           LDR      R1,??walkman_Redraw_90+0xC8  ;; nowmusic + 6172
   \   00001640   10002DE9           PUSH     {R4}
   \   00001644   BC31DDE1           LDRH     R3,[SP, #+28]
   \   00001648   ........           BL       ??DrawLine
   \   0000164C   1CD08DE2           ADD      SP,SP,#+28
   1194            }
   1195            //----------------------------------------------------------------------------
   1196            //Track number
   1197            if (orient ? trackn_show : trackn_show_h)
   \                     ??walkman_Redraw_98:
   \   00001650   000059E3           CMP      R9,#+0
   \   00001654   D00C9F15           LDRNE    R0,??walkman_Redraw_90+0xCC  ;; trackn_show
   \   00001658   D00C9F05           LDREQ    R0,??walkman_Redraw_90+0xD0  ;; trackn_show_h
   \   0000165C   000090E5           LDR      R0,[R0, #+0]
   \   00001660   000050E3           CMP      R0,#+0
   \   00001664   3D00000A           BEQ      ??walkman_Redraw_101
   1198            {
   1199              BOOK_PLAYER_2020 *bkp=(BOOK_PLAYER_2020*)audio;
   1200              snwprintf(buf, 49, orient ? trackn_mask : trackn_mask_h, bkp->pos2+1);
   \   00001668   BA07D5E1           LDRH     R0,[R5, #+122]
   1201              rc.x1 = orient ? trackn_rc.x1 : trackn_rc_h.x1;
   \   0000166C   C0AC9FE5           LDR      R10,??walkman_Redraw_90+0xD4  ;; trackn_rc_h
   \   00001670   C04C9FE5           LDR      R4,??walkman_Redraw_90+0xD8  ;; trackn_rc
   \   00001674   000059E3           CMP      R9,#+0
   \   00001678   BC2C9F15           LDRNE    R2,??walkman_Redraw_90+0xDC  ;; trackn_mask
   \   0000167C   013080E2           ADD      R3,R0,#+1
   \   00001680   B82C9F05           LDREQ    R2,??walkman_Redraw_90+0xE0  ;; trackn_mask_h
   \   00001684   3110A0E3           MOV      R1,#+49
   \   00001688   20008DE2           ADD      R0,SP,#+32
   \   0000168C   150100EF           SWI      +277
   \   00001690   000059E3           CMP      R9,#+0
   \   00001694   B000D411           LDRHNE   R0,[R4, #+0]
   1202              rc.x2 = orient ? trackn_rc.x2 : trackn_rc_h.x2;
   1203              GC_ValidateRect(GCanvas,&rc);
   \   00001698   0D10A0E1           MOV      R1,SP
   \   0000169C   B000DA01           LDRHEQ   R0,[R10, #+0]
   \   000016A0   B000CDE1           STRH     R0,[SP, #+0]
   \   000016A4   B200D411           LDRHNE   R0,[R4, #+2]
   \   000016A8   B200DA01           LDRHEQ   R0,[R10, #+2]
   \   000016AC   B200CDE1           STRH     R0,[SP, #+2]
   \   000016B0   0600A0E1           MOV      R0,R6
   \   000016B4   EA0100EF           SWI      +490
   1204              DrawLine(orient ? trackn_font : trackn_font_h, 
   1205                       buf, 
   1206                       orient ? trackn_ct : trackn_ct_h, 
   1207                       rc.x1, 
   1208                       orient ? trackn_rc.y1 - StatusSize : trackn_rc_h.y1, 
   1209                       rc.x2,
   1210                       orient ? trackn_rc.y2 - StatusSize : trackn_rc_h.y2,
   1211                       orient ? trackn_color : trackn_color_h, 
   1212                       orient ? trackn_scolor : trackn_scolor_h,
   1213                       true,
   1214                       orient ? trackn_hl : trackn_hl_h);
   \   000016B8   000059E3           CMP      R9,#+0
   \   000016BC   0E00000A           BEQ      ??walkman_Redraw_102
   \   000016C0   7C0C9FE5           LDR      R0,??walkman_Redraw_90+0xE4  ;; trackn_hl
   \   000016C4   B620D4E1           LDRH     R2,[R4, #+6]
   \   000016C8   001090E5           LDR      R1,[R0, #+0]
   \   000016CC   740C9FE5           LDR      R0,??walkman_Redraw_90+0xE8  ;; trackn_scolor
   \   000016D0   003090E5           LDR      R3,[R0, #+0]
   \   000016D4   700C9FE5           LDR      R0,??walkman_Redraw_90+0xEC  ;; trackn_color
   \   000016D8   00B090E5           LDR      R11,[R0, #+0]
   \   000016DC   300097E5           LDR      R0,[R7, #+48]
   \   000016E0   00C042E0           SUB      R12,R2,R0
   \   000016E4   B420D4E1           LDRH     R2,[R4, #+4]
   \   000016E8   004042E0           SUB      R4,R2,R0
   \   000016EC   5C0C9FE5           LDR      R0,??walkman_Redraw_90+0xF0  ;; trackn_ct
   \   000016F0   002090E5           LDR      R2,[R0, #+0]
   \   000016F4   580C9FE5           LDR      R0,??walkman_Redraw_90+0xF4  ;; trackn_font
   \   000016F8   0A0000EA           B        ??walkman_Redraw_103
   \                     ??walkman_Redraw_102:
   \   000016FC   540C9FE5           LDR      R0,??walkman_Redraw_90+0xF8  ;; trackn_hl_h
   \   00001700   B6C0DAE1           LDRH     R12,[R10, #+6]
   \   00001704   001090E5           LDR      R1,[R0, #+0]
   \   00001708   4C0C9FE5           LDR      R0,??walkman_Redraw_90+0xFC  ;; trackn_scolor_h
   \   0000170C   B440DAE1           LDRH     R4,[R10, #+4]
   \   00001710   003090E5           LDR      R3,[R0, #+0]
   \   00001714   440C9FE5           LDR      R0,??walkman_Redraw_90+0x100  ;; trackn_color_h
   \   00001718   00B090E5           LDR      R11,[R0, #+0]
   \   0000171C   400C9FE5           LDR      R0,??walkman_Redraw_90+0x104  ;; trackn_ct_h
   \   00001720   002090E5           LDR      R2,[R0, #+0]
   \   00001724   3C0C9FE5           LDR      R0,??walkman_Redraw_90+0x108  ;; trackn_font_h
   \                     ??walkman_Redraw_103:
   \   00001728   000090E5           LDR      R0,[R0, #+0]
   \   0000172C   02002DE9           PUSH     {R1}
   \   00001730   0110A0E3           MOV      R1,#+1
   \   00001734   02002DE9           PUSH     {R1}
   \   00001738   08002DE9           PUSH     {R3}
   \   0000173C   00082DE9           PUSH     {R11}
   \   00001740   00102DE9           PUSH     {R12}
   \   00001744   B611DDE1           LDRH     R1,[SP, #+22]
   \   00001748   02002DE9           PUSH     {R1}
   \   0000174C   10002DE9           PUSH     {R4}
   \   00001750   BC31DDE1           LDRH     R3,[SP, #+28]
   \   00001754   3C108DE2           ADD      R1,SP,#+60
   \   00001758   ........           BL       ??DrawLine
   \   0000175C   1CD08DE2           ADD      SP,SP,#+28
   1215            }
   1216            //----------------------------------------------------------------------------
   1217            //Tracks count
   1218            if (orient ? tracks_show : tracks_show_h)
   \                     ??walkman_Redraw_101:
   \   00001760   000059E3           CMP      R9,#+0
   \   00001764   000C9F15           LDRNE    R0,??walkman_Redraw_90+0x10C  ;; tracks_show
   \   00001768   000C9F05           LDREQ    R0,??walkman_Redraw_90+0x110  ;; tracks_show_h
   \   0000176C   000090E5           LDR      R0,[R0, #+0]
   \   00001770   000050E3           CMP      R0,#+0
   \   00001774   3C00000A           BEQ      ??walkman_Redraw_104
   1219            {
   1220              BOOK_PLAYER_2020 *bkp=(BOOK_PLAYER_2020*)audio;
   1221              snwprintf(buf,49, orient ? tracks_mask : tracks_mask_h, bkp->tracks_count);
   1222              rc.x1 = orient ? tracks_rc.x1 : tracks_rc_h.x1;
   \   00001778   F4AB9FE5           LDR      R10,??walkman_Redraw_90+0x114  ;; tracks_rc_h
   \   0000177C   F44B9FE5           LDR      R4,??walkman_Redraw_90+0x118  ;; tracks_rc
   \   00001780   B439D5E1           LDRH     R3,[R5, #+148]
   \   00001784   000059E3           CMP      R9,#+0
   \   00001788   EC2B9F15           LDRNE    R2,??walkman_Redraw_90+0x11C  ;; tracks_mask
   \   0000178C   3110A0E3           MOV      R1,#+49
   \   00001790   E82B9F05           LDREQ    R2,??walkman_Redraw_90+0x120  ;; tracks_mask_h
   \   00001794   20008DE2           ADD      R0,SP,#+32
   \   00001798   150100EF           SWI      +277
   \   0000179C   000059E3           CMP      R9,#+0
   \   000017A0   B000D411           LDRHNE   R0,[R4, #+0]
   1223              rc.x2 = orient ? tracks_rc.x2 : tracks_rc_h.x2;
   1224              GC_ValidateRect(GCanvas,&rc);
   \   000017A4   0D10A0E1           MOV      R1,SP
   \   000017A8   B000DA01           LDRHEQ   R0,[R10, #+0]
   \   000017AC   B000CDE1           STRH     R0,[SP, #+0]
   \   000017B0   B200D411           LDRHNE   R0,[R4, #+2]
   \   000017B4   B200DA01           LDRHEQ   R0,[R10, #+2]
   \   000017B8   B200CDE1           STRH     R0,[SP, #+2]
   \   000017BC   0600A0E1           MOV      R0,R6
   \   000017C0   EA0100EF           SWI      +490
   1225              DrawLine(orient ? tracks_font : tracks_font_h, 
   1226                       buf, 
   1227                       orient ? tracks_ct : tracks_ct_h, 
   1228                       rc.x1, 
   1229                       orient ? tracks_rc.y1 - StatusSize : tracks_rc_h.y1, 
   1230                       rc.x2,
   1231                       orient ? tracks_rc.y2 - StatusSize : tracks_rc_h.y2,
   1232                       orient ? tracks_color : tracks_color_h, 
   1233                       orient ? tracks_scolor : tracks_scolor_h,
   1234                       true,
   1235                       orient ? tracks_hl : tracks_hl_h);
   \   000017C4   000059E3           CMP      R9,#+0
   \   000017C8   0E00000A           BEQ      ??walkman_Redraw_105
   \   000017CC   B00B9FE5           LDR      R0,??walkman_Redraw_90+0x124  ;; tracks_hl
   \   000017D0   B620D4E1           LDRH     R2,[R4, #+6]
   \   000017D4   001090E5           LDR      R1,[R0, #+0]
   \   000017D8   A80B9FE5           LDR      R0,??walkman_Redraw_90+0x128  ;; tracks_scolor
   \   000017DC   003090E5           LDR      R3,[R0, #+0]
   \   000017E0   A40B9FE5           LDR      R0,??walkman_Redraw_90+0x12C  ;; tracks_color
   \   000017E4   00B090E5           LDR      R11,[R0, #+0]
   \   000017E8   300097E5           LDR      R0,[R7, #+48]
   \   000017EC   00C042E0           SUB      R12,R2,R0
   \   000017F0   B420D4E1           LDRH     R2,[R4, #+4]
   \   000017F4   004042E0           SUB      R4,R2,R0
   \   000017F8   900B9FE5           LDR      R0,??walkman_Redraw_90+0x130  ;; tracks_ct
   \   000017FC   002090E5           LDR      R2,[R0, #+0]
   \   00001800   8C0B9FE5           LDR      R0,??walkman_Redraw_90+0x134  ;; tracks_font
   \   00001804   0A0000EA           B        ??walkman_Redraw_106
   \                     ??walkman_Redraw_105:
   \   00001808   880B9FE5           LDR      R0,??walkman_Redraw_90+0x138  ;; tracks_hl_h
   \   0000180C   B6C0DAE1           LDRH     R12,[R10, #+6]
   \   00001810   001090E5           LDR      R1,[R0, #+0]
   \   00001814   800B9FE5           LDR      R0,??walkman_Redraw_90+0x13C  ;; tracks_scolor_h
   \   00001818   B440DAE1           LDRH     R4,[R10, #+4]
   \   0000181C   003090E5           LDR      R3,[R0, #+0]
   \   00001820   780B9FE5           LDR      R0,??walkman_Redraw_90+0x140  ;; tracks_color_h
   \   00001824   00B090E5           LDR      R11,[R0, #+0]
   \   00001828   740B9FE5           LDR      R0,??walkman_Redraw_90+0x144  ;; tracks_ct_h
   \   0000182C   002090E5           LDR      R2,[R0, #+0]
   \   00001830   700B9FE5           LDR      R0,??walkman_Redraw_90+0x148  ;; tracks_font_h
   \                     ??walkman_Redraw_106:
   \   00001834   000090E5           LDR      R0,[R0, #+0]
   \   00001838   02002DE9           PUSH     {R1}
   \   0000183C   0110A0E3           MOV      R1,#+1
   \   00001840   02002DE9           PUSH     {R1}
   \   00001844   08002DE9           PUSH     {R3}
   \   00001848   00082DE9           PUSH     {R11}
   \   0000184C   00102DE9           PUSH     {R12}
   \   00001850   B611DDE1           LDRH     R1,[SP, #+22]
   \   00001854   02002DE9           PUSH     {R1}
   \   00001858   10002DE9           PUSH     {R4}
   \   0000185C   BC31DDE1           LDRH     R3,[SP, #+28]
   \   00001860   3C108DE2           ADD      R1,SP,#+60
   \   00001864   ........           BL       ??DrawLine
   \   00001868   1CD08DE2           ADD      SP,SP,#+28
   1236            }
   1237            int format=nowmusic.format;
   \                     ??walkman_Redraw_104:
   \   0000186C   0C009DE5           LDR      R0,[SP, #+12]
   \   00001870   040090E5           LDR      R0,[R0, #+4]
   1238            if (format==FORMAT_MP3 || format==FORMAT_OTHER)
   \   00001874   010050E3           CMP      R0,#+1
   \   00001878   04005013           CMPNE    R0,#+4
   \   0000187C   DB00001A           BNE      ??walkman_Redraw_107
   1239            {
   1240              //----------------------------------------------------------------------------
   1241              //Bitrate
   1242              if (orient ? bitrate_show : bitrate_show_h)
   \   00001880   000059E3           CMP      R9,#+0
   \   00001884   200B9F15           LDRNE    R0,??walkman_Redraw_90+0x14C  ;; bitrate_show
   \   00001888   200B9F05           LDREQ    R0,??walkman_Redraw_90+0x150  ;; bitrate_show_h
   \   0000188C   000090E5           LDR      R0,[R0, #+0]
   \   00001890   000050E3           CMP      R0,#+0
   \   00001894   4F00000A           BEQ      ??walkman_Redraw_108
   1243              {
   1244                wchar_t const *vbr=0;
   1245                if (nowmusic.hdr.VBR && use_vbr)
   \   00001898   140B9FE5           LDR      R0,??walkman_Redraw_90+0x154  ;; nowmusic + 4
   \   0000189C   14BB9FE5           LDR      R11,??walkman_Redraw_90+0x158  ;; bitrate_rc_h
   \   000018A0   0000D0E5           LDRB     R0,[R0, #+0]
   \   000018A4   10AB9FE5           LDR      R10,??walkman_Redraw_90+0x15C  ;; bitrate_rc
   \   000018A8   0040A0E3           MOV      R4,#+0
   \   000018AC   000050E3           CMP      R0,#+0
   \   000018B0   080B9F15           LDRNE    R0,??walkman_Redraw_90+0x160  ;; use_vbr
   \   000018B4   00009015           LDRNE    R0,[R0, #+0]
   \   000018B8   00005013           CMPNE    R0,#+0
   \   000018BC   0800000A           BEQ      ??walkman_Redraw_109
   1246                {
   1247                  if (orient)
   \   000018C0   000059E3           CMP      R9,#+0
   1248                    vbr=&bitrate_vbr[0];
   \   000018C4   F84A9F15           LDRNE    R4,??walkman_Redraw_90+0x164  ;; bitrate_vbr
   \   000018C8   0F00001A           BNE      ??walkman_Redraw_110
   1249                  else
   1250                    vbr=&bitrate_vbr_h[0];
   \   000018CC   F44A9FE5           LDR      R4,??walkman_Redraw_90+0x168  ;; bitrate_vbr_h
   \                     ??walkman_Redraw_111:
   \   000018D0   B000DBE1           LDRH     R0,[R11, #+0]
   \                     ??walkman_Redraw_112:
   \   000018D4   B000CDE1           STRH     R0,[SP, #+0]
   1251                }
   1252                else
   1253                  snwprintf(buf,49, orient ? bitrate_mask : bitrate_mask_h, nowmusic.hdr.bitrate);
   1254                rc.x1 = orient ? bitrate_rc.x1 : bitrate_rc_h.x1;
   1255                rc.x2 = orient ? bitrate_rc.x2 : bitrate_rc_h.x2;
   \   000018D8   B200DB01           LDRHEQ   R0,[R11, #+2]
   \   000018DC   B200DA11           LDRHNE   R0,[R10, #+2]
   \   000018E0   0B0000EA           B        ??walkman_Redraw_113
   \                     ??walkman_Redraw_109:
   \   000018E4   E00A9FE5           LDR      R0,??walkman_Redraw_90+0x16C  ;; nowmusic
   \   000018E8   000059E3           CMP      R9,#+0
   \   000018EC   DC2A9F15           LDRNE    R2,??walkman_Redraw_90+0x170  ;; bitrate_mask
   \   000018F0   003090E5           LDR      R3,[R0, #+0]
   \   000018F4   D82A9F05           LDREQ    R2,??walkman_Redraw_90+0x174  ;; bitrate_mask_h
   \   000018F8   3110A0E3           MOV      R1,#+49
   \   000018FC   20008DE2           ADD      R0,SP,#+32
   \   00001900   150100EF           SWI      +277
   \   00001904   000059E3           CMP      R9,#+0
   \   00001908   F0FFFF0A           BEQ      ??walkman_Redraw_111
   \                     ??walkman_Redraw_110:
   \   0000190C   B000DAE1           LDRH     R0,[R10, #+0]
   \   00001910   EFFFFFEA           B        ??walkman_Redraw_112
   1256                GC_ValidateRect(GCanvas,&rc);
   \                     ??walkman_Redraw_113:
   \   00001914   0D10A0E1           MOV      R1,SP
   \   00001918   B200CDE1           STRH     R0,[SP, #+2]
   \   0000191C   0600A0E1           MOV      R0,R6
   \   00001920   EA0100EF           SWI      +490
   1257                DrawLine(orient ? bitrate_font : bitrate_font_h, 
   1258                         vbr ? (wchar_t*)vbr : buf, 
   1259                         orient ? bitrate_ct : bitrate_ct_h, 
   1260                         rc.x1, 
   1261                         orient ? bitrate_rc.y1 - StatusSize : bitrate_rc_h.y1, 
   1262                         rc.x2,
   1263                         orient ? bitrate_rc.y2 - StatusSize : bitrate_rc_h.y2,
   1264                         orient ? bitrate_color : bitrate_color_h, 
   1265                         orient ? bitrate_scolor : bitrate_scolor_h,
   1266                         true,
   1267                         orient ? bitrate_hl : bitrate_hl_h);
   \   00001924   000059E3           CMP      R9,#+0
   \   00001928   0C00000A           BEQ      ??walkman_Redraw_114
   \   0000192C   A40A9FE5           LDR      R0,??walkman_Redraw_90+0x178  ;; bitrate_hl
   \   00001930   B610DAE1           LDRH     R1,[R10, #+6]
   \   00001934   002090E5           LDR      R2,[R0, #+0]
   \   00001938   9C0A9FE5           LDR      R0,??walkman_Redraw_90+0x17C  ;; bitrate_scolor
   \   0000193C   003090E5           LDR      R3,[R0, #+0]
   \   00001940   980A9FE5           LDR      R0,??walkman_Redraw_90+0x180  ;; bitrate_color
   \   00001944   00C090E5           LDR      R12,[R0, #+0]
   \   00001948   300097E5           LDR      R0,[R7, #+48]
   \   0000194C   00E041E0           SUB      LR,R1,R0
   \   00001950   B410DAE1           LDRH     R1,[R10, #+4]
   \   00001954   00B041E0           SUB      R11,R1,R0
   \   00001958   840A9FE5           LDR      R0,??walkman_Redraw_90+0x184  ;; bitrate_ct
   \   0000195C   080000EA           B        ??walkman_Redraw_115
   \                     ??walkman_Redraw_114:
   \   00001960   800A9FE5           LDR      R0,??walkman_Redraw_90+0x188  ;; bitrate_hl_h
   \   00001964   B6E0DBE1           LDRH     LR,[R11, #+6]
   \   00001968   002090E5           LDR      R2,[R0, #+0]
   \   0000196C   780A9FE5           LDR      R0,??walkman_Redraw_90+0x18C  ;; bitrate_scolor_h
   \   00001970   B4B0DBE1           LDRH     R11,[R11, #+4]
   \   00001974   003090E5           LDR      R3,[R0, #+0]
   \   00001978   700A9FE5           LDR      R0,??walkman_Redraw_90+0x190  ;; bitrate_color_h
   \   0000197C   00C090E5           LDR      R12,[R0, #+0]
   \   00001980   6C0A9FE5           LDR      R0,??walkman_Redraw_90+0x194  ;; bitrate_ct_h
   \                     ??walkman_Redraw_115:
   \   00001984   000054E3           CMP      R4,#+0
   \   00001988   00A090E5           LDR      R10,[R0, #+0]
   \   0000198C   0410A011           MOVNE    R1,R4
   \   00001990   20108D02           ADDEQ    R1,SP,#+32
   \   00001994   000059E3           CMP      R9,#+0
   \   00001998   580A9F15           LDRNE    R0,??walkman_Redraw_90+0x198  ;; bitrate_font
   \   0000199C   580A9F05           LDREQ    R0,??walkman_Redraw_90+0x19C  ;; bitrate_font_h
   \   000019A0   000090E5           LDR      R0,[R0, #+0]
   \   000019A4   04002DE9           PUSH     {R2}
   \   000019A8   0120A0E3           MOV      R2,#+1
   \   000019AC   04002DE9           PUSH     {R2}
   \   000019B0   08002DE9           PUSH     {R3}
   \   000019B4   00102DE9           PUSH     {R12}
   \   000019B8   00402DE9           PUSH     {LR}
   \   000019BC   B621DDE1           LDRH     R2,[SP, #+22]
   \   000019C0   04002DE9           PUSH     {R2}
   \   000019C4   00082DE9           PUSH     {R11}
   \   000019C8   BC31DDE1           LDRH     R3,[SP, #+28]
   \   000019CC   0A20A0E1           MOV      R2,R10
   \   000019D0   ........           BL       ??DrawLine
   \   000019D4   1CD08DE2           ADD      SP,SP,#+28
   1268              }
   1269              //----------------------------------------------------------------------------
   1270              //Frequency
   1271              if (orient ? freq_show : freq_show_h)
   \                     ??walkman_Redraw_108:
   \   000019D8   000059E3           CMP      R9,#+0
   \   000019DC   1C0A9F15           LDRNE    R0,??walkman_Redraw_90+0x1A0  ;; freq_show
   \   000019E0   1C0A9F05           LDREQ    R0,??walkman_Redraw_90+0x1A4  ;; freq_show_h
   \   000019E4   000090E5           LDR      R0,[R0, #+0]
   \   000019E8   000050E3           CMP      R0,#+0
   \   000019EC   3D00000A           BEQ      ??walkman_Redraw_116
   1272              {
   1273                snwprintf(buf,49, orient ? freq_mask : freq_mask_h,nowmusic.hdr.frequency);
   \   000019F0   100A9FE5           LDR      R0,??walkman_Redraw_90+0x1A8  ;; nowmusic + 20
   1274                rc.x1 = orient ? freq_rc.x1 : freq_rc_h.x1;
   \   000019F4   10AA9FE5           LDR      R10,??walkman_Redraw_90+0x1AC  ;; freq_rc_h
   \   000019F8   104A9FE5           LDR      R4,??walkman_Redraw_90+0x1B0  ;; freq_rc
   \   000019FC   003090E5           LDR      R3,[R0, #+0]
   \   00001A00   000059E3           CMP      R9,#+0
   \   00001A04   082A9F15           LDRNE    R2,??walkman_Redraw_90+0x1B4  ;; freq_mask
   \   00001A08   3110A0E3           MOV      R1,#+49
   \   00001A0C   042A9F05           LDREQ    R2,??walkman_Redraw_90+0x1B8  ;; freq_mask_h
   \   00001A10   20008DE2           ADD      R0,SP,#+32
   \   00001A14   150100EF           SWI      +277
   \   00001A18   000059E3           CMP      R9,#+0
   \   00001A1C   B000D411           LDRHNE   R0,[R4, #+0]
   1275                rc.x2 = orient ? freq_rc.x2 : freq_rc_h.x2;
   1276                GC_ValidateRect(GCanvas,&rc);
   \   00001A20   0D10A0E1           MOV      R1,SP
   \   00001A24   B000DA01           LDRHEQ   R0,[R10, #+0]
   \   00001A28   B000CDE1           STRH     R0,[SP, #+0]
   \   00001A2C   B200D411           LDRHNE   R0,[R4, #+2]
   \   00001A30   B200DA01           LDRHEQ   R0,[R10, #+2]
   \   00001A34   B200CDE1           STRH     R0,[SP, #+2]
   \   00001A38   0600A0E1           MOV      R0,R6
   \   00001A3C   EA0100EF           SWI      +490
   1277                DrawLine(orient ? freq_font : freq_font_h, 
   1278                         buf, 
   1279                         orient ? freq_ct : freq_ct_h, 
   1280                         rc.x1, 
   1281                         orient ? freq_rc.y1 - StatusSize : freq_rc_h.y1, 
   1282                         rc.x2,
   1283                         orient ? freq_rc.y2 - StatusSize : freq_rc_h.y2,
   1284                         orient ? freq_color : freq_color_h, 
   1285                         orient ? freq_scolor : freq_scolor_h,
   1286                         true,
   1287                         orient ? freq_hl : freq_hl_h);
   \   00001A40   000059E3           CMP      R9,#+0
   \   00001A44   0E00000A           BEQ      ??walkman_Redraw_117
   \   00001A48   CC099FE5           LDR      R0,??walkman_Redraw_90+0x1BC  ;; freq_hl
   \   00001A4C   B620D4E1           LDRH     R2,[R4, #+6]
   \   00001A50   001090E5           LDR      R1,[R0, #+0]
   \   00001A54   C4099FE5           LDR      R0,??walkman_Redraw_90+0x1C0  ;; freq_scolor
   \   00001A58   003090E5           LDR      R3,[R0, #+0]
   \   00001A5C   C0099FE5           LDR      R0,??walkman_Redraw_90+0x1C4  ;; freq_color
   \   00001A60   00B090E5           LDR      R11,[R0, #+0]
   \   00001A64   300097E5           LDR      R0,[R7, #+48]
   \   00001A68   00C042E0           SUB      R12,R2,R0
   \   00001A6C   B420D4E1           LDRH     R2,[R4, #+4]
   \   00001A70   004042E0           SUB      R4,R2,R0
   \   00001A74   AC099FE5           LDR      R0,??walkman_Redraw_90+0x1C8  ;; freq_ct
   \   00001A78   002090E5           LDR      R2,[R0, #+0]
   \   00001A7C   A8099FE5           LDR      R0,??walkman_Redraw_90+0x1CC  ;; freq_font
   \   00001A80   0A0000EA           B        ??walkman_Redraw_118
   \                     ??walkman_Redraw_117:
   \   00001A84   A4099FE5           LDR      R0,??walkman_Redraw_90+0x1D0  ;; freq_hl_h
   \   00001A88   B6C0DAE1           LDRH     R12,[R10, #+6]
   \   00001A8C   001090E5           LDR      R1,[R0, #+0]
   \   00001A90   9C099FE5           LDR      R0,??walkman_Redraw_90+0x1D4  ;; freq_scolor_h
   \   00001A94   B440DAE1           LDRH     R4,[R10, #+4]
   \   00001A98   003090E5           LDR      R3,[R0, #+0]
   \   00001A9C   94099FE5           LDR      R0,??walkman_Redraw_90+0x1D8  ;; freq_color_h
   \   00001AA0   00B090E5           LDR      R11,[R0, #+0]
   \   00001AA4   90099FE5           LDR      R0,??walkman_Redraw_90+0x1DC  ;; freq_ct_h
   \   00001AA8   002090E5           LDR      R2,[R0, #+0]
   \   00001AAC   8C099FE5           LDR      R0,??walkman_Redraw_90+0x1E0  ;; freq_font_h
   \                     ??walkman_Redraw_118:
   \   00001AB0   000090E5           LDR      R0,[R0, #+0]
   \   00001AB4   02002DE9           PUSH     {R1}
   \   00001AB8   0110A0E3           MOV      R1,#+1
   \   00001ABC   02002DE9           PUSH     {R1}
   \   00001AC0   08002DE9           PUSH     {R3}
   \   00001AC4   00082DE9           PUSH     {R11}
   \   00001AC8   00102DE9           PUSH     {R12}
   \   00001ACC   B611DDE1           LDRH     R1,[SP, #+22]
   \   00001AD0   02002DE9           PUSH     {R1}
   \   00001AD4   10002DE9           PUSH     {R4}
   \   00001AD8   BC31DDE1           LDRH     R3,[SP, #+28]
   \   00001ADC   3C108DE2           ADD      R1,SP,#+60
   \   00001AE0   ........           BL       ??DrawLine
   \   00001AE4   1CD08DE2           ADD      SP,SP,#+28
   1288              }
   1289              //----------------------------------------------------------------------------
   1290              //Channels
   1291              if (orient ? ch_show : ch_show_h)
   \                     ??walkman_Redraw_116:
   \   00001AE8   000059E3           CMP      R9,#+0
   \   00001AEC   50099F15           LDRNE    R0,??walkman_Redraw_90+0x1E4  ;; ch_show
   \   00001AF0   50099F05           LDREQ    R0,??walkman_Redraw_90+0x1E8  ;; ch_show_h
   \   00001AF4   000090E5           LDR      R0,[R0, #+0]
   \   00001AF8   000050E3           CMP      R0,#+0
   \   00001AFC   3B00000A           BEQ      ??walkman_Redraw_107
   1292              {
   1293                int mode=nowmusic.hdr.mode;
   \   00001B00   44099FE5           LDR      R0,??walkman_Redraw_90+0x1EC  ;; nowmusic + 24
   1294                wchar_t *ch=0;
   1295                if (mode<3)
   1296                {
   1297                  ch=modes[mode];
   1298                }
   1299                else
   1300                {
   1301                  ch=modes[3];
   1302                }
   1303                rc.x1 = orient ? ch_rc.x1 : ch_rc_h.x1;
   \   00001B04   44B99FE5           LDR      R11,??walkman_Redraw_90+0x1F0  ;; ch_rc_h
   \   00001B08   000090E5           LDR      R0,[R0, #+0]
   \   00001B0C   40A99FE5           LDR      R10,??walkman_Redraw_90+0x1F4  ;; ch_rc
   \   00001B10   030050E3           CMP      R0,#+3
   \   00001B14   104097A5           LDRGE    R4,[R7, #+16]
   \   00001B18   000187B0           ADDLT    R0,R7,R0, LSL #+2
   \   00001B1C   044090B5           LDRLT    R4,[R0, #+4]
   \   00001B20   000059E3           CMP      R9,#+0
   \   00001B24   B000DA11           LDRHNE   R0,[R10, #+0]
   1304                rc.x2 = orient ? ch_rc.x2 : ch_rc_h.x2;
   1305                GC_ValidateRect(GCanvas,&rc);
   \   00001B28   0D10A0E1           MOV      R1,SP
   \   00001B2C   B000DB01           LDRHEQ   R0,[R11, #+0]
   \   00001B30   B000CDE1           STRH     R0,[SP, #+0]
   \   00001B34   B200DA11           LDRHNE   R0,[R10, #+2]
   \   00001B38   B200DB01           LDRHEQ   R0,[R11, #+2]
   \   00001B3C   B200CDE1           STRH     R0,[SP, #+2]
   \   00001B40   0600A0E1           MOV      R0,R6
   \   00001B44   EA0100EF           SWI      +490
   1306                DrawLine(orient ? ch_font : ch_font_h, 
   1307                         ch, 
   1308                         orient ? ch_ct : ch_ct_h, 
   1309                         rc.x1, 
   1310                         orient ? ch_rc.y1 - StatusSize : ch_rc_h.y1, 
   1311                         rc.x2,
   1312                         orient ? ch_rc.y2 - StatusSize : ch_rc_h.y2,
   1313                         orient ? ch_color : ch_color_h, 
   1314                         orient ? ch_scolor : ch_scolor_h,
   1315                         true,
   1316                         orient ? ch_hl : ch_hl_h);
   \   00001B48   000059E3           CMP      R9,#+0
   \   00001B4C   0E00000A           BEQ      ??walkman_Redraw_119
   \   00001B50   00099FE5           LDR      R0,??walkman_Redraw_90+0x1F8  ;; ch_hl
   \   00001B54   B620DAE1           LDRH     R2,[R10, #+6]
   \   00001B58   001090E5           LDR      R1,[R0, #+0]
   \   00001B5C   F8089FE5           LDR      R0,??walkman_Redraw_90+0x1FC  ;; ch_scolor
   \   00001B60   003090E5           LDR      R3,[R0, #+0]
   \   00001B64   F4089FE5           LDR      R0,??walkman_Redraw_90+0x200  ;; ch_color
   \   00001B68   00C090E5           LDR      R12,[R0, #+0]
   \   00001B6C   300097E5           LDR      R0,[R7, #+48]
   \   00001B70   00E042E0           SUB      LR,R2,R0
   \   00001B74   B420DAE1           LDRH     R2,[R10, #+4]
   \   00001B78   00A042E0           SUB      R10,R2,R0
   \   00001B7C   E0089FE5           LDR      R0,??walkman_Redraw_90+0x204  ;; ch_ct
   \   00001B80   002090E5           LDR      R2,[R0, #+0]
   \   00001B84   DC089FE5           LDR      R0,??walkman_Redraw_90+0x208  ;; ch_font
   \   00001B88   0A0000EA           B        ??walkman_Redraw_120
   \                     ??walkman_Redraw_119:
   \   00001B8C   D8089FE5           LDR      R0,??walkman_Redraw_90+0x20C  ;; ch_hl_h
   \   00001B90   B6E0DBE1           LDRH     LR,[R11, #+6]
   \   00001B94   001090E5           LDR      R1,[R0, #+0]
   \   00001B98   D0089FE5           LDR      R0,??walkman_Redraw_90+0x210  ;; ch_scolor_h
   \   00001B9C   B4A0DBE1           LDRH     R10,[R11, #+4]
   \   00001BA0   003090E5           LDR      R3,[R0, #+0]
   \   00001BA4   C8089FE5           LDR      R0,??walkman_Redraw_90+0x214  ;; ch_color_h
   \   00001BA8   00C090E5           LDR      R12,[R0, #+0]
   \   00001BAC   C4089FE5           LDR      R0,??walkman_Redraw_90+0x218  ;; ch_ct_h
   \   00001BB0   002090E5           LDR      R2,[R0, #+0]
   \   00001BB4   C0089FE5           LDR      R0,??walkman_Redraw_90+0x21C  ;; ch_font_h
   \                     ??walkman_Redraw_120:
   \   00001BB8   000090E5           LDR      R0,[R0, #+0]
   \   00001BBC   02002DE9           PUSH     {R1}
   \   00001BC0   0110A0E3           MOV      R1,#+1
   \   00001BC4   02002DE9           PUSH     {R1}
   \   00001BC8   08002DE9           PUSH     {R3}
   \   00001BCC   00102DE9           PUSH     {R12}
   \   00001BD0   00402DE9           PUSH     {LR}
   \   00001BD4   B611DDE1           LDRH     R1,[SP, #+22]
   \   00001BD8   02002DE9           PUSH     {R1}
   \   00001BDC   00042DE9           PUSH     {R10}
   \   00001BE0   BC31DDE1           LDRH     R3,[SP, #+28]
   \   00001BE4   0410A0E1           MOV      R1,R4
   \   00001BE8   ........           BL       ??DrawLine
   \   00001BEC   1CD08DE2           ADD      SP,SP,#+28
   1317                
   1318              }
   1319            }
   1320            GC_ValidateRect(GCanvas, &gc_rc);
   \                     ??walkman_Redraw_107:
   \   00001BF0   10108DE2           ADD      R1,SP,#+16
   \   00001BF4   0600A0E1           MOV      R0,R6
   \   00001BF8   EA0100EF           SWI      +490
   1321            //----------------------------------------------------------------------------
   1322            //Navigation image
   1323            if (orient ? navigimg_show : navigimg_show_h)
   \   00001BFC   000059E3           CMP      R9,#+0
   \   00001C00   78089F15           LDRNE    R0,??walkman_Redraw_90+0x220  ;; navigimg_show
   \   00001C04   78089F05           LDREQ    R0,??walkman_Redraw_90+0x224  ;; navigimg_show_h
   \   00001C08   000090E5           LDR      R0,[R0, #+0]
   \   00001C0C   000050E3           CMP      R0,#+0
   1324            {
   1325              putchar_(GCanvas, 
   1326                      orient ? navigimg_rect.x1 : navigimg_rect_h.x1, 
   1327                      orient ? navigimg_rect.y1 - StatusSize: navigimg_rect_h.y1,
   1328                      orient ? navigimg_rect.x2 - navigimg_rect.x1 : navigimg_rect_h.x2 - navigimg_rect_h.x1,
   1329                      orient ? navigimg_rect.y2 - navigimg_rect.y1 : navigimg_rect_h.y2 - navigimg_rect_h.y1,
   1330                      navigimg);
   \   00001C10   70089F15           LDRNE    R0,??walkman_Redraw_90+0x228  ;; navigimg
   \   00001C14   B000D011           LDRHNE   R0,[R0, #+0]
   \   00001C18   00005013           CMPNE    R0,#+0
   \   00001C1C   08005011           CMPNE    R0,R8
   \   00001C20   1600000A           BEQ      ??walkman_Redraw_121
   \   00001C24   000059E3           CMP      R9,#+0
   \   00001C28   0800000A           BEQ      ??walkman_Redraw_122
   \   00001C2C   58389FE5           LDR      R3,??walkman_Redraw_90+0x22C  ;; navigimg_rect
   \   00001C30   B420D3E1           LDRH     R2,[R3, #+4]
   \   00001C34   B610D3E1           LDRH     R1,[R3, #+6]
   \   00001C38   30A097E5           LDR      R10,[R7, #+48]
   \   00001C3C   024041E0           SUB      R4,R1,R2
   \   00001C40   B010D3E1           LDRH     R1,[R3, #+0]
   \   00001C44   B230D3E1           LDRH     R3,[R3, #+2]
   \   00001C48   0A2042E0           SUB      R2,R2,R10
   \   00001C4C   050000EA           B        ??walkman_Redraw_123
   \                     ??walkman_Redraw_122:
   \   00001C50   38389FE5           LDR      R3,??walkman_Redraw_90+0x230  ;; navigimg_rect_h
   \   00001C54   B420D3E1           LDRH     R2,[R3, #+4]
   \   00001C58   B610D3E1           LDRH     R1,[R3, #+6]
   \   00001C5C   024041E0           SUB      R4,R1,R2
   \   00001C60   B010D3E1           LDRH     R1,[R3, #+0]
   \   00001C64   B230D3E1           LDRH     R3,[R3, #+2]
   \                     ??walkman_Redraw_123:
   \   00001C68   013043E0           SUB      R3,R3,R1
   \   00001C6C   01002DE9           PUSH     {R0}
   \   00001C70   10002DE9           PUSH     {R4}
   \   00001C74   0600A0E1           MOV      R0,R6
   \   00001C78   400100EF           SWI      +320
   \   00001C7C   08D08DE2           ADD      SP,SP,#+8
   1331            }
   1332            
   1333            //----------------------------------------------------------------------------
   1334            //Up arrow
   1335            if (orient ? upimg_show : upimg_show_h)
   \                     ??walkman_Redraw_121:
   \   00001C80   0C489FE5           LDR      R4,??walkman_Redraw_90+0x234  ;; images
   \   00001C84   000059E3           CMP      R9,#+0
   \   00001C88   08089F15           LDRNE    R0,??walkman_Redraw_90+0x238  ;; upimg_show
   \   00001C8C   08089F05           LDREQ    R0,??walkman_Redraw_90+0x23C  ;; upimg_show_h
   \   00001C90   000090E5           LDR      R0,[R0, #+0]
   \   00001C94   000050E3           CMP      R0,#+0
   1336            {
   1337              putchar_(GCanvas, 
   1338                      orient ? upimg_rect.x1 : upimg_rect_h.x1, 
   1339                      orient ? upimg_rect.y1 - StatusSize: upimg_rect_h.y1,
   1340                      orient ? upimg_rect.x2 - upimg_rect.x1 : upimg_rect_h.x2 - upimg_rect_h.x1,
   1341                      orient ? upimg_rect.y2 - upimg_rect.y1 : upimg_rect_h.y2 - upimg_rect_h.y1,
   1342                      images[IMG_UP]);
   \   00001C98   BC00D411           LDRHNE   R0,[R4, #+12]
   \   00001C9C   00005013           CMPNE    R0,#+0
   \   00001CA0   08005011           CMPNE    R0,R8
   \   00001CA4   1600000A           BEQ      ??walkman_Redraw_124
   \   00001CA8   000059E3           CMP      R9,#+0
   \   00001CAC   0800000A           BEQ      ??walkman_Redraw_125
   \   00001CB0   E8379FE5           LDR      R3,??walkman_Redraw_90+0x240  ;; upimg_rect
   \   00001CB4   B420D3E1           LDRH     R2,[R3, #+4]
   \   00001CB8   B610D3E1           LDRH     R1,[R3, #+6]
   \   00001CBC   30B097E5           LDR      R11,[R7, #+48]
   \   00001CC0   02A041E0           SUB      R10,R1,R2
   \   00001CC4   B010D3E1           LDRH     R1,[R3, #+0]
   \   00001CC8   B230D3E1           LDRH     R3,[R3, #+2]
   \   00001CCC   0B2042E0           SUB      R2,R2,R11
   \   00001CD0   050000EA           B        ??walkman_Redraw_126
   \                     ??walkman_Redraw_125:
   \   00001CD4   C8379FE5           LDR      R3,??walkman_Redraw_90+0x244  ;; upimg_rect_h
   \   00001CD8   B420D3E1           LDRH     R2,[R3, #+4]
   \   00001CDC   B610D3E1           LDRH     R1,[R3, #+6]
   \   00001CE0   02A041E0           SUB      R10,R1,R2
   \   00001CE4   B010D3E1           LDRH     R1,[R3, #+0]
   \   00001CE8   B230D3E1           LDRH     R3,[R3, #+2]
   \                     ??walkman_Redraw_126:
   \   00001CEC   013043E0           SUB      R3,R3,R1
   \   00001CF0   01002DE9           PUSH     {R0}
   \   00001CF4   00042DE9           PUSH     {R10}
   \   00001CF8   0600A0E1           MOV      R0,R6
   \   00001CFC   400100EF           SWI      +320
   \   00001D00   08D08DE2           ADD      SP,SP,#+8
   1343            }
   1344            //----------------------------------------------------------------------------
   1345            //Down arrow
   1346            if (orient ? downimg_show : downimg_show_h)
   \                     ??walkman_Redraw_124:
   \   00001D04   000059E3           CMP      R9,#+0
   \   00001D08   98079F15           LDRNE    R0,??walkman_Redraw_90+0x248  ;; downimg_show
   \   00001D0C   98079F05           LDREQ    R0,??walkman_Redraw_90+0x24C  ;; downimg_show_h
   \   00001D10   000090E5           LDR      R0,[R0, #+0]
   \   00001D14   000050E3           CMP      R0,#+0
   1347            {
   1348              putchar_(GCanvas, 
   1349                      orient ? downimg_rect.x1 : downimg_rect_h.x1, 
   1350                      orient ? downimg_rect.y1 - StatusSize: downimg_rect_h.y1,
   1351                      orient ? downimg_rect.x2 - downimg_rect.x1 : downimg_rect_h.x2 - downimg_rect_h.x1,
   1352                      orient ? downimg_rect.y2 - downimg_rect.y1 : downimg_rect_h.y2 - downimg_rect_h.y1,
   1353                      images[IMG_DOWN]);
   \   00001D18   BE00D411           LDRHNE   R0,[R4, #+14]
   \   00001D1C   00005013           CMPNE    R0,#+0
   \   00001D20   08005011           CMPNE    R0,R8
   \   00001D24   1600000A           BEQ      ??walkman_Redraw_127
   \   00001D28   000059E3           CMP      R9,#+0
   \   00001D2C   0800000A           BEQ      ??walkman_Redraw_128
   \   00001D30   78379FE5           LDR      R3,??walkman_Redraw_90+0x250  ;; downimg_rect
   \   00001D34   B420D3E1           LDRH     R2,[R3, #+4]
   \   00001D38   B610D3E1           LDRH     R1,[R3, #+6]
   \   00001D3C   30B097E5           LDR      R11,[R7, #+48]
   \   00001D40   02A041E0           SUB      R10,R1,R2
   \   00001D44   B010D3E1           LDRH     R1,[R3, #+0]
   \   00001D48   B230D3E1           LDRH     R3,[R3, #+2]
   \   00001D4C   0B2042E0           SUB      R2,R2,R11
   \   00001D50   050000EA           B        ??walkman_Redraw_129
   \                     ??walkman_Redraw_128:
   \   00001D54   58379FE5           LDR      R3,??walkman_Redraw_90+0x254  ;; downimg_rect_h
   \   00001D58   B420D3E1           LDRH     R2,[R3, #+4]
   \   00001D5C   B610D3E1           LDRH     R1,[R3, #+6]
   \   00001D60   02A041E0           SUB      R10,R1,R2
   \   00001D64   B010D3E1           LDRH     R1,[R3, #+0]
   \   00001D68   B230D3E1           LDRH     R3,[R3, #+2]
   \                     ??walkman_Redraw_129:
   \   00001D6C   013043E0           SUB      R3,R3,R1
   \   00001D70   01002DE9           PUSH     {R0}
   \   00001D74   00042DE9           PUSH     {R10}
   \   00001D78   0600A0E1           MOV      R0,R6
   \   00001D7C   400100EF           SWI      +320
   \   00001D80   08D08DE2           ADD      SP,SP,#+8
   1354            }
   1355            //----------------------------------------------------------------------------
   1356            //Left arrow
   1357            if (orient ? leftimg_show : leftimg_show_h)
   \                     ??walkman_Redraw_127:
   \   00001D84   000059E3           CMP      R9,#+0
   \   00001D88   28079F15           LDRNE    R0,??walkman_Redraw_90+0x258  ;; leftimg_show
   \   00001D8C   28079F05           LDREQ    R0,??walkman_Redraw_90+0x25C  ;; leftimg_show_h
   \   00001D90   000090E5           LDR      R0,[R0, #+0]
   \   00001D94   000050E3           CMP      R0,#+0
   \   00001D98   2700000A           BEQ      ??walkman_Redraw_130
   1358            {
   1359              putchar_(GCanvas, 
   1360                       orient ? leftimg_rect.x1 : leftimg_rect_h.x1, 
   1361                       orient ? leftimg_rect.y1 - StatusSize: leftimg_rect_h.y1,
   1362                       orient ? leftimg_rect.x2 - leftimg_rect.x1 : leftimg_rect_h.x2 - leftimg_rect_h.x1,
   1363                       orient ? leftimg_rect.y2 - leftimg_rect.y1 : leftimg_rect_h.y2 - leftimg_rect_h.y1,
   1364                       wb->status==5 ? images[IMG_PREV2] : images[IMG_PREV]);
   \   00001D9C   1910D5E5           LDRB     R1,[R5, #+25]
   \   00001DA0   B4A0D4E1           LDRH     R10,[R4, #+4]
   \   00001DA4   B000D4E1           LDRH     R0,[R4, #+0]
   \   00001DA8   050051E3           CMP      R1,#+5
   \   00001DAC   0200001A           BNE      ??walkman_Redraw_131
   \                     ??walkman_Redraw_132:
   \   00001DB0   00005AE3           CMP      R10,#+0
   \   00001DB4   0600001A           BNE      ??walkman_Redraw_133
   \   00001DB8   1F0000EA           B        ??walkman_Redraw_130
   \                     ??walkman_Redraw_131:
   \   00001DBC   000050E3           CMP      R0,#+0
   \   00001DC0   0100000A           BEQ      ??walkman_Redraw_134
   \   00001DC4   050051E3           CMP      R1,#+5
   \   00001DC8   F8FFFF0A           BEQ      ??walkman_Redraw_132
   \                     ??walkman_Redraw_134:
   \   00001DCC   080050E1           CMP      R0,R8
   \   00001DD0   1900000A           BEQ      ??walkman_Redraw_130
   \                     ??walkman_Redraw_133:
   \   00001DD4   050051E3           CMP      R1,#+5
   \   00001DD8   00A0A011           MOVNE    R10,R0
   \   00001DDC   000059E3           CMP      R9,#+0
   \   00001DE0   0900000A           BEQ      ??walkman_Redraw_135
   \   00001DE4   D4369FE5           LDR      R3,??walkman_Redraw_90+0x260  ;; leftimg_rect
   \   00001DE8   B420D3E1           LDRH     R2,[R3, #+4]
   \   00001DEC   B600D3E1           LDRH     R0,[R3, #+6]
   \   00001DF0   B010D3E1           LDRH     R1,[R3, #+0]
   \   00001DF4   B230D3E1           LDRH     R3,[R3, #+2]
   \   00001DF8   30B097E5           LDR      R11,[R7, #+48]
   \   00001DFC   020040E0           SUB      R0,R0,R2
   \   00001E00   013043E0           SUB      R3,R3,R1
   \   00001E04   0B2042E0           SUB      R2,R2,R11
   \   00001E08   060000EA           B        ??walkman_Redraw_136
   \                     ??walkman_Redraw_135:
   \   00001E0C   B0369FE5           LDR      R3,??walkman_Redraw_90+0x264  ;; leftimg_rect_h
   \   00001E10   B420D3E1           LDRH     R2,[R3, #+4]
   \   00001E14   B600D3E1           LDRH     R0,[R3, #+6]
   \   00001E18   B010D3E1           LDRH     R1,[R3, #+0]
   \   00001E1C   B230D3E1           LDRH     R3,[R3, #+2]
   \   00001E20   020040E0           SUB      R0,R0,R2
   \   00001E24   013043E0           SUB      R3,R3,R1
   \                     ??walkman_Redraw_136:
   \   00001E28   00042DE9           PUSH     {R10}
   \   00001E2C   01002DE9           PUSH     {R0}
   \   00001E30   0600A0E1           MOV      R0,R6
   \   00001E34   400100EF           SWI      +320
   \   00001E38   08D08DE2           ADD      SP,SP,#+8
   1365            }
   1366            //----------------------------------------------------------------------------
   1367            //Right arrow
   1368            if (orient ? rightimg_show : rightimg_show_h)
   \                     ??walkman_Redraw_130:
   \   00001E3C   000059E3           CMP      R9,#+0
   \   00001E40   80069F15           LDRNE    R0,??walkman_Redraw_90+0x268  ;; rightimg_show
   \   00001E44   80069F05           LDREQ    R0,??walkman_Redraw_90+0x26C  ;; rightimg_show_h
   \   00001E48   000090E5           LDR      R0,[R0, #+0]
   \   00001E4C   000050E3           CMP      R0,#+0
   \   00001E50   2700000A           BEQ      ??walkman_Redraw_137
   1369            {
   1370              putchar_(GCanvas, 
   1371                       orient ? rightimg_rect.x1 : rightimg_rect_h.x1, 
   1372                       orient ? rightimg_rect.y1 - StatusSize: rightimg_rect_h.y1,
   1373                       orient ? rightimg_rect.x2 - rightimg_rect.x1 : rightimg_rect_h.x2 - rightimg_rect_h.x1,
   1374                       orient ? rightimg_rect.y2 - rightimg_rect.y1 : rightimg_rect_h.y2 - rightimg_rect_h.y1,
   1375                       wb->status==3 ? images[IMG_NEXT2] : images[IMG_NEXT]);
   \   00001E54   1910D5E5           LDRB     R1,[R5, #+25]
   \   00001E58   B6A0D4E1           LDRH     R10,[R4, #+6]
   \   00001E5C   B200D4E1           LDRH     R0,[R4, #+2]
   \   00001E60   030051E3           CMP      R1,#+3
   \   00001E64   0200001A           BNE      ??walkman_Redraw_138
   \                     ??walkman_Redraw_139:
   \   00001E68   00005AE3           CMP      R10,#+0
   \   00001E6C   0600001A           BNE      ??walkman_Redraw_140
   \   00001E70   1F0000EA           B        ??walkman_Redraw_137
   \                     ??walkman_Redraw_138:
   \   00001E74   000050E3           CMP      R0,#+0
   \   00001E78   0100000A           BEQ      ??walkman_Redraw_141
   \   00001E7C   030051E3           CMP      R1,#+3
   \   00001E80   F8FFFF0A           BEQ      ??walkman_Redraw_139
   \                     ??walkman_Redraw_141:
   \   00001E84   080050E1           CMP      R0,R8
   \   00001E88   1900000A           BEQ      ??walkman_Redraw_137
   \                     ??walkman_Redraw_140:
   \   00001E8C   030051E3           CMP      R1,#+3
   \   00001E90   00A0A011           MOVNE    R10,R0
   \   00001E94   000059E3           CMP      R9,#+0
   \   00001E98   0900000A           BEQ      ??walkman_Redraw_142
   \   00001E9C   2C369FE5           LDR      R3,??walkman_Redraw_90+0x270  ;; rightimg_rect
   \   00001EA0   B420D3E1           LDRH     R2,[R3, #+4]
   \   00001EA4   B600D3E1           LDRH     R0,[R3, #+6]
   \   00001EA8   B010D3E1           LDRH     R1,[R3, #+0]
   \   00001EAC   B230D3E1           LDRH     R3,[R3, #+2]
   \   00001EB0   30B097E5           LDR      R11,[R7, #+48]
   \   00001EB4   020040E0           SUB      R0,R0,R2
   \   00001EB8   013043E0           SUB      R3,R3,R1
   \   00001EBC   0B2042E0           SUB      R2,R2,R11
   \   00001EC0   060000EA           B        ??walkman_Redraw_143
   \                     ??walkman_Redraw_142:
   \   00001EC4   08369FE5           LDR      R3,??walkman_Redraw_90+0x274  ;; rightimg_rect_h
   \   00001EC8   B420D3E1           LDRH     R2,[R3, #+4]
   \   00001ECC   B600D3E1           LDRH     R0,[R3, #+6]
   \   00001ED0   B010D3E1           LDRH     R1,[R3, #+0]
   \   00001ED4   B230D3E1           LDRH     R3,[R3, #+2]
   \   00001ED8   020040E0           SUB      R0,R0,R2
   \   00001EDC   013043E0           SUB      R3,R3,R1
   \                     ??walkman_Redraw_143:
   \   00001EE0   00042DE9           PUSH     {R10}
   \   00001EE4   01002DE9           PUSH     {R0}
   \   00001EE8   0600A0E1           MOV      R0,R6
   \   00001EEC   400100EF           SWI      +320
   \   00001EF0   08D08DE2           ADD      SP,SP,#+8
   1376            }
   1377            //----------------------------------------------------------------------------
   1378            //Play/Stop mini icon
   1379            if (orient ? centerimg_show : centerimg_show_h)
   \                     ??walkman_Redraw_137:
   \   00001EF4   000059E3           CMP      R9,#+0
   \   00001EF8   D8059F15           LDRNE    R0,??walkman_Redraw_90+0x278  ;; centerimg_show
   \   00001EFC   D8059F05           LDREQ    R0,??walkman_Redraw_90+0x27C  ;; centerimg_show_h
   \   00001F00   000090E5           LDR      R0,[R0, #+0]
   \   00001F04   000050E3           CMP      R0,#+0
   \   00001F08   2700000A           BEQ      ??walkman_Redraw_144
   1380            {
   1381              putchar_(GCanvas, 
   1382                       orient ? centerimg_rect.x1 : centerimg_rect_h.x1, 
   1383                       orient ? centerimg_rect.y1 - StatusSize: centerimg_rect_h.y1,
   1384                       orient ? centerimg_rect.x2 - centerimg_rect.x1 : centerimg_rect_h.x2 - centerimg_rect_h.x1,
   1385                       orient ? centerimg_rect.y2 - centerimg_rect.y1 : centerimg_rect_h.y2 - centerimg_rect_h.y1,
   1386                       wb->status==1 ? images[IMG_STOP] : images[IMG_PLAY]);
   \   00001F0C   1910D5E5           LDRB     R1,[R5, #+25]
   \   00001F10   BAA0D4E1           LDRH     R10,[R4, #+10]
   \   00001F14   B800D4E1           LDRH     R0,[R4, #+8]
   \   00001F18   010051E3           CMP      R1,#+1
   \   00001F1C   0200001A           BNE      ??walkman_Redraw_145
   \                     ??walkman_Redraw_146:
   \   00001F20   00005AE3           CMP      R10,#+0
   \   00001F24   0600001A           BNE      ??walkman_Redraw_147
   \   00001F28   1F0000EA           B        ??walkman_Redraw_144
   \                     ??walkman_Redraw_145:
   \   00001F2C   000050E3           CMP      R0,#+0
   \   00001F30   0100000A           BEQ      ??walkman_Redraw_148
   \   00001F34   010051E3           CMP      R1,#+1
   \   00001F38   F8FFFF0A           BEQ      ??walkman_Redraw_146
   \                     ??walkman_Redraw_148:
   \   00001F3C   080050E1           CMP      R0,R8
   \   00001F40   1900000A           BEQ      ??walkman_Redraw_144
   \                     ??walkman_Redraw_147:
   \   00001F44   010051E3           CMP      R1,#+1
   \   00001F48   00A0A011           MOVNE    R10,R0
   \   00001F4C   000059E3           CMP      R9,#+0
   \   00001F50   0900000A           BEQ      ??walkman_Redraw_149
   \   00001F54   84359FE5           LDR      R3,??walkman_Redraw_90+0x280  ;; centerimg_rect
   \   00001F58   B420D3E1           LDRH     R2,[R3, #+4]
   \   00001F5C   B600D3E1           LDRH     R0,[R3, #+6]
   \   00001F60   B010D3E1           LDRH     R1,[R3, #+0]
   \   00001F64   B230D3E1           LDRH     R3,[R3, #+2]
   \   00001F68   304097E5           LDR      R4,[R7, #+48]
   \   00001F6C   020040E0           SUB      R0,R0,R2
   \   00001F70   013043E0           SUB      R3,R3,R1
   \   00001F74   042042E0           SUB      R2,R2,R4
   \   00001F78   060000EA           B        ??walkman_Redraw_150
   \                     ??walkman_Redraw_149:
   \   00001F7C   60359FE5           LDR      R3,??walkman_Redraw_90+0x284  ;; centerimg_rect_h
   \   00001F80   B420D3E1           LDRH     R2,[R3, #+4]
   \   00001F84   B600D3E1           LDRH     R0,[R3, #+6]
   \   00001F88   B010D3E1           LDRH     R1,[R3, #+0]
   \   00001F8C   B230D3E1           LDRH     R3,[R3, #+2]
   \   00001F90   020040E0           SUB      R0,R0,R2
   \   00001F94   013043E0           SUB      R3,R3,R1
   \                     ??walkman_Redraw_150:
   \   00001F98   00042DE9           PUSH     {R10}
   \   00001F9C   01002DE9           PUSH     {R0}
   \   00001FA0   0600A0E1           MOV      R0,R6
   \   00001FA4   400100EF           SWI      +320
   \   00001FA8   08D08DE2           ADD      SP,SP,#+8
   1387            }
   1388                //----------------------------------------------------------------------------
   1389            //Repeat icon
   1390            if (orient ? repeat_show : repeat_show_h)
   \                     ??walkman_Redraw_144:
   \   00001FAC   000059E3           CMP      R9,#+0
   \   00001FB0   30059F15           LDRNE    R0,??walkman_Redraw_90+0x288  ;; repeat_show
   \   00001FB4   30059F05           LDREQ    R0,??walkman_Redraw_90+0x28C  ;; repeat_show_h
   \   00001FB8   000090E5           LDR      R0,[R0, #+0]
   \   00001FBC   000050E3           CMP      R0,#+0
   \   00001FC0   4400000A           BEQ      ??walkman_Redraw_151
   1391            {
   1392              putchar_(GCanvas, 
   1393                       orient ? repeat_rect.x1 : repeat_rect_h.x1, 
   1394                       orient ? repeat_rect.y1 - StatusSize: repeat_rect_h.y1,
   1395                       orient ? repeat_rect.x2 - repeat_rect.x1 : repeat_rect_h.x2 - repeat_rect_h.x1,
   1396                       orient ? repeat_rect.y2 - repeat_rect.y1 : repeat_rect_h.y2 - repeat_rect_h.y1,
   1397                      wb->RepeatMode==1 ? media_images[IMG_LOOP] : media_images[IMG_LOOP_OFF]);
   \   00001FC4   24059FE5           LDR      R0,??walkman_Redraw_90+0x290  ;; media_images + 4
   \   00001FC8   9810D5E5           LDRB     R1,[R5, #+152]
   \   00001FCC   B040D0E1           LDRH     R4,[R0, #+0]
   \   00001FD0   1C059FE5           LDR      R0,??walkman_Redraw_90+0x294  ;; media_images + 14
   \   00001FD4   010051E3           CMP      R1,#+1
   \   00001FD8   B000D0E1           LDRH     R0,[R0, #+0]
   \   00001FDC   0200001A           BNE      ??walkman_Redraw_152
   \                     ??walkman_Redraw_153:
   \   00001FE0   000054E3           CMP      R4,#+0
   \   00001FE4   0600001A           BNE      ??walkman_Redraw_154
   \   00001FE8   3A0000EA           B        ??walkman_Redraw_151
   \                     ??walkman_Redraw_152:
   \   00001FEC   000050E3           CMP      R0,#+0
   \   00001FF0   0100000A           BEQ      ??walkman_Redraw_155
   \   00001FF4   010051E3           CMP      R1,#+1
   \   00001FF8   F8FFFF0A           BEQ      ??walkman_Redraw_153
   \                     ??walkman_Redraw_155:
   \   00001FFC   080050E1           CMP      R0,R8
   \   00002000   3400000A           BEQ      ??walkman_Redraw_151
   \                     ??walkman_Redraw_154:
   \   00002004   010051E3           CMP      R1,#+1
   \   00002008   0040A011           MOVNE    R4,R0
   \   0000200C   000059E3           CMP      R9,#+0
   \   00002010   2400000A           BEQ      ??walkman_Redraw_156
   \   00002014   DC349FE5           LDR      R3,??walkman_Redraw_90+0x298  ;; repeat_rect
   \   00002018   B420D3E1           LDRH     R2,[R3, #+4]
   \   0000201C   B600D3E1           LDRH     R0,[R3, #+6]
   \   00002020   B010D3E1           LDRH     R1,[R3, #+0]
   \   00002024   B230D3E1           LDRH     R3,[R3, #+2]
   \   00002028   30A097E5           LDR      R10,[R7, #+48]
   \   0000202C   020040E0           SUB      R0,R0,R2
   \   00002030   013043E0           SUB      R3,R3,R1
   \   00002034   0A2042E0           SUB      R2,R2,R10
   \   00002038   210000EA           B        ??walkman_Redraw_157
   \                     ??walkman_Redraw_83:
   \   0000203C   ........           DC32     ltime_hl_h
   \   00002040   ........           DC32     ltime_scolor_h
   \   00002044   ........           DC32     ltime_color_h
   \   00002048   ........           DC32     ltime_ct_h
   \   0000204C   ........           DC32     ltime_font_h
   \   00002050   ........           DC32     title_show
   \   00002054   ........           DC32     title_show_h
   \   00002058   ........           DC32     title_rc_h
   \   0000205C   ........           DC32     title_rc
   \   00002060   ........           DC32     title_hl
   \   00002064   ........           DC32     title_scolor
   \   00002068   ........           DC32     title_color
   \   0000206C   ........           DC32     title_ct
   \   00002070   ........           DC32     title_font
   \   00002074   ........           DC32     title_hl_h
   \   00002078   ........           DC32     title_scolor_h
   \   0000207C   ........           DC32     title_color_h
   \   00002080   ........           DC32     title_ct_h
   \   00002084   ........           DC32     title_font_h
   \   00002088   ........           DC32     restr_CoverAlbum
   \   0000208C   ........           DC32     album_show
   \   00002090   ........           DC32     album_show_h
   \   00002094   ........           DC32     album_rc_h
   \   00002098   ........           DC32     album_rc
   \   0000209C   ........           DC32     album_hl
   \   000020A0   ........           DC32     album_scolor
   \   000020A4   ........           DC32     album_color
   \                     ??walkman_Redraw_156:
   \   000020A8   4C349FE5           LDR      R3,??walkman_Redraw_90+0x29C  ;; repeat_rect_h
   \   000020AC   B420D3E1           LDRH     R2,[R3, #+4]
   \   000020B0   B600D3E1           LDRH     R0,[R3, #+6]
   \   000020B4   B010D3E1           LDRH     R1,[R3, #+0]
   \   000020B8   B230D3E1           LDRH     R3,[R3, #+2]
   \   000020BC   020040E0           SUB      R0,R0,R2
   \   000020C0   013043E0           SUB      R3,R3,R1
   \                     ??walkman_Redraw_157:
   \   000020C4   10002DE9           PUSH     {R4}
   \   000020C8   01002DE9           PUSH     {R0}
   \   000020CC   0600A0E1           MOV      R0,R6
   \   000020D0   400100EF           SWI      +320
   \   000020D4   08D08DE2           ADD      SP,SP,#+8
   1398            }
   1399            //----------------------------------------------------------------------------
   1400            //Shuffle icon
   1401              if (orient ? shuffle_show : shuffle_show_h)
   \                     ??walkman_Redraw_151:
   \   000020D8   000059E3           CMP      R9,#+0
   \   000020DC   1C049F15           LDRNE    R0,??walkman_Redraw_90+0x2A0  ;; shuffle_show
   \   000020E0   1C049F05           LDREQ    R0,??walkman_Redraw_90+0x2A4  ;; shuffle_show_h
   \   000020E4   000090E5           LDR      R0,[R0, #+0]
   \   000020E8   000050E3           CMP      R0,#+0
   \   000020EC   2900000A           BEQ      ??walkman_Redraw_158
   1402            {
   1403              putchar_(GCanvas, 
   1404                      orient ? shuffle_rect.x1 : shuffle_rect_h.x1, 
   1405                      orient ? shuffle_rect.y1 - StatusSize: shuffle_rect_h.y1,
   1406                      orient ? shuffle_rect.x2 - shuffle_rect.x1 : shuffle_rect_h.x2 - shuffle_rect_h.x1,
   1407                      orient ? shuffle_rect.y2 - shuffle_rect.y1 : shuffle_rect_h.y2 - shuffle_rect_h.y1,
   1408                      wb->ShuffleMode==1 ? media_images[IMG_RANDOM] : media_images[IMG_RANDOM_OFF]);
   \   000020F0   10049FE5           LDR      R0,??walkman_Redraw_90+0x2A8  ;; media_images + 8
   \   000020F4   9910D5E5           LDRB     R1,[R5, #+153]
   \   000020F8   B040D0E1           LDRH     R4,[R0, #+0]
   \   000020FC   08049FE5           LDR      R0,??walkman_Redraw_90+0x2AC  ;; media_images + 10
   \   00002100   010051E3           CMP      R1,#+1
   \   00002104   B000D0E1           LDRH     R0,[R0, #+0]
   \   00002108   0200001A           BNE      ??walkman_Redraw_159
   \                     ??walkman_Redraw_160:
   \   0000210C   000054E3           CMP      R4,#+0
   \   00002110   0600001A           BNE      ??walkman_Redraw_161
   \   00002114   1F0000EA           B        ??walkman_Redraw_158
   \                     ??walkman_Redraw_159:
   \   00002118   000050E3           CMP      R0,#+0
   \   0000211C   0100000A           BEQ      ??walkman_Redraw_162
   \   00002120   010051E3           CMP      R1,#+1
   \   00002124   F8FFFF0A           BEQ      ??walkman_Redraw_160
   \                     ??walkman_Redraw_162:
   \   00002128   080050E1           CMP      R0,R8
   \   0000212C   1900000A           BEQ      ??walkman_Redraw_158
   \                     ??walkman_Redraw_161:
   \   00002130   010051E3           CMP      R1,#+1
   \   00002134   0040A011           MOVNE    R4,R0
   \   00002138   000059E3           CMP      R9,#+0
   \   0000213C   0900000A           BEQ      ??walkman_Redraw_163
   \   00002140   C8339FE5           LDR      R3,??walkman_Redraw_90+0x2B0  ;; shuffle_rect
   \   00002144   B420D3E1           LDRH     R2,[R3, #+4]
   \   00002148   B600D3E1           LDRH     R0,[R3, #+6]
   \   0000214C   B010D3E1           LDRH     R1,[R3, #+0]
   \   00002150   B230D3E1           LDRH     R3,[R3, #+2]
   \   00002154   30A097E5           LDR      R10,[R7, #+48]
   \   00002158   020040E0           SUB      R0,R0,R2
   \   0000215C   013043E0           SUB      R3,R3,R1
   \   00002160   0A2042E0           SUB      R2,R2,R10
   \   00002164   060000EA           B        ??walkman_Redraw_164
   \                     ??walkman_Redraw_163:
   \   00002168   A4339FE5           LDR      R3,??walkman_Redraw_90+0x2B4  ;; shuffle_rect_h
   \   0000216C   B420D3E1           LDRH     R2,[R3, #+4]
   \   00002170   B600D3E1           LDRH     R0,[R3, #+6]
   \   00002174   B010D3E1           LDRH     R1,[R3, #+0]
   \   00002178   B230D3E1           LDRH     R3,[R3, #+2]
   \   0000217C   020040E0           SUB      R0,R0,R2
   \   00002180   013043E0           SUB      R3,R3,R1
   \                     ??walkman_Redraw_164:
   \   00002184   10002DE9           PUSH     {R4}
   \   00002188   01002DE9           PUSH     {R0}
   \   0000218C   0600A0E1           MOV      R0,R6
   \   00002190   400100EF           SWI      +320
   \   00002194   08D08DE2           ADD      SP,SP,#+8
   1409            }
   1410            //----------------------------------------------------------------------------
   1411            //Stereo widening icon
   1412            if (orient ? stereo_show : stereo_show_h)
   \                     ??walkman_Redraw_158:
   \   00002198   000059E3           CMP      R9,#+0
   \   0000219C   74039F15           LDRNE    R0,??walkman_Redraw_90+0x2B8  ;; stereo_show
   \   000021A0   74039F05           LDREQ    R0,??walkman_Redraw_90+0x2BC  ;; stereo_show_h
   \   000021A4   000090E5           LDR      R0,[R0, #+0]
   \   000021A8   000050E3           CMP      R0,#+0
   \   000021AC   2900000A           BEQ      ??walkman_Redraw_15
   1413            {
   1414              putchar_(GCanvas, 
   1415                      orient ? stereo_rect.x1 : stereo_rect_h.x1, 
   1416                      orient ? stereo_rect.y1 - StatusSize: stereo_rect_h.y1,
   1417                      orient ? stereo_rect.x2 - stereo_rect.x1 : stereo_rect_h.x2 - stereo_rect_h.x1,
   1418                      orient ? stereo_rect.y2 - stereo_rect.y1 : stereo_rect_h.y2 - stereo_rect_h.y1,
   1419                      wb->StereoWidening==1 ? media_images[IMG_STEREOWIDENING] : media_images[IMG_STEREOWIDENING_OFF]);
   \   000021B0   68139FE5           LDR      R1,??walkman_Redraw_90+0x2C0  ;; media_images + 6
   \   000021B4   68039FE5           LDR      R0,??walkman_Redraw_90+0x2C4  ;; media_images + 12
   \   000021B8   B040D1E1           LDRH     R4,[R1, #+0]
   \   000021BC   A010D5E5           LDRB     R1,[R5, #+160]
   \   000021C0   B000D0E1           LDRH     R0,[R0, #+0]
   \   000021C4   010051E3           CMP      R1,#+1
   \   000021C8   0200001A           BNE      ??walkman_Redraw_165
   \                     ??walkman_Redraw_166:
   \   000021CC   000050E3           CMP      R0,#+0
   \   000021D0   0600001A           BNE      ??walkman_Redraw_167
   \   000021D4   1F0000EA           B        ??walkman_Redraw_15
   \                     ??walkman_Redraw_165:
   \   000021D8   000054E3           CMP      R4,#+0
   \   000021DC   0100000A           BEQ      ??walkman_Redraw_168
   \   000021E0   010051E3           CMP      R1,#+1
   \   000021E4   F8FFFF0A           BEQ      ??walkman_Redraw_166
   \                     ??walkman_Redraw_168:
   \   000021E8   080054E1           CMP      R4,R8
   \   000021EC   1900000A           BEQ      ??walkman_Redraw_15
   \                     ??walkman_Redraw_167:
   \   000021F0   010051E3           CMP      R1,#+1
   \   000021F4   0040A001           MOVEQ    R4,R0
   \   000021F8   000059E3           CMP      R9,#+0
   \   000021FC   0900000A           BEQ      ??walkman_Redraw_169
   \   00002200   20239FE5           LDR      R2,??walkman_Redraw_90+0x2C8  ;; stereo_rect
   \   00002204   B450D2E1           LDRH     R5,[R2, #+4]
   \   00002208   B600D2E1           LDRH     R0,[R2, #+6]
   \   0000220C   B010D2E1           LDRH     R1,[R2, #+0]
   \   00002210   B220D2E1           LDRH     R2,[R2, #+2]
   \   00002214   050040E0           SUB      R0,R0,R5
   \   00002218   013042E0           SUB      R3,R2,R1
   \   0000221C   302097E5           LDR      R2,[R7, #+48]
   \   00002220   022045E0           SUB      R2,R5,R2
   \   00002224   060000EA           B        ??walkman_Redraw_170
   \                     ??walkman_Redraw_169:
   \   00002228   FC329FE5           LDR      R3,??walkman_Redraw_90+0x2CC  ;; stereo_rect_h
   \   0000222C   B420D3E1           LDRH     R2,[R3, #+4]
   \   00002230   B600D3E1           LDRH     R0,[R3, #+6]
   \   00002234   B010D3E1           LDRH     R1,[R3, #+0]
   \   00002238   B230D3E1           LDRH     R3,[R3, #+2]
   \   0000223C   020040E0           SUB      R0,R0,R2
   \   00002240   013043E0           SUB      R3,R3,R1
   \                     ??walkman_Redraw_170:
   \   00002244   10002DE9           PUSH     {R4}
   \   00002248   01002DE9           PUSH     {R0}
   \   0000224C   0600A0E1           MOV      R0,R6
   \   00002250   400100EF           SWI      +320
   \                     ??walkman_Redraw_16:
   \   00002254   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \                     ??walkman_Redraw_15:
   \   00002258   90D08DE2           ADD      SP,SP,#+144      ;; stack cleaning
   \   0000225C   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??walkman_Redraw_90:
   \   00002260   ........           DC32     album_ct
   \   00002264   ........           DC32     album_font
   \   00002268   ........           DC32     album_hl_h
   \   0000226C   ........           DC32     album_scolor_h
   \   00002270   ........           DC32     album_color_h
   \   00002274   ........           DC32     album_ct_h
   \   00002278   ........           DC32     album_font_h
   \   0000227C   ........           DC32     artist_show
   \   00002280   ........           DC32     artist_show_h
   \   00002284   ........           DC32     artist_rc_h
   \   00002288   ........           DC32     artist_rc
   \   0000228C   ........           DC32     artist_hl
   \   00002290   ........           DC32     artist_scolor
   \   00002294   ........           DC32     artist_color
   \   00002298   ........           DC32     artist_ct
   \   0000229C   ........           DC32     artist_font
   \   000022A0   ........           DC32     artist_hl_h
   \   000022A4   ........           DC32     artist_scolor_h
   \   000022A8   ........           DC32     artist_color_h
   \   000022AC   ........           DC32     artist_ct_h
   \   000022B0   ........           DC32     artist_font_h
   \   000022B4   ........           DC32     genre_show
   \   000022B8   ........           DC32     genre_show_h
   \   000022BC   ........           DC32     genre_rc_h
   \   000022C0   ........           DC32     genre_rc
   \   000022C4   ........           DC32     genre_hl
   \   000022C8   ........           DC32     genre_scolor
   \   000022CC   ........           DC32     genre_color
   \   000022D0   ........           DC32     genre_ct
   \   000022D4   ........           DC32     genre_font
   \   000022D8   ........           DC32     genre_hl_h
   \   000022DC   ........           DC32     genre_scolor_h
   \   000022E0   ........           DC32     genre_color_h
   \   000022E4   ........           DC32     genre_ct_h
   \   000022E8   ........           DC32     genre_font_h
   \   000022EC   ........           DC32     nowmusic + 8220
   \   000022F0   ........           DC32     year_show
   \   000022F4   ........           DC32     year_show_h
   \   000022F8   ........           DC32     year_rc_h
   \   000022FC   ........           DC32     year_rc
   \   00002300   ........           DC32     year_hl
   \   00002304   ........           DC32     year_scolor
   \   00002308   ........           DC32     year_color
   \   0000230C   ........           DC32     year_ct
   \   00002310   ........           DC32     year_font
   \   00002314   ........           DC32     year_hl_h
   \   00002318   ........           DC32     year_scolor_h
   \   0000231C   ........           DC32     year_color_h
   \   00002320   ........           DC32     year_ct_h
   \   00002324   ........           DC32     year_font_h
   \   00002328   ........           DC32     nowmusic + 6172
   \   0000232C   ........           DC32     trackn_show
   \   00002330   ........           DC32     trackn_show_h
   \   00002334   ........           DC32     trackn_rc_h
   \   00002338   ........           DC32     trackn_rc
   \   0000233C   ........           DC32     trackn_mask
   \   00002340   ........           DC32     trackn_mask_h
   \   00002344   ........           DC32     trackn_hl
   \   00002348   ........           DC32     trackn_scolor
   \   0000234C   ........           DC32     trackn_color
   \   00002350   ........           DC32     trackn_ct
   \   00002354   ........           DC32     trackn_font
   \   00002358   ........           DC32     trackn_hl_h
   \   0000235C   ........           DC32     trackn_scolor_h
   \   00002360   ........           DC32     trackn_color_h
   \   00002364   ........           DC32     trackn_ct_h
   \   00002368   ........           DC32     trackn_font_h
   \   0000236C   ........           DC32     tracks_show
   \   00002370   ........           DC32     tracks_show_h
   \   00002374   ........           DC32     tracks_rc_h
   \   00002378   ........           DC32     tracks_rc
   \   0000237C   ........           DC32     tracks_mask
   \   00002380   ........           DC32     tracks_mask_h
   \   00002384   ........           DC32     tracks_hl
   \   00002388   ........           DC32     tracks_scolor
   \   0000238C   ........           DC32     tracks_color
   \   00002390   ........           DC32     tracks_ct
   \   00002394   ........           DC32     tracks_font
   \   00002398   ........           DC32     tracks_hl_h
   \   0000239C   ........           DC32     tracks_scolor_h
   \   000023A0   ........           DC32     tracks_color_h
   \   000023A4   ........           DC32     tracks_ct_h
   \   000023A8   ........           DC32     tracks_font_h
   \   000023AC   ........           DC32     bitrate_show
   \   000023B0   ........           DC32     bitrate_show_h
   \   000023B4   ........           DC32     nowmusic + 4
   \   000023B8   ........           DC32     bitrate_rc_h
   \   000023BC   ........           DC32     bitrate_rc
   \   000023C0   ........           DC32     use_vbr
   \   000023C4   ........           DC32     bitrate_vbr
   \   000023C8   ........           DC32     bitrate_vbr_h
   \   000023CC   ........           DC32     nowmusic
   \   000023D0   ........           DC32     bitrate_mask
   \   000023D4   ........           DC32     bitrate_mask_h
   \   000023D8   ........           DC32     bitrate_hl
   \   000023DC   ........           DC32     bitrate_scolor
   \   000023E0   ........           DC32     bitrate_color
   \   000023E4   ........           DC32     bitrate_ct
   \   000023E8   ........           DC32     bitrate_hl_h
   \   000023EC   ........           DC32     bitrate_scolor_h
   \   000023F0   ........           DC32     bitrate_color_h
   \   000023F4   ........           DC32     bitrate_ct_h
   \   000023F8   ........           DC32     bitrate_font
   \   000023FC   ........           DC32     bitrate_font_h
   \   00002400   ........           DC32     freq_show
   \   00002404   ........           DC32     freq_show_h
   \   00002408   ........           DC32     nowmusic + 20
   \   0000240C   ........           DC32     freq_rc_h
   \   00002410   ........           DC32     freq_rc
   \   00002414   ........           DC32     freq_mask
   \   00002418   ........           DC32     freq_mask_h
   \   0000241C   ........           DC32     freq_hl
   \   00002420   ........           DC32     freq_scolor
   \   00002424   ........           DC32     freq_color
   \   00002428   ........           DC32     freq_ct
   \   0000242C   ........           DC32     freq_font
   \   00002430   ........           DC32     freq_hl_h
   \   00002434   ........           DC32     freq_scolor_h
   \   00002438   ........           DC32     freq_color_h
   \   0000243C   ........           DC32     freq_ct_h
   \   00002440   ........           DC32     freq_font_h
   \   00002444   ........           DC32     ch_show
   \   00002448   ........           DC32     ch_show_h
   \   0000244C   ........           DC32     nowmusic + 24
   \   00002450   ........           DC32     ch_rc_h
   \   00002454   ........           DC32     ch_rc
   \   00002458   ........           DC32     ch_hl
   \   0000245C   ........           DC32     ch_scolor
   \   00002460   ........           DC32     ch_color
   \   00002464   ........           DC32     ch_ct
   \   00002468   ........           DC32     ch_font
   \   0000246C   ........           DC32     ch_hl_h
   \   00002470   ........           DC32     ch_scolor_h
   \   00002474   ........           DC32     ch_color_h
   \   00002478   ........           DC32     ch_ct_h
   \   0000247C   ........           DC32     ch_font_h
   \   00002480   ........           DC32     navigimg_show
   \   00002484   ........           DC32     navigimg_show_h
   \   00002488   ........           DC32     navigimg
   \   0000248C   ........           DC32     navigimg_rect
   \   00002490   ........           DC32     navigimg_rect_h
   \   00002494   ........           DC32     images
   \   00002498   ........           DC32     upimg_show
   \   0000249C   ........           DC32     upimg_show_h
   \   000024A0   ........           DC32     upimg_rect
   \   000024A4   ........           DC32     upimg_rect_h
   \   000024A8   ........           DC32     downimg_show
   \   000024AC   ........           DC32     downimg_show_h
   \   000024B0   ........           DC32     downimg_rect
   \   000024B4   ........           DC32     downimg_rect_h
   \   000024B8   ........           DC32     leftimg_show
   \   000024BC   ........           DC32     leftimg_show_h
   \   000024C0   ........           DC32     leftimg_rect
   \   000024C4   ........           DC32     leftimg_rect_h
   \   000024C8   ........           DC32     rightimg_show
   \   000024CC   ........           DC32     rightimg_show_h
   \   000024D0   ........           DC32     rightimg_rect
   \   000024D4   ........           DC32     rightimg_rect_h
   \   000024D8   ........           DC32     centerimg_show
   \   000024DC   ........           DC32     centerimg_show_h
   \   000024E0   ........           DC32     centerimg_rect
   \   000024E4   ........           DC32     centerimg_rect_h
   \   000024E8   ........           DC32     repeat_show
   \   000024EC   ........           DC32     repeat_show_h
   \   000024F0   ........           DC32     media_images + 4
   \   000024F4   ........           DC32     media_images + 14
   \   000024F8   ........           DC32     repeat_rect
   \   000024FC   ........           DC32     repeat_rect_h
   \   00002500   ........           DC32     shuffle_show
   \   00002504   ........           DC32     shuffle_show_h
   \   00002508   ........           DC32     media_images + 8
   \   0000250C   ........           DC32     media_images + 10
   \   00002510   ........           DC32     shuffle_rect
   \   00002514   ........           DC32     shuffle_rect_h
   \   00002518   ........           DC32     stereo_show
   \   0000251C   ........           DC32     stereo_show_h
   \   00002520   ........           DC32     media_images + 6
   \   00002524   ........           DC32     media_images + 12
   \   00002528   ........           DC32     stereo_rect
   \   0000252C   ........           DC32     stereo_rect_h
   1420            }
   1421            /*
   1422          //#ifndef NDEBUG
   1423            rc.x1 = 0;
   1424            rc.x2 = orient ? 240 : 320;
   1425            GC_ValidateRect(GC,&rc);
   1426            DrawLine2(FONT_E_20B, 
   1427                      TextID_CreateIntegerID(BENCH_GET), 
   1428                      2, 
   1429                      0, 
   1430                      0, 
   1431                      orient ? 240 : 320,
   1432                      orient ? 320 : 240,
   1433                      orient ? title_color : title_color_h, 
   1434                      orient ? title_scolor : title_scolor_h,
   1435                      true,
   1436                      0);
   1437            
   1438              GC_ValidateRect(GC,&gc_rc);
   1439          //#endif*/
   1440          };
   1441          
   1442          int GetIconID(wchar_t *txt);
   1443          
   1444          #pragma optimize = z 9

   \                                 In segment CODE, align 4, keep-with-next
   1445          IMAGEID getimgID(IMAGEID old)
   1446          {
   1447            return old;
   \                     ??getimgID:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   1448          };
   1449          void Softkey_SetOnRedraw();

   \                                 In segment CODE, align 4, keep-with-next
   1450          void GetRedraw(DISP_OBJ_ONREDRAW_METHOD draw)
   1451          {
   1452            oldredr=draw;
   \                     ??GetRedraw:
   \   00000000   ........           LDR      R1,??DataTable52  ;; v_MPA_ID
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   400081E5           STR      R0,[R1, #+64]
   1453            debug_printf("\nWalkmanDisplay: old redraw: %X\n", oldredr);
   \   0000000C   0010A0E1           MOV      R1,R0
   \   00000010   18009FE5           LDR      R0,??GetRedraw_1  ;; `?<Constant "\\nWalkmanDisplay: old ...">`
   \   00000014   B10100EF           SWI      +433
   1454            Softkey_SetOnRedraw();
   \   00000018   ........           BL       ??Softkey_SetOnRedraw
   1455            ModifyKeyHook(NewKey, KEY_HOOK_ADD, NULL);
   \   0000001C   ........           LDR      R0,??DataTable44  ;; ??NewKey
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   070100EF           SWI      +263
   1456          };
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   \                     ??GetRedraw_1:
   \   00000030   ........           DC32     `?<Constant "\\nWalkmanDisplay: old ...">`
   1457          

   \                                 In segment CODE, align 4, keep-with-next
   1458          int isBrowserItemBook(BOOK *bk)
   1459          {
   1460            if (strcmp(bk->xbook->name,"BrowserItemBook")==0)
   \                     ??isBrowserItemBook:
   \   00000000   20109FE5           LDR      R1,??isBrowserItemBook_1  ;; `?<Constant "BrowserItemBook">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   040090E5           LDR      R0,[R0, #+4]
   \   00000010   590100EF           SWI      +345
   \   00000014   000050E3           CMP      R0,#+0
   1461              return 1;
   \   00000018   0100A003           MOVEQ    R0,#+1
   \   0000001C   0080BD08           POPEQ    {PC}
   1462            return 0;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   0080BDE8           POP      {PC}             ;; return
   \                     ??isBrowserItemBook_1:
   \   00000028   ........           DC32     `?<Constant "BrowserItemBook">`
   1463          };
   1464          

   \                                 In segment CODE, align 4, keep-with-next
   1465          void PageHook(void*, BOOK *book, int id)
   1466          {
   \                     ??PageHook:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   1467            if (working)
   \   00000004   ........           LDR      R5,??DataTable52  ;; v_MPA_ID
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   5100D5E5           LDRB     R0,[R5, #+81]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   7080BD08           POPEQ    {R4-R6,PC}
   1468            {
   1469              BookObj_SetDisplayOrientation(FindBook(get_IsAudioPlayerBook()),0);
   \   0000001C   8B8200EF           SWI      +33419
   \   00000020   300100EF           SWI      +304
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   1A0300EF           SWI      +794
   1470              BookObj_SetDisplayOrientation(book,0);
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   1A0300EF           SWI      +794
   1471              if (id==4)
   \   00000038   040056E3           CMP      R6,#+4
   \   0000003C   0300001A           BNE      ??PageHook_1
   1472              {
   1473                BOOK *b=Display_GetTopBook(0);
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   1B0300EF           SWI      +795
   1474                BookObj_SetDisplayOrientation(b,0);
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   1A0300EF           SWI      +794
   1475              }
   1476              if (BOOK *bk=FindBook(isBrowserItemBook))
   \                     ??PageHook_1:
   \   00000050   50009FE5           LDR      R0,??PageHook_2  ;; ??isBrowserItemBook
   \   00000054   300100EF           SWI      +304
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0100000A           BEQ      ??PageHook_3
   1477              {
   1478                BookObj_SetDisplayOrientation(bk,0);
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   1A0300EF           SWI      +794
   1479              }
   1480              BookObj_SetDisplayOrientation(FindBook(get_IsAudioPlayerBook()),0);
   \                     ??PageHook_3:
   \   00000068   8B8200EF           SWI      +33419
   \   0000006C   300100EF           SWI      +304
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   1A0300EF           SWI      +794
   1481              BookObj_SetDisplayOrientation(book,0);
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   1A0300EF           SWI      +794
   1482              debug_printf("\nWalkmanDisplay: pagehook called from %s\n",book->xbook->name); 
   \   00000084   000094E5           LDR      R0,[R4, #+0]
   \   00000088   041090E5           LDR      R1,[R0, #+4]
   \   0000008C   18009FE5           LDR      R0,??PageHook_2+0x4  ;; `?<Constant "\\nWalkmanDisplay: page...">`
   \   00000090   B10100EF           SWI      +433
   1483              accel_wrk=false;
   \   00000094   0000A0E3           MOV      R0,#+0
   \   00000098   5200C5E5           STRB     R0,[R5, #+82]
   1484              inMenu=true;
   \   0000009C   0100A0E3           MOV      R0,#+1
   \   000000A0   5400C5E5           STRB     R0,[R5, #+84]
   1485            }
   1486          };
   \   000000A4   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??PageHook_2:
   \   000000A8   ........           DC32     ??isBrowserItemBook
   \   000000AC   ........           DC32     `?<Constant "\\nWalkmanDisplay: page...">`
   1487          

   \                                 In segment CODE, align 4, keep-with-next
   1488          wchar_t *checkfile_(wchar_t *name, wchar_t *skinpath)
   1489          {
   \                     ??checkfile_:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   1490            FSTAT fst;
   1491            if (fstat(skinpath,name,&fst)==0)
   \   00000010   0D20A0E1           MOV      R2,SP
   \   00000014   0410A0E1           MOV      R1,R4
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   1C0100EF           SWI      +284
   \   00000020   000050E3           CMP      R0,#+0
   1492            {
   1493              return skinpath;
   \   00000024   0500A001           MOVEQ    R0,R5
   \   00000028   0D00000A           BEQ      ??checkfile__1
   1494            }
   1495            else if (fstat(extFolder,name,&fst)==0)
   \   0000002C   ........           LDR      R6,??DataTable38  ;; intFolder
   \   00000030   405EA0E3           MOV      R5,#+1024
   \   00000034   0D20A0E1           MOV      R2,SP
   \   00000038   0410A0E1           MOV      R1,R4
   \   0000003C   060085E0           ADD      R0,R5,R6
   \   00000040   1C0100EF           SWI      +284
   \   00000044   000050E3           CMP      R0,#+0
   1496            {
   1497              return extFolder;
   \   00000048   06008500           ADDEQ    R0,R5,R6
   \   0000004C   0400000A           BEQ      ??checkfile__1
   1498            }
   1499            else if (fstat(intFolder,name,&fst)==0)
   \   00000050   0D20A0E1           MOV      R2,SP
   \   00000054   0410A0E1           MOV      R1,R4
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   1C0100EF           SWI      +284
   \   00000060   0600A0E1           MOV      R0,R6
   1500            {
   1501              return intFolder;
   1502            }
   1503            return intFolder;
   \                     ??checkfile__1:
   \   00000064   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000068   7080BDE8           POP      {R4-R6,PC}       ;; return
   1504          };
   1505          

   \                                 In segment CODE, align 4, keep-with-next
   1506          CMyBook::CMyBook():CBook((char*)PROJECT_NAME,&::base_page)
   \                     ??CMyBook:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1507          {
   \   00000004   ........           LDR      R5,??DataTable50  ;; `?<Constant "WalkmanDisplay">`
   1508            MyBook->redraw=walkman_Redraw;
   1509            MyBook->getImgID=getimgID;
   1510            MyBook->getOldRedr=GetRedraw;
   1511            MyBook->pageHook=PageHook;
   1512            wstrcpy(intFolder,GetDir(MEM_INTERNAL+DIR_ELFS_CONFIG));
   \   00000008   ........           LDR      R6,??DataTable38  ;; intFolder
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   3C2085E2           ADD      R2,R5,#+60
   \   00000014   0510A0E1           MOV      R1,R5
   \   00000018   ........           _BLF     ??CBook,??CBook??rA
   \   0000001C   ........           LDR      R1,??DataTable39  ;; ??walkman_Redraw
   \   00000020   100085E2           ADD      R0,R5,#+16
   \   00000024   280084E5           STR      R0,[R4, #+40]
   \   00000028   ........           LDR      R0,??DataTable40  ;; MyBook
   1513            wstrcat(intFolder,L"/WalkmanDisplay/");
   1514            wstrcpy(extFolder,GetDir(MEM_EXTERNAL+DIR_ELFS_CONFIG));
   \   0000002C   407EA0E3           MOV      R7,#+1024
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   181080E5           STR      R1,[R0, #+24]
   \   00000038   58109FE5           LDR      R1,??CMyBook_1   ;; ??getimgID
   \   0000003C   1C1080E5           STR      R1,[R0, #+28]
   \   00000040   54109FE5           LDR      R1,??CMyBook_1+0x4  ;; ??GetRedraw
   \   00000044   201080E5           STR      R1,[R0, #+32]
   \   00000048   50109FE5           LDR      R1,??CMyBook_1+0x8  ;; ??PageHook
   \   0000004C   241080E5           STR      R1,[R0, #+36]
   \   00000050   1500A0E3           MOV      R0,#+21
   \   00000054   050100EF           SWI      +261
   \   00000058   0010A0E1           MOV      R1,R0
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   520100EF           SWI      +338
   \   00000064   181085E2           ADD      R1,R5,#+24
   \   00000068   0600A0E1           MOV      R0,R6
   \   0000006C   540100EF           SWI      +340
   \   00000070   1400A0E3           MOV      R0,#+20
   \   00000074   050100EF           SWI      +261
   \   00000078   0010A0E1           MOV      R1,R0
   \   0000007C   060087E0           ADD      R0,R7,R6
   \   00000080   520100EF           SWI      +338
   1515            wstrcat(extFolder,L"/WalkmanDisplay/");
   \   00000084   181085E2           ADD      R1,R5,#+24
   \   00000088   060087E0           ADD      R0,R7,R6
   \   0000008C   540100EF           SWI      +340
   1516          };
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??CMyBook_1:
   \   00000098   ........           DC32     ??getimgID
   \   0000009C   ........           DC32     ??GetRedraw
   \   000000A0   ........           DC32     ??PageHook
   1517          
   1518          

   \                                 In segment CODE, align 4, keep-with-next
   1519          void Send_REDRAW_RELEASE()
   1520          {
   \                     ??Send_REDRAW_RELEASE:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1521            // ïîñûëàåì âñåì  ìåññàãó ñî ñòàðûì è ñâîèì ìåòîäàìè Redraw
   1522            REDRAW_RELEASE_MESSAGE * sbm= new REDRAW_RELEASE_MESSAGE;
   \   00000004   1800A0E3           MOV      R0,#+24
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   0040A0E1           MOV      R4,R0
   1523            memset(sbm,0,sizeof(REDRAW_RELEASE_MESSAGE));
   \   00000010   1820A0E3           MOV      R2,#+24
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   120100EF           SWI      +274
   1524            sbm->SK_OldOnRedraw=Softkey_DefaultRedraw;
   \   0000001C   ........           LDR      R0,??DataTable51  ;; v_MPA_ID + 28
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   100084E5           STR      R0,[R4, #+16]
   1525            sbm->SK_NewOnRedraw=softredraw;
   \   00000028   ........           LDR      R0,??DataTable53  ;; ??softredraw
   \   0000002C   140084E5           STR      R0,[R4, #+20]
   1526            
   1527            UI_Event_wData(SBY_REDRAW_RELEASE_EVENT ,sbm,(void (*)(void*))mfree_adr());
   \   00000030   048100EF           SWI      +33028
   \   00000034   0020A0E1           MOV      R2,R0
   \   00000038   0410A0E1           MOV      R1,R4
   \   0000003C   E300A0E3           MOV      R0,#+227
   \   00000040   C00F80E3           ORR      R0,R0,#0x300
   \   00000044   A90100EF           SWI      +425
   1528          };
   \   00000048   1080BDE8           POP      {R4,PC}          ;; return
   1529          
   1530          

   \                                 In segment CODE, align 4, keep-with-next
   1531          void CMyBook::onClose()
   1532          {
   \                     ??onClose:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   1533          #ifndef NDEBUG
   1534            kill_proc(proc_bench);
   1535          #endif
   1536            if (hMGC)
   \   00000004   ........           LDR      R4,??DataTable52  ;; v_MPA_ID
   \   00000008   440094E5           LDR      R0,[R4, #+68]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      ??onClose_1
   1537            {
   1538              GC_FreeGC(hMGC);
   \   00000014   960300EF           SWI      +918
   1539            }
   1540            #define IDFREE(a) if (a!=NOIMAGE && a!=0) {ImageID_Free(a);} a=NOIMAGE
   1541            IDFREE(nowmusic.meta.ImageID);
   \                     ??onClose_1:
   \   00000018   88509FE5           LDR      R5,??onClose_2   ;; nowmusic + 10272
   \   0000001C   FF60A0E3           MOV      R6,#+255
   \   00000020   B000D5E1           LDRH     R0,[R5, #+0]
   \   00000024   FF6C86E3           ORR      R6,R6,#0xFF00
   \   00000028   060050E1           CMP      R0,R6
   \   0000002C   00005013           CMPNE    R0,#+0
   \   00000030   0000000A           BEQ      ??onClose_3
   \   00000034   CD0200EF           SWI      +717
   1542            ModifyKeyHook(NewKey, KEY_HOOK_REMOVE, NULL);
   \                     ??onClose_3:
   \   00000038   ........           LDR      R0,??DataTable44  ;; ??NewKey
   \   0000003C   B060C5E1           STRH     R6,[R5, #+0]
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   070100EF           SWI      +263
   1543            if (RedrawUsed)
   \   0000004C   5000D4E5           LDRB     R0,[R4, #+80]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0100000A           BEQ      ??onClose_4
   1544            {
   1545              Send_REDRAW_RELEASE();
   \   00000058   ........           BL       ??Send_REDRAW_RELEASE
   1546              ReturnRedraw();
   \   0000005C   ........           BL       ??ReturnRedraw
   1547            }
   1548            if (timer)
   \                     ??onClose_4:
   \   00000060   B200D4E1           LDRH     R0,[R4, #+2]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0100000A           BEQ      ??onClose_5
   1549              Timer_Kill(&timer);
   \   0000006C   020084E2           ADD      R0,R4,#+2
   \   00000070   2A0100EF           SWI      +298
   1550            if (AccelCtrl)
   \                     ??onClose_5:
   \   00000074   280094E5           LDR      R0,[R4, #+40]
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0000000A           BEQ      ??onClose_6
   1551              delete(AccelCtrl);
   \   00000080   ........           _BLF     `??delete ~CAccelCtrl`,`??delete ~CAccelCtrl??rA`
   1552            deinit_resources();
   \                     ??onClose_6:
   \   00000084   ........           _BLF     ??deinit_resources,??deinit_resources??rA
   1553            void Lang_Remove();
   1554            Lang_Remove();
   \   00000088   ........           _BLF     ??Lang_Remove,??Lang_Remove??rA
   1555            if (currenttrack)
   \   0000008C   200094E5           LDR      R0,[R4, #+32]
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0000000A           BEQ      ??onClose_7
   1556              TrackDesc_Free(currenttrack);
   \   00000098   ........           _BLF     ??TrackDesc_Free,??TrackDesc_Free??rA
   1557            SUBPROC(elf_exit);
   \                     ??onClose_7:
   \   0000009C   ........           LDR      R0,??DataTable54  ;; ??elf_exit
   \   000000A0   080100EF           SWI      +264
   1558          };
   \   000000A4   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??onClose_2:
   \   000000A8   ........           DC32     nowmusic + 10272
   1559          

   \                                 In segment CODE, align 4, keep-with-next
   1560          int NewKey(int key,int,int mode, LPARAM, DISP_OBJ*)
   1561          {
   1562            BOOK *bk;
   1563            if (key==key_rotation && mode==key_rotation_mode)
   \                     ??NewKey:
   \   00000000   A8109FE5           LDR      R1,??NewKey_1    ;; key_rotation
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   001091E5           LDR      R1,[R1, #+0]
   \   0000000C   010050E1           CMP      R0,R1
   \   00000010   2400001A           BNE      ??NewKey_2
   \   00000014   98009FE5           LDR      R0,??NewKey_1+0x4  ;; key_rotation_mode
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   000052E1           CMP      R2,R0
   \   00000020   2000001A           BNE      ??NewKey_2
   1564            {
   1565              bk=FindBook(get_IsAudioPlayerBook());
   \   00000024   8B8200EF           SWI      +33419
   \   00000028   300100EF           SWI      +304
   \   0000002C   0050B0E1           MOVS     R5,R0
   1566              if (bk && bk==Display_GetTopBook(0))
   \   00000030   1A00000A           BEQ      ??NewKey_3
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   1B0300EF           SWI      +795
   \   0000003C   000055E1           CMP      R5,R0
   \   00000040   1600001A           BNE      ??NewKey_3
   1567              {
   1568                int mode=BookObj_GetDisplayOrientation(bk);
   1569                if (mode!=0 && curmode==HOR)
   \   00000044   ........           LDR      R4,??DataTable52  ;; v_MPA_ID
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   190300EF           SWI      +793
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   2C0094E5           LDR      R0,[R4, #+44]
   \   00000058   0700000A           BEQ      ??NewKey_4
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   0E00001A           BNE      ??NewKey_3
   1570                {
   1571                  set_vertical();
   \   00000064   ........           BL       ??set_vertical
   1572                  if (use_accel==1)
   \   00000068   ........           LDR      R0,??DataTable48  ;; use_accel
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   010050E3           CMP      R0,#+1
   \   00000074   0900001A           BNE      ??NewKey_3
   1573                  {
   1574                    accel_wrk=true;
   \   00000078   070000EA           B        ??NewKey_5
   1575                  }
   1576                }
   1577                else if (mode==0 && curmode==VERT)
   \                     ??NewKey_4:
   \   0000007C   020050E3           CMP      R0,#+2
   \   00000080   0600001A           BNE      ??NewKey_3
   1578                {
   1579                  set_horizontal();
   \   00000084   ........           BL       ??set_horizontal
   1580                  if (use_accel==1)
   \   00000088   ........           LDR      R0,??DataTable48  ;; use_accel
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   010050E3           CMP      R0,#+1
   \   00000094   0100001A           BNE      ??NewKey_3
   1581                  {
   1582                    accel_wrk=false;
   \   00000098   0000A0E3           MOV      R0,#+0
   \                     ??NewKey_5:
   \   0000009C   5200C4E5           STRB     R0,[R4, #+82]
   1583                  }
   1584                }
   1585                return -1;
   \                     ??NewKey_3:
   \   000000A0   0000E0E3           MVN      R0,#+0
   \   000000A4   3080BDE8           POP      {R4,R5,PC}
   1586              }
   1587              return -1;
   1588            }
   1589            return 0;
   \                     ??NewKey_2:
   \   000000A8   0000A0E3           MOV      R0,#+0
   \   000000AC   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??NewKey_1:
   \   000000B0   ........           DC32     key_rotation
   \   000000B4   ........           DC32     key_rotation_mode
   1590          };
   1591          

   \                                 In segment CODE, align 4, keep-with-next
   1592          void GetSize()
   1593          {
   \                     ??GetSize:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1594            int a=Display_GetHeight(0);
   1595            ScreenHeight=a;
   \   00000004   ........           LDR      R4,??DataTable52  ;; v_MPA_ID
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   580200EF           SWI      +600
   \   00000010   380084E5           STR      R0,[R4, #+56]
   1596            ScreenWidth=Display_GetWidth(0);
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   590200EF           SWI      +601
   \   0000001C   3C0084E5           STR      R0,[R4, #+60]
   1597            StatusSize=DispObject_GetWindowHeight(*StatusRow_p());
   \   00000020   F28100EF           SWI      +33266
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   F40200EF           SWI      +756
   \   0000002C   300084E5           STR      R0,[R4, #+48]
   1598            SoftSize=DispObject_GetWindowHeight(DispObject_SoftKeys_Get());
   \   00000030   A30200EF           SWI      +675
   \   00000034   F40200EF           SWI      +756
   \   00000038   340084E5           STR      R0,[R4, #+52]
   1599          };
   \   0000003C   1080BDE8           POP      {R4,PC}          ;; return
   1600          

   \                                 In segment CODE, align 4, keep-with-next
   1601          int isWalkmanDisplayBook(BOOK *bk)
   1602          {
   1603            if (strcmp(bk->xbook->name,"WalkmanDisplay")==0)
   \                     ??isWalkmanDisplayBook:
   \   00000000   ........           LDR      R1,??DataTable50  ;; `?<Constant "WalkmanDisplay">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   040090E5           LDR      R0,[R0, #+4]
   \   00000010   590100EF           SWI      +345
   \   00000014   000050E3           CMP      R0,#+0
   1604              return 1;
   \   00000018   0100A003           MOVEQ    R0,#+1
   \   0000001C   0080BD08           POPEQ    {PC}
   1605            return 0;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   0080BDE8           POP      {PC}             ;; return
   1606          };
   1607          
   1608          

   \                                 In segment DATA_Z, align 4, align-sorted
   1609          wchar_t missedconsts[512];
   \                     missedconsts:
   \   00000000                      DS8 1024
   1610          #define CHECKCONST(a,b) if (a==0 || a==0xFFFFFFFF) {wstrcat(missedconsts,b);missed++;}
   1611          

   \                                 In segment CODE, align 4, keep-with-next
   1612          wchar_t *checkConsts()
   1613          {
   \                     ??checkConsts:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1614            int missed=0;
   1615            
   1616            wstrcpy(missedconsts,lng_txtMissedConsts);
   \   00000004   DC409FE5           LDR      R4,??checkConsts_1  ;; missedconsts
   \   00000008   DC509FE5           LDR      R5,??checkConsts_1+0x4  ;; `?<Constant L"\\x41e\\x442\\x441\\x443\\x442\\x441\\x4`
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   0510A0E1           MOV      R1,R5
   \   00000014   520100EF           SWI      +338
   1617            CHECKCONST(UI_MEDIAPLAYER_DESTROYED_EVENT,L"UI_MEDIAPLAYER_DESTROYED_EVENT\n");
   \   00000018   D0009FE5           LDR      R0,??checkConsts_1+0x8  ;; UI_MEDIAPLAYER_DESTROYED_EVENT
   \   0000001C   0070A0E3           MOV      R7,#+0
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   0760E0E1           MVN      R6,R7
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   06005011           CMPNE    R0,R6
   \   00000030   0300001A           BNE      ??checkConsts_2
   \   00000034   381085E2           ADD      R1,R5,#+56
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   540100EF           SWI      +340
   \   00000040   0170A0E3           MOV      R7,#+1
   1618            CHECKCONST(UI_MEDIAPLAYER_PLAY_PRESSED_EVENT,L"UI_MEDIAPLAYER_PLAY_PRESSED_EVENT\n");
   \                     ??checkConsts_2:
   \   00000044   A8009FE5           LDR      R0,??checkConsts_1+0xC  ;; UI_MEDIAPLAYER_PLAY_PRESSED_EVENT
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   06005011           CMPNE    R0,R6
   \   00000054   0300001A           BNE      ??checkConsts_3
   \   00000058   781085E2           ADD      R1,R5,#+120
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   540100EF           SWI      +340
   \   00000064   017087E2           ADD      R7,R7,#+1
   1619            CHECKCONST(UI_MEDIAPLAYER_AUDIO_PLAYING_TIME_EVENT,L"UI_MEDIAPLAYER_AUDIO_PLAYING_TIME_EVENT\n");
   \                     ??checkConsts_3:
   \   00000068   88009FE5           LDR      R0,??checkConsts_1+0x10  ;; UI_MEDIAPLAYER_AUDIO_PLAYING_TIME_EVENT
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   06005011           CMPNE    R0,R6
   \   00000078   0300001A           BNE      ??checkConsts_4
   \   0000007C   C01085E2           ADD      R1,R5,#+192
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   540100EF           SWI      +340
   \   00000088   017087E2           ADD      R7,R7,#+1
   1620            CHECKCONST(UI_KEYLOCK_ACTIVATE_EVENT, L"UI_KEYLOCK_ACTIVATE_EVENT\n");
   \                     ??checkConsts_4:
   \   0000008C   68009FE5           LDR      R0,??checkConsts_1+0x14  ;; UI_KEYLOCK_ACTIVATE_EVENT
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   06005011           CMPNE    R0,R6
   \   0000009C   0300001A           BNE      ??checkConsts_5
   \   000000A0   541F85E2           ADD      R1,R5,#+336
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   540100EF           SWI      +340
   \   000000AC   017087E2           ADD      R7,R7,#+1
   1621            CHECKCONST(UI_KEYLOCK_DEACTIVATE_EVENT, L"UI_KEYLOCK_DEACTIVATE_EVENT\n");
   \                     ??checkConsts_5:
   \   000000B0   48009FE5           LDR      R0,??checkConsts_1+0x18  ;; UI_KEYLOCK_DEACTIVATE_EVENT
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   06005011           CMPNE    R0,R6
   \   000000C0   0300001A           BNE      ??checkConsts_6
   \   000000C4   451F85E2           ADD      R1,R5,#+276
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   540100EF           SWI      +340
   \   000000D0   017087E2           ADD      R7,R7,#+1
   1622            if (missed)
   \                     ??checkConsts_6:
   \   000000D4   000057E3           CMP      R7,#+0
   1623              return missedconsts;
   \   000000D8   0400A011           MOVNE    R0,R4
   \   000000DC   F080BD18           POPNE    {R4-R7,PC}
   1624            return 0;
   \   000000E0   0000A0E3           MOV      R0,#+0
   \   000000E4   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??checkConsts_1:
   \   000000E8   ........           DC32     missedconsts
   \   000000EC   ........           DC32     `?<Constant L"\\x41e\\x442\\x441\\x443\\x442\\x441\\x4`
   \   000000F0   ........           DC32     UI_MEDIAPLAYER_DESTROYED_EVENT
   \   000000F4   ........           DC32     UI_MEDIAPLAYER_PLAY_PRESSED_EVENT
   \   000000F8   ........           DC32     UI_MEDIAPLAYER_AUDIO_PLAYING_TIME_EVENT
   \   000000FC   ........           DC32     UI_KEYLOCK_ACTIVATE_EVENT
   \   00000100   ........           DC32     UI_KEYLOCK_DEACTIVATE_EVENT
   1625          };
   1626          
   1627          #ifndef NDEBUG
   1628          OS_PROCESS(worker_entrypoint)
   1629          {
   1630            while (1)
   1631            {
   1632              bench_n++;
   1633              delay(1);
   1634            }
   1635          };
   1636          #endif
   1637          

   \                                 In segment CODE, align 4, keep-with-next
   1638          void softredraw(DISP_OBJ *DO, int a, int b, int c)
   1639          {
   \                     ??softredraw:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   1640            BOOK *bk=FindBook(get_IsAudioPlayerBook());
   \   00000014   8B8200EF           SWI      +33419
   \   00000018   300100EF           SWI      +304
   \   0000001C   0080A0E1           MOV      R8,R0
   1641            BOOK *top=Display_GetTopBook(0);
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   1B0300EF           SWI      +795
   1642            if (bk && top && bk==top)
   \   00000028   000058E3           CMP      R8,#+0
   \   0000002C   00005013           CMPNE    R0,#+0
   \   00000030   1000000A           BEQ      ??softredraw_1
   \   00000034   000058E1           CMP      R8,R0
   \   00000038   0E00001A           BNE      ??softredraw_1
   1643            {
   1644              int orient=BookObj_GetDisplayOrientation(bk);
   \   0000003C   0800A0E1           MOV      R0,R8
   \   00000040   190300EF           SWI      +793
   1645              if (orient>0 && (hidesoftkeys==1 || hidesoftkeys==3))
   \   00000044   4C109FE5           LDR      R1,??softredraw_2  ;; hidesoftkeys
   \   00000048   010050E3           CMP      R0,#+1
   \   0000004C   001091E5           LDR      R1,[R1, #+0]
   \   00000050   040000BA           BLT      ??softredraw_3
   \   00000054   010051E3           CMP      R1,#+1
   \   00000058   F081BD08           POPEQ    {R4-R8,PC}
   \   0000005C   030051E3           CMP      R1,#+3
   \   00000060   0400001A           BNE      ??softredraw_1
   \   00000064   F081BDE8           POP      {R4-R8,PC}
   1646                return;
   1647              else if (orient==0 && hidesoftkeys>=2)
   \                     ??softredraw_3:
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   0100001A           BNE      ??softredraw_1
   \   00000070   020051E3           CMP      R1,#+2
   \   00000074   F081BDA8           POPGE    {R4-R8,PC}
   1648                return;
   1649            }
   1650            Softkey_DefaultRedraw(DO, a, b, c);
   \                     ??softredraw_1:
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           LDR      R4,??DataTable51  ;; v_MPA_ID + 28
   \   00000080   0730A0E1           MOV      R3,R7
   \   00000084   004094E5           LDR      R4,[R4, #+0]
   \   00000088   0620A0E1           MOV      R2,R6
   \   0000008C   0510A0E1           MOV      R1,R5
   \   00000090   34FF2FE1           BLX      R4
   1651          };
   \   00000094   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??softredraw_2:
   \   00000098   ........           DC32     hidesoftkeys
   1652          

   \                                 In segment CODE, align 4, keep-with-next
   1653          void Softkey_SetOnRedraw()
   1654          {
   \                     ??Softkey_SetOnRedraw:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1655            if (RedrawUsed==false)
   \   00000004   ........           LDR      R4,??DataTable52  ;; v_MPA_ID
   \   00000008   5000D4E5           LDRB     R0,[R4, #+80]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD18           POPNE    {R4,PC}
   1656            {
   1657              RedrawUsed=true;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   5000C4E5           STRB     R0,[R4, #+80]
   1658              Softkey_DO=DispObject_SoftKeys_Get();
   \   0000001C   A30200EF           SWI      +675
   \   00000020   180084E5           STR      R0,[R4, #+24]
   1659              Softkey_DefaultRedraw=DispObject_GetOnRedraw(Softkey_DO);
   \   00000024   290200EF           SWI      +553
   \   00000028   1C0084E5           STR      R0,[R4, #+28]
   1660              Softkey_DD=DispObject_GetDESC(Softkey_DO);
   \   0000002C   180094E5           LDR      R0,[R4, #+24]
   \   00000030   1F0200EF           SWI      +543
   1661              DISP_DESC_SetOnRedraw(Softkey_DD,softredraw);
   \   00000034   ........           LDR      R1,??DataTable53  ;; ??softredraw
   \   00000038   140084E5           STR      R0,[R4, #+20]
   \   0000003C   280200EF           SWI      +552
   1662              debug_printf("\nWalkmanDisplay: own softkey redraw setted\n", oldredr);
   \   00000040   401094E5           LDR      R1,[R4, #+64]
   \   00000044   04009FE5           LDR      R0,??Softkey_SetOnRedraw_1  ;; `?<Constant "\\nWalkmanDisplay: own ...">_1`
   \   00000048   B10100EF           SWI      +433
   1663            }
   1664          };
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??Softkey_SetOnRedraw_1:
   \   00000050   ........           DC32     `?<Constant "\\nWalkmanDisplay: own ...">_1`
   1665          

   \                                 In segment CODE, align 4, keep-with-next
   1666          int main()
   1667          {
   1668            trace_init();
   1669            if (FindBook(isWalkmanDisplayBook))
   \                     main:
   \   00000000   0C019FE5           LDR      R0,??main_0      ;; ??isWalkmanDisplayBook
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   ........           LDR      R4,??DataTable54  ;; ??elf_exit
   \   0000000C   ........           LDR      R6,??DataTable55  ;; `?<Constant "MediaPlayer_Audio">`
   \   00000010   FF50A0E3           MOV      R5,#+255
   \   00000014   FF5C85E3           ORR      R5,R5,#0xFF00
   \   00000018   300100EF           SWI      +304
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0300000A           BEQ      ??main_1
   1670            {
   1671              MessageBox(EMPTY_TEXTID,TextID_Create(lng_txtAlreadyRunned,ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE,1,0,0);
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   800F86E2           ADD      R0,R6,#+512
   \   00000030   120000EA           B        ??main_2
   1672              SUBPROC(elf_exit);
   1673              return 0;
   1674            }
   1675            if (wchar_t *consts=checkConsts())
   \                     ??main_1:
   \   00000034   ........           BL       ??checkConsts
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0900000A           BEQ      ??main_3
   1676            {
   1677              MessageBox(EMPTY_TEXTID,TextID_Create(consts,ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE,1,0,0);
   \   00000040   0520A0E1           MOV      R2,R5
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   5D0100EF           SWI      +349
   \   0000004C   0010A0E1           MOV      R1,R0
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   0130A0E3           MOV      R3,#+1
   \   00000060   0520A0E1           MOV      R2,R5
   \   00000064   0C0000EA           B        ??main_4
   1678              SUBPROC(elf_exit);
   1679              return 0;
   1680            }
   1681            if (GetChipID()&CHIPID_MASK!=CHIPID_DB2020)
   \                     ??main_3:
   \   00000068   4E0200EF           SWI      +590
   \   0000006C   010010E3           TST      R0,#0x1
   \   00000070   1000000A           BEQ      ??main_5
   1682            {
   1683              MessageBox(EMPTY_TEXTID,TextID_Create(lng_msgNotSupported,ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE,1,0,0);
   \   00000074   0520A0E1           MOV      R2,R5
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   980086E2           ADD      R0,R6,#+152
   \                     ??main_2:
   \   00000080   5D0100EF           SWI      +349
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   02002DE9           PUSH     {R1}
   \   0000008C   02002DE9           PUSH     {R1}
   \   00000090   0130A0E3           MOV      R3,#+1
   \   00000094   0520A0E1           MOV      R2,R5
   \   00000098   0010A0E1           MOV      R1,R0
   \                     ??main_4:
   \   0000009C   9004E0E3           MVN      R0,#-1879048192
   \   000000A0   570200EF           SWI      +599
   1684              SUBPROC(elf_exit);
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   080100EF           SWI      +264
   1685              return 0;
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   08D08DE2           ADD      SP,SP,#+8
   \   000000B4   7080BDE8           POP      {R4-R6,PC}
   1686            }
   1687            memset(&nowmusic,0,sizeof(MUSIC));
   \                     ??main_5:
   \   000000B8   ........           LDR      R0,??DataTable56  ;; nowmusic
   \   000000BC   2820A0E3           MOV      R2,#+40
   \   000000C0   A02D82E3           ORR      R2,R2,#0x2800
   \   000000C4   0010A0E3           MOV      R1,#+0
   \   000000C8   120100EF           SWI      +274
   1688          #ifndef NDEBUG
   1689            proc_bench = create_process(OS_PRI_PROC, "WD_benchmark", worker_entrypoint, 0x400, 0, (OSTIME) 0, (PROCESS) 0, NULL, (OSVECTOR) 0, (OSUSER) 0);
   1690            start(proc_bench);
   1691          #else
   1692            debug_printf("\nWalkmanDisplay: internal benchmark wasn't runned because of release configuration, so no execution time calculations will be performed\n");
   \   000000CC   8E0F86E2           ADD      R0,R6,#+568
   \   000000D0   B10100EF           SWI      +433
   1693          #endif
   1694            //Softkey_SetOnRedraw();
   1695            //ModifyKeyHook(NewKey, 1);
   1696            InitConfig();
   \   000000D4   ........           _BLF     ??InitConfig,??InitConfig??rA
   1697            GetSize();
   \   000000D8   ........           BL       ??GetSize
   1698            char* Lang_Initialize();
   1699            if (Lang_Initialize())
   \   000000DC   ........           _BLF     ??Lang_Initialize,??Lang_Initialize??rA
   \   000000E0   000050E3           CMP      R0,#+0
   1700            {
   1701              debug_printf("\nWalkmanDisplay: encoding.bin founded. Will be used in id3 v1 parser\n");
   \   000000E4   B10F8612           ADDNE    R0,R6,#+708
   1702            }
   1703            else
   1704            {
   1705              debug_printf("\nWalkmanDisplay: encoding.bin missed. str2wstr will be used in id3 v1 parser\n");
   \   000000E8   C30F8602           ADDEQ    R0,R6,#+780
   \   000000EC   B10100EF           SWI      +433
   1706            }
   1707            new CMyBook();
   \   000000F0   2C00A0E3           MOV      R0,#+44
   \   000000F4   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000F8   000050E3           CMP      R0,#+0
   \   000000FC   0000000A           BEQ      ??main_6
   \   00000100   ........           BL       ??CMyBook
   1708            debug_printf("\nWalkmanDisplay: initial loading finished\n");
   \                     ??main_6:
   \   00000104   D70F86E2           ADD      R0,R6,#+860
   \   00000108   B10100EF           SWI      +433
   1709            return 0;
   \   0000010C   0000A0E3           MOV      R0,#+0
   \   00000110   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   00000114   ........           DC32     ??isWalkmanDisplayBook
   1710          };

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for v_MPA_ID>`:
   \   00000000   FFFF               DC16 65535
   \                     `?<Initializer for timer>`:
   \   00000002   0000               DC8 0, 0
   \                     `?<Initializer for modes>`:
   \   00000004   ........           DC32 `?<Constant L"\\x53\\x74\\x65\\x72\\x65\\x6f">`
   \   00000008   ........           DC32 `?<Constant L"\\x4a\\x6f\\x69\\x6e\\x74\\x20\\x53\\x74\\`
   \   0000000C   ........           DC32 `?<Constant L"\\x44\\x75\\x61\\x6c\\x20\\x43\\x68\\x61\\`
   \   00000010   ........           DC32 `?<Constant L"\\x53\\x69\\x6e\\x67\\x6c\\x65\\x20\\x43\\`
   \                     `?<Initializer for Softkey_DD>`:
   \   00000014   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Softkey_DO>`:
   \   00000018   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Softkey_DefaultRedraw>`:
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for currenttrack>`:
   \   00000020   00000000           DC32 0H
   \                     `?<Initializer for g_DO>`:
   \   00000024   00000000           DC32 0H
   \                     `?<Initializer for AccelCtrl>`:
   \   00000028   00000000           DC32 0H
   \                     `?<Initializer for curmode>`:
   \   0000002C   02000000           DC32 2
   \                     `?<Initializer for StatusSize>`:
   \   00000030   12000000           DC32 18
   \                     `?<Initializer for SoftSize>`:
   \   00000034   1A000000           DC32 26
   \                     `?<Initializer for ScreenHeight>`:
   \   00000038   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ScreenWidth>`:
   \   0000003C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for oldredr>`:
   \   00000040   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for hMGC>`:
   \   00000044   00000000           DC32 0H
   \                     `?<Initializer for imggc>`:
   \   00000048   00000000           DC32 0H
   \                     `?<Initializer for gvigcdisp>`:
   \   0000004C   00000000           DC32 0H
   \                     `?<Initializer for RedrawUsed>`:
   \   00000050   00                 DC8 0
   \                     `?<Initializer for working>`:
   \   00000051   00                 DC8 0
   \                     `?<Initializer for accel_wrk>`:
   \   00000052   01                 DC8 1
   \                     `?<Initializer for ELF_KILL_RECEIVED>`:
   \   00000053   00                 DC8 0
   \                     `?<Initializer for inMenu>`:
   \   00000054   00                 DC8 0
   \   00000055   000000             DC8 0, 0, 0
   \                     `?<Initializer for skin_str>`:
   \   00000058   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000068   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000078   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000088   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000108   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000118   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000128   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000138   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000148   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000158   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000168   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000178   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000188   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000198   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000208   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000238   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000248   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000258   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000268   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000278   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000288   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000298   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000308   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000318   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000328   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000338   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000348   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000358   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000368   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000378   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000388   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000398   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000408   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000418   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000428   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000438   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000448   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x57\\x61\\x6c\\x6b\\x6d\\x61\\x6e\\x44\\`:
   \   00000000   570061006C00       DC8 57H, 0, 61H, 0, 6CH, 0, 6BH, 0
   \              6B00        
   \   00000008   6D0061006E00       DC8 6DH, 0, 61H, 0, 6EH, 0, 44H, 0
   \              4400        
   \   00000010   690073007000       DC8 69H, 0, 73H, 0, 70H, 0, 6CH, 0
   \              6C00        
   \   00000018   610079002000       DC8 61H, 0, 79H, 0, 20H, 0, 76H, 0
   \              7600        
   \   00000020   32002E003100       DC8 32H, 0, 2EH, 0, 31H, 0, 0AH, 0
   \              0A00        
   \   00000028   A90020004600       DC8 0A9H, 0, 20H, 0, 46H, 0, 65H, 0
   \              6500        
   \   00000030   72006E006100       DC8 72H, 0, 6EH, 0, 61H, 0, 6EH, 0
   \              6E00        
   \   00000038   64006F006400       DC8 64H, 0, 6FH, 0, 64H, 0, 6BH, 0
   \              6B00        
   \   00000040   73002C002000       DC8 73H, 0, 2CH, 0, 20H, 0, 55H, 0
   \              5500        
   \   00000048   6C0074007200       DC8 6CH, 0, 74H, 0, 72H, 0, 61H, 0
   \              6100        
   \   00000050   530068006F00       DC8 53H, 0, 68H, 0, 6FH, 0, 74H, 0
   \              7400        
   \   00000058   0000               DC8 0, 0
   \   0000005A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ScreensaverBook">`:
   \   00000000   53637265656E       DC8 "ScreensaverBook"
   \              736176657242
   \              6F6F6B00    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "MediaPlayer_Audio">`:
   \   00000000   4D6564696150       DC8 "MediaPlayer_Audio"
   \              6C617965725F
   \              417564696F00
   \   00000012   0000               DC8 0, 0
   \   00000014   0A57616C6B6D       DC8 "\012WalkmanDisplay: onStyleChanged. New skin: %ls\012"
   \              616E44697370
   \              6C61793A206F
   \              6E5374796C65
   \              4368616E6765
   \              642E204E6577
   \              20736B696E3A
   \              20256C730A00
   \   00000044   0A57616C6B6D       DC8 "\012WalkmanDisplay: horizontal mode setted\012"
   \              616E44697370
   \              6C61793A2068
   \              6F72697A6F6E
   \              74616C206D6F
   \              646520736574
   \              7465640A00  
   \   0000006D   000000             DC8 0, 0, 0
   \   00000070   0A57616C6B6D       DC8 "\012WalkmanDisplay: vertical mode setted\012"
   \              616E44697370
   \              6C61793A2076
   \              657274696361
   \              6C206D6F6465
   \              207365747465
   \              640A00      
   \   00000097   00                 DC8 0
   \   00000098   230420003204       DC8 23H, 4, 20H, 0, 32H, 4, 30H, 4
   \              3004        
   \   000000A0   480435043304       DC8 48H, 4, 35H, 4, 33H, 4, 3EH, 4
   \              3E04        
   \   000000A8   200042043504       DC8 20H, 0, 42H, 4, 35H, 4, 3BH, 4
   \              3B04        
   \   000000B0   350444043E04       DC8 35H, 4, 44H, 4, 3EH, 4, 3DH, 4
   \              3D04        
   \   000000B8   300420003F04       DC8 30H, 4, 20H, 0, 3FH, 4, 3BH, 4
   \              3B04        
   \   000000C0   350435044004       DC8 35H, 4, 35H, 4, 40H, 4, 20H, 0
   \              2000        
   \   000000C8   3D0435042000       DC8 3DH, 4, 35H, 4, 20H, 0, 57H, 0
   \              5700        
   \   000000D0   61006C006B00       DC8 61H, 0, 6CH, 0, 6BH, 0, 6DH, 0
   \              6D00        
   \   000000D8   61006E002000       DC8 61H, 0, 6EH, 0, 20H, 0, 32H, 0
   \              3200        
   \   000000E0   2E0030002E00       DC8 2EH, 0, 30H, 0, 2EH, 0, 20H, 0
   \              2000        
   \   000000E8   180437043204       DC8 18H, 4, 37H, 4, 32H, 4, 38H, 4
   \              3804        
   \   000000F0   3D0438044204       DC8 3DH, 4, 38H, 4, 42H, 4, 35H, 4
   \              3504        
   \   000000F8   2C0020003D04       DC8 2CH, 0, 20H, 0, 3DH, 4, 3EH, 4
   \              3E04        
   \   00000100   200057006100       DC8 20H, 0, 57H, 0, 61H, 0, 6CH, 0
   \              6C00        
   \   00000108   6B006D006100       DC8 6BH, 0, 6DH, 0, 61H, 0, 6EH, 0
   \              6E00        
   \   00000110   200031002E00       DC8 20H, 0, 31H, 0, 2EH, 0, 34H, 0
   \              3400        
   \   00000118   20003D043504       DC8 20H, 0, 3DH, 4, 35H, 4, 20H, 0
   \              2000        
   \   00000120   3F043E043404       DC8 3FH, 4, 3EH, 4, 34H, 4, 34H, 4
   \              3404        
   \   00000128   350440043604       DC8 35H, 4, 40H, 4, 36H, 4, 38H, 4
   \              3804        
   \   00000130   320430043504       DC8 32H, 4, 30H, 4, 35H, 4, 42H, 4
   \              4204        
   \   00000138   41044F042E00       DC8 41H, 4, 4FH, 4, 2EH, 0, 20H, 0
   \              2000        
   \   00000140   180441043F04       DC8 18H, 4, 41H, 4, 3FH, 4, 3EH, 4
   \              3E04        
   \   00000148   3B044C043704       DC8 3BH, 4, 4CH, 4, 37H, 4, 43H, 4
   \              4304        
   \   00000150   390442043504       DC8 39H, 4, 42H, 4, 35H, 4, 20H, 0
   \              2000        
   \   00000158   50006C006100       DC8 50H, 0, 6CH, 0, 61H, 0, 79H, 0
   \              7900        
   \   00000160   650072004D00       DC8 65H, 0, 72H, 0, 4DH, 0, 6FH, 0
   \              6F00        
   \   00000168   640020003B00       DC8 64H, 0, 20H, 0, 3BH, 0, 2DH, 0
   \              2D00        
   \   00000170   29000000           DC8 29H, 0, 0, 0
   \   00000174   570035003800       DC8 57H, 0, 35H, 0, 38H, 0, 30H, 0
   \              3000        
   \   0000017C   2F0057003800       DC8 2FH, 0, 57H, 0, 38H, 0, 35H, 0
   \              3500        
   \   00000184   300020003E04       DC8 30H, 0, 20H, 0, 3EH, 4, 31H, 4
   \              3104        
   \   0000018C   3D0430044004       DC8 3DH, 4, 30H, 4, 40H, 4, 43H, 4
   \              4304        
   \   00000194   360435043D04       DC8 36H, 4, 35H, 4, 3DH, 4, 2EH, 0
   \              2E00        
   \   0000019C   200021043E04       DC8 20H, 0, 21H, 4, 3EH, 4, 45H, 4
   \              4504        
   \   000001A4   400430043D04       DC8 40H, 4, 30H, 4, 3DH, 4, 35H, 4
   \              3504        
   \   000001AC   3D043E042E00       DC8 3DH, 4, 3EH, 4, 2EH, 0, 0, 0
   \              0000        
   \   000001B4   570036003100       DC8 57H, 0, 36H, 0, 31H, 0, 30H, 0
   \              3000        
   \   000001BC   2F0057003600       DC8 2FH, 0, 57H, 0, 36H, 0, 36H, 0
   \              3600        
   \   000001C4   30002F005700       DC8 30H, 0, 2FH, 0, 57H, 0, 38H, 0
   \              3800        
   \   000001CC   380030002000       DC8 38H, 0, 30H, 0, 20H, 0, 3EH, 4
   \              3E04        
   \   000001D4   31043D043004       DC8 31H, 4, 3DH, 4, 30H, 4, 40H, 4
   \              4004        
   \   000001DC   430436043504       DC8 43H, 4, 36H, 4, 35H, 4, 3DH, 4
   \              3D04        
   \   000001E4   2E0020002104       DC8 2EH, 0, 20H, 0, 21H, 4, 3EH, 4
   \              3E04        
   \   000001EC   450440043004       DC8 45H, 4, 40H, 4, 30H, 4, 3DH, 4
   \              3D04        
   \   000001F4   35043D043E04       DC8 35H, 4, 3DH, 4, 3EH, 4, 2EH, 0
   \              2E00        
   \   000001FC   0000               DC8 0, 0
   \   000001FE   0000               DC8 0, 0
   \   00000200   570061006C00       DC8 57H, 0, 61H, 0, 6CH, 0, 6BH, 0
   \              6B00        
   \   00000208   6D0061006E00       DC8 6DH, 0, 61H, 0, 6EH, 0, 44H, 0
   \              4400        
   \   00000210   690073007000       DC8 69H, 0, 73H, 0, 70H, 0, 6CH, 0
   \              6C00        
   \   00000218   610079002000       DC8 61H, 0, 79H, 0, 20H, 0, 43H, 4
   \              4304        
   \   00000220   360435042000       DC8 36H, 4, 35H, 4, 20H, 0, 37H, 4
   \              3704        
   \   00000228   30043F044304       DC8 30H, 4, 3FH, 4, 43H, 4, 49H, 4
   \              4904        
   \   00000230   35043D040000       DC8 35H, 4, 3DH, 4, 0, 0
   \   00000236   0000               DC8 0, 0
   \   00000238   0A57616C6B6D       DC8 0AH, 57H, 61H, 6CH, 6BH, 6DH, 61H, 6EH
   \              616E        
   \   00000240   446973706C61       DC8 44H, 69H, 73H, 70H, 6CH, 61H, 79H, 3AH
   \              793A        
   \   00000248   20696E746572       DC8 20H, 69H, 6EH, 74H, 65H, 72H, 6EH, 61H
   \              6E61        
   \   00000250   6C2062656E63       DC8 6CH, 20H, 62H, 65H, 6EH, 63H, 68H, 6DH
   \              686D        
   \   00000258   61726B207761       DC8 61H, 72H, 6BH, 20H, 77H, 61H, 73H, 6EH
   \              736E        
   \   00000260   27742072756E       DC8 27H, 74H, 20H, 72H, 75H, 6EH, 6EH, 65H
   \              6E65        
   \   00000268   642062656361       DC8 64H, 20H, 62H, 65H, 63H, 61H, 75H, 73H
   \              7573        
   \   00000270   65206F662072       DC8 65H, 20H, 6FH, 66H, 20H, 72H, 65H, 6CH
   \              656C        
   \   00000278   656173652063       DC8 65H, 61H, 73H, 65H, 20H, 63H, 6FH, 6EH
   \              6F6E        
   \   00000280   666967757261       DC8 66H, 69H, 67H, 75H, 72H, 61H, 74H, 69H
   \              7469        
   \   00000288   6F6E2C20736F       DC8 6FH, 6EH, 2CH, 20H, 73H, 6FH, 20H, 6EH
   \              206E        
   \   00000290   6F2065786563       DC8 6FH, 20H, 65H, 78H, 65H, 63H, 75H, 74H
   \              7574        
   \   00000298   696F6E207469       DC8 69H, 6FH, 6EH, 20H, 74H, 69H, 6DH, 65H
   \              6D65        
   \   000002A0   2063616C6375       DC8 20H, 63H, 61H, 6CH, 63H, 75H, 6CH, 61H
   \              6C61        
   \   000002A8   74696F6E7320       DC8 74H, 69H, 6FH, 6EH, 73H, 20H, 77H, 69H
   \              7769        
   \   000002B0   6C6C20626520       DC8 6CH, 6CH, 20H, 62H, 65H, 20H, 70H, 65H
   \              7065        
   \   000002B8   72666F726D65       DC8 72H, 66H, 6FH, 72H, 6DH, 65H, 64H, 0AH
   \              640A        
   \   000002C0   00                 DC8 0
   \   000002C1   000000             DC8 0, 0, 0
   \   000002C4   0A57616C6B6D       DC8 0AH, 57H, 61H, 6CH, 6BH, 6DH, 61H, 6EH
   \              616E        
   \   000002CC   446973706C61       DC8 44H, 69H, 73H, 70H, 6CH, 61H, 79H, 3AH
   \              793A        
   \   000002D4   20656E636F64       DC8 20H, 65H, 6EH, 63H, 6FH, 64H, 69H, 6EH
   \              696E        
   \   000002DC   672E62696E20       DC8 67H, 2EH, 62H, 69H, 6EH, 20H, 66H, 6FH
   \              666F        
   \   000002E4   756E6465642E       DC8 75H, 6EH, 64H, 65H, 64H, 2EH, 20H, 57H
   \              2057        
   \   000002EC   696C6C206265       DC8 69H, 6CH, 6CH, 20H, 62H, 65H, 20H, 75H
   \              2075        
   \   000002F4   73656420696E       DC8 73H, 65H, 64H, 20H, 69H, 6EH, 20H, 69H
   \              2069        
   \   000002FC   643320763120       DC8 64H, 33H, 20H, 76H, 31H, 20H, 70H, 61H
   \              7061        
   \   00000304   727365720A00       DC8 72H, 73H, 65H, 72H, 0AH, 0
   \   0000030A   0000               DC8 0, 0
   \   0000030C   0A57616C6B6D       DC8 0AH, 57H, 61H, 6CH, 6BH, 6DH, 61H, 6EH
   \              616E        
   \   00000314   446973706C61       DC8 44H, 69H, 73H, 70H, 6CH, 61H, 79H, 3AH
   \              793A        
   \   0000031C   20656E636F64       DC8 20H, 65H, 6EH, 63H, 6FH, 64H, 69H, 6EH
   \              696E        
   \   00000324   672E62696E20       DC8 67H, 2EH, 62H, 69H, 6EH, 20H, 6DH, 69H
   \              6D69        
   \   0000032C   737365642E20       DC8 73H, 73H, 65H, 64H, 2EH, 20H, 73H, 74H
   \              7374        
   \   00000334   723277737472       DC8 72H, 32H, 77H, 73H, 74H, 72H, 20H, 77H
   \              2077        
   \   0000033C   696C6C206265       DC8 69H, 6CH, 6CH, 20H, 62H, 65H, 20H, 75H
   \              2075        
   \   00000344   73656420696E       DC8 73H, 65H, 64H, 20H, 69H, 6EH, 20H, 69H
   \              2069        
   \   0000034C   643320763120       DC8 64H, 33H, 20H, 76H, 31H, 20H, 70H, 61H
   \              7061        
   \   00000354   727365720A00       DC8 72H, 73H, 65H, 72H, 0AH, 0
   \   0000035A   0000               DC8 0, 0
   \   0000035C   0A57616C6B6D       DC8 "\012WalkmanDisplay: initial loading finished\012"
   \              616E44697370
   \              6C61793A2069
   \              6E697469616C
   \              206C6F616469
   \              6E672066696E
   \              69736865640A
   \              00          
   \   00000387   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\nWalkmanDisplay: onRe...">`:
   \   00000000   0A57616C6B6D       DC8 0AH, 57H, 61H, 6CH, 6BH, 6DH, 61H, 6EH
   \              616E        
   \   00000008   446973706C61       DC8 44H, 69H, 73H, 70H, 6CH, 61H, 79H, 3AH
   \              793A        
   \   00000010   206F6E526563       DC8 20H, 6FH, 6EH, 52H, 65H, 63H, 6FH, 6EH
   \              6F6E        
   \   00000018   6669673A2025       DC8 66H, 69H, 67H, 3AH, 20H, 25H, 6CH, 73H
   \              6C73        
   \   00000020   2F256C732061       DC8 2FH, 25H, 6CH, 73H, 20H, 61H, 73H, 6BH
   \              736B        
   \   00000028   65642E204F75       DC8 65H, 64H, 2EH, 20H, 4FH, 75H, 72H, 20H
   \              7220        
   \   00000030   736B696E2062       DC8 73H, 6BH, 69H, 6EH, 20H, 62H, 63H, 66H
   \              6366        
   \   00000038   673A20256C73       DC8 67H, 3AH, 20H, 25H, 6CH, 73H, 2FH, 25H
   \              2F25        
   \   00000040   6C730A00           DC8 6CH, 73H, 0AH, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\nWalkmanDisplay: onBc...">`:
   \   00000000   0A57616C6B6D       DC8 0AH, 57H, 61H, 6CH, 6BH, 6DH, 61H, 6EH
   \              616E        
   \   00000008   446973706C61       DC8 44H, 69H, 73H, 70H, 6CH, 61H, 79H, 3AH
   \              793A        
   \   00000010   206F6E426366       DC8 20H, 6FH, 6EH, 42H, 63H, 66H, 67H, 43H
   \              6743        
   \   00000018   6F6E6669673A       DC8 6FH, 6EH, 66H, 69H, 67H, 3AH, 20H, 65H
   \              2065        
   \   00000020   786563757469       DC8 78H, 65H, 63H, 75H, 74H, 69H, 6EH, 67H
   \              6E67        
   \   00000028   206461746120       DC8 20H, 64H, 61H, 74H, 61H, 20H, 62H, 72H
   \              6272        
   \   00000030   6F7773657227       DC8 6FH, 77H, 73H, 65H, 72H, 27H, 73H, 20H
   \              7320        
   \   00000038   737562726F75       DC8 73H, 75H, 62H, 72H, 6FH, 75H, 74H, 69H
   \              7469        
   \   00000040   6E6520666F72       DC8 6EH, 65H, 20H, 66H, 6FH, 72H, 20H, 25H
   \              2025        
   \   00000048   6C732F256C73       DC8 6CH, 73H, 2FH, 25H, 6CH, 73H, 0AH, 0
   \              0A00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\nWalkmanDisplay: own ...">`:
   \   00000000   0A57616C6B6D       DC8 "\012WalkmanDisplay: own redraw deinstalled\012"
   \              616E44697370
   \              6C61793A206F
   \              776E20726564
   \              726177206465
   \              696E7374616C
   \              6C65640A00  
   \   00000029   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\nWalkmanDisplay: old ...">`:
   \   00000000   0A57616C6B6D       DC8 "\012WalkmanDisplay: old redraw: %X\012"
   \              616E44697370
   \              6C61793A206F
   \              6C6420726564
   \              7261773A2025
   \              580A00      
   \   00000021   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "BrowserItemBook">`:
   \   00000000   42726F777365       DC8 "BrowserItemBook"
   \              724974656D42
   \              6F6F6B00    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\nWalkmanDisplay: page...">`:
   \   00000000   0A57616C6B6D       DC8 "\012WalkmanDisplay: pagehook called from %s\012"
   \              616E44697370
   \              6C61793A2070
   \              616765686F6F
   \              6B2063616C6C
   \              65642066726F
   \              6D2025730A00
   \   0000002A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x41e\\x442\\x441\\x443\\x442\\x441\\x4`:
   \   00000000   1E0442044104       DC8 1EH, 4, 42H, 4, 41H, 4, 43H, 4
   \              4304        
   \   00000008   420441044204       DC8 42H, 4, 41H, 4, 42H, 4, 32H, 4
   \              3204        
   \   00000010   43044E044904       DC8 43H, 4, 4EH, 4, 49H, 4, 38H, 4
   \              3804        
   \   00000018   350420003A04       DC8 35H, 4, 20H, 0, 3AH, 4, 3EH, 4
   \              3E04        
   \   00000020   3D0441044204       DC8 3DH, 4, 41H, 4, 42H, 4, 30H, 4
   \              3004        
   \   00000028   3D0442044B04       DC8 3DH, 4, 42H, 4, 4BH, 4, 3AH, 0
   \              3A00        
   \   00000030   20000A000000       DC8 20H, 0, 0AH, 0, 0, 0
   \   00000036   0000               DC8 0, 0
   \   00000038   550049005F00       DC8 55H, 0, 49H, 0, 5FH, 0, 4DH, 0
   \              4D00        
   \   00000040   450044004900       DC8 45H, 0, 44H, 0, 49H, 0, 41H, 0
   \              4100        
   \   00000048   50004C004100       DC8 50H, 0, 4CH, 0, 41H, 0, 59H, 0
   \              5900        
   \   00000050   450052005F00       DC8 45H, 0, 52H, 0, 5FH, 0, 44H, 0
   \              4400        
   \   00000058   450053005400       DC8 45H, 0, 53H, 0, 54H, 0, 52H, 0
   \              5200        
   \   00000060   4F0059004500       DC8 4FH, 0, 59H, 0, 45H, 0, 44H, 0
   \              4400        
   \   00000068   5F0045005600       DC8 5FH, 0, 45H, 0, 56H, 0, 45H, 0
   \              4500        
   \   00000070   4E0054000A00       DC8 4EH, 0, 54H, 0, 0AH, 0, 0, 0
   \              0000        
   \   00000078   550049005F00       DC8 55H, 0, 49H, 0, 5FH, 0, 4DH, 0
   \              4D00        
   \   00000080   450044004900       DC8 45H, 0, 44H, 0, 49H, 0, 41H, 0
   \              4100        
   \   00000088   50004C004100       DC8 50H, 0, 4CH, 0, 41H, 0, 59H, 0
   \              5900        
   \   00000090   450052005F00       DC8 45H, 0, 52H, 0, 5FH, 0, 50H, 0
   \              5000        
   \   00000098   4C0041005900       DC8 4CH, 0, 41H, 0, 59H, 0, 5FH, 0
   \              5F00        
   \   000000A0   500052004500       DC8 50H, 0, 52H, 0, 45H, 0, 53H, 0
   \              5300        
   \   000000A8   530045004400       DC8 53H, 0, 45H, 0, 44H, 0, 5FH, 0
   \              5F00        
   \   000000B0   450056004500       DC8 45H, 0, 56H, 0, 45H, 0, 4EH, 0
   \              4E00        
   \   000000B8   54000A000000       DC8 54H, 0, 0AH, 0, 0, 0
   \   000000BE   0000               DC8 0, 0
   \   000000C0   550049005F00       DC8 55H, 0, 49H, 0, 5FH, 0, 4DH, 0
   \              4D00        
   \   000000C8   450044004900       DC8 45H, 0, 44H, 0, 49H, 0, 41H, 0
   \              4100        
   \   000000D0   50004C004100       DC8 50H, 0, 4CH, 0, 41H, 0, 59H, 0
   \              5900        
   \   000000D8   450052005F00       DC8 45H, 0, 52H, 0, 5FH, 0, 41H, 0
   \              4100        
   \   000000E0   550044004900       DC8 55H, 0, 44H, 0, 49H, 0, 4FH, 0
   \              4F00        
   \   000000E8   5F0050004C00       DC8 5FH, 0, 50H, 0, 4CH, 0, 41H, 0
   \              4100        
   \   000000F0   590049004E00       DC8 59H, 0, 49H, 0, 4EH, 0, 47H, 0
   \              4700        
   \   000000F8   5F0054004900       DC8 5FH, 0, 54H, 0, 49H, 0, 4DH, 0
   \              4D00        
   \   00000100   45005F004500       DC8 45H, 0, 5FH, 0, 45H, 0, 56H, 0
   \              5600        
   \   00000108   45004E005400       DC8 45H, 0, 4EH, 0, 54H, 0, 0AH, 0
   \              0A00        
   \   00000110   0000               DC8 0, 0
   \   00000112   0000               DC8 0, 0
   \   00000114   550049005F00       DC8 55H, 0, 49H, 0, 5FH, 0, 4BH, 0
   \              4B00        
   \   0000011C   450059004C00       DC8 45H, 0, 59H, 0, 4CH, 0, 4FH, 0
   \              4F00        
   \   00000124   43004B005F00       DC8 43H, 0, 4BH, 0, 5FH, 0, 44H, 0
   \              4400        
   \   0000012C   450041004300       DC8 45H, 0, 41H, 0, 43H, 0, 54H, 0
   \              5400        
   \   00000134   490056004100       DC8 49H, 0, 56H, 0, 41H, 0, 54H, 0
   \              5400        
   \   0000013C   45005F004500       DC8 45H, 0, 5FH, 0, 45H, 0, 56H, 0
   \              5600        
   \   00000144   45004E005400       DC8 45H, 0, 4EH, 0, 54H, 0, 0AH, 0
   \              0A00        
   \   0000014C   0000               DC8 0, 0
   \   0000014E   0000               DC8 0, 0
   \   00000150   550049005F00       DC8 55H, 0, 49H, 0, 5FH, 0, 4BH, 0
   \              4B00        
   \   00000158   450059004C00       DC8 45H, 0, 59H, 0, 4CH, 0, 4FH, 0
   \              4F00        
   \   00000160   43004B005F00       DC8 43H, 0, 4BH, 0, 5FH, 0, 41H, 0
   \              4100        
   \   00000168   430054004900       DC8 43H, 0, 54H, 0, 49H, 0, 56H, 0
   \              5600        
   \   00000170   410054004500       DC8 41H, 0, 54H, 0, 45H, 0, 5FH, 0
   \              5F00        
   \   00000178   450056004500       DC8 45H, 0, 56H, 0, 45H, 0, 4EH, 0
   \              4E00        
   \   00000180   54000A000000       DC8 54H, 0, 0AH, 0, 0, 0
   \   00000186   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\nWalkmanDisplay: own ...">_1`:
   \   00000000   0A57616C6B6D       DC8 "\012WalkmanDisplay: own softkey redraw setted\012"
   \              616E44697370
   \              6C61793A206F
   \              776E20736F66
   \              746B65792072
   \              656472617720
   \              736574746564
   \              0A00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x44\\x75\\x61\\x6c\\x20\\x43\\x68\\x61\\`:
   \   00000000   440075006100       DC8 44H, 0, 75H, 0, 61H, 0, 6CH, 0
   \              6C00        
   \   00000008   200043006800       DC8 20H, 0, 43H, 0, 68H, 0, 61H, 0
   \              6100        
   \   00000010   6E006E006500       DC8 6EH, 0, 6EH, 0, 65H, 0, 6CH, 0
   \              6C00        
   \   00000018   0000               DC8 0, 0
   \   0000001A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x53\\x74\\x65\\x72\\x65\\x6f">`:
   \   00000000   530074006500       DC8 53H, 0, 74H, 0, 65H, 0, 72H, 0
   \              7200        
   \   00000008   65006F000000       DC8 65H, 0, 6FH, 0, 0, 0
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x4a\\x6f\\x69\\x6e\\x74\\x20\\x53\\x74\\`:
   \   00000000   4A006F006900       DC8 4AH, 0, 6FH, 0, 69H, 0, 6EH, 0
   \              6E00        
   \   00000008   740020005300       DC8 74H, 0, 20H, 0, 53H, 0, 74H, 0
   \              7400        
   \   00000010   650072006500       DC8 65H, 0, 72H, 0, 65H, 0, 6FH, 0
   \              6F00        
   \   00000018   0000               DC8 0, 0
   \   0000001A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x53\\x69\\x6e\\x67\\x6c\\x65\\x20\\x43\\`:
   \   00000000   530069006E00       DC8 53H, 0, 69H, 0, 6EH, 0, 67H, 0
   \              6700        
   \   00000008   6C0065002000       DC8 6CH, 0, 65H, 0, 20H, 0, 43H, 0
   \              4300        
   \   00000010   680061006E00       DC8 68H, 0, 61H, 0, 6EH, 0, 6EH, 0
   \              6E00        
   \   00000018   65006C000000       DC8 65H, 0, 6CH, 0, 0, 0
   \   0000001E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "WalkmanDisplay_Base_Page">`:
   \   00000000   57616C6B6D61       DC8 "WalkmanDisplay_Base_Page"
   \              6E446973706C
   \              61795F426173
   \              655F50616765
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CMyBook &CMyBook::new CMyBook()
   \                     `??new CMyBook`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   2C00A0E3           MOV      R0,#+44
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0080BD08           POPEQ    {PC}
   \   00000014   0040BDE8           POP      {LR}             ;; Pop
   \   00000018   ........           B        ??CMyBook        ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??NewKey

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     use_accel

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??onAccel

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??walkman_Redraw

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     nowmusic + 8

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     successed_config_path

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     successed_config_name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     ??softredraw

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     successed_skin_path

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     successed_skin_name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     MyBook

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   ........           DC32     volrect

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     playview_h

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     v_MPA_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   ........           DC32     `?<Constant "MediaPlayer_Audio">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     v_MPA_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     intFolder

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable39:
   \   00000000   ........           DC32     ??walkman_Redraw

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   ........           DC32     MyBook

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable44:
   \   00000000   ........           DC32     ??NewKey

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable48:
   \   00000000   ........           DC32     use_accel

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   ........           DC32     `?<Constant "WalkmanDisplay">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   ........           DC32     v_MPA_ID + 28

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   ........           DC32     v_MPA_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   ........           DC32     ??softredraw

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     ??elf_exit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable55:
   \   00000000   ........           DC32     `?<Constant "MediaPlayer_Audio">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable56:
   \   00000000   ........           DC32     nowmusic
   1711          
   1712          
   1713          /*
   1714          
   1715              2.1x:
   1716              -ïåðåõîä íà GVI-ôóíêöèè, ïîêà òîëüêî äëÿ ôîíà
   1717          
   1718              2.1:
   1719              -èñïðàâëåíû îøèáêè ñ çàãðóçêîé bcfg
   1720              -èñïðàâëåíà ïåðåçàãðóçêà ïðè âîñïðîèçâåäåíèè ìóçûêè èç äèñïåò÷åðà ôàéëîâ
   1721              -äîáàâëåí èíäèêàòîð ãðîìêîñòè
   1722              -îáíîâëåíèå êîíôèãóðàöèîííîãî ôàéëà ñ 2.0 (ENG/RUS) äî 2.1 ENG/RUS.
   1723              -ìåëêèå èçìåíåíèÿ
   1724          
   1725              2.0:
   1726              -ïåðâûé ðåëèç
   1727          */

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     CMyBook::CMyBook()                20
     CMyBook::new CMyBook()             4
     CMyBook::onClose()                16
     CMyBook::~CMyBook()               12
     DrawLine(int, wchar_t *, int, int, int, int, int, int, int, bool, int)
                                       88
     DrawLine2(int, int, int, int, int, int, int, int, int, int, int)
                                       88
     DrawProgress(int, int, int, RECT, int, int, signed int, int)
                                       84
     FindGuiInBook(BOOK *, char *)     20
     GetRedraw(DISP_OBJ_ONREDRAW_METHOD)
                                        4
     GetSize()                          8
     NewKey(int, int, int, LPARAM, DISP_OBJ *)
                                       12
     PageHook(void *, BOOK *, int)     16
     ReturnRedraw()                     4
     SB_ELF_Killed(void *, BOOK *)     20
     Send_REDRAW_RELEASE()              8
     ShowAuthorInfo(void *, BOOK *)    20
     Softkey_SetOnRedraw()              8
     TerminateElf(void *, BOOK *)       8
     checkConsts()                     20
     checkfile_(wchar_t *, wchar_t *)
                                       44
     elf_exit()                         4
     getimgID(IMAGEID)                  0
     isBrowserItemBook(BOOK *)          4
     isKeylockBook(BOOK *)              4
     isVolCtrl(BOOK *)                  4
     isWalkmanDisplayBook(BOOK *)       4
     main()                            24
     onAccel(void *, int, int)         20
     onBcfgConfig(void *, BOOK *)      20
     onKeylock(void *, BOOK *)         20
     onPlay(void *, BOOK *)            12
     onPlayerClosed(void *, BOOK *)    12
     onPlayerOpened(void *, BOOK *)    12
     onReconfig(void *, BOOK *)        24
     onStyleChanged(void *, BOOK *)    36
     onTimer(u16, LPARAM)               8
     onUnlock(void *, BOOK *)           4
     onVolumeChange(void *, BOOK *)     8
     set_horizontal()                  16
     set_vertical()                    16
     softredraw(DISP_OBJ *, int, int, int)
                                       24
     walkman_Redraw(DISP_OBJ *, int, int, int)
                                      212


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     intFolder                      2048
     elf_exit()                       28
     CMyBook::~CMyBook()              48
     TerminateElf(void *, BOOK *)     60
     ShowAuthorInfo(void *, BOOK *)   84
     onPlayerClosed(void *, BOOK *)  184
     onPlayerOpened(void *, BOOK *)   68
     isKeylockBook(BOOK *)            44
     onKeylock(void *, BOOK *)       216
     onPlay(void *, BOOK *)          152
     onUnlock(void *, BOOK *)         72
     onReconfig(void *, BOOK *)      176
     test                              1
     onStyleChanged(void *, BOOK *)  332
     ReturnRedraw()                   56
     SB_ELF_Killed(void *, BOOK *)   148
     onBcfgConfig(void *, BOOK *)    128
     onTimer(u16, LPARAM)             68
     onVolumeChange(void *, BOOK *)  144
     BasePageEvents                  112
     ?<Constant "WalkmanDisplay">     72
     FindGuiInBook(BOOK *, char *)    96
     set_horizontal()                188
     set_vertical()                  196
     onAccel(void *, int, int)       144
     DrawLine(int, wchar_t *, int, int, int, int, int, int, int, bool, int)
                                    1060
     DrawLine2(int, int, int, int, int, int, int, int, int, int, int)
                                    1020
     DrawProgress(int, int, int, RECT, int, int, signed int, int)
                                     472
     isVolCtrl(BOOK *)                20
     v_MPA_ID                       1112
     walkman_Redraw(DISP_OBJ *, int, int, int)
                                    9520
     getimgID(IMAGEID)                 4
     GetRedraw(DISP_OBJ_ONREDRAW_METHOD)
                                      52
     isBrowserItemBook(BOOK *)        44
     PageHook(void *, BOOK *, int)   176
     checkfile_(wchar_t *, wchar_t *)
                                     108
     CMyBook::CMyBook()              164
     Send_REDRAW_RELEASE()            76
     CMyBook::onClose()              172
     NewKey(int, int, int, LPARAM, DISP_OBJ *)
                                     184
     GetSize()                        64
     isWalkmanDisplayBook(BOOK *)     40
     missedconsts                   1024
     checkConsts()                   260
     softredraw(DISP_OBJ *, int, int, int)
                                     156
     Softkey_SetOnRedraw()            84
     main()                          280
     ?<Initializer for v_MPA_ID>    1112
     ?<Constant L"\x57\x61\x6c\x6b\x6d\x61\x6e\x44\
                                      92
     ?<Constant "ScreensaverBook">    16
     ?<Constant "MediaPlayer_Audio">
                                     904
     ?<Constant "\nWalkmanDisplay: onRe...">
                                      68
     ?<Constant "\nWalkmanDisplay: onBc...">
                                      80
     ?<Constant "\nWalkmanDisplay: own ...">
                                      44
     ?<Constant "\nWalkmanDisplay: old ...">
                                      36
     ?<Constant "BrowserItemBook">    16
     ?<Constant "\nWalkmanDisplay: page...">
                                      44
     ?<Constant L"\x41e\x442\x441\x443\x442\x441\x4
                                     392
     ?<Constant "\nWalkmanDisplay: own ...">_1
                                      44
     ?<Constant L"\x44\x75\x61\x6c\x20\x43\x68\x61\
                                      28
     ?<Constant L"\x53\x74\x65\x72\x65\x6f">
                                      16
     ?<Constant L"\x4a\x6f\x69\x6e\x74\x20\x53\x74\
                                      28
     ?<Constant L"\x53\x69\x6e\x67\x6c\x65\x20\x43\
                                      32
     ?<Constant "WalkmanDisplay_Base_Page">
                                      28
     CMyBook::new CMyBook()           28
     ??DataTable1                      4
     ??DataTable2                      4
     ??DataTable3                      4
     ??DataTable5                      4
     ??DataTable9                      4
     ??DataTable12                     4
     ??DataTable13                     4
     ??DataTable19                     4
     ??DataTable20                     4
     ??DataTable21                     4
     ??DataTable22                     4
     ??DataTable26                     4
     ??DataTable29                     4
     ??DataTable30                     4
     ??DataTable31                     4
     ??DataTable32                     4
     ??DataTable38                     4
     ??DataTable39                     4
     ??DataTable40                     4
     ??DataTable44                     4
     ??DataTable48                     4
     ??DataTable50                     4
     ??DataTable51                     4
     ??DataTable52                     4
     ??DataTable53                     4
     ??DataTable54                     4
     ??DataTable55                     4
     ??DataTable56                     4
      Others                         560

 
 17 264 bytes in segment CODE
  1 940 bytes in segment DATA_C
  1 112 bytes in segment DATA_I
  1 112 bytes in segment DATA_ID
  3 073 bytes in segment DATA_Z
    112 bytes in segment DYN_PAGE
     24 bytes in segment INITTAB
 
 16 680 bytes of CODE  memory (+ 608 bytes shared)
  3 164 bytes of CONST memory
  4 185 bytes of DATA  memory

Errors: none
Warnings: none
