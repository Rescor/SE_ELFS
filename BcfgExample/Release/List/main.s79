//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:43:18 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\BcfgExample\m /
//                       ain.cpp                                             /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\BcfgExample\m /
//                       ain.cpp -D NDEBUG -D OLDFUNCTIONS -lCN              /
//                       Z:\home\perk11\www\perk11.info\svn\SE\BcfgExample\R /
//                       elease\List\ -la Z:\home\perk11\www\perk11.info\svn /
//                       \SE\BcfgExample\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\BcfgExample\R /
//                       elease\Obj\ -s9 --no_unroll --no_code_motion        /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --enable_multibytes  /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\BcfgExample\R /
//                       elease\List\main.s79                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)
        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
        PUBLIC ??Draw
        FUNCTION ??Draw,0603H
        LOCFRAME CSTACK, 56, STACK
        MULTWEAK ??Draw??rT
        MULTWEAK ??InitConfig??rA
        FUNCTION ??ReconfigElf,0603H
        LOCFRAME CSTACK, 12, STACK
        FUNCTION ??ShowAuthorInfo,0603H
        LOCFRAME CSTACK, 20, STACK
        FUNCTION ??TerminateElf,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC ??elf_exit
        FUNCTION ??elf_exit,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??elf_exit??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        FUNCTION ??onMyBookClose,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC ??onTimer
        FUNCTION ??onTimer,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??onTimer??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        PUBWEAK ?init?tab?DATA_I
        PUBLIC SIDheap
        PUBLIC SIonRedraw
        PUBLIC StatusRow
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC timer
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        



kill_data           SYMBOL "kill_data"

??Draw??rT          SYMBOL "??rT", ??Draw
??InitConfig??rA    SYMBOL "??rA", ??InitConfig

??elf_exit??rT      SYMBOL "??rT", ??elf_exit
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main

??onTimer??rT       SYMBOL "??rT", ??onTimer
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`

        EXTERN ??InitConfig
        FUNCTION ??InitConfig,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN BRUSH_COLOR
        EXTERN FONT
        EXTERN IS_ENABLED
        EXTERN PEN_COLOR
        EXTERN REFRESH_TIME
        EXTERN X_POS
        EXTERN Y_POS
        EXTERN kill_data
        FUNCTION kill_data,0202H
        EXTERN successed_config_name
        EXTERN successed_config_path


        RSEG DATA_I:DATA:SORT:NOROOT(2)
StatusRow:
        DS8 4
        REQUIRE `?<Initializer for StatusRow>`
SIDheap:
        DS8 4
        REQUIRE `?<Initializer for SIDheap>`
SIonRedraw:
        DS8 4
        REQUIRE `?<Initializer for SIonRedraw>`
timer:
        DS8 2
        REQUIRE `?<Initializer for timer>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??elf_exit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??elf_exit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??elf_exit
        ARM
??elf_exit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +33028
        MOV      R1,R0
        LDR      R0,??elf_exit_1  ;; SFB(ELFBEGIN)
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??elf_exit_1:
        DC32     SFB(ELFBEGIN)
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??Draw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??Draw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??Draw
        ARM
??Draw:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        LDR      R4,??Draw_1      ;; StatusRow + 8
        LDR      R4,[R4, #+0]
        BLX      R4
        LDR      R0,??Draw_1+0x4  ;; IS_ENABLED
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        POPEQ    {R4-R8,PC}
        LDR      R0,??Draw_1+0x8  ;; FONT
        LDR      R0,[R0, #+0]
        SWI      +497
        LDR      R0,??Draw_1+0xC  ;; X_POS
        LDR      R4,[R0, #+0]
        LDR      R0,??Draw_1+0x10  ;; Y_POS
        ADD      R5,R4,#+40
        LDR      R6,[R0, #+0]
        LDR      R0,??Draw_1+0x14  ;; BRUSH_COLOR
        ADD      R7,R6,#+9
        LDR      R8,[R0, #+0]
        MOV      R3,R7
        MOV      R0,R8
        PUSH     {R0}
        CFI CFA R13+28
        PUSH     {R0}
        CFI CFA R13+32
        MOV      R2,R5
        MOV      R1,R6
        MOV      R0,R4
        SWI      +492
        LDR      R0,??Draw_1+0x18  ;; PEN_COLOR
        PUSH     {R8}
        CFI CFA R13+36
        LDR      R0,[R0, #+0]
        MOV      R3,R6
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R2,R4
        MOV      R1,#+2
        MOV      R0,#+1
        PUSH     {R0}
        CFI CFA R13+44
        PUSH     {R0}
        CFI CFA R13+48
        LDR      R0,??Draw_1+0x1C  ;; StatusRow + 4
        PUSH     {R7}
        CFI CFA R13+52
        PUSH     {R5}
        CFI CFA R13+56
        LDR      R0,[R0, #+0]
        SWI      +493
        ADD      SP,SP,#+32
        CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
        DATA
??Draw_1:
        DC32     StatusRow + 8
        DC32     IS_ENABLED
        DC32     FONT
        DC32     X_POS
        DC32     Y_POS
        DC32     BRUSH_COLOR
        DC32     PEN_COLOR
        DC32     StatusRow + 4
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??onTimer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??onTimer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??onTimer
        ARM
??onTimer:
        LDR      R0,??onTimer_1   ;; StatusRow + 4
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R0,[R0, #+0]
        MVN      R1,#-1879048192
        CMP      R0,R1
        BEQ      ??onTimer_2
        LDR      R4,??DataTable9  ;; StatusRow
        SWI      +353
        MVN      R0,#-1879048192
        STR      R0,[R4, #+4]
??onTimer_2:
        LDR      R4,??DataTable9  ;; StatusRow
        SWI      +368
        SWI      +348
        LDR      R2,??DataTable10  ;; ??onTimer
        STR      R0,[R4, #+4]
        LDR      R0,??DataTable4  ;; REFRESH_TIME
        MOV      R3,#+0
        LDR      R1,[R0, #+0]
        ADD      R0,R4,#+12
        SWI      +296
        LDR      R0,[R4, #+0]
        MOV      R1,#+0
        SWI      +495
        POP      {R4,PC}          ;; return
        DATA
??onTimer_1:
        DC32     StatusRow + 4
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??TerminateElf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??TerminateElf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??TerminateElf
        ARM
??TerminateElf:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,R1
        SWI      +303
        MOV      R0,#+1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??ShowAuthorInfo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??ShowAuthorInfo

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??ShowAuthorInfo
        ARM
??ShowAuthorInfo:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R1,#+0
        MOV      R4,R0
        LDR      R0,??ShowAuthorInfo_1  ;; `?<Constant L"\\x42\\x63\\x66\\x67\\x45\\x78\\x61\\x6d\\`
        MOV      R5,#+255
        ORR      R5,R5,#0xFF00
        MOV      R2,R5
        SWI      +349
        LDR      R1,[R4, #+0]
        MOV      R3,#+1
        PUSH     {R1}
        CFI CFA R13+16
        MOV      R2,R5
        MOV      R1,#+136
        ORR      R1,R1,#0x1300
        PUSH     {R1}
        CFI CFA R13+20
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
        MOV      R0,#+1
        POP      {R1,R2,R4,R5,PC}  ;; return
        DATA
??ShowAuthorInfo_1:
        DC32     `?<Constant L"\\x42\\x63\\x66\\x67\\x45\\x78\\x61\\x6d\\`
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??ReconfigElf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??ReconfigElf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??ReconfigElf
        ARM
??ReconfigElf:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        LDR      R0,??ReconfigElf_1  ;; successed_config_path
        MOV      R5,#+0
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        SWI      +671
        CMP      R0,#+0
        BNE      ??ReconfigElf_2
        LDR      R0,??ReconfigElf_1+0x4  ;; successed_config_name
        LDR      R1,[R0, #+0]
        ADD      R0,R4,#+128
        SWI      +671
        CMP      R0,#+0
        BNE      ??ReconfigElf_2
        _BLF     ??InitConfig,??InitConfig??rA
        LDR      R0,??DataTable4  ;; REFRESH_TIME
        LDR      R2,??DataTable10  ;; ??onTimer
        LDR      R1,[R0, #+0]
        LDR      R0,??ReconfigElf_1+0x8  ;; StatusRow + 12
        MOV      R3,#+0
        SWI      +296
        MOV      R5,#+1
??ReconfigElf_2:
        MOV      R0,R5
        POP      {R4,R5,PC}       ;; return
        DATA
??ReconfigElf_1:
        DC32     successed_config_path
        DC32     successed_config_name
        DC32     StatusRow + 12
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     REFRESH_TIME

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??onMyBookClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??onMyBookClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??onMyBookClose
        ARM
??onMyBookClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R4,??DataTable9  ;; StatusRow
        LDR      R0,[R4, #+0]
        SWI      +543
        LDR      R1,[R4, #+8]
        SWI      +552
        ADD      R0,R4,#+12
        SWI      +298
        LDR      R0,??DataTable8  ;; ??elf_exit
        SWI      +264
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE main

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
bk_msglst_base:
        DATA
        DC32 997, ??TerminateElf, 998, ??ShowAuthorInfo, 996, ??ReconfigElf, 64
        DC32 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "BcfgExample_Base_Page">`:
        DATA
        DC8 "BcfgExample_Base_Page"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x42\\x63\\x66\\x67\\x45\\x78\\x61\\x6d\\`:
        DATA
        DC8 42H, 0, 63H, 0, 66H, 0, 67H, 0
        DC8 45H, 0, 78H, 0, 61H, 0, 6DH, 0
        DC8 70H, 0, 6CH, 0, 65H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "BcfgExample">`:
        DATA
        DC8 "BcfgExample"
        DC32 `?<Constant "BcfgExample_Base_Page">`, 0H, bk_msglst_base

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function main
        ARM
main:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R0,#+24
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R4,R0
        MOV      R2,#+24
        MOV      R1,#+0
        SWI      +274
        LDR      R0,??main_0      ;; `?<Constant "BcfgExample">`
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+12
        MOV      R3,R0
        ADD      R2,R0,#+12
        MOV      R0,R4
        MVN      R1,R1
        PUSH     {R1}
        CFI CFA R13+16
        LDR      R1,??main_0+0x4  ;; ??onMyBookClose
        SWI      +299
        CMP      R0,#+0
        ADD      SP,SP,#+8
        CFI CFA R13+8
        BNE      ??main_1
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R0,??DataTable8  ;; ??elf_exit
        SWI      +264
        MOV      R0,#+0
        POP      {R4,PC}
??main_1:
        LDR      R4,??DataTable9  ;; StatusRow
        _BLF     ??InitConfig,??InitConfig??rA
        SWI      +33266
        LDR      R0,[R0, #+0]
        STR      R0,[R4, #+0]
        SWI      +553
        STR      R0,[R4, #+8]
        LDR      R0,[R4, #+0]
        SWI      +543
        LDR      R1,??main_0+0x8  ;; ??Draw
        SWI      +552
        LDR      R0,??DataTable10  ;; ??onTimer
        SWI      +265
        MOV      R0,#+0
        POP      {R4,PC}          ;; return
        DATA
??main_0:
        DC32     `?<Constant "BcfgExample">`
        DC32     ??onMyBookClose
        DC32     ??Draw
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     ??elf_exit

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     StatusRow

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable10:
        DC32     ??onTimer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine8_0  ;; kill_data
        BX       R12
        DATA
??Subroutine8_0:
        DC32     kill_data
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
??InitConfig??rA:
        LDR      R12,??Subroutine9_0  ;; ??InitConfig
        BX       R12
        DATA
??Subroutine9_0:
        DC32     ??InitConfig
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine10_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine10_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine11_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine11_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock19

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for StatusRow>`:
        DATA
        DC8 0, 0, 0, 0
`?<Initializer for SIDheap>`:
        DC32 1879048191
`?<Initializer for SIonRedraw>`:
        DC8 0, 0, 0, 0
`?<Initializer for timer>`:
        DC8 0, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        END
// 
// 868 bytes in segment CODE
//  72 bytes in segment DATA_C
//  14 bytes in segment DATA_I
//  14 bytes in segment DATA_ID
//  32 bytes in segment DYN_PAGE
//  12 bytes in segment INITTAB
// 
// 788 bytes of CODE  memory (+ 92 bytes shared)
// 118 bytes of CONST memory
//  14 bytes of DATA  memory
//
//Errors: none
//Warnings: none
