##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  23:05:11 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\SCalka\gammaf. #
#                       cpp                                                  #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\SCalka\gammaf. #
#                       cpp -D NO_AP_ASSERT -D NDEBUG -D OLDFUNCTIONS -lCN   #
#                       Z:\home\perk11\www\perk11.info\svn\SE\SCalka\Release #
#                       \List\ -la Z:\home\perk11\www\perk11.info\svn\SE\SCa #
#                       lka\Release\List\ -o Z:\home\perk11\www\perk11.info\ #
#                       svn\SE\SCalka\Release\Obj\ -s9 --no_unroll           #
#                       --no_code_motion --cpu_mode arm --endian little      #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --eec++ --dlib_config                     #
#                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I         #
#                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2    #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\SCalka\Release #
#                       \List\gammaf.lst                                     #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\SCalka\Release #
#                       \Obj\gammaf.r79                                      #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\SCalka\gammaf.cpp
      1          /*************************************************************************
      2          Cephes Math Library Release 2.8:  June, 2000
      3          Copyright by Stephen L. Moshier
      4          
      5          Contributors:
      6              * Sergey Bochkanov (ALGLIB project). Translation from C to
      7                pseudocode.
      8          
      9          See subroutines comments for additional copyrights.
     10          
     11          Redistribution and use in source and binary forms, with or without
     12          modification, are permitted provided that the following conditions are
     13          met:
     14          
     15          - Redistributions of source code must retain the above copyright
     16            notice, this list of conditions and the following disclaimer.
     17          
     18          - Redistributions in binary form must reproduce the above copyright
     19            notice, this list of conditions and the following disclaimer listed
     20            in this license in the documentation and/or other materials
     21            provided with the distribution.
     22          
     23          - Neither the name of the copyright holders nor the names of its
     24            contributors may be used to endorse or promote products derived from
     25            this software without specific prior written permission.
     26          
     27          THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     28          "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     29          LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     30          A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
     31          OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     32          SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     33          LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     34          DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     35          THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     36          (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     37          OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     38          *************************************************************************/
     39          
     40          #include "gammaf.h"
     41          #include <math.h>
     42          
     43          double gammastirf(double x);
     44          
     45          namespace ap
     46          {

   \                                 In segment CODE, align 4, keep-with-next
     47          double pi(){ return 3.14159265358979323846; }  
   \                     ??pi:
   \   00000000   ........           LDR      R0,??DataTable6  ;; 0x54442d18
   \   00000004   ........           LDR      R1,??DataTable7  ;; 0x400921fb
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     48          int round(double x)
     49          {return int(floor(x+0.5)); }  
   \                     ??round:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   C035A0E3           MOV      R3,#+805306368
   \   0000000C   FE3683E3           ORR      R3,R3,#0xFE00000
   \   00000010   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000014   ........           _BLF     floor,??floor??rA
   \   00000018   0040BDE8           POP      {LR}             ;; Pop
   \   0000001C   ........           _BF      __doubleToLong,??__doubleToLong??rA  ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
     50          int ifloor(double x)
     51          { return int(floor(x)); }  
   \                     ??ifloor:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     floor,??floor??rA
   \   00000008   0040BDE8           POP      {LR}             ;; Pop
   \   0000000C   ........           _BF      __doubleToLong,??__doubleToLong??rA  ;; tailcall
     52            
     53          };
     54          /*************************************************************************
     55          Вычисление гамма-функции.
     56          
     57          Входные параметры:
     58              X   -   аргумент
     59          
     60          Допустимые значения:
     61              0 < X < 171.6
     62              -170 < X < 0, X не целое.
     63          
     64          Относительная погрешность вычисления:
     65          
     66              ОБЛАСТЬ         #ТЕСТОВ        МАКС.          СРЕДН.
     67              (-170, -33)       20000      2.3e-15         3.3e-16
     68              (-33,   33)       20000      9.4e-16         2.2e-16
     69              ( 33,  171.6)     20000      2.3e-15         3.2e-16
     70          
     71          Cephes Math Library Release 2.8:  June, 2000
     72          Original copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
     73          Translated to AlgoPascal by Bochkanov Sergey (2005, 2006).
     74          *************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
     75          double gamma(double x)
     76          {
     77              double result;
     78              double p;
     79              double pp;
     80              double q;
     81              double qq;
     82              double z;
     83              int i;
     84              double sgngam;
     85          
     86              sgngam = 1;
     87              q = fabs(x);
     88              if( q>33.0 )
   \                     ??gamma:
   \   00000000   C8349FE5           LDR      R3,??gamma_1     ;; 0x40408000
   \   00000004   F04B2DE9           PUSH     {R4-R9,R11,LR}
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   C0B5A0E3           MOV      R11,#+805306368
   \   00000014   FFB68BE3           ORR      R11,R11,#0xFF00000
   \   00000018   0640A0E1           MOV      R4,R6
   \   0000001C   0750A0E1           MOV      R5,R7
   \   00000020   8054C5E3           BIC      R5,R5,#0x80000000
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0120A0E3           MOV      R2,#+1
   \   0000002C   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   5400000A           BEQ      ??gamma_2
     89              {
     90                  if( x<0.0 )
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   0710A0E1           MOV      R1,R7
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0030A0E3           MOV      R3,#+0
   \   00000048   ........           _BLF     __dLess,??__dLess??rA
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   4400000A           BEQ      ??gamma_3
     91                  {
     92                      p = ap::ifloor(q);
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   ........           _BLF     floor,??floor??rA
   \   00000060   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   00000064   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000068   0080A0E1           MOV      R8,R0
   \   0000006C   0190A0E1           MOV      R9,R1
     93                      i = ap::round(p);
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   4019CBE3           BIC      R1,R11,#0x100000
   \   00000078   0820A0E1           MOV      R2,R8
   \   0000007C   0930A0E1           MOV      R3,R9
   \   00000080   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000084   ........           _BLF     floor,??floor??rA
   \   00000088   ........           _BLF     __doubleToLong,??__doubleToLong??rA
     94                      if( i%2==0 )
   \   0000008C   A01F80E0           ADD      R1,R0,R0, LSR #+31
   \   00000090   C110A0E1           ASR      R1,R1,#+1
   \   00000094   810050E0           SUBS     R0,R0,R1, LSL #+1
     95                      {
     96                          sgngam = -1;
   \   00000098   80B48B03           ORREQ    R11,R11,#0x80000000
     97                      }
     98                      z = q-p;
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   0510A0E1           MOV      R1,R5
   \   000000A4   0820A0E1           MOV      R2,R8
   \   000000A8   0930A0E1           MOV      R3,R9
   \   000000AC   ........           _BLF     __dSub,??__dSub??rA
   \   000000B0   0060A0E1           MOV      R6,R0
   \   000000B4   0170A0E1           MOV      R7,R1
     99                      if( z>0.5 )
   \   000000B8   0120A0E3           MOV      R2,#+1
   \   000000BC   C035A0E3           MOV      R3,#+805306368
   \   000000C0   FE3683E3           ORR      R3,R3,#0xFE00000
   \   000000C4   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   0C00000A           BEQ      ??gamma_4
    100                      {
    101                          p = p+1;
    102                          z = q-p;
   \   000000D0   0000A0E3           MOV      R0,#+0
   \   000000D4   C015A0E3           MOV      R1,#+805306368
   \   000000D8   FF1681E3           ORR      R1,R1,#0xFF00000
   \   000000DC   0820A0E1           MOV      R2,R8
   \   000000E0   0930A0E1           MOV      R3,R9
   \   000000E4   ........           _BLF     __dAdd,??__dAdd??rA
   \   000000E8   0020A0E1           MOV      R2,R0
   \   000000EC   0130A0E1           MOV      R3,R1
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   0510A0E1           MOV      R1,R5
   \   000000F8   ........           _BLF     __dSub,??__dSub??rA
   \   000000FC   0060A0E1           MOV      R6,R0
   \   00000100   0170A0E1           MOV      R7,R1
    103                      }
    104                      z = q*sin(ap::pi()*z);
   \                     ??gamma_4:
   \   00000104   ........           LDR      R0,??DataTable6  ;; 0x54442d18
   \   00000108   ........           LDR      R1,??DataTable7  ;; 0x400921fb
   \   0000010C   0620A0E1           MOV      R2,R6
   \   00000110   0730A0E1           MOV      R3,R7
   \   00000114   ........           _BLF     __dMul,??__dMul??rA
   \   00000118   0020A0E3           MOV      R2,#+0
   \   0000011C   ........           _BLF     _Sin,??_Sin??rA
   \   00000120   0420A0E1           MOV      R2,R4
   \   00000124   0530A0E1           MOV      R3,R5
   \   00000128   ........           _BLF     __dMul,??__dMul??rA
    105                      z = fabs(z);
   \   0000012C   0060A0E1           MOV      R6,R0
   \   00000130   0170A0E1           MOV      R7,R1
   \   00000134   8074C7E3           BIC      R7,R7,#0x80000000
    106                      z = ap::pi()/(z*gammastirf(q));
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   0510A0E1           MOV      R1,R5
   \   00000140   ........           BL       ??gammastirf
   \   00000144   0620A0E1           MOV      R2,R6
   \   00000148   0730A0E1           MOV      R3,R7
   \   0000014C   ........           _BLF     __dMul,??__dMul??rA
   \   00000150   0020A0E1           MOV      R2,R0
   \   00000154   ........           LDR      R0,??DataTable6  ;; 0x54442d18
   \   00000158   0130A0E1           MOV      R3,R1
   \   0000015C   ........           LDR      R1,??DataTable7  ;; 0x400921fb
   \   00000160   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000164   020000EA           B        ??gamma_5
    107                  }
    108                  else
    109                  {
    110                      z = gammastirf(x);
   \                     ??gamma_3:
   \   00000168   0600A0E1           MOV      R0,R6
   \   0000016C   0710A0E1           MOV      R1,R7
   \   00000170   ........           BL       ??gammastirf
    111                  }
    112                  result = sgngam*z;
    113                  return result;
   \                     ??gamma_5:
   \   00000174   0020A0E1           MOV      R2,R0
   \   00000178   0130A0E1           MOV      R3,R1
   \   0000017C   0000A0E3           MOV      R0,#+0
   \   00000180   0B10A0E1           MOV      R1,R11
   \   00000184   ........           _BLF     __dMul,??__dMul??rA
   \   00000188   F08BBDE8           POP      {R4-R9,R11,PC}
    114              }
    115              z = 1;
   \                     ??gamma_2:
   \   0000018C   0040A0E3           MOV      R4,#+0
   \   00000190   0B50A0E1           MOV      R5,R11
   \   00000194   0600A0E1           MOV      R0,R6
   \   00000198   0710A0E1           MOV      R1,R7
   \   0000019C   0020A0E3           MOV      R2,#+0
   \   000001A0   603985E2           ADD      R3,R5,#+1572864
   \   000001A4   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000001A8   000050E3           CMP      R0,#+0
   \   000001AC   1400000A           BEQ      ??gamma_6
    116              while(x>=3)
    117              {
    118                  x = x-1;
   \                     ??gamma_7:
   \   000001B0   0000A0E3           MOV      R0,#+0
   \   000001B4   80148BE3           ORR      R1,R11,#0x80000000
   \   000001B8   0620A0E1           MOV      R2,R6
   \   000001BC   0730A0E1           MOV      R3,R7
   \   000001C0   ........           _BLF     __dAdd,??__dAdd??rA
   \   000001C4   0060A0E1           MOV      R6,R0
   \   000001C8   0170A0E1           MOV      R7,R1
    119                  z = z*x;
   \   000001CC   0620A0E1           MOV      R2,R6
   \   000001D0   0730A0E1           MOV      R3,R7
   \   000001D4   0400A0E1           MOV      R0,R4
   \   000001D8   0510A0E1           MOV      R1,R5
   \   000001DC   ........           _BLF     __dMul,??__dMul??rA
   \   000001E0   0040A0E1           MOV      R4,R0
   \   000001E4   0150A0E1           MOV      R5,R1
    120              }
   \   000001E8   0600A0E1           MOV      R0,R6
   \   000001EC   0710A0E1           MOV      R1,R7
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   60398BE2           ADD      R3,R11,#+1572864
   \   000001F8   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000001FC   000050E3           CMP      R0,#+0
   \   00000200   EAFFFF1A           BNE      ??gamma_7
    121              while(x<0)
   \                     ??gamma_6:
   \   00000204   0600A0E1           MOV      R0,R6
   \   00000208   0710A0E1           MOV      R1,R7
   \   0000020C   0020A0E3           MOV      R2,#+0
   \   00000210   0030A0E3           MOV      R3,#+0
   \   00000214   ........           _BLF     __dLess,??__dLess??rA
   \   00000218   000050E3           CMP      R0,#+0
   \   0000021C   3B00000A           BEQ      ??gamma_8
    122              {
    123                  if( x>-0.000000001 )
   \   00000220   AC229FE5           LDR      R2,??gamma_1+0x4  ;; 0xffffffffe826d694
   \   00000224   AC329FE5           LDR      R3,??gamma_1+0x8  ;; 0xffffffffbe112e0b
   \   00000228   0600A0E1           MOV      R0,R6
   \   0000022C   0710A0E1           MOV      R1,R7
   \   00000230   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000234   000050E3           CMP      R0,#+0
   \   00000238   1000000A           BEQ      ??gamma_9
    124                  {
    125                      result = z/((1+0.5772156649015329*x)*x);
    126                      return result;
   \                     ??gamma_10:
   \   0000023C   98029FE5           LDR      R0,??gamma_1+0xC  ;; 0xfffffffffc6fb619
   \   00000240   98129FE5           LDR      R1,??gamma_1+0x10  ;; 0x3fe2788c
   \   00000244   0620A0E1           MOV      R2,R6
   \   00000248   0730A0E1           MOV      R3,R7
   \   0000024C   ........           _BLF     __dMul,??__dMul??rA
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   0B30A0E1           MOV      R3,R11
   \   00000258   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000025C   0620A0E1           MOV      R2,R6
   \   00000260   0730A0E1           MOV      R3,R7
   \   00000264   ........           _BLF     __dMul,??__dMul??rA
   \   00000268   0020A0E1           MOV      R2,R0
   \   0000026C   0130A0E1           MOV      R3,R1
   \   00000270   0400A0E1           MOV      R0,R4
   \   00000274   0510A0E1           MOV      R1,R5
   \   00000278   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000027C   F08BBDE8           POP      {R4-R9,R11,PC}
    127                  }
    128                  z = z/x;
   \                     ??gamma_9:
   \   00000280   0400A0E1           MOV      R0,R4
   \   00000284   0510A0E1           MOV      R1,R5
   \   00000288   0620A0E1           MOV      R2,R6
   \   0000028C   0730A0E1           MOV      R3,R7
   \   00000290   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000294   0040A0E1           MOV      R4,R0
   \   00000298   0150A0E1           MOV      R5,R1
    129                  x = x+1;
   \   0000029C   0000A0E3           MOV      R0,#+0
   \   000002A0   0B10A0E1           MOV      R1,R11
   \   000002A4   0620A0E1           MOV      R2,R6
   \   000002A8   0730A0E1           MOV      R3,R7
   \   000002AC   ........           _BLF     __dAdd,??__dAdd??rA
   \   000002B0   0060A0E1           MOV      R6,R0
   \   000002B4   0170A0E1           MOV      R7,R1
   \   000002B8   D1FFFFEA           B        ??gamma_6
    130              }
    131              while(x<2)
    132              {
    133                  if( x<0.000000001 )
   \                     ??gamma_11:
   \   000002BC   20229FE5           LDR      R2,??gamma_1+0x14  ;; 0xffffffffe826d695
   \   000002C0   20329FE5           LDR      R3,??gamma_1+0x18  ;; 0x3e112e0b
   \   000002C4   0600A0E1           MOV      R0,R6
   \   000002C8   0710A0E1           MOV      R1,R7
   \   000002CC   ........           _BLF     __dLess,??__dLess??rA
   \   000002D0   000050E3           CMP      R0,#+0
   \   000002D4   D8FFFF1A           BNE      ??gamma_10
    134                  {
    135                      result = z/((1+0.5772156649015329*x)*x);
    136                      return result;
    137                  }
    138                  z = z/x;
   \   000002D8   0400A0E1           MOV      R0,R4
   \   000002DC   0510A0E1           MOV      R1,R5
   \   000002E0   0620A0E1           MOV      R2,R6
   \   000002E4   0730A0E1           MOV      R3,R7
   \   000002E8   ........           _BLF     __dDiv,??__dDiv??rA
   \   000002EC   0040A0E1           MOV      R4,R0
   \   000002F0   0150A0E1           MOV      R5,R1
    139                  x = x+1.0;
   \   000002F4   0000A0E3           MOV      R0,#+0
   \   000002F8   0B10A0E1           MOV      R1,R11
   \   000002FC   0620A0E1           MOV      R2,R6
   \   00000300   0730A0E1           MOV      R3,R7
   \   00000304   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000308   0060A0E1           MOV      R6,R0
   \   0000030C   0170A0E1           MOV      R7,R1
    140              }
   \                     ??gamma_8:
   \   00000310   0600A0E1           MOV      R0,R6
   \   00000314   0710A0E1           MOV      R1,R7
   \   00000318   0020A0E3           MOV      R2,#+0
   \   0000031C   4034A0E3           MOV      R3,#+1073741824
   \   00000320   ........           _BLF     __dLess,??__dLess??rA
   \   00000324   000050E3           CMP      R0,#+0
   \   00000328   E3FFFF1A           BNE      ??gamma_11
    141              if( x==2 )
   \   0000032C   4014A0E3           MOV      R1,#+1073741824
   \   00000330   0620A0E1           MOV      R2,R6
   \   00000334   0730A0E1           MOV      R3,R7
   \   00000338   ........           _BLF     __dEqual,??__dEqual??rA
   \   0000033C   000050E3           CMP      R0,#+0
    142              {
    143                  result = z;
    144                  return result;
   \   00000340   0400A011           MOVNE    R0,R4
   \   00000344   0510A011           MOVNE    R1,R5
   \   00000348   F08BBD18           POPNE    {R4-R9,R11,PC}
    145              }
    146              x = x-2.0;
   \   0000034C   C014A0E3           MOV      R1,#-1073741824
   \   00000350   0620A0E1           MOV      R2,R6
   \   00000354   0730A0E1           MOV      R3,R7
   \   00000358   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000035C   0060A0E1           MOV      R6,R0
    147              pp = 1.60119522476751861407E-4;
    148              pp = 1.19135147006586384913E-3+x*pp;
    149              pp = 1.04213797561761569935E-2+x*pp;
    150              pp = 4.76367800457137231464E-2+x*pp;
    151              pp = 2.07448227648435975150E-1+x*pp;
    152              pp = 4.94214826801497100753E-1+x*pp;
    153              pp = 9.99999999999999996796E-1+x*pp;
    154              qq = -2.31581873324120129819E-5;
    155              qq = 5.39605580493303397842E-4+x*qq;
    156              qq = -4.45641913851797240494E-3+x*qq;
    157              qq = 1.18139785222060435552E-2+x*qq;
    158              qq = 3.58236398605498653373E-2+x*qq;
    159              qq = -2.34591795718243348568E-1+x*qq;
    160              qq = 7.14304917030273074085E-2+x*qq;
    161              qq = 1.00000000000000000320+x*qq;
    162              result = z*pp/qq;
    163              return result;
   \   00000360   84019FE5           LDR      R0,??gamma_1+0x1C  ;; 0xffffffff8400d3af
   \   00000364   0170A0E1           MOV      R7,R1
   \   00000368   80119FE5           LDR      R1,??gamma_1+0x20  ;; 0xffffffffbef8487a
   \   0000036C   0620A0E1           MOV      R2,R6
   \   00000370   0730A0E1           MOV      R3,R7
   \   00000374   ........           _BLF     __dMul,??__dMul??rA
   \   00000378   74219FE5           LDR      R2,??gamma_1+0x24  ;; 0x29152573
   \   0000037C   74319FE5           LDR      R3,??gamma_1+0x28  ;; 0x3f41ae8a
   \   00000380   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000384   0620A0E1           MOV      R2,R6
   \   00000388   0730A0E1           MOV      R3,R7
   \   0000038C   ........           _BLF     __dMul,??__dMul??rA
   \   00000390   64219FE5           LDR      R2,??gamma_1+0x2C  ;; 0xffffffffe750b44a
   \   00000394   64319FE5           LDR      R3,??gamma_1+0x30  ;; 0xffffffffbf7240e4
   \   00000398   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000039C   0620A0E1           MOV      R2,R6
   \   000003A0   0730A0E1           MOV      R3,R7
   \   000003A4   ........           _BLF     __dMul,??__dMul??rA
   \   000003A8   54219FE5           LDR      R2,??gamma_1+0x34  ;; 0x5b1bb117
   \   000003AC   54319FE5           LDR      R3,??gamma_1+0x38  ;; 0x3f8831ed
   \   000003B0   ........           _BLF     __dAdd,??__dAdd??rA
   \   000003B4   0620A0E1           MOV      R2,R6
   \   000003B8   0730A0E1           MOV      R3,R7
   \   000003BC   ........           _BLF     __dMul,??__dMul??rA
   \   000003C0   44219FE5           LDR      R2,??gamma_1+0x3C  ;; 0xffffffffe33fde67
   \   000003C4   44319FE5           LDR      R3,??gamma_1+0x40  ;; 0x3fa25779
   \   000003C8   ........           _BLF     __dAdd,??__dAdd??rA
   \   000003CC   0620A0E1           MOV      R2,R6
   \   000003D0   0730A0E1           MOV      R3,R7
   \   000003D4   ........           _BLF     __dMul,??__dMul??rA
   \   000003D8   34219FE5           LDR      R2,??gamma_1+0x44  ;; 0xffffffff9d4287c2
   \   000003DC   34319FE5           LDR      R3,??gamma_1+0x48  ;; 0xffffffffbfce071a
   \   000003E0   ........           _BLF     __dAdd,??__dAdd??rA
   \   000003E4   0620A0E1           MOV      R2,R6
   \   000003E8   0730A0E1           MOV      R3,R7
   \   000003EC   ........           _BLF     __dMul,??__dMul??rA
   \   000003F0   24219FE5           LDR      R2,??gamma_1+0x4C  ;; 0xffffffffc9cd3c51
   \   000003F4   24319FE5           LDR      R3,??gamma_1+0x50  ;; 0x3fb24944
   \   000003F8   ........           _BLF     __dAdd,??__dAdd??rA
   \   000003FC   0620A0E1           MOV      R2,R6
   \   00000400   0730A0E1           MOV      R3,R7
   \   00000404   ........           _BLF     __dMul,??__dMul??rA
   \   00000408   0020A0E3           MOV      R2,#+0
   \   0000040C   0B30A0E1           MOV      R3,R11
   \   00000410   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000414   0080A0E1           MOV      R8,R0
   \   00000418   04019FE5           LDR      R0,??gamma_1+0x54  ;; 0x39982153
   \   0000041C   0190A0E1           MOV      R9,R1
   \   00000420   00119FE5           LDR      R1,??gamma_1+0x58  ;; 0x3f24fcb8
   \   00000424   0620A0E1           MOV      R2,R6
   \   00000428   0730A0E1           MOV      R3,R7
   \   0000042C   ........           _BLF     __dMul,??__dMul??rA
   \   00000430   F4209FE5           LDR      R2,??gamma_1+0x5C  ;; 0xffffffffe686bfab
   \   00000434   F4309FE5           LDR      R3,??gamma_1+0x60  ;; 0x3f5384e3
   \   00000438   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000043C   0620A0E1           MOV      R2,R6
   \   00000440   0730A0E1           MOV      R3,R7
   \   00000444   ........           _BLF     __dMul,??__dMul??rA
   \   00000448   E4209FE5           LDR      R2,??gamma_1+0x64  ;; 0xffffffffe9db14b0
   \   0000044C   E4309FE5           LDR      R3,??gamma_1+0x68  ;; 0x3f8557cd
   \   00000450   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000454   0620A0E1           MOV      R2,R6
   \   00000458   0730A0E1           MOV      R3,R7
   \   0000045C   ........           _BLF     __dMul,??__dMul??rA
   \   00000460   D4209FE5           LDR      R2,??gamma_1+0x6C  ;; 0x18c423d3
   \   00000464   D4309FE5           LDR      R3,??gamma_1+0x70  ;; 0x3fa863d9
   \   00000468   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000046C   0620A0E1           MOV      R2,R6
   \   00000470   0730A0E1           MOV      R3,R7
   \   00000474   ........           _BLF     __dMul,??__dMul??rA
   \   00000478   C4209FE5           LDR      R2,??gamma_1+0x74  ;; 0xffffffffdcae7d31
   \   0000047C   C4309FE5           LDR      R3,??gamma_1+0x78  ;; 0x3fca8da9
   \   00000480   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000484   0620A0E1           MOV      R2,R6
   \   00000488   0730A0E1           MOV      R3,R7
   \   0000048C   ........           _BLF     __dMul,??__dMul??rA
   \   00000490   B4209FE5           LDR      R2,??gamma_1+0x7C  ;; 0x3993e312
   \   00000494   B4309FE5           LDR      R3,??gamma_1+0x80  ;; 0x3fdfa137
   \   00000498   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000049C   0620A0E1           MOV      R2,R6
   \   000004A0   0730A0E1           MOV      R3,R7
   \   000004A4   ........           _BLF     __dMul,??__dMul??rA
   \   000004A8   0020A0E3           MOV      R2,#+0
   \   000004AC   0B30A0E1           MOV      R3,R11
   \   000004B0   ........           _BLF     __dAdd,??__dAdd??rA
   \   000004B4   0420A0E1           MOV      R2,R4
   \   000004B8   0530A0E1           MOV      R3,R5
   \   000004BC   ........           _BLF     __dMul,??__dMul??rA
   \   000004C0   0820A0E1           MOV      R2,R8
   \   000004C4   0930A0E1           MOV      R3,R9
   \   000004C8   ........           _BLF     __dDiv,??__dDiv??rA
   \   000004CC   F08BBDE8           POP      {R4-R9,R11,PC}
   \                     ??gamma_1:
   \   000004D0   00804040           DC32     0x40408000
   \   000004D4   94D626E8           DC32     0xffffffffe826d694
   \   000004D8   0B2E11BE           DC32     0xffffffffbe112e0b
   \   000004DC   19B66FFC           DC32     0xfffffffffc6fb619
   \   000004E0   8C78E23F           DC32     0x3fe2788c
   \   000004E4   95D626E8           DC32     0xffffffffe826d695
   \   000004E8   0B2E113E           DC32     0x3e112e0b
   \   000004EC   AFD30084           DC32     0xffffffff8400d3af
   \   000004F0   7A48F8BE           DC32     0xffffffffbef8487a
   \   000004F4   73251529           DC32     0x29152573
   \   000004F8   8AAE413F           DC32     0x3f41ae8a
   \   000004FC   4AB450E7           DC32     0xffffffffe750b44a
   \   00000500   E44072BF           DC32     0xffffffffbf7240e4
   \   00000504   17B11B5B           DC32     0x5b1bb117
   \   00000508   ED31883F           DC32     0x3f8831ed
   \   0000050C   67DE3FE3           DC32     0xffffffffe33fde67
   \   00000510   7957A23F           DC32     0x3fa25779
   \   00000514   C287429D           DC32     0xffffffff9d4287c2
   \   00000518   1A07CEBF           DC32     0xffffffffbfce071a
   \   0000051C   513CCDC9           DC32     0xffffffffc9cd3c51
   \   00000520   4449B23F           DC32     0x3fb24944
   \   00000524   53219839           DC32     0x39982153
   \   00000528   B8FC243F           DC32     0x3f24fcb8
   \   0000052C   ABBF86E6           DC32     0xffffffffe686bfab
   \   00000530   E384533F           DC32     0x3f5384e3
   \   00000534   B014DBE9           DC32     0xffffffffe9db14b0
   \   00000538   CD57853F           DC32     0x3f8557cd
   \   0000053C   D323C418           DC32     0x18c423d3
   \   00000540   D963A83F           DC32     0x3fa863d9
   \   00000544   317DAEDC           DC32     0xffffffffdcae7d31
   \   00000548   A98DCA3F           DC32     0x3fca8da9
   \   0000054C   12E39339           DC32     0x3993e312
   \   00000550   37A1DF3F           DC32     0x3fdfa137
    164          }
    165          
    166          
    167          /*************************************************************************
    168          Вычисление натурального логарифма модуля гамма-функции.
    169          
    170          Входные параметры:
    171              x       -   точка, в которой вычисляем логарифм:
    172          
    173          Выходные параметры:
    174              SgnGam  -   знак, который имеет гамма-функция.
    175                          Либо +1, либо -1.
    176          
    177          Результат:
    178              натуральный логарифм модуля гамма-функции
    179          
    180          Допустимые значения:
    181              0 < X < 2.55e305
    182              -2.55e305 < X < 0, X не целое.
    183          
    184          Погрешность аппроксимации (относительная для значений функции
    185          больших 1, иначе - абсолютная):
    186          
    187          domain               #trials   peak        rms
    188          0, 3                 28000     5.4e-16     1.1e-16
    189          2.718, 2.556e305     40000     3.5e-16     8.3e-17
    190          
    191          Следующий тест приводит относительную погрешность, хотя для некоторых
    192          точек ошибка может быть больше, чем указано в таблице:
    193          -200, -4             10000     4.8e-16     1.3e-16
    194          
    195          Cephes Math Library Release 2.8:  June, 2000
    196          Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
    197          Translated to AlgoPascal by Bochkanov Sergey (2005, 2006).
    198          *************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    199          double lngamma(double x, double& sgngam)
    200          {
   \                     ??lngamma:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0080A0E1           MOV      R8,R0
    201              double result;
    202              double a;
    203              double b;
    204              double c;
    205              double p;
    206              double q;
    207              double u;
    208              double w;
    209              double z;
    210              int i;
    211              double logpi;
    212              double ls2pi;
    213              double tmp;
    214          
    215              sgngam = 1;
   \   0000000C   0200A0E1           MOV      R0,R2
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   C035A0E3           MOV      R3,#+805306368
   \   00000018   FF3683E3           ORR      R3,R3,#0xFF00000
   \   0000001C   0C0080E8           STM      R0,{R2,R3}
   \   00000020   0190A0E1           MOV      R9,R1
    216              logpi = 1.14472988584940017414;
    217              ls2pi = 0.91893853320467274178;
    218              if( x<-34.0 )
   \   00000024   0800A0E1           MOV      R0,R8
   \   00000028   C034A0E3           MOV      R3,#-1073741824
   \   0000002C   413883E3           ORR      R3,R3,#0x410000
   \   00000030   ........           _BLF     __dLess,??__dLess??rA
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   4D00000A           BEQ      ??lngamma_1
    219              {
    220                  q = -x;
   \   0000003C   08A0A0E1           MOV      R10,R8
   \   00000040   80B429E2           EOR      R11,R9,#0x80000000
    221                  w = lngamma(q, tmp);
   \   00000044   0D20A0E1           MOV      R2,SP
   \   00000048   0A00A0E1           MOV      R0,R10
   \   0000004C   0B10A0E1           MOV      R1,R11
   \   00000050   EAFFFFEB           BL       ??lngamma
   \   00000054   0080A0E1           MOV      R8,R0
   \   00000058   0190A0E1           MOV      R9,R1
    222                  p = ap::ifloor(q);
   \   0000005C   0A00A0E1           MOV      R0,R10
   \   00000060   0B10A0E1           MOV      R1,R11
   \   00000064   ........           _BLF     floor,??floor??rA
   \   00000068   ........           _BLF     __doubleToLong,??__doubleToLong??rA
   \   0000006C   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000070   0040A0E1           MOV      R4,R0
   \   00000074   0150A0E1           MOV      R5,R1
    223                  i = ap::round(p);
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   C015A0E3           MOV      R1,#+805306368
   \   00000080   FE1681E3           ORR      R1,R1,#0xFE00000
   \   00000084   0420A0E1           MOV      R2,R4
   \   00000088   0530A0E1           MOV      R3,R5
   \   0000008C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000090   ........           _BLF     floor,??floor??rA
   \   00000094   ........           _BLF     __doubleToLong,??__doubleToLong??rA
    224                  if( i%2==0 )
    225                  {
    226                      sgngam = -1;
    227                  }
    228                  else
    229                  {
    230                      sgngam = 1;
   \   00000098   08209DE5           LDR      R2,[SP, #+8]
   \   0000009C   A01F80E0           ADD      R1,R0,R0, LSR #+31
   \   000000A0   C110A0E1           ASR      R1,R1,#+1
   \   000000A4   810050E0           SUBS     R0,R0,R1, LSL #+1
   \   000000A8   0000A0E3           MOV      R0,#+0
   \   000000AC   B014A003           MOVEQ    R1,#-1342177280
   \   000000B0   C015A013           MOVNE    R1,#+805306368
   \   000000B4   FF1681E3           ORR      R1,R1,#0xFF00000
   \   000000B8   030082E8           STM      R2,{R0,R1}
    231                  }
    232                  z = q-p;
   \   000000BC   0420A0E1           MOV      R2,R4
   \   000000C0   0530A0E1           MOV      R3,R5
   \   000000C4   0A00A0E1           MOV      R0,R10
   \   000000C8   0B10A0E1           MOV      R1,R11
   \   000000CC   ........           _BLF     __dSub,??__dSub??rA
   \   000000D0   0060A0E1           MOV      R6,R0
   \   000000D4   0170A0E1           MOV      R7,R1
    233                  if( z>0.5 )
   \   000000D8   0120A0E3           MOV      R2,#+1
   \   000000DC   C035A0E3           MOV      R3,#+805306368
   \   000000E0   FE3683E3           ORR      R3,R3,#0xFE00000
   \   000000E4   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   0A00000A           BEQ      ??lngamma_2
    234                  {
    235                      p = p+1;
    236                      z = p-q;
   \   000000F0   0000A0E3           MOV      R0,#+0
   \   000000F4   C015A0E3           MOV      R1,#+805306368
   \   000000F8   FF1681E3           ORR      R1,R1,#0xFF00000
   \   000000FC   0420A0E1           MOV      R2,R4
   \   00000100   0530A0E1           MOV      R3,R5
   \   00000104   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000108   0A20A0E1           MOV      R2,R10
   \   0000010C   0B30A0E1           MOV      R3,R11
   \   00000110   ........           _BLF     __dSub,??__dSub??rA
   \   00000114   0060A0E1           MOV      R6,R0
   \   00000118   0170A0E1           MOV      R7,R1
    237                  }
    238                  z = q*sin(ap::pi()*z);
   \                     ??lngamma_2:
   \   0000011C   ........           LDR      R0,??DataTable6  ;; 0x54442d18
   \   00000120   ........           LDR      R1,??DataTable7  ;; 0x400921fb
   \   00000124   0620A0E1           MOV      R2,R6
   \   00000128   0730A0E1           MOV      R3,R7
   \   0000012C   ........           _BLF     __dMul,??__dMul??rA
   \   00000130   0020A0E3           MOV      R2,#+0
   \   00000134   ........           _BLF     _Sin,??_Sin??rA
   \   00000138   0A20A0E1           MOV      R2,R10
   \   0000013C   0B30A0E1           MOV      R3,R11
   \   00000140   ........           _BLF     __dMul,??__dMul??rA
    239                  result = logpi-log(z)-w;
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   ........           _BLF     _Log,??_Log??rA
   \   0000014C   0020A0E1           MOV      R2,R0
   \   00000150   CC049FE5           LDR      R0,??lngamma_3   ;; 0x48e7a1bd
   \   00000154   0130A0E1           MOV      R3,R1
   \   00000158   C8149FE5           LDR      R1,??lngamma_3+0x4  ;; 0x3ff250d0
   \   0000015C   ........           _BLF     __dSub,??__dSub??rA
   \   00000160   0820A0E1           MOV      R2,R8
   \   00000164   0930A0E1           MOV      R3,R9
   \   00000168   ........           _BLF     __dSub,??__dSub??rA
    240                  return result;
   \   0000016C   0CD08DE2           ADD      SP,SP,#+12
   \   00000170   F08FBDE8           POP      {R4-R11,PC}      ;; return
    241              }
    242              if( x<13 )
   \                     ??lngamma_1:
   \   00000174   0800A0E1           MOV      R0,R8
   \   00000178   0910A0E1           MOV      R1,R9
   \   0000017C   0020A0E3           MOV      R2,#+0
   \   00000180   4034A0E3           MOV      R3,#+1073741824
   \   00000184   A83983E3           ORR      R3,R3,#0x2A0000
   \   00000188   ........           _BLF     __dLess,??__dLess??rA
   \   0000018C   000050E3           CMP      R0,#+0
   \   00000190   BE00000A           BEQ      ??lngamma_4
    243              {
    244                  z = 1;
   \   00000194   0060A0E3           MOV      R6,#+0
   \   00000198   C075A0E3           MOV      R7,#+805306368
   \   0000019C   FF7687E3           ORR      R7,R7,#0xFF00000
    245                  p = 0;
   \   000001A0   0040A0E3           MOV      R4,#+0
   \   000001A4   0450A0E1           MOV      R5,R4
    246                  u = x;
   \   000001A8   08A0A0E1           MOV      R10,R8
   \   000001AC   09B0A0E1           MOV      R11,R9
   \   000001B0   0A00A0E1           MOV      R0,R10
   \   000001B4   0B10A0E1           MOV      R1,R11
   \   000001B8   0420A0E1           MOV      R2,R4
   \   000001BC   603987E2           ADD      R3,R7,#+1572864
   \   000001C0   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   1D00000A           BEQ      ??lngamma_5
    247                  while(u>=3)
    248                  {
    249                      p = p-1;
   \                     ??lngamma_6:
   \   000001CC   0000A0E3           MOV      R0,#+0
   \   000001D0   B014A0E3           MOV      R1,#-1342177280
   \   000001D4   FF1681E3           ORR      R1,R1,#0xFF00000
   \   000001D8   0420A0E1           MOV      R2,R4
   \   000001DC   0530A0E1           MOV      R3,R5
   \   000001E0   ........           _BLF     __dAdd,??__dAdd??rA
   \   000001E4   0040A0E1           MOV      R4,R0
   \   000001E8   0150A0E1           MOV      R5,R1
    250                      u = x+p;
   \   000001EC   0420A0E1           MOV      R2,R4
   \   000001F0   0530A0E1           MOV      R3,R5
   \   000001F4   0800A0E1           MOV      R0,R8
   \   000001F8   0910A0E1           MOV      R1,R9
   \   000001FC   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000200   00A0A0E1           MOV      R10,R0
   \   00000204   01B0A0E1           MOV      R11,R1
    251                      z = z*u;
   \   00000208   0A20A0E1           MOV      R2,R10
   \   0000020C   0B30A0E1           MOV      R3,R11
   \   00000210   0600A0E1           MOV      R0,R6
   \   00000214   0710A0E1           MOV      R1,R7
   \   00000218   ........           _BLF     __dMul,??__dMul??rA
   \   0000021C   0060A0E1           MOV      R6,R0
   \   00000220   0170A0E1           MOV      R7,R1
    252                  }
   \   00000224   0A00A0E1           MOV      R0,R10
   \   00000228   0B10A0E1           MOV      R1,R11
   \   0000022C   0020A0E3           MOV      R2,#+0
   \   00000230   4034A0E3           MOV      R3,#+1073741824
   \   00000234   803A83E3           ORR      R3,R3,#0x80000
   \   00000238   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   0000023C   000050E3           CMP      R0,#+0
   \   00000240   E1FFFF1A           BNE      ??lngamma_6
    253                  while(u<2)
   \                     ??lngamma_5:
   \   00000244   0A00A0E1           MOV      R0,R10
   \   00000248   0B10A0E1           MOV      R1,R11
   \   0000024C   0020A0E3           MOV      R2,#+0
   \   00000250   4034A0E3           MOV      R3,#+1073741824
   \   00000254   ........           _BLF     __dLess,??__dLess??rA
   \   00000258   000050E3           CMP      R0,#+0
   \   0000025C   0600A0E1           MOV      R0,R6
   \   00000260   0710A0E1           MOV      R1,R7
   \   00000264   1400000A           BEQ      ??lngamma_7
    254                  {
    255                      z = z/u;
   \   00000268   0A20A0E1           MOV      R2,R10
   \   0000026C   0B30A0E1           MOV      R3,R11
   \   00000270   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000274   0060A0E1           MOV      R6,R0
   \   00000278   0170A0E1           MOV      R7,R1
    256                      p = p+1;
   \   0000027C   0000A0E3           MOV      R0,#+0
   \   00000280   C015A0E3           MOV      R1,#+805306368
   \   00000284   FF1681E3           ORR      R1,R1,#0xFF00000
   \   00000288   0420A0E1           MOV      R2,R4
   \   0000028C   0530A0E1           MOV      R3,R5
   \   00000290   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000294   0040A0E1           MOV      R4,R0
   \   00000298   0150A0E1           MOV      R5,R1
    257                      u = x+p;
   \   0000029C   0420A0E1           MOV      R2,R4
   \   000002A0   0530A0E1           MOV      R3,R5
   \   000002A4   0800A0E1           MOV      R0,R8
   \   000002A8   0910A0E1           MOV      R1,R9
   \   000002AC   ........           _BLF     __dAdd,??__dAdd??rA
   \   000002B0   00A0A0E1           MOV      R10,R0
   \   000002B4   01B0A0E1           MOV      R11,R1
   \   000002B8   E1FFFFEA           B        ??lngamma_5
    258                  }
    259                  if( z<0 )
   \                     ??lngamma_7:
   \   000002BC   0020A0E3           MOV      R2,#+0
   \   000002C0   0030A0E3           MOV      R3,#+0
   \   000002C4   ........           _BLF     __dLess,??__dLess??rA
   \   000002C8   000050E3           CMP      R0,#+0
   \   000002CC   0500000A           BEQ      ??lngamma_8
    260                  {
    261                      sgngam = -1;
   \   000002D0   08209DE5           LDR      R2,[SP, #+8]
   \   000002D4   0000A0E3           MOV      R0,#+0
   \   000002D8   B014A0E3           MOV      R1,#-1342177280
   \   000002DC   FF1681E3           ORR      R1,R1,#0xFF00000
   \   000002E0   030082E8           STM      R2,{R0,R1}
    262                      z = -z;
   \   000002E4   807427E2           EOR      R7,R7,#0x80000000
    263                  }
    264                  else
    265                  {
    266                      sgngam = 1;
    267                  }
    268                  if( u==2 )
   \                     ??lngamma_8:
   \   000002E8   4014A0E3           MOV      R1,#+1073741824
   \   000002EC   0A20A0E1           MOV      R2,R10
   \   000002F0   0B30A0E1           MOV      R3,R11
   \   000002F4   ........           _BLF     __dEqual,??__dEqual??rA
   \   000002F8   000050E3           CMP      R0,#+0
   \   000002FC   0400000A           BEQ      ??lngamma_9
    269                  {
    270                      result = log(z);
   \   00000300   0020A0E3           MOV      R2,#+0
   \   00000304   0600A0E1           MOV      R0,R6
   \   00000308   0710A0E1           MOV      R1,R7
   \   0000030C   ........           _BLF     _Log,??_Log??rA
    271                      return result;
   \   00000310   5C0000EA           B        ??lngamma_10
    272                  }
    273                  p = p-2;
    274                  x = x+p;
   \                     ??lngamma_9:
   \   00000314   C014A0E3           MOV      R1,#-1073741824
   \   00000318   0420A0E1           MOV      R2,R4
   \   0000031C   0530A0E1           MOV      R3,R5
   \   00000320   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000324   0820A0E1           MOV      R2,R8
   \   00000328   0930A0E1           MOV      R3,R9
   \   0000032C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000330   0080A0E1           MOV      R8,R0
    275                  b = -1378.25152569120859100;
    276                  b = -38801.6315134637840924+x*b;
    277                  b = -331612.992738871184744+x*b;
    278                  b = -1162370.97492762307383+x*b;
    279                  b = -1721737.00820839662146+x*b;
    280                  b = -853555.664245765465627+x*b;
    281                  c = 1;
    282                  c = -351.815701436523470549+x*c;
    283                  c = -17064.2106651881159223+x*c;
    284                  c = -220528.590553854454839+x*c;
    285                  c = -1139334.44367982507207+x*c;
    286                  c = -2532523.07177582951285+x*c;
    287                  c = -2018891.41433532773231+x*c;
    288                  p = x*b/c;
    289                  result = log(z)+p;
   \   00000334   F0029FE5           LDR      R0,??lngamma_3+0x8  ;; 0x1cf312b2
   \   00000338   0190A0E1           MOV      R9,R1
   \   0000033C   EC129FE5           LDR      R1,??lngamma_3+0xC  ;; 0xffffffffc075fd0d
   \   00000340   0820A0E1           MOV      R2,R8
   \   00000344   0930A0E1           MOV      R3,R9
   \   00000348   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000034C   0820A0E1           MOV      R2,R8
   \   00000350   0930A0E1           MOV      R3,R9
   \   00000354   ........           _BLF     __dMul,??__dMul??rA
   \   00000358   D4229FE5           LDR      R2,??lngamma_3+0x10  ;; 0x7b89d757
   \   0000035C   D4329FE5           LDR      R3,??lngamma_3+0x14  ;; 0xffffffffc0d0aa0d
   \   00000360   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000364   0820A0E1           MOV      R2,R8
   \   00000368   0930A0E1           MOV      R3,R9
   \   0000036C   ........           _BLF     __dMul,??__dMul??rA
   \   00000370   C4229FE5           LDR      R2,??lngamma_3+0x18  ;; 0xffffffffb9744c9b
   \   00000374   C4329FE5           LDR      R3,??lngamma_3+0x1C  ;; 0xffffffffc10aeb84
   \   00000378   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000037C   0820A0E1           MOV      R2,R8
   \   00000380   0930A0E1           MOV      R3,R9
   \   00000384   ........           _BLF     __dMul,??__dMul??rA
   \   00000388   B4229FE5           LDR      R2,??lngamma_3+0x20  ;; 0x71950043
   \   0000038C   B4329FE5           LDR      R3,??lngamma_3+0x24  ;; 0xffffffffc1316286
   \   00000390   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000394   0820A0E1           MOV      R2,R8
   \   00000398   0930A0E1           MOV      R3,R9
   \   0000039C   ........           _BLF     __dMul,??__dMul??rA
   \   000003A0   A4229FE5           LDR      R2,??lngamma_3+0x28  ;; 0xffffffff892ff34c
   \   000003A4   A4329FE5           LDR      R3,??lngamma_3+0x2C  ;; 0xffffffffc1435255
   \   000003A8   ........           _BLF     __dAdd,??__dAdd??rA
   \   000003AC   0820A0E1           MOV      R2,R8
   \   000003B0   0930A0E1           MOV      R3,R9
   \   000003B4   ........           _BLF     __dMul,??__dMul??rA
   \   000003B8   94229FE5           LDR      R2,??lngamma_3+0x30  ;; 0x6a11e14a
   \   000003BC   94329FE5           LDR      R3,??lngamma_3+0x34  ;; 0xffffffffc13ece4b
   \   000003C0   ........           _BLF     __dAdd,??__dAdd??rA
   \   000003C4   0040A0E1           MOV      R4,R0
   \   000003C8   8C029FE5           LDR      R0,??lngamma_3+0x38  ;; 0xffffffff8ff36761
   \   000003CC   0150A0E1           MOV      R5,R1
   \   000003D0   88129FE5           LDR      R1,??lngamma_3+0x3C  ;; 0xffffffffc0958901
   \   000003D4   0820A0E1           MOV      R2,R8
   \   000003D8   0930A0E1           MOV      R3,R9
   \   000003DC   ........           _BLF     __dMul,??__dMul??rA
   \   000003E0   7C229FE5           LDR      R2,??lngamma_3+0x40  ;; 0x355bb93e
   \   000003E4   7C329FE5           LDR      R3,??lngamma_3+0x44  ;; 0xffffffffc0e2f234
   \   000003E8   ........           _BLF     __dAdd,??__dAdd??rA
   \   000003EC   0820A0E1           MOV      R2,R8
   \   000003F0   0930A0E1           MOV      R3,R9
   \   000003F4   ........           _BLF     __dMul,??__dMul??rA
   \   000003F8   6C229FE5           LDR      R2,??lngamma_3+0x48  ;; 0xfffffffff89089e5
   \   000003FC   6C329FE5           LDR      R3,??lngamma_3+0x4C  ;; 0xffffffffc1143d73
   \   00000400   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000404   0820A0E1           MOV      R2,R8
   \   00000408   0930A0E1           MOV      R3,R9
   \   0000040C   ........           _BLF     __dMul,??__dMul??rA
   \   00000410   5C229FE5           LDR      R2,??lngamma_3+0x50  ;; 0xfffffffff994db51
   \   00000414   5C329FE5           LDR      R3,??lngamma_3+0x54  ;; 0xffffffffc131bc82
   \   00000418   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000041C   0820A0E1           MOV      R2,R8
   \   00000420   0930A0E1           MOV      R3,R9
   \   00000424   ........           _BLF     __dMul,??__dMul??rA
   \   00000428   4C229FE5           LDR      R2,??lngamma_3+0x58  ;; 0x219f20b
   \   0000042C   4C329FE5           LDR      R3,??lngamma_3+0x5C  ;; 0xffffffffc13a4589
   \   00000430   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000434   0820A0E1           MOV      R2,R8
   \   00000438   0930A0E1           MOV      R3,R9
   \   0000043C   ........           _BLF     __dMul,??__dMul??rA
   \   00000440   3C229FE5           LDR      R2,??lngamma_3+0x60  ;; 0x5418055e
   \   00000444   3C329FE5           LDR      R3,??lngamma_3+0x64  ;; 0xffffffffc12a0c67
   \   00000448   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000044C   0820A0E1           MOV      R2,R8
   \   00000450   0930A0E1           MOV      R3,R9
   \   00000454   ........           _BLF     __dMul,??__dMul??rA
   \   00000458   0420A0E1           MOV      R2,R4
   \   0000045C   0530A0E1           MOV      R3,R5
   \   00000460   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000464   0040A0E1           MOV      R4,R0
   \   00000468   0150A0E1           MOV      R5,R1
   \   0000046C   0020A0E3           MOV      R2,#+0
   \   00000470   0600A0E1           MOV      R0,R6
   \   00000474   0710A0E1           MOV      R1,R7
   \   00000478   ........           _BLF     _Log,??_Log??rA
   \   0000047C   0420A0E1           MOV      R2,R4
   \   00000480   0530A0E1           MOV      R3,R5
   \   00000484   ........           _BLF     __dAdd,??__dAdd??rA
    290                  return result;
   \                     ??lngamma_10:
   \   00000488   0CD08DE2           ADD      SP,SP,#+12
   \   0000048C   F08FBDE8           POP      {R4-R11,PC}
    291              }
    292              q = (x-0.5)*log(x)-x+ls2pi;
   \                     ??lngamma_4:
   \   00000490   0020A0E3           MOV      R2,#+0
   \   00000494   0800A0E1           MOV      R0,R8
   \   00000498   0910A0E1           MOV      R1,R9
   \   0000049C   ........           _BLF     _Log,??_Log??rA
   \   000004A0   0040A0E1           MOV      R4,R0
   \   000004A4   0150A0E1           MOV      R5,R1
   \   000004A8   0000A0E3           MOV      R0,#+0
   \   000004AC   B014A0E3           MOV      R1,#-1342177280
   \   000004B0   FE1681E3           ORR      R1,R1,#0xFE00000
   \   000004B4   0820A0E1           MOV      R2,R8
   \   000004B8   0930A0E1           MOV      R3,R9
   \   000004BC   ........           _BLF     __dAdd,??__dAdd??rA
   \   000004C0   0420A0E1           MOV      R2,R4
   \   000004C4   0530A0E1           MOV      R3,R5
   \   000004C8   ........           _BLF     __dMul,??__dMul??rA
   \   000004CC   0820A0E1           MOV      R2,R8
   \   000004D0   0930A0E1           MOV      R3,R9
   \   000004D4   ........           _BLF     __dSub,??__dSub??rA
   \   000004D8   AC219FE5           LDR      R2,??lngamma_3+0x68  ;; 0xffffffffc864beb5
   \   000004DC   AC319FE5           LDR      R3,??lngamma_3+0x6C  ;; 0x3fed67f1
   \   000004E0   ........           _BLF     __dAdd,??__dAdd??rA
    293              if( x>100000000 )
   \   000004E4   A8319FE5           LDR      R3,??lngamma_3+0x70  ;; 0x4197d784
   \   000004E8   00A0A0E1           MOV      R10,R0
   \   000004EC   01B0A0E1           MOV      R11,R1
   \   000004F0   0800A0E1           MOV      R0,R8
   \   000004F4   0910A0E1           MOV      R1,R9
   \   000004F8   0120A0E3           MOV      R2,#+1
   \   000004FC   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000500   000050E3           CMP      R0,#+0
   \   00000504   0200000A           BEQ      ??lngamma_11
    294              {
    295                  result = q;
    296                  return result;
   \                     ??lngamma_12:
   \   00000508   0A00A0E1           MOV      R0,R10
   \   0000050C   0B10A0E1           MOV      R1,R11
   \   00000510   DCFFFFEA           B        ??lngamma_10
    297              }
    298              p = 1/(x*x);
   \                     ??lngamma_11:
   \   00000514   0820A0E1           MOV      R2,R8
   \   00000518   0930A0E1           MOV      R3,R9
   \   0000051C   0800A0E1           MOV      R0,R8
   \   00000520   0910A0E1           MOV      R1,R9
   \   00000524   ........           _BLF     __dMul,??__dMul??rA
   \   00000528   0020A0E1           MOV      R2,R0
   \   0000052C   0130A0E1           MOV      R3,R1
   \   00000530   0000A0E3           MOV      R0,#+0
   \   00000534   C015A0E3           MOV      R1,#+805306368
   \   00000538   FF1681E3           ORR      R1,R1,#0xFF00000
   \   0000053C   ........           _BLF     __dDiv,??__dDiv??rA
    299              if( x>=1000.0 )
   \   00000540   50319FE5           LDR      R3,??lngamma_3+0x74  ;; 0x408f4000
   \   00000544   0040A0E1           MOV      R4,R0
   \   00000548   0150A0E1           MOV      R5,R1
   \   0000054C   0800A0E1           MOV      R0,R8
   \   00000550   0910A0E1           MOV      R1,R9
   \   00000554   0020A0E3           MOV      R2,#+0
   \   00000558   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   0000055C   000050E3           CMP      R0,#+0
   \   00000560   1600000A           BEQ      ??lngamma_13
    300              {
    301                  q = q+((7.9365079365079365079365*0.0001*p-2.7777777777777777777778*0.001)*p+0.0833333333333333333333)/x;
   \   00000564   30019FE5           LDR      R0,??lngamma_3+0x78  ;; 0x1a01a01b
   \   00000568   30119FE5           LDR      R1,??lngamma_3+0x7C  ;; 0x3f4a01a0
   \   0000056C   0420A0E1           MOV      R2,R4
   \   00000570   0530A0E1           MOV      R3,R5
   \   00000574   ........           _BLF     __dMul,??__dMul??rA
   \   00000578   24219FE5           LDR      R2,??lngamma_3+0x80  ;; 0x16c16c17
   \   0000057C   24319FE5           LDR      R3,??lngamma_3+0x84  ;; 0xffffffffbf66c16c
   \   00000580   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000584   0420A0E1           MOV      R2,R4
   \   00000588   0530A0E1           MOV      R3,R5
   \   0000058C   ........           _BLF     __dMul,??__dMul??rA
   \   00000590   14219FE5           LDR      R2,??lngamma_3+0x88  ;; 0x55555555
   \                     ??lngamma_14:
   \   00000594   ........           LDR      R3,??DataTable9  ;; 0x3fb55555
   \   00000598   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000059C   0820A0E1           MOV      R2,R8
   \   000005A0   0930A0E1           MOV      R3,R9
   \   000005A4   ........           _BLF     __dDiv,??__dDiv??rA
   \   000005A8   0A20A0E1           MOV      R2,R10
   \   000005AC   0B30A0E1           MOV      R3,R11
   \   000005B0   ........           _BLF     __dAdd,??__dAdd??rA
   \   000005B4   00A0A0E1           MOV      R10,R0
   \   000005B8   01B0A0E1           MOV      R11,R1
   \   000005BC   D1FFFFEA           B        ??lngamma_12
    302              }
    303              else
    304              {
    305                  a = 8.11614167470508450300*0.0001;
    306                  a = -5.95061904284301438324*0.0001+p*a;
    307                  a = 7.93650340457716943945*0.0001+p*a;
    308                  a = -2.77777777730099687205*0.001+p*a;
    309                  a = 8.33333333333331927722*0.01+p*a;
    310                  q = q+a/x;
   \                     ??lngamma_13:
   \   000005C0   E8009FE5           LDR      R0,??lngamma_3+0x8C  ;; 0x27336660
   \   000005C4   E8109FE5           LDR      R1,??lngamma_3+0x90  ;; 0x3f4a9850
   \   000005C8   0420A0E1           MOV      R2,R4
   \   000005CC   0530A0E1           MOV      R3,R5
   \   000005D0   ........           _BLF     __dMul,??__dMul??rA
   \   000005D4   DC209FE5           LDR      R2,??lngamma_3+0x94  ;; 0xffffffffb580e943
   \   000005D8   DC309FE5           LDR      R3,??lngamma_3+0x98  ;; 0xffffffffbf437fbd
   \   000005DC   ........           _BLF     __dAdd,??__dAdd??rA
   \   000005E0   0420A0E1           MOV      R2,R4
   \   000005E4   0530A0E1           MOV      R3,R5
   \   000005E8   ........           _BLF     __dMul,??__dMul??rA
   \   000005EC   CC209FE5           LDR      R2,??lngamma_3+0x9C  ;; 0x20dc5ebb
   \   000005F0   CC309FE5           LDR      R3,??lngamma_3+0xA0  ;; 0x3f4a019f
   \   000005F4   ........           _BLF     __dAdd,??__dAdd??rA
   \   000005F8   0420A0E1           MOV      R2,R4
   \   000005FC   0530A0E1           MOV      R3,R5
   \   00000600   ........           _BLF     __dMul,??__dMul??rA
   \   00000604   BC209FE5           LDR      R2,??lngamma_3+0xA4  ;; 0x16b0a5a1
   \   00000608   98309FE5           LDR      R3,??lngamma_3+0x84  ;; 0xffffffffbf66c16c
   \   0000060C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000610   0420A0E1           MOV      R2,R4
   \   00000614   0530A0E1           MOV      R3,R5
   \   00000618   ........           _BLF     __dMul,??__dMul??rA
   \   0000061C   A8209FE5           LDR      R2,??lngamma_3+0xA8  ;; 0x5555554c
   \   00000620   DBFFFFEA           B        ??lngamma_14
   \                     ??lngamma_3:
   \   00000624   BDA1E748           DC32     0x48e7a1bd
   \   00000628   D050F23F           DC32     0x3ff250d0
   \   0000062C   B212F31C           DC32     0x1cf312b2
   \   00000630   0DFD75C0           DC32     0xffffffffc075fd0d
   \   00000634   57D7897B           DC32     0x7b89d757
   \   00000638   0DAAD0C0           DC32     0xffffffffc0d0aa0d
   \   0000063C   9B4C74B9           DC32     0xffffffffb9744c9b
   \   00000640   84EB0AC1           DC32     0xffffffffc10aeb84
   \   00000644   43009571           DC32     0x71950043
   \   00000648   866231C1           DC32     0xffffffffc1316286
   \   0000064C   4CF32F89           DC32     0xffffffff892ff34c
   \   00000650   555243C1           DC32     0xffffffffc1435255
   \   00000654   4AE1116A           DC32     0x6a11e14a
   \   00000658   4BCE3EC1           DC32     0xffffffffc13ece4b
   \   0000065C   6167F38F           DC32     0xffffffff8ff36761
   \   00000660   018995C0           DC32     0xffffffffc0958901
   \   00000664   3EB95B35           DC32     0x355bb93e
   \   00000668   34F2E2C0           DC32     0xffffffffc0e2f234
   \   0000066C   E58990F8           DC32     0xfffffffff89089e5
   \   00000670   733D14C1           DC32     0xffffffffc1143d73
   \   00000674   51DB94F9           DC32     0xfffffffff994db51
   \   00000678   82BC31C1           DC32     0xffffffffc131bc82
   \   0000067C   0BF21902           DC32     0x219f20b
   \   00000680   89453AC1           DC32     0xffffffffc13a4589
   \   00000684   5E051854           DC32     0x5418055e
   \   00000688   670C2AC1           DC32     0xffffffffc12a0c67
   \   0000068C   B5BE64C8           DC32     0xffffffffc864beb5
   \   00000690   F167ED3F           DC32     0x3fed67f1
   \   00000694   84D79741           DC32     0x4197d784
   \   00000698   00408F40           DC32     0x408f4000
   \   0000069C   1BA0011A           DC32     0x1a01a01b
   \   000006A0   A0014A3F           DC32     0x3f4a01a0
   \   000006A4   176CC116           DC32     0x16c16c17
   \   000006A8   6CC166BF           DC32     0xffffffffbf66c16c
   \   000006AC   55555555           DC32     0x55555555
   \   000006B0   60663327           DC32     0x27336660
   \   000006B4   50984A3F           DC32     0x3f4a9850
   \   000006B8   43E980B5           DC32     0xffffffffb580e943
   \   000006BC   BD7F43BF           DC32     0xffffffffbf437fbd
   \   000006C0   BB5EDC20           DC32     0x20dc5ebb
   \   000006C4   9F014A3F           DC32     0x3f4a019f
   \   000006C8   A1A5B016           DC32     0x16b0a5a1
   \   000006CC   4C555555           DC32     0x5555554c
    311              }
    312              result = q;
    313              return result;
    314          }
    315          
    316          
    317          /*************************************************************************
    318          Формула Стирлинга
    319          Для внутреннего использования
    320          
    321          Cephes Math Library Release 2.8:  June, 2000
    322          Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
    323          *************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    324          double gammastirf(double x)
    325          {
   \                     ??gammastirf:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    326              double result;
    327              double y;
    328              double w;
    329              double v;
    330              double stir;
    331          
    332              w = 1/x;
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   C015A0E3           MOV      R1,#+805306368
   \   00000014   FF1681E3           ORR      R1,R1,#0xFF00000
   \   00000018   0420A0E1           MOV      R2,R4
   \   0000001C   0530A0E1           MOV      R3,R5
   \   00000020   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000024   0080A0E1           MOV      R8,R0
   \   00000028   0190A0E1           MOV      R9,R1
    333              stir = 7.87311395793093628397E-4;
    334              stir = -2.29549961613378126380E-4+w*stir;
    335              stir = -2.68132617805781232825E-3+w*stir;
    336              stir = 3.47222221605458667310E-3+w*stir;
    337              stir = 8.33333333333482257126E-2+w*stir;
    338              w = 1+w*stir;
    339              y = exp(x);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   ........           _BLF     exp,??exp??rA
    340              if( x>143.01608 )
   \   00000038   68219FE5           LDR      R2,??gammastirf_1  ;; 0xffffffffba3443d5
   \   0000003C   68319FE5           LDR      R3,??gammastirf_1+0x4  ;; 0x4061e083
   \   00000040   0060A0E1           MOV      R6,R0
   \   00000044   0170A0E1           MOV      R7,R1
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   0510A0E1           MOV      R1,R5
   \   00000050   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   1600000A           BEQ      ??gammastirf_2
    341              {
    342                  v = pow(x, 0.5*x-0.25);
   \   00000060   C015A0E3           MOV      R1,#+805306368
   \   00000064   FE1681E3           ORR      R1,R1,#0xFE00000
   \   00000068   0420A0E1           MOV      R2,R4
   \   0000006C   0530A0E1           MOV      R3,R5
   \   00000070   ........           _BLF     __dMul,??__dMul??rA
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   B034A0E3           MOV      R3,#-1342177280
   \   0000007C   FD3683E3           ORR      R3,R3,#0xFD00000
   \   00000080   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000084   0020A0E1           MOV      R2,R0
   \   00000088   0130A0E1           MOV      R3,R1
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   0510A0E1           MOV      R1,R5
   \   00000094   ........           _BLF     pow,??pow??rA
   \   00000098   0040A0E1           MOV      R4,R0
   \   0000009C   0150A0E1           MOV      R5,R1
    343                  y = v*(v/y);
   \   000000A0   0620A0E1           MOV      R2,R6
   \   000000A4   0730A0E1           MOV      R3,R7
   \   000000A8   ........           _BLF     __dDiv,??__dDiv??rA
   \   000000AC   0420A0E1           MOV      R2,R4
   \   000000B0   0530A0E1           MOV      R3,R5
   \   000000B4   ........           _BLF     __dMul,??__dMul??rA
   \   000000B8   0C0000EA           B        ??gammastirf_3
    344              }
    345              else
    346              {
    347                  y = pow(x, x-0.5)/y;
   \                     ??gammastirf_2:
   \   000000BC   B014A0E3           MOV      R1,#-1342177280
   \   000000C0   FE1681E3           ORR      R1,R1,#0xFE00000
   \   000000C4   0420A0E1           MOV      R2,R4
   \   000000C8   0530A0E1           MOV      R3,R5
   \   000000CC   ........           _BLF     __dAdd,??__dAdd??rA
   \   000000D0   0020A0E1           MOV      R2,R0
   \   000000D4   0130A0E1           MOV      R3,R1
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   0510A0E1           MOV      R1,R5
   \   000000E0   ........           _BLF     pow,??pow??rA
   \   000000E4   0620A0E1           MOV      R2,R6
   \   000000E8   0730A0E1           MOV      R3,R7
   \   000000EC   ........           _BLF     __dDiv,??__dDiv??rA
   \                     ??gammastirf_3:
   \   000000F0   0040A0E1           MOV      R4,R0
    348              }
    349              result = 2.50662827463100050242*y*w;
    350              return result;
   \   000000F4   B4009FE5           LDR      R0,??gammastirf_1+0x8  ;; 0x592d7293
   \   000000F8   0150A0E1           MOV      R5,R1
   \   000000FC   B0109FE5           LDR      R1,??gammastirf_1+0xC  ;; 0x3f49cc72
   \   00000100   0820A0E1           MOV      R2,R8
   \   00000104   0930A0E1           MOV      R3,R9
   \   00000108   ........           _BLF     __dMul,??__dMul??rA
   \   0000010C   A4209FE5           LDR      R2,??gammastirf_1+0x10  ;; 0x27e61d7c
   \   00000110   A4309FE5           LDR      R3,??gammastirf_1+0x14  ;; 0xffffffffbf2e166b
   \   00000114   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000118   0820A0E1           MOV      R2,R8
   \   0000011C   0930A0E1           MOV      R3,R9
   \   00000120   ........           _BLF     __dMul,??__dMul??rA
   \   00000124   94209FE5           LDR      R2,??gammastirf_1+0x18  ;; 0x7d44fd7
   \   00000128   94309FE5           LDR      R3,??gammastirf_1+0x1C  ;; 0xffffffffbf65f726
   \   0000012C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000130   0820A0E1           MOV      R2,R8
   \   00000134   0930A0E1           MOV      R3,R9
   \   00000138   ........           _BLF     __dMul,??__dMul??rA
   \   0000013C   84209FE5           LDR      R2,??gammastirf_1+0x20  ;; 0x1b98c5fd
   \   00000140   84309FE5           LDR      R3,??gammastirf_1+0x24  ;; 0x3f6c71c7
   \   00000144   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000148   0820A0E1           MOV      R2,R8
   \   0000014C   0930A0E1           MOV      R3,R9
   \   00000150   ........           _BLF     __dMul,??__dMul??rA
   \   00000154   ........           LDR      R3,??DataTable9  ;; 0x3fb55555
   \   00000158   70209FE5           LDR      R2,??gammastirf_1+0x28  ;; 0x55555986
   \   0000015C   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000160   0820A0E1           MOV      R2,R8
   \   00000164   0930A0E1           MOV      R3,R9
   \   00000168   ........           _BLF     __dMul,??__dMul??rA
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   C035A0E3           MOV      R3,#+805306368
   \   00000174   FF3683E3           ORR      R3,R3,#0xFF00000
   \   00000178   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000017C   0060A0E1           MOV      R6,R0
   \   00000180   4C009FE5           LDR      R0,??gammastirf_1+0x2C  ;; 0x1ff62706
   \   00000184   0170A0E1           MOV      R7,R1
   \   00000188   48109FE5           LDR      R1,??gammastirf_1+0x30  ;; 0x40040d93
   \   0000018C   0420A0E1           MOV      R2,R4
   \   00000190   0530A0E1           MOV      R3,R5
   \   00000194   ........           _BLF     __dMul,??__dMul??rA
   \   00000198   0620A0E1           MOV      R2,R6
   \   0000019C   0730A0E1           MOV      R3,R7
   \   000001A0   ........           _BLF     __dMul,??__dMul??rA
   \   000001A4   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??gammastirf_1:
   \   000001A8   D54334BA           DC32     0xffffffffba3443d5
   \   000001AC   83E06140           DC32     0x4061e083
   \   000001B0   93722D59           DC32     0x592d7293
   \   000001B4   72CC493F           DC32     0x3f49cc72
   \   000001B8   7C1DE627           DC32     0x27e61d7c
   \   000001BC   6B162EBF           DC32     0xffffffffbf2e166b
   \   000001C0   D74FD407           DC32     0x7d44fd7
   \   000001C4   26F765BF           DC32     0xffffffffbf65f726
   \   000001C8   FDC5981B           DC32     0x1b98c5fd
   \   000001CC   C7716C3F           DC32     0x3f6c71c7
   \   000001D0   86595555           DC32     0x55555986
   \   000001D4   0627F61F           DC32     0x1ff62706
   \   000001D8   930D0440           DC32     0x40040d93
    351          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   182D4454           DC32     0x54442d18

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   FB210940           DC32     0x400921fb

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   5555B53F           DC32     0x3fb55555
    352          
    353          
    354          

   Maximum stack usage in bytes:

     Function                  CSTACK
     --------                  ------
     ap::ifloor(double)            4
     ap::pi()                      0
     ap::round(double)             4
     gamma(double)                36
     gammastirf(double)           28
     lngamma(double, double &)    48


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     ap::pi()                    12
     ap::round(double)           32
     ap::ifloor(double)          16
     gamma(double)             1364
     lngamma(double, double &) 1744
     gammastirf(double)         476
     ??DataTable6                 4
     ??DataTable7                 4
     ??DataTable9                 4
      Others                    192

 
 3 848 bytes in segment CODE
 
 3 656 bytes of CODE memory (+ 192 bytes shared)

Errors: none
Warnings: none
