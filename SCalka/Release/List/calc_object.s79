//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  23:05:06 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\SCalka\calc_o /
//                       bject.c                                             /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\SCalka\calc_o /
//                       bject.c -D NO_AP_ASSERT -D NDEBUG -D OLDFUNCTIONS   /
//                       -lCN Z:\home\perk11\www\perk11.info\svn\SE\SCalka\R /
//                       elease\List\ -la Z:\home\perk11\www\perk11.info\svn /
//                       \SE\SCalka\Release\List\ -o                         /
//                       Z:\home\perk11\www\perk11.info\svn\SE\SCalka\Releas /
//                       e\Obj\ -s9 --no_unroll --no_code_motion --cpu_mode  /
//                       arm --endian little --cpu ARM926EJ-S --stack_align  /
//                       4 --interwork -e --fpu None --eec++ --dlib_config   /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\SCalka\Releas /
//                       e\List\calc_object.s79                              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME calc_object

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ??div32_a

        PUBLIC ??CalcGuiOnClose
        FUNCTION ??CalcGuiOnClose,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??CalcGuiOnClose??rT
        PUBLIC ??CalcGuiOnCreate
        FUNCTION ??CalcGuiOnCreate,0603H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??CalcGuiOnCreate??rT
        PUBLIC ??CalcGuiOnKey
        FUNCTION ??CalcGuiOnKey,0603H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??CalcGuiOnKey??rT
        PUBLIC ??CalcGuiOnRedraw
        FUNCTION ??CalcGuiOnRedraw,0603H
        LOCFRAME CSTACK, 168, STACK
        MULTWEAK ??CalcGuiOnRedraw??rT
        PUBLIC ??CalcGui_constr
        FUNCTION ??CalcGui_constr,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??CalcGui_constr??rT
        PUBLIC ??CalcGui_destr
        FUNCTION ??CalcGui_destr,0603H
        MULTWEAK ??CalcGui_destr??rT
        PUBLIC ??ConstructDStackStruct
        FUNCTION ??ConstructDStackStruct,0203H
        MULTWEAK ??ConstructDStackStruct??rT
        PUBLIC ??ConvertAngleToRadians
        FUNCTION ??ConvertAngleToRadians,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??ConvertAngleToRadians??rT
        PUBLIC ??ConvertRadiansToAngle
        FUNCTION ??ConvertRadiansToAngle,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??ConvertRadiansToAngle??rT
        MULTWEAK ??CreateCalcMenu??rA
        PUBLIC ??CreateCalkGUI
        FUNCTION ??CreateCalkGUI,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??CreateCalkGUI??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable11 EQU 0
??DataTable12 EQU 0
??DataTable13 EQU 0
??DataTable15 EQU 0
??DataTable16 EQU 0
??DataTable17 EQU 0
??DataTable18 EQU 0
??DataTable2 EQU 0
??DataTable21 EQU 0
??DataTable22 EQU 0
??DataTable23 EQU 0
??DataTable26 EQU 0
??DataTable28 EQU 0
??DataTable29 EQU 0
??DataTable31 EQU 0
??DataTable32 EQU 0
??DataTable33 EQU 0
??DataTable34 EQU 0
??DataTable36 EQU 0
??DataTable37 EQU 0
??DataTable38 EQU 0
??DataTable39 EQU 0
??DataTable40 EQU 0
??DataTable41 EQU 0
??DataTable42 EQU 0
??DataTable43 EQU 0
??DataTable44 EQU 0
??DataTable45 EQU 0
??DataTable46 EQU 0
??DataTable49 EQU 0
??DataTable5 EQU 0
??DataTable50 EQU 0
??DataTable51 EQU 0
??DataTable52 EQU 0
??DataTable53 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        PUBLIC ??DestructDStackStruct
        FUNCTION ??DestructDStackStruct,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??DestructDStackStruct??rT
        PUBLIC ??FacN
        FUNCTION ??FacN,0203H
        LOCFRAME CSTACK, 32, STACK
        MULTWEAK ??FacN??rT
        PUBLIC ??GetFontSizeStyle
        FUNCTION ??GetFontSizeStyle,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??GetFontSizeStyle??rT
        PUBLIC ??GetMaxCurRow
        FUNCTION ??GetMaxCurRow,0203H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??GetMaxCurRow??rT
        PUBLIC ??GetOperIndexByKey
        FUNCTION ??GetOperIndexByKey,0203H
        MULTWEAK ??GetOperIndexByKey??rT
        PUBLIC ??InitFonts
        FUNCTION ??InitFonts,0203H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??InitFonts??rT
        PUBWEAK ??IsMathFunc
        FUNCTION ??IsMathFunc,0203H
        MULTWEAK ??IsMathFunc??rA
        PUBLIC ??IsPowFunc
        FUNCTION ??IsPowFunc,0203H
        MULTWEAK ??IsPowFunc??rT
        PUBLIC ??PRIOR
        FUNCTION ??PRIOR,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??PRIOR??rT
        PUBLIC ??ParseOperation
        FUNCTION ??ParseOperation,0203H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??ParseOperation??rT
        PUBLIC ??PopDoubleStack
        FUNCTION ??PopDoubleStack,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??PopDoubleStack??rT
        PUBLIC ??PushDoubleStack
        FUNCTION ??PushDoubleStack,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??PushDoubleStack??rT
        PUBLIC ??SetCursPos
        FUNCTION ??SetCursPos,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??SetCursPos??rT
        MULTWEAK ??_Cosh??rA
        MULTWEAK ??_Log??rA
        MULTWEAK ??_Sin??rA
        MULTWEAK ??_Sinh??rA
        MULTWEAK ??__dAdd??rA
        MULTWEAK ??__dDiv??rA
        MULTWEAK ??__dEqual??rA
        MULTWEAK ??__dGreaterEqual??rA
        MULTWEAK ??__dMul??rA
        MULTWEAK ??__dNotEqual??rA
        MULTWEAK ??__dSub??rA
        MULTWEAK ??abs??rA
        MULTWEAK ??acos??rA
        PUBLIC ??acosh
        FUNCTION ??acosh,0203H
        LOCFRAME CSTACK, 32, STACK
        MULTWEAK ??acosh??rT
        MULTWEAK ??asin??rA
        PUBLIC ??asinh
        FUNCTION ??asinh,0203H
        LOCFRAME CSTACK, 32, STACK
        MULTWEAK ??asinh??rT
        MULTWEAK ??atan??rA
        PUBLIC ??athh
        FUNCTION ??athh,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??athh??rT
        PUBLIC ??calc_answer
        FUNCTION ??calc_answer,0203H
        LOCFRAME CSTACK, 596, STACK
        MULTWEAK ??calc_answer??rT
        MULTWEAK ??exp??rA
        MULTWEAK ??gamma??rA
        PUBLIC ??insert_operation
        FUNCTION ??insert_operation,0203H
        MULTWEAK ??insert_operation??rT
        MULTWEAK ??modf??rA
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        MULTWEAK ??pow??rA
        MULTWEAK ??rA??div32_a
        PUBLIC ??remove_operation
        FUNCTION ??remove_operation,0203H
        MULTWEAK ??remove_operation??rT
        MULTWEAK ??sqrt??rA
        MULTWEAK ??strtod??rA
        MULTWEAK ??tan??rA
        MULTWEAK ??tanh??rA
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC FONTH
        PUBLIC FONTID
        PUBLIC d_answer
        PUBLIC op_len
        PUBLIC op_pos
        PUBLIC op_str
        PUBLIC operation
        PUBLIC req_recalc
        PUBLIC vars
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        





_Cosh               SYMBOL "_Cosh"
_Log                SYMBOL "_Log"
_Sin                SYMBOL "_Sin"
_Sinh               SYMBOL "_Sinh"
__dAdd              SYMBOL "__dAdd"
__dDiv              SYMBOL "__dDiv"
__dEqual            SYMBOL "__dEqual"
__dGreaterEqual     SYMBOL "__dGreaterEqual"
__dMul              SYMBOL "__dMul"
__dNotEqual         SYMBOL "__dNotEqual"
__dSub              SYMBOL "__dSub"
abs                 SYMBOL "abs"
acos                SYMBOL "acos"
asin                SYMBOL "asin"
atan                SYMBOL "atan"
exp                 SYMBOL "exp"
modf                SYMBOL "modf"
pow                 SYMBOL "pow"
sqrt                SYMBOL "sqrt"
strtod              SYMBOL "strtod"
tan                 SYMBOL "tan"
tanh                SYMBOL "tanh"

??CalcGuiOnClose??rT SYMBOL "??rT", ??CalcGuiOnClose

??CalcGuiOnCreate??rT SYMBOL "??rT", ??CalcGuiOnCreate

??CalcGuiOnKey??rT  SYMBOL "??rT", ??CalcGuiOnKey

??CalcGuiOnRedraw??rT SYMBOL "??rT", ??CalcGuiOnRedraw

??CalcGui_constr??rT SYMBOL "??rT", ??CalcGui_constr

??CalcGui_destr??rT SYMBOL "??rT", ??CalcGui_destr

??ConstructDStackStruct??rT SYMBOL "??rT", ??ConstructDStackStruct

??ConvertAngleToRadians??rT SYMBOL "??rT", ??ConvertAngleToRadians

??ConvertRadiansToAngle??rT SYMBOL "??rT", ??ConvertRadiansToAngle
??CreateCalcMenu??rA SYMBOL "??rA", ??CreateCalcMenu

??CreateCalkGUI??rT SYMBOL "??rT", ??CreateCalkGUI

??DestructDStackStruct??rT SYMBOL "??rT", ??DestructDStackStruct

??FacN??rT          SYMBOL "??rT", ??FacN

??GetFontSizeStyle??rT SYMBOL "??rT", ??GetFontSizeStyle

??GetMaxCurRow??rT  SYMBOL "??rT", ??GetMaxCurRow

??GetOperIndexByKey??rT SYMBOL "??rT", ??GetOperIndexByKey

??InitFonts??rT     SYMBOL "??rT", ??InitFonts

??IsMathFunc??rA    SYMBOL "??rA", ??IsMathFunc

??IsPowFunc??rT     SYMBOL "??rT", ??IsPowFunc

??PRIOR??rT         SYMBOL "??rT", ??PRIOR

??ParseOperation??rT SYMBOL "??rT", ??ParseOperation

??PopDoubleStack??rT SYMBOL "??rT", ??PopDoubleStack

??PushDoubleStack??rT SYMBOL "??rT", ??PushDoubleStack

??SetCursPos??rT    SYMBOL "??rT", ??SetCursPos
??_Cosh??rA         SYMBOL "??rA", _Cosh
??_Log??rA          SYMBOL "??rA", _Log
??_Sin??rA          SYMBOL "??rA", _Sin
??_Sinh??rA         SYMBOL "??rA", _Sinh
??__dAdd??rA        SYMBOL "??rA", __dAdd
??__dDiv??rA        SYMBOL "??rA", __dDiv
??__dEqual??rA      SYMBOL "??rA", __dEqual
??__dGreaterEqual??rA SYMBOL "??rA", __dGreaterEqual
??__dMul??rA        SYMBOL "??rA", __dMul
??__dNotEqual??rA   SYMBOL "??rA", __dNotEqual
??__dSub??rA        SYMBOL "??rA", __dSub
??abs??rA           SYMBOL "??rA", abs
??acos??rA          SYMBOL "??rA", acos

??acosh??rT         SYMBOL "??rT", ??acosh
??asin??rA          SYMBOL "??rA", asin

??asinh??rT         SYMBOL "??rT", ??asinh
??atan??rA          SYMBOL "??rA", atan

??athh??rT          SYMBOL "??rT", ??athh

??calc_answer??rT   SYMBOL "??rT", ??calc_answer
??exp??rA           SYMBOL "??rA", exp
??gamma??rA         SYMBOL "??rA", ??gamma

??insert_operation??rT SYMBOL "??rT", ??insert_operation
??modf??rA          SYMBOL "??rA", modf
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`
??pow??rA           SYMBOL "??rA", pow

??remove_operation??rT SYMBOL "??rT", ??remove_operation
??sqrt??rA          SYMBOL "??rA", sqrt
??strtod??rA        SYMBOL "??rA", strtod
??tan??rA           SYMBOL "??rA", tan
??tanh??rA          SYMBOL "??rA", tanh

        EXTERN ??CreateCalcMenu
        FUNCTION ??CreateCalcMenu,0202H
        EXTERN ??gamma
        FUNCTION ??gamma,0202H
        EXTERN ??isScalkaBook
        FUNCTION ??isScalkaBook,0602H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN KBD_REPEAT
        EXTERN KBD_SHORT_RELEASE
        EXTERN KEY_DEL
        EXTERN KEY_DIEZ
        EXTERN KEY_DIGITAL_0
        EXTERN KEY_DOWN
        EXTERN KEY_ESC
        EXTERN KEY_LEFT
        EXTERN KEY_LEFT_SOFT
        EXTERN KEY_RIGHT
        EXTERN KEY_RIGHT_SOFT
        EXTERN KEY_STAR
        EXTERN KEY_UP
        EXTERN _Cosh
        FUNCTION _Cosh,010202H
        EXTERN _Log
        FUNCTION _Log,010202H
        EXTERN _Sin
        FUNCTION _Sin,010202H
        EXTERN _Sinh
        FUNCTION _Sinh,010202H
        EXTERN __dAdd
        FUNCTION __dAdd,0202H
        EXTERN __dDiv
        FUNCTION __dDiv,0202H
        EXTERN __dEqual
        FUNCTION __dEqual,0202H
        EXTERN __dGreaterEqual
        FUNCTION __dGreaterEqual,0202H
        EXTERN __dMul
        FUNCTION __dMul,0202H
        EXTERN __dNotEqual
        FUNCTION __dNotEqual,0202H
        EXTERN __dSub
        FUNCTION __dSub,0202H
        EXTERN abs
        FUNCTION abs,0202H
        EXTERN acos
        FUNCTION acos,010202H
        EXTERN asin
        FUNCTION asin,010202H
        EXTERN atan
        FUNCTION atan,010202H
        EXTERN calc_set
        EXTERN exp
        FUNCTION exp,010202H
        EXTERN modf
        FUNCTION modf,010202H
        EXTERN pow
        FUNCTION pow,010202H
        EXTERN sqrt
        FUNCTION sqrt,010202H
        EXTERN strtod
        FUNCTION strtod,0202H
        EXTERN tan
        FUNCTION tan,010202H
        EXTERN tanh
        FUNCTION tanh,010202H


        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "4">`:
        DATA
        DC8 "4"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ash">`:
        DATA
        DC8 "ash"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ANS">`:
        DATA
        DC8 "ANS"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "ch">`:
        DATA
        DC8 "ch"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "abs">`:
        DATA
        DC8 "abs"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "th">`:
        DATA
        DC8 "th"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ath">`:
        DATA
        DC8 "ath"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "-">`:
        DATA
        DC8 "-"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "!">`:
        DATA
        DC8 "!"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "X">`:
        DATA
        DC8 "X"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "Y">`:
        DATA
        DC8 "Y"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "1">`:
        DATA
        DC8 "1"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "2">`:
        DATA
        DC8 "2"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "3">`:
        DATA
        DC8 "3"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "%1.10lg">`:
        DATA
        DC8 "%1.10lg"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "5">`:
        DATA
        DC8 "5"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "6">`:
        DATA
        DC8 "6"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "7">`:
        DATA
        DC8 "7"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "8">`:
        DATA
        DC8 "8"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "9">`:
        DATA
        DC8 "9"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant ".">`:
        DATA
        DC8 "."

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "0">`:
        DATA
        DC8 "0"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "#">`:
        DATA
        DC8 "#"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "sin">`:
        DATA
        DC8 "sin"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "*">`:
        DATA
        DC8 "*"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "/">`:
        DATA
        DC8 "/"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "cos">`:
        DATA
        DC8 "cos"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "+">`:
        DATA
        DC8 "+"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ach">`:
        DATA
        DC8 "ach"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "tan">`:
        DATA
        DC8 "tan"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "(">`:
        DATA
        DC8 "("

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant ")">`:
        DATA
        DC8 ")"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "^2">`:
        DATA
        DC8 "^2"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "sqrt">`:
        DATA
        DC8 "sqrt"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "asin">`:
        DATA
        DC8 "asin"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "ln">`:
        DATA
        DC8 "ln"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "log">`:
        DATA
        DC8 "log"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "acos">`:
        DATA
        DC8 "acos"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "e^">`:
        DATA
        DC8 "e^"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "atan">`:
        DATA
        DC8 "atan"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "10^">`:
        DATA
        DC8 "10^"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "pi">`:
        DATA
        DC8 "pi"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "^">`:
        DATA
        DC8 "^"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "">`:
        DATA
        DC8 ""

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "sh">`:
        DATA
        DC8 "sh"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
CalcGuiName:
        DATA
        DC8 "CalcGui"

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
vars:
        DS8 200
d_answer:
        DS8 8
op_len:
        DS8 4
op_pos:
        DS8 4
req_recalc:
        DS8 4
FONTID:
        DS8 4
FONTH:
        DS8 4
operation:
        DS8 256

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
op_str:
        DS8 1024

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetFontSizeStyle??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??GetFontSizeStyle

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??GetFontSizeStyle
        ARM
??GetFontSizeStyle:
        PUSH     {R4}
        CFI R4 Frame(CFA, -4)
        CFI CFA R13+4
        LDRH     R12,[R0], #+2
        MOV      R2,#+0
        MOV      R3,#+0
        CMP      R12,#+69
        LDRHEQ   R12,[R0], #+2
        MVN      R1,R2
        CMPEQ    R12,#+95
        BNE      ??GetFontSizeStyle_1
        MOV      R12,#+10
        B        ??GetFontSizeStyle_2
??GetFontSizeStyle_3:
        LDRH     R4,[R0], #+2
        MLA      R2,R12,R2,R4
        SUB      R2,R2,#+48
??GetFontSizeStyle_2:
        LDRH     R4,[R0, #+0]
        CMP      R4,#+48
        BCC      ??GetFontSizeStyle_4
        CMP      R4,#+58
        BCC      ??GetFontSizeStyle_3
??GetFontSizeStyle_4:
        LDRH     R12,[R0], #+2
        CMP      R12,#+0
        BEQ      ??GetFontSizeStyle_5
        CMP      R12,#+82
        ORREQ    R3,R3,#0x1
        BEQ      ??GetFontSizeStyle_4
        CMP      R12,#+66
        ORREQ    R3,R3,#0x2
        BEQ      ??GetFontSizeStyle_4
        CMP      R12,#+73
        BNE      ??GetFontSizeStyle_4
        ORR      R3,R3,#0x4
        B        ??GetFontSizeStyle_4
??GetFontSizeStyle_5:
        CMP      R3,#+0
        CMPNE    R2,#+0
        ORRNE    R1,R2,R3, LSL #+16
??GetFontSizeStyle_1:
        POP      {R4}
        CFI R4 SameValue
        CFI CFA R13+0
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??InitFonts??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??InitFonts

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??InitFonts
        ARM
??InitFonts:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R0,#+0
        MOV      R7,#+100
        MOV      R8,#+0
        SWI      +600
        MOV      R6,R0
        SWI      +33468
        LDR      R4,[R0, #+0]
        SWI      +33467
        MOV      R5,R0
        LDR      R0,??InitFonts_1  ;; 0x2aaaaaab
        CMP      R4,#+1
        SMULL    R1,R2,R0,R6
        ASR      R2,R2,#+1
        ADD      R6,R2,R6, LSR #+31
        BGE      ??InitFonts_2
        POP      {R4-R9,PC}
??InitFonts_3:
        ADD      R0,R5,#+2
        BL       ??GetFontSizeStyle
        CMN      R0,#+1
        BEQ      ??InitFonts_4
        ASR      R0,R0,#+16
        CMP      R0,#+1
        BNE      ??InitFonts_4
        LDRH     R0,[R5, #+0]
        SWI      +497
        MOV      R0,#+65
        SWI      +660
        MOV      R9,R0
        SUB      R0,R9,R6
        _BLF     abs,??abs??rA
        CMP      R0,R7
        BGE      ??InitFonts_4
        LDRH     R1,[R5, #+0]
        MOV      R7,R0
        LDR      R0,??DataTable14  ;; vars
        STR      R1,[R0, #+220]
        STR      R9,[R0, #+224]
??InitFonts_4:
        ADD      R5,R5,#+22
        ADD      R8,R8,#+1
??InitFonts_2:
        CMP      R8,R4
        BLT      ??InitFonts_3
        POP      {R4-R9,PC}       ;; return
        DATA
??InitFonts_1:
        DC32     0x2aaaaaab
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetOperIndexByKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??GetOperIndexByKey

        RSEG DATA_C:CONST:SORT:NOROOT(2)
keydesc:
        DATA
        DC32 `?<Constant "1">`, `?<Constant "2">`, `?<Constant "3">`
        DC32 `?<Constant "4">`, `?<Constant "5">`, `?<Constant "6">`
        DC32 `?<Constant "7">`, `?<Constant "8">`, `?<Constant "9">`
        DC32 `?<Constant ".">`, `?<Constant "0">`, `?<Constant "#">`
        DC32 `?<Constant "sin">`, `?<Constant "*">`, `?<Constant "/">`
        DC32 `?<Constant "cos">`, `?<Constant "+">`, `?<Constant "-">`
        DC32 `?<Constant "tan">`, `?<Constant "(">`, `?<Constant ")">`
        DC32 `?<Constant "^2">`, `?<Constant "sqrt">`, `?<Constant "#">`
        DC32 `?<Constant "asin">`, `?<Constant "ln">`, `?<Constant "log">`
        DC32 `?<Constant "acos">`, `?<Constant "e^">`, `?<Constant "-">`
        DC32 `?<Constant "atan">`, `?<Constant "10^">`, `?<Constant "pi">`
        DC32 `?<Constant "^">`, `?<Constant "">`, `?<Constant "#">`
        DC32 `?<Constant "sh">`, `?<Constant "ash">`, `?<Constant "ANS">`
        DC32 `?<Constant "ch">`, `?<Constant "ach">`, `?<Constant "abs">`
        DC32 `?<Constant "th">`, `?<Constant "ath">`, `?<Constant "!">`
        DC32 `?<Constant "X">`, `?<Constant "Y">`, `?<Constant "#">`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??GetOperIndexByKey
        ARM
??GetOperIndexByKey:
        LDR      R1,??DataTable3  ;; KEY_DIGITAL_0
        LDR      R1,[R1, #+0]
        CMP      R1,R0
        LDR      R1,??DataTable3  ;; KEY_DIGITAL_0
        LDR      R1,[R1, #+0]
        BGE      ??GetOperIndexByKey_1
        ADD      R1,R1,#+9
        CMP      R1,R0
        BLT      ??GetOperIndexByKey_2
        LDR      R1,??DataTable3  ;; KEY_DIGITAL_0
        LDR      R1,[R1, #+0]
        SUB      R0,R0,R1
        SUB      R0,R0,#+1
        BX       LR
??GetOperIndexByKey_1:
        CMP      R0,R1
        MOVEQ    R0,#+10
        BXEQ     LR
??GetOperIndexByKey_2:
        LDR      R1,??DataTable4  ;; KEY_STAR
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        MOVEQ    R0,#+9
        BXEQ     LR
        MOV      R0,#+11
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     KEY_DIGITAL_0

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     KEY_STAR

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??insert_operation??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??insert_operation

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??insert_operation
        ARM
??insert_operation:
        LDR      R1,??DataTable30  ;; vars + 208
        LDR      R1,[R1, #+0]
        CMP      R1,#+256
        BXCS     LR
        LDR      R1,??DataTable14  ;; vars
        LDR      R2,[R1, #+208]
        LDR      R1,[R1, #+212]
        CMP      R2,R1
        BLT      ??insert_operation_1
??insert_operation_2:
        LDR      R1,??DataTable14  ;; vars
        ADD      R3,R2,R1
        ADD      R12,R2,R1
        LDRB     R12,[R12, #+228]
        SUB      R2,R2,#+1
        STRB     R12,[R3, #+229]
        LDR      R1,[R1, #+212]
        CMP      R2,R1
        BGE      ??insert_operation_2
??insert_operation_1:
        LDR      R1,??DataTable14  ;; vars
        LDR      R2,[R1, #+212]
        ADD      R3,R2,R1
        STRB     R0,[R3, #+228]
        ADD      R0,R2,#+1
        STR      R0,[R1, #+212]
        LDR      R0,[R1, #+208]
        ADD      R0,R0,#+1
        STR      R0,[R1, #+208]
        BX       LR               ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??remove_operation??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??remove_operation

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??remove_operation
        ARM
??remove_operation:
        LDR      R0,??DataTable30  ;; vars + 208
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,??DataTable35  ;; vars + 212
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BXEQ     LR
        LDR      R0,??DataTable14  ;; vars
        LDR      R1,[R0, #+208]
        LDR      R0,[R0, #+212]
        CMP      R1,R0
        BXLT     LR
        LDR      R0,??DataTable14  ;; vars
        LDR      R1,[R0, #+212]
        LDR      R0,[R0, #+208]
        CMP      R1,R0
        BGE      ??remove_operation_1
??remove_operation_2:
        LDR      R0,??DataTable14  ;; vars
        ADD      R2,R1,R0
        ADD      R3,R1,R0
        LDRB     R3,[R3, #+228]
        ADD      R1,R1,#+1
        STRB     R3,[R2, #+227]
        LDR      R0,[R0, #+208]
        CMP      R1,R0
        BLT      ??remove_operation_2
??remove_operation_1:
        LDR      R0,??DataTable14  ;; vars
        LDR      R1,[R0, #+212]
        SUB      R1,R1,#+1
        STR      R1,[R0, #+212]
        LDR      R1,[R0, #+208]
        SUB      R1,R1,#+1
        STR      R1,[R0, #+208]
        BX       LR               ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable14:
        DC32     vars

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??IsPowFunc??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??IsPowFunc

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??IsPowFunc
        ARM
??IsPowFunc:
        CMP      R0,#+21
        CMPNE    R0,#+22
        CMPNE    R0,#+28
        CMPNE    R0,#+31
        CMPNE    R0,#+33
        MOVEQ    R0,#+1
        BXEQ     LR
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??PRIOR??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??PRIOR

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??PRIOR
        ARM
??PRIOR:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        BL       ??IsPowFunc
        CMP      R0,#+0
        MOVNE    R0,#+5
        POPNE    {R4,PC}
        MOV      R0,R4
        _BLF     ??IsMathFunc,??IsMathFunc??rA
        CMP      R0,#+0
        MOVNE    R0,#+4
        POPNE    {R4,PC}
        SUB      R4,R4,#+13
        CMP      R4,#+1
        BLS      ??PRIOR_1
        SUB      R4,R4,#+3
        CMP      R4,#+1
        BLS      ??PRIOR_2
        SUBS     R4,R4,#+3
        BEQ      ??PRIOR_3
        POP      {R4,PC}
??PRIOR_1:
        MOV      R0,#+3
        POP      {R4,PC}
??PRIOR_2:
        MOV      R0,#+2
        POP      {R4,PC}
??PRIOR_3:
        MOV      R0,#+1
        POP      {R4,PC}
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??PushDoubleStack??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??PushDoubleStack

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??PushDoubleStack
        ARM
??PushDoubleStack:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R1
        MOV      R6,R0
        LDR      R0,[R6, #+48]
        LDR      R1,[R6, #+52]
        MOV      R5,R2
        CMP      R0,R1
        BLT      ??PushDoubleStack_1
        ADD      R0,R0,#+16
        STR      R0,[R6, #+52]
        LSL      R0,R0,#+3
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R7,R0
        LDR      R0,[R6, #+44]
        CMP      R0,#+0
        BEQ      ??PushDoubleStack_2
        LDR      R0,[R6, #+48]
        LDR      R1,[R6, #+44]
        LSL      R2,R0,#+3
        MOV      R0,R7
        SWI      +275
        LDR      R0,[R6, #+44]
        _BLF     `??operator delete`,`??operator delete??rA`
??PushDoubleStack_2:
        STR      R7,[R6, #+44]
??PushDoubleStack_1:
        LDR      R0,[R6, #+48]
        LDR      R1,[R6, #+44]
        ADD      R1,R1,R0, LSL #+3
        STM      R1,{R4,R5}
        ADD      R0,R0,#+1
        STR      R0,[R6, #+48]
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??PopDoubleStack??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??PopDoubleStack

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??PopDoubleStack
        ARM
??PopDoubleStack:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R1,[R0, #+48]
        MOV      R4,#+0
        MOV      R5,#+0
        CMP      R1,#+0
        BEQ      ??PopDoubleStack_1
        SUB      R1,R1,#+1
        STR      R1,[R0, #+48]
        LDR      R0,[R0, #+44]
        ADD      R0,R0,R1, LSL #+3
        LDM      R0,{R4,R5}
        MOV      R0,R4
        MOV      R1,R5
        POP      {R4,R5,PC}
??PopDoubleStack_1:
        MOV      R1,#+1
        SWI      +633
        MOV      R0,R4
        MOV      R1,R5
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??ConstructDStackStruct??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??ConstructDStackStruct

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??ConstructDStackStruct
        ARM
??ConstructDStackStruct:
        MOV      R1,#+0
        STR      R1,[R0, #+44]
        STR      R1,[R0, #+48]
        STR      R1,[R0, #+52]
        BX       LR               ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??DestructDStackStruct??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ??DestructDStackStruct

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ??DestructDStackStruct
        ARM
??DestructDStackStruct:
        LDR      R0,[R0, #+44]
        _BF      `??operator delete`,`??operator delete??rA`  ;; tailcall
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??FacN??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE ??FacN

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function ??FacN
        ARM
??FacN:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        SUB      SP,SP,#+8
        CFI CFA R13+32
        MOV      R2,SP
        _BLF     modf,??modf??rA
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,#+0
        MOV      R1,#+0
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dEqual,??__dEqual??rA
        CMP      R0,#+0
        BEQ      ??FacN_1
        MOV      R4,#+0
        MOV      R5,#+805306368
        ORR      R5,R5,#0xFF00000
??FacN_2:
        MOV      R0,SP
        LDM      R0,{R0,R1}
        MOV      R2,#+1
        MOV      R3,#+805306368
        ORR      R3,R3,#0xFF00000
        _BLF     __dGreaterEqual,??__dGreaterEqual??rA
        CMP      R0,#+0
        BEQ      ??FacN_3
        MOV      R0,#+0
        MOV      R1,#+1879048192
        ORR      R1,R1,#0xFF00000
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dNotEqual,??__dNotEqual??rA
        CMP      R0,#+0
        BEQ      ??FacN_3
        MOV      R8,SP
        MOV      R0,SP
        LDM      R0,{R0,R1}
        MOV      R2,#+0
        MOV      R3,#-1342177280
        ORR      R3,R3,#0xFF00000
        _BLF     __dAdd,??__dAdd??rA
        STM      R8,{R0,R1}
        MOV      R2,R4
        MOV      R3,R5
        MOV      R0,SP
        LDM      R0,{R0,R1}
        _BLF     __dMul,??__dMul??rA
        MOV      R4,R0
        MOV      R5,R1
        B        ??FacN_2
??FacN_1:
        MOV      R0,SP
        LDM      R0,{R0,R1}
        BL       ??FacN
        MOV      R2,#+0
        _BLF     _Log,??_Log??rA
        MOV      R6,R0
        MOV      R7,R1
        MOV      R0,SP
        LDM      R0,{R2,R3}
        MOV      R0,#+0
        MOV      R1,#+805306368
        ORR      R1,R1,#0xFF00000
        _BLF     __dAdd,??__dAdd??rA
        MOV      R2,#+0
        _BLF     _Log,??_Log??rA
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dMul,??__dMul??rA
        MOV      R2,R6
        MOV      R3,R7
        _BLF     __dAdd,??__dAdd??rA
        MOV      R4,R0
        MOV      R5,R1
??FacN_3:
        MOV      R0,R4
        MOV      R1,R5
        POP      {R2-R8,PC}       ;; return
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??ConvertAngleToRadians??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE ??ConvertAngleToRadians

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function ??ConvertAngleToRadians
        ARM
??ConvertAngleToRadians:
        LDR      R2,??DataTable19  ;; calc_set + 32
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDRB     R2,[R2, #+0]
        SUBS     R2,R2,#+1
        POPEQ    {PC}
        LDR      R3,??DataTable25  ;; 0x400921fb
        SUBS     R2,R2,#+1
        LDR      R2,??DataTable24  ;; 0x54442d18
        BEQ      ??ConvertAngleToRadians_1
        _BLF     __dMul,??__dMul??rA
        LDR      R3,??DataTable20  ;; 0x40668000
        MOV      R2,#+0
        B        ??ConvertAngleToRadians_2
??ConvertAngleToRadians_1:
        _BLF     __dMul,??__dMul??rA
        MOV      R2,#+0
        MOV      R3,#+1073741824
        ORR      R3,R3,#0x690000
??ConvertAngleToRadians_2:
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      __dDiv,??__dDiv??rA  ;; tailcall
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??ConvertRadiansToAngle??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE ??ConvertRadiansToAngle

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function ??ConvertRadiansToAngle
        ARM
??ConvertRadiansToAngle:
        LDR      R2,??DataTable19  ;; calc_set + 32
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDRB     R2,[R2, #+0]
        SUBS     R2,R2,#+1
        POPEQ    {PC}
        SUBS     R2,R2,#+1
        MOV      R2,#+0
        BEQ      ??ConvertRadiansToAngle_1
        LDR      R3,??DataTable20  ;; 0x40668000
        B        ??ConvertRadiansToAngle_2
??ConvertRadiansToAngle_1:
        MOV      R3,#+1073741824
        ORR      R3,R3,#0x690000
??ConvertRadiansToAngle_2:
        _BLF     __dMul,??__dMul??rA
        LDR      R2,??DataTable24  ;; 0x54442d18
        LDR      R3,??DataTable25  ;; 0x400921fb
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      __dDiv,??__dDiv??rA  ;; tailcall
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable19:
        DC32     calc_set + 32

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable20:
        DC32     0x40668000

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??asinh??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE ??asinh

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function ??asinh
        ARM
??asinh:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        MOV      R8,R0
        MOV      R9,R1
        MOV      R6,R8
        MOV      R7,R9
        MOV      R10,#+2
        MOV      R4,#+0
        MOV      R5,#+805306368
        ORR      R5,R5,#0xFF00000
        B        ??asinh_1
??asinh_2:
        MOV      R2,R6
        MOV      R3,R7
        MOV      R0,R6
        MOV      R1,R7
        _BLF     __dMul,??__dMul??rA
        MOV      R6,R0
        MOV      R7,R1
        TST      R10,#0x1
        BEQ      ??asinh_1
        MOV      R2,R6
        MOV      R3,R7
        MOV      R0,R4
        MOV      R1,R5
        _BLF     __dMul,??__dMul??rA
        MOV      R4,R0
        MOV      R5,R1
??asinh_1:
        LSRS     R10,R10,#+1
        BNE      ??asinh_2
        MOV      R0,#+0
        MOV      R1,#+805306368
        ORR      R1,R1,#0xFF00000
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dAdd,??__dAdd??rA
        _BLF     sqrt,??sqrt??rA
        MOV      R2,R8
        MOV      R3,R9
        _BLF     __dAdd,??__dAdd??rA
        MOV      R2,#+0
        _BLF     _Log,??_Log??rA
        POP      {R4-R10,PC}      ;; return
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??acosh??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE ??acosh

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function ??acosh
        ARM
??acosh:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        MOV      R8,R0
        MOV      R9,R1
        MOV      R2,#+0
        MOV      R3,#+805306368
        ORR      R3,R3,#0xFF00000
        _BLF     __dGreaterEqual,??__dGreaterEqual??rA
        CMP      R0,#+0
        BEQ      ??acosh_1
        MOV      R6,R8
        MOV      R7,R9
        MOV      R10,#+2
        MOV      R4,#+0
        MOV      R5,#+805306368
        ORR      R5,R5,#0xFF00000
        B        ??acosh_2
??acosh_3:
        MOV      R2,R6
        MOV      R3,R7
        MOV      R0,R6
        MOV      R1,R7
        _BLF     __dMul,??__dMul??rA
        MOV      R6,R0
        MOV      R7,R1
        TST      R10,#0x1
        BEQ      ??acosh_2
        MOV      R2,R6
        MOV      R3,R7
        MOV      R0,R4
        MOV      R1,R5
        _BLF     __dMul,??__dMul??rA
        MOV      R4,R0
        MOV      R5,R1
??acosh_2:
        LSRS     R10,R10,#+1
        BNE      ??acosh_3
        MOV      R0,#+0
        MOV      R1,#-1342177280
        ORR      R1,R1,#0xFF00000
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dAdd,??__dAdd??rA
        _BLF     sqrt,??sqrt??rA
        MOV      R2,R8
        MOV      R3,R9
        _BLF     __dAdd,??__dAdd??rA
        MOV      R2,#+0
        _BLF     _Log,??_Log??rA
        POP      {R4-R10,PC}
??acosh_1:
        MVN      R0,#+0
        BIC      R1,R0,#0x80000000
        POP      {R4-R10,PC}      ;; return
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??athh??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE ??athh

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function ??athh
        ARM
??athh:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,#+0
        MOV      R1,#+805306368
        ORR      R1,R1,#0xFF00000
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dSub,??__dSub??rA
        MOV      R6,R0
        MOV      R7,R1
        MOV      R0,#+0
        MOV      R1,#+805306368
        ORR      R1,R1,#0xFF00000
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dAdd,??__dAdd??rA
        MOV      R2,R6
        MOV      R3,R7
        _BLF     __dDiv,??__dDiv??rA
        MOV      R2,#+0
        _BLF     _Log,??_Log??rA
        MOV      R2,#+0
        MOV      R3,#+1073741824
        _BLF     __dDiv,??__dDiv??rA
        POP      {R4-R7,PC}
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??ParseOperation??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE ??ParseOperation

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function ??ParseOperation
        ARM
??ParseOperation:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R6,R0
        SUB      R1,R1,#+12
        CMP      R1,#+32
        POPHI    {R4-R9,PC}
        ADR      R0,??ParseOperation_1
        LDRB     R0,[R0, R1]
        ADD      PC,PC,R0, LSL #+2
        DATA
??ParseOperation_1:
        DC8      +8,+13,+23,+33
        DC8      +43,+53,+63,+200
        DC8      +200,+68,+100,+200
        DC8      +104,+109,+114,+118
        DC8      +122,+200,+126,+130
        DC8      +200,+139,+200,+200
        DC8      +148,+156,+200,+160
        DC8      +168,+181,+172,+177
        DC8      +185,+0,+0,+0
        ARM
??ParseOperation_2:
        MOV      R0,R6
        BL       ??PopDoubleStack
        BL       ??ConvertAngleToRadians
        MOV      R2,#+0
        B        ??ParseOperation_3
??ParseOperation_4:
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dMul,??__dMul??rA
        B        ??ParseOperation_5
??ParseOperation_6:
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dDiv,??__dDiv??rA
        B        ??ParseOperation_5
??ParseOperation_7:
        MOV      R0,R6
        BL       ??PopDoubleStack
        BL       ??ConvertAngleToRadians
        MOV      R2,#+1
??ParseOperation_3:
        _BLF     _Sin,??_Sin??rA
??ParseOperation_5:
        MOV      R2,R1
        MOV      R1,R0
        MOV      R0,R6
        BL       ??PushDoubleStack
        POP      {R4-R9,PC}
??ParseOperation_8:
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dAdd,??__dAdd??rA
        B        ??ParseOperation_5
??ParseOperation_9:
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dSub,??__dSub??rA
        B        ??ParseOperation_5
??ParseOperation_10:
        MOV      R0,R6
        BL       ??PopDoubleStack
        BL       ??ConvertAngleToRadians
        _BLF     tan,??tan??rA
        B        ??ParseOperation_5
??ParseOperation_11:
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R4,R0
        MOV      R5,R1
        MOV      R7,#+2
        MOV      R8,#+0
        MOV      R9,#+805306368
        ORR      R9,R9,#0xFF00000
        B        ??ParseOperation_12
??ParseOperation_13:
        MOV      R2,R4
        MOV      R3,R5
        MOV      R0,R4
        MOV      R1,R5
        _BLF     __dMul,??__dMul??rA
        MOV      R4,R0
        MOV      R5,R1
        TST      R7,#0x1
        BEQ      ??ParseOperation_12
        MOV      R2,R4
        MOV      R3,R5
        MOV      R0,R8
        MOV      R1,R9
        _BLF     __dMul,??__dMul??rA
        MOV      R8,R0
        MOV      R9,R1
??ParseOperation_12:
        LSRS     R7,R7,#+1
        BNE      ??ParseOperation_13
        MOV      R2,R9
        MOV      R1,R8
        MOV      R0,R6
        BL       ??PushDoubleStack
        POP      {R4-R9,PC}
??ParseOperation_14:
        MOV      R0,R6
        BL       ??PopDoubleStack
        _BLF     sqrt,??sqrt??rA
        B        ??ParseOperation_5
??ParseOperation_15:
        MOV      R0,R6
        BL       ??PopDoubleStack
        _BLF     asin,??asin??rA
??ParseOperation_16:
        BL       ??ConvertRadiansToAngle
        B        ??ParseOperation_5
??ParseOperation_17:
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R2,#+0
??ParseOperation_18:
        _BLF     _Log,??_Log??rA
        B        ??ParseOperation_5
??ParseOperation_19:
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R2,#+1
        B        ??ParseOperation_18
??ParseOperation_20:
        MOV      R0,R6
        BL       ??PopDoubleStack
        _BLF     acos,??acos??rA
        B        ??ParseOperation_16
??ParseOperation_21:
        MOV      R0,R6
        BL       ??PopDoubleStack
        _BLF     exp,??exp??rA
        B        ??ParseOperation_5
??ParseOperation_22:
        MOV      R0,R6
        BL       ??PopDoubleStack
        _BLF     atan,??atan??rA
        B        ??ParseOperation_16
??ParseOperation_23:
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R2,R0
        MOV      R3,R1
        MOV      R0,#+0
        MOV      R1,#+1073741824
        ORR      R1,R1,#0x240000
??ParseOperation_24:
        _BLF     pow,??pow??rA
        B        ??ParseOperation_5
??ParseOperation_25:
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R2,R4
        MOV      R3,R5
        B        ??ParseOperation_24
??ParseOperation_26:
        MOV      R0,R6
        BL       ??PopDoubleStack
        BL       ??ConvertAngleToRadians
        MOV      R2,#+0
        MOV      R3,#+805306368
        ORR      R3,R3,#0xFF00000
        _BLF     _Sinh,??_Sinh??rA
        B        ??ParseOperation_5
??ParseOperation_27:
        MOV      R0,R6
        BL       ??PopDoubleStack
        BL       ??asinh
        B        ??ParseOperation_16
??ParseOperation_28:
        MOV      R0,R6
        BL       ??PopDoubleStack
        BL       ??ConvertAngleToRadians
        MOV      R2,#+0
        MOV      R3,#+805306368
        ORR      R3,R3,#0xFF00000
        _BLF     _Cosh,??_Cosh??rA
        B        ??ParseOperation_5
??ParseOperation_29:
        MOV      R0,R6
        BL       ??PopDoubleStack
        BL       ??acosh
        B        ??ParseOperation_16
??ParseOperation_30:
        MOV      R0,R6
        BL       ??PopDoubleStack
        BL       ??ConvertAngleToRadians
        _BLF     tanh,??tanh??rA
        B        ??ParseOperation_5
??ParseOperation_31:
        MOV      R0,R6
        BL       ??PopDoubleStack
        BL       ??athh
        B        ??ParseOperation_16
??ParseOperation_32:
        MOV      R0,R6
        BL       ??PopDoubleStack
        BIC      R1,R1,#0x80000000
        B        ??ParseOperation_5
??ParseOperation_33:
        MOV      R0,R6
        BL       ??PopDoubleStack
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,#+0
        MOV      R1,#+805306368
        ORR      R1,R1,#0xFF00000
        MOV      R2,R4
        MOV      R3,R5
        _BLF     __dAdd,??__dAdd??rA
        _BLF     ??gamma,??gamma??rA
        MOV      R2,R1
        MOV      R1,R0
        MOV      R0,R6
        BL       ??PushDoubleStack
??ParseOperation_34:
        POP      {R4-R9,PC}       ;; return
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??calc_answer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE ??calc_answer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function ??calc_answer
        ARM
??calc_answer:
        LDR      R0,??DataTable27  ;; vars
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        SUB      SP,SP,#+572
        CFI CFA R13+596
        LDR      R6,[R0, #+208]
        MOV      R7,#+0
        ADD      R8,R0,#+228
        MOV      R4,#+0
        MOV      R5,R4
        MOV      R0,SP
        BL       ??ConstructDStackStruct
        CMP      R6,#+0
        BEQ      ??calc_answer_1
        MOV      R0,SP
        SWI      +632
        CMP      R0,#+0
        MVNNE    R4,R4
        BICNE    R5,R4,#0x80000000
        BNE      ??calc_answer_1
??calc_answer_2:
        LDRB     R4,[R8], #+1
        CMP      R4,#+0
        BMI      ??calc_answer_3
        CMP      R4,#+11
        BLT      ??calc_answer_4
??calc_answer_3:
        CMP      R4,#+29
        BNE      ??calc_answer_5
??calc_answer_4:
        ADD      R0,SP,#+56
??calc_answer_6:
        CMP      R4,#+29
        MOVEQ    R1,#+45
        BEQ      ??calc_answer_7
        CMP      R4,#+9
        MOVEQ    R1,#+46
        BEQ      ??calc_answer_7
        CMP      R4,#+10
        MOVEQ    R1,#+48
        ADDNE    R1,R4,#+49
??calc_answer_7:
        STRB     R1,[R0], #+1
        LDRB     R4,[R8], #+1
        SUB      R6,R6,#+1
        CMP      R4,#+0
        BMI      ??calc_answer_8
        CMP      R4,#+11
        BLT      ??calc_answer_9
??calc_answer_8:
        CMP      R4,#+29
        BNE      ??calc_answer_10
??calc_answer_9:
        CMP      R6,#+0
        BNE      ??calc_answer_6
??calc_answer_10:
        MOV      R1,#+0
        STRB     R1,[R0, #+0]
        ADD      R0,SP,#+56
        _BLF     strtod,??strtod??rA
        MOV      R2,R1
        MOV      R1,R0
        MOV      R0,SP
        BL       ??PushDoubleStack
        CMP      R6,#+0
        BEQ      ??calc_answer_11
??calc_answer_5:
        CMP      R4,#+32
        BNE      ??calc_answer_12
        LDR      R0,??DataTable24  ;; 0x54442d18
        LDR      R1,??DataTable25  ;; 0x400921fb
??calc_answer_13:
        MOV      R2,R1
        MOV      R1,R0
??calc_answer_14:
        MOV      R0,SP
        BL       ??PushDoubleStack
??calc_answer_15:
        SUBS     R6,R6,#+1
        BNE      ??calc_answer_2
??calc_answer_11:
        CMP      R7,#+0
        BEQ      ??calc_answer_16
        SUB      R7,R7,#+1
        ADD      R0,SP,#+316
        LDRB     R1,[R7, +R0]
        MOV      R0,SP
        BL       ??ParseOperation
        B        ??calc_answer_11
??calc_answer_12:
        CMP      R4,#+38
        LDREQ    R0,??calc_answer_17  ;; vars + 200
        LDMEQ    R0,{R0,R1}
        BEQ      ??calc_answer_13
        CMP      R4,#+45
        LDREQ    R0,??calc_answer_17+0x4  ;; calc_set
        LDMEQ    R0,{R0,R1}
        BEQ      ??calc_answer_13
        CMP      R4,#+46
        LDREQ    R0,??calc_answer_17+0x8  ;; calc_set + 8
        LDMEQ    R0,{R0,R1}
        BEQ      ??calc_answer_13
        CMP      R4,#+48
        BLT      ??calc_answer_18
        CMP      R4,#+74
        BGE      ??calc_answer_19
        LDR      R0,??DataTable27  ;; vars
        ADD      R2,R0,R4, LSL #+3
        LDR      R1,[R2, #-384]
        LDR      R2,[R2, #-380]
        B        ??calc_answer_14
??calc_answer_18:
        CMP      R4,#+20
        BNE      ??calc_answer_20
??calc_answer_21:
        CMP      R7,#+0
        BEQ      ??calc_answer_15
        SUB      R7,R7,#+1
        ADD      R0,SP,#+316
        LDRB     R0,[R7, +R0]
        CMP      R0,#+19
        BEQ      ??calc_answer_15
        ADD      R0,SP,#+316
        LDRB     R1,[R7, +R0]
        MOV      R0,SP
        BL       ??ParseOperation
        B        ??calc_answer_21
??calc_answer_20:
        CMP      R4,#+19
        BNE      ??calc_answer_22
        ADD      R0,SP,#+316
        MOV      R1,#+19
        STRB     R1,[R7, +R0]
??calc_answer_23:
        ADD      R7,R7,#+1
        B        ??calc_answer_15
??calc_answer_22:
        CMP      R4,#+13
        CMPNE    R4,#+14
        CMPNE    R4,#+16
        CMPNE    R4,#+17
        BEQ      ??calc_answer_24
??calc_answer_19:
        MOV      R0,R4
        _BLF     ??IsMathFunc,??IsMathFunc??rA
        CMP      R0,#+0
        BNE      ??calc_answer_24
        MOV      R0,R4
        BL       ??IsPowFunc
        CMP      R0,#+0
        BEQ      ??calc_answer_15
??calc_answer_24:
        CMP      R7,#+0
        STRBEQ   R4,[SP, #+316]
        MOVEQ    R7,#+1
        BEQ      ??calc_answer_15
        ADD      R0,SP,#+316
        ADD      R0,R7,R0
        LDRB     R0,[R0, #-1]
        BL       ??PRIOR
        MOV      R5,R0
        MOV      R0,R4
        BL       ??PRIOR
        CMP      R5,R0
        BGE      ??calc_answer_25
??calc_answer_26:
        ADD      R0,SP,#+316
        STRB     R4,[R7, +R0]
        B        ??calc_answer_23
??calc_answer_25:
        ADD      R0,SP,#+316
        ADD      R0,R7,R0
        LDRB     R0,[R0, #-1]
        BL       ??PRIOR
        MOV      R5,R0
        MOV      R0,R4
        BL       ??PRIOR
        CMP      R5,R0
        BLT      ??calc_answer_26
        SUB      R7,R7,#+1
        ADD      R0,SP,#+316
        LDRB     R1,[R7, +R0]
        MOV      R0,SP
        BL       ??ParseOperation
        CMP      R7,#+0
        BNE      ??calc_answer_25
        B        ??calc_answer_26
??calc_answer_16:
        MOV      R0,SP
        BL       ??PopDoubleStack
        MOV      R4,R0
        MOV      R5,R1
??calc_answer_1:
        LDR      R0,[SP, #+44]
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R0,??calc_answer_17  ;; vars + 200
        STM      R0,{R4,R5}
        ADD      SP,SP,#+572
        CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
        DATA
??calc_answer_17:
        DC32     vars + 200
        DC32     calc_set
        DC32     calc_set + 8
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable24:
        DC32     0x54442d18

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable25:
        DC32     0x400921fb

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        THUMB
??CalcGuiOnCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock38
        REQUIRE ??CalcGuiOnCreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI Function ??CalcGuiOnCreate
        ARM
??CalcGuiOnCreate:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R4,R0
        MOV      R6,#+0
        BL       ??InitFonts
        MVN      R0,#-1879048192
        STR      R0,[R4, #+376]
        LDR      R0,??CalcGuiOnCreate_1  ;; vars + 220
        LDR      R0,[R0, #+0]
        SWI      +497
        MOV      R5,R0
        MOV      R0,#+0
        STR      R0,[R4, #+400]
??CalcGuiOnCreate_2:
        LDR      R0,??CalcGuiOnCreate_1+0x4  ;; keydesc
        LDR      R0,[R0, +R6, LSL #+2]
        LDRB     R1,[R0, #+1]
        CMP      R1,#+0
        LDRBEQ   R0,[R0, #+0]
        ORREQ    R7,R0,#0x78000000
        BEQ      ??CalcGuiOnCreate_3
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        MOV      R1,#+6
        SWI      +349
        MOV      R7,R0
??CalcGuiOnCreate_3:
        ADD      R8,R4,R6, LSL #+2
        STR      R7,[R8, #+404]
        MOV      R0,R7
        SWI      +352
        MOV      R1,R0
        MOV      R0,R7
        SWI      +768
        STR      R0,[R8, #+700]
        LDR      R1,[R4, #+400]
        ADD      R6,R6,#+1
        CMP      R1,R0
        STRLT    R0,[R4, #+400]
        CMP      R6,#+48
        BLT      ??CalcGuiOnCreate_2
        MOV      R6,#+48
        MOV      R7,#+97
??CalcGuiOnCreate_4:
        ORR      R8,R7,#0x78000000
        ADD      R9,R4,R6, LSL #+2
        STR      R8,[R9, #+404]
        MOV      R0,R8
        SWI      +352
        MOV      R1,R0
        MOV      R0,R8
        SWI      +768
        STR      R0,[R9, #+700]
        ADD      R6,R6,#+1
        ADD      R7,R7,#+1
        CMP      R6,#+74
        BLT      ??CalcGuiOnCreate_4
        MOV      R0,R5
        SWI      +497
        MOV      R0,#+0
        STR      R0,[R4, #+364]
        STR      R0,[R4, #+396]
        LDR      R0,??CalcGuiOnCreate_1+0x8  ;; vars + 216
        MOV      R1,#+1
        STR      R1,[R0, #+0]
        MOV      R0,#+0
        MVN      R2,R0
        BIC      R3,R2,#0x80000000
        B        ??CalcGuiOnCreate_5
??CalcGuiOnCreate_6:
        LDR      R1,??DataTable27  ;; vars
        ADD      R1,R1,R0, LSL #+3
        STM      R1,{R2,R3}
        ADD      R0,R0,#+1
??CalcGuiOnCreate_5:
        CMP      R0,#+25
        BCC      ??CalcGuiOnCreate_6
        MOV      R0,#+1
        POP      {R4-R9,PC}       ;; return
        DATA
??CalcGuiOnCreate_1:
        DC32     vars + 220
        DC32     keydesc
        DC32     vars + 216
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable27:
        DC32     vars

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        THUMB
??CalcGuiOnClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock40
        REQUIRE ??CalcGuiOnClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI Function ??CalcGuiOnClose
        ARM
??CalcGuiOnClose:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        LDR      R0,[R4, #+376]
        MOV      R5,#+0
        SWI      +353
??CalcGuiOnClose_1:
        ADD      R0,R4,R5, LSL #+2
        LDR      R0,[R0, #+404]
        ADD      R5,R5,#+1
        SWI      +353
        CMP      R5,#+74
        BLT      ??CalcGuiOnClose_1
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock41

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetMaxCurRow??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock42
        REQUIRE ??GetMaxCurRow

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI Function ??GetMaxCurRow
        ARM
??GetMaxCurRow:
        PUSH     {R4-R10}
        CFI R10 Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        LDR      R3,[R0, #+384]
        LDR      R4,[R0, #+384]
        LDR      R5,[R0, #+380]
        SUB      R3,R3,#+1
        SUB      R4,R4,R5
        SUB      R3,R3,R4, ASR #+6
        LDR      R4,[R0, #+392]
        SUB      R3,R3,R5
        LDR      R5,[R0, #+388]
        MOV      R6,#+0
        SUB      R4,R4,R5
        ASR      R4,R4,#+6
        SUB      R3,R3,R4, LSL #+1
        SUB      R12,R3,#+4
        MOV      R4,#+0
        MOV      R5,R4
        MOV      R3,R4
        CMP      R1,#+0
        MOVNE    R7,#+0
        STRNE    R7,[R1, #+0]
        CMP      R2,#+0
        MOVNE    R7,#+0
        STRNE    R7,[R2, #+0]
        MOV      R7,#+0
        B        ??GetMaxCurRow_1
??GetMaxCurRow_2:
        MOV      R3,R4
        MOV      R6,#+2
??GetMaxCurRow_3:
        LDR      R8,??DataTable30  ;; vars + 208
        LDR      R8,[R8, #+0]
        CMP      R7,R8
        BGE      ??GetMaxCurRow_4
        LDR      R8,??DataTable57  ;; vars
        ADD      R9,R6,R12
        ADD      R8,R7,R8
        LDRB     R8,[R8, #+228]
        ADD      R8,R0,R8, LSL #+2
        LDR      R8,[R8, #+700]
        ADD      R10,R8,R4
        CMP      R9,R10
        ADDLT    R5,R5,#+1
        MOVLT    R4,#+0
        MOVLT    R6,#+0
        ADD      R4,R8,R4
??GetMaxCurRow_4:
        ADD      R7,R7,#+1
??GetMaxCurRow_1:
        LDR      R8,??DataTable30  ;; vars + 208
        LDR      R8,[R8, #+0]
        CMP      R8,R7
        BLT      ??GetMaxCurRow_5
        LDR      R8,??DataTable35  ;; vars + 212
        LDR      R8,[R8, #+0]
        CMP      R7,R8
        BNE      ??GetMaxCurRow_3
        CMP      R2,#+0
        STRNE    R5,[R2, #+0]
        CMP      R1,#+0
        BNE      ??GetMaxCurRow_2
??GetMaxCurRow_5:
        CMP      R1,#+0
        STRNE    R5,[R1, #+0]
        POP      {R4-R10}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI CFA R13+0
        MOV      R0,R3
        BX       LR               ;; return
        CFI EndBlock cfiBlock43

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable30:
        DC32     vars + 208

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon0
        CFI NoFunction
        THUMB
??SetCursPos??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock44
        REQUIRE ??SetCursPos

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI Function ??SetCursPos
        ARM
??SetCursPos:
        PUSH     {R4-R9}
        CFI R9 Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        LDR      R3,[R0, #+384]
        LDR      R4,[R0, #+384]
        LDR      R5,[R0, #+380]
        SUB      R3,R3,#+1
        SUB      R4,R4,R5
        SUB      R3,R3,R4, ASR #+6
        LDR      R4,[R0, #+392]
        SUB      R3,R3,R5
        LDR      R5,[R0, #+388]
        MOV      R12,#+0
        SUB      R4,R4,R5
        ASR      R4,R4,#+6
        SUB      R3,R3,R4, LSL #+1
        SUB      R3,R3,#+4
        MOV      R4,#+0
        MOV      R5,R4
        MOV      R6,R4
        ADD      R8,R4,R3
        B        ??SetCursPos_1
??SetCursPos_2:
        LDR      R7,??DataTable57  ;; vars
        ADD      R7,R6,R7
        LDRB     R7,[R7, #+228]
        ADD      R7,R0,R7, LSL #+2
        LDR      R7,[R7, #+700]
        ADD      R9,R7,R12
        CMP      R8,R9
        BGE      ??SetCursPos_3
        CMP      R1,R5
        BEQ      ??SetCursPos_4
        ADD      R5,R5,#+1
        MOV      R12,#+0
??SetCursPos_3:
        ADD      R12,R7,R12
        ADD      R6,R6,#+1
??SetCursPos_1:
        LDR      R7,??DataTable55  ;; vars + 208
        LDR      R7,[R7, #+0]
        CMP      R7,R6
        BLT      ??SetCursPos_5
        CMP      R5,R1
        BNE      ??SetCursPos_6
        CMP      R12,R2
        BGE      ??SetCursPos_4
??SetCursPos_6:
        LDR      R7,??DataTable55  ;; vars + 208
        LDR      R7,[R7, #+0]
        CMP      R6,R7
        BNE      ??SetCursPos_2
??SetCursPos_4:
        LDR      R0,??DataTable35  ;; vars + 212
        STR      R6,[R0, #+0]
??SetCursPos_5:
        POP      {R4-R9}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI CFA R13+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock45

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable35:
        DC32     vars + 212

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock46 Using cfiCommon0
        CFI NoFunction
        THUMB
??CalcGuiOnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock46
        REQUIRE ??CalcGuiOnRedraw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock47 Using cfiCommon1
        CFI Function ??CalcGuiOnRedraw
        ARM
??CalcGuiOnRedraw:
        PUSH     {R2,R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+40
        SUB      SP,SP,#+88
        CFI CFA R13+128
        MOV      R4,R0
        SWI      +485
        MOV      R5,R0
        LDR      R0,[SP, #+88]
        LDRH     R0,[R0, #+0]
        STR      R0,[R4, #+380]
        LDR      R0,[SP, #+88]
        LDRH     R0,[R0, #+2]
        STR      R0,[R4, #+384]
        LDR      R0,[SP, #+88]
        LDRH     R0,[R0, #+4]
        STR      R0,[R4, #+388]
        LDR      R0,[SP, #+88]
        LDRH     R0,[R0, #+6]
        STR      R0,[R4, #+392]
        LDR      R2,[R4, #+388]
        SUB      R1,R0,R2
        STR      R1,[SP, #+12]
        LDR      R1,[R4, #+384]
        LDR      R2,[R4, #+380]
        MOV      R0,R5
        SUB      R1,R1,R2
        STR      R1,[SP, #+4]
        SWI      +488
        STR      R0,[SP, #+48]
        MOV      R1,#+2
        MOV      R0,R5
        SWI      +489
        LDR      R0,??CalcGuiOnRedraw_1  ;; 0xffffffffffc0c0c0
        PUSH     {R0}
        CFI CFA R13+132
        MVN      R0,#+0
        PUSH     {R0}
        CFI CFA R13+136
        LDR      R3,[R4, #+392]
        LDR      R2,[R4, #+384]
        LDR      R1,[R4, #+388]
        LDR      R0,[R4, #+380]
        SWI      +492
        LDR      R0,??DataTable54  ;; vars + 216
        LDR      R0,[R0, #+0]
        ADD      SP,SP,#+8
        CFI CFA R13+128
        CMP      R0,#+0
        BEQ      ??CalcGuiOnRedraw_2
        LDR      R9,??DataTable57  ;; vars
        MOV      R0,#+0
        STR      R0,[R9, #+216]
        BL       ??calc_answer
        LDR      R2,[R9, #+200]
        LDR      R3,[R9, #+204]
        LDR      R1,??CalcGuiOnRedraw_1+0x4  ;; `?<Constant "%1.10lg">`
        ADD      R0,SP,#+56
        SWI      +276
        LDR      R0,[R4, #+376]
        SWI      +353
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        MOV      R1,#+6
        ADD      R0,SP,#+56
        SWI      +349
        STR      R0,[R4, #+376]
??CalcGuiOnRedraw_2:
        LDR      R0,[SP, #+12]
        LDR      R1,[R4, #+380]
        LDR      R9,??DataTable57  ;; vars
        ASR      R8,R0,#+6
        ADD      R1,R8,R1
        STRH     R1,[SP, #+40]
        LDR      R0,[R4, #+388]
        MOV      R1,#+255
        ADD      R6,R8,R0
        LDR      R0,[R4, #+384]
        ORR      R1,R1,#0xFF00
        SUB      R0,R0,R8
        ADD      R7,R1,R0
        LDR      R0,[R9, #+224]
        MOV      R1,#-16777216
        ADD      R0,R0,R6
        ADD      R10,R0,#+2
        MOV      R0,R5
        SWI      +608
        MVN      R1,#+0
        MOV      R0,R5
        SWI      +702
        MOV      R0,R5
        SWI      +701
        MOV      R11,R0
        MOV      R0,R5
        SWI      +607
        PUSH     {R11}
        CFI CFA R13+132
        PUSH     {R0}
        CFI CFA R13+136
        LDRH     R0,[SP, #+48]
        MOV      R3,R10, LSL #+16
        MOV      R3,R3, LSR #+16
        MOV      R2,R7, LSL #+16
        MOV      R2,R2, LSR #+16
        MOV      R1,R6, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +492
        LDR      R0,[R4, #+380]
        LDR      R1,[SP, #+20]
        ADD      R10,R8,R0
        ASR      R1,R1,#+5
        STR      R1,[SP, #+16]
        LDR      R0,[R4, #+388]
        LDR      R1,[R9, #+224]
        ADD      R0,R8,R0
        ADD      R0,R1,R0
        LDR      R1,[SP, #+16]
        ADD      R0,R1,R0
        LDR      R1,[SP, #+12]
        ADD      R11,R0,#+2
        LDR      R0,[R4, #+384]
        SUB      R0,R0,R8
        SUB      R0,R0,#+1
        SUB      R6,R0,R1, ASR #+6
        LDR      R0,[R4, #+392]
        MOV      R1,#-16777216
        SUB      R7,R0,R8
        MOV      R0,R5
        SWI      +608
        MVN      R1,#+0
        MOV      R0,R5
        SWI      +702
        MOV      R0,R5
        SWI      +701
        STR      R0,[SP, #+24]
        MOV      R0,R5
        SWI      +607
        LDR      R1,[SP, #+24]
        MOV      R3,R7, LSL #+16
        PUSH     {R1}
        CFI CFA R13+140
        PUSH     {R0}
        CFI CFA R13+144
        MOV      R3,R3, LSR #+16
        MOV      R2,R6, LSL #+16
        MOV      R2,R2, LSR #+16
        MOV      R1,R11, LSL #+16
        MOV      R1,R1, LSR #+16
        MOV      R0,R10, LSL #+16
        MOV      R0,R0, LSR #+16
        SWI      +492
        LDR      R0,[R9, #+220]
        MOV      R6,#+0
        SWI      +497
        STR      R0,[SP, #+68]
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+148
        MOV      R0,#-16777216
        PUSH     {R0}
        CFI CFA R13+152
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+156
        PUSH     {R0}
        CFI CFA R13+160
        LDR      R1,[R9, #+224]
        LDR      R0,[R4, #+388]
        ADD      R0,R8,R0
        ADD      R0,R1,R0
        ADD      R0,R0,#+4
        PUSH     {R0}
        CFI CFA R13+164
        LDR      R0,[R4, #+384]
        MOV      R1,#+0
        SUB      R0,R0,R8
        SUB      R0,R0,#+2
        PUSH     {R0}
        CFI CFA R13+168
        LDR      R0,[R4, #+388]
        ADD      R0,R8,R0
        ADD      R3,R0,#+1
        LDR      R0,[R4, #+380]
        ADD      R0,R8,R0
        ADD      R2,R0,#+1
        LDR      R0,[R4, #+376]
        SWI      +493
        ADD      SP,SP,#+40
        CFI CFA R13+128
        LDR      R0,[SP, #+88]
        LDR      R3,[SP, #+88]
        LDRH     R0,[R0, #+6]
        LDRH     R3,[R3, #+4]
        LDR      R1,[R9, #+224]
        ADD      R2,SP,#+24
        SUB      R0,R0,R3
        LDR      R3,[SP, #+8]
        SUB      R0,R0,R8, LSL #+1
        SUB      R0,R0,R1
        SUB      R0,R0,R3
        SUB      R0,R0,#+2
        ADD      R1,R1,#+2
        _BLF     ??div32_a,??rA??div32_a
        STR      R1,[SP, #+0]
        ADD      R1,SP,#+20
        MOV      R0,R4
        BL       ??GetMaxCurRow
        LDR      R1,[SP, #+20]
        ADD      R1,R1,#+1
        STR      R1,[SP, #+20]
        LDR      R0,[SP, #+0]
        CMP      R0,R1
        MOVGE    R7,#+0
        STRGE    R1,[SP, #+32]
        BGE      ??CalcGuiOnRedraw_3
        MOV      R1,R0
        STR      R1,[SP, #+32]
        LDR      R7,[R4, #+396]
        LDR      R0,[SP, #+24]
        LDR      R1,[SP, #+0]
        SUB      R0,R0,R7
        SUB      R1,R1,#+1
        CMP      R0,R1
        BLT      ??CalcGuiOnRedraw_4
        LDR      R1,[SP, #+0]
        ADD      R0,R0,R7
        SUB      R0,R0,R1
        ADD      R7,R0,#+2
        B        ??CalcGuiOnRedraw_5
??CalcGuiOnRedraw_4:
        LDR      R2,[SP, #+24]
        CMP      R7,R2
        SUBGE    R0,R0,#+1
        ADDGE    R7,R0,R7
??CalcGuiOnRedraw_5:
        CMP      R7,#+0
        MOVMI    R7,#+0
        BMI      ??CalcGuiOnRedraw_3
        LDR      R0,[SP, #+20]
        LDR      R1,[SP, #+0]
        SUB      R0,R0,R1
        CMP      R0,R7
        LDRLT    R0,[SP, #+20]
        SUBLT    R7,R0,R1
??CalcGuiOnRedraw_3:
        STR      R7,[R4, #+396]
        LDR      R0,[R9, #+220]
        MOV      R10,#+0
        SWI      +497
        LDR      R1,[R4, #+384]
        LDR      R2,[SP, #+4]
        LDR      R0,[SP, #+12]
        SUB      R1,R1,#+1
        SUB      R1,R1,R2, ASR #+6
        LDR      R2,[R4, #+380]
        ASR      R8,R0,#+6
        SUB      R1,R1,R2
        SUB      R1,R1,R8, LSL #+1
        SUB      R1,R1,#+4
        STR      R1,[SP, #+44]
        LDR      R1,[R4, #+380]
        MOV      R11,R6
        ADD      R1,R8,R1
        ADD      R1,R1,#+1
        STR      R1,[SP, #+36]
        LDR      R1,[R4, #+388]
        LDR      R2,[R9, #+224]
        ADD      R1,R8,R1
        ADD      R1,R2,R1
        ADD      R1,R1,R0, ASR #+5
        ADD      R1,R1,#+2
        STR      R1,[SP, #+28]
        LDR      R0,[R9, #+208]
        MOV      R8,R6
        CMP      R0,#+0
        BPL      ??CalcGuiOnRedraw_6
        B        ??CalcGuiOnRedraw_7
??CalcGuiOnRedraw_8:
        LDR      R0,??DataTable56  ;; vars + 212
        LDR      R0,[R0, #+0]
        CMP      R8,R0
        BNE      ??CalcGuiOnRedraw_9
        LDR      R9,??DataTable57  ;; vars
        LDR      R0,[SP, #+28]
        LDR      R2,[R9, #+224]
        SUB      R3,R6,R7
        ADD      R1,R2,#+2
        MLA      R1,R3,R1,R0
        LDR      R0,[SP, #+36]
        MOV      R3,#-16777216
        PUSH     {R3}
        CFI CFA R13+132
        PUSH     {R3}
        CFI CFA R13+136
        ADD      R0,R10,R0
        ADD      R10,R10,#+2
        MOV      R11,#+2
        ADD      R3,R2,R1
        ADD      R2,R0,#+2
        SWI      +492
        ADD      SP,SP,#+8
        CFI CFA R13+128
??CalcGuiOnRedraw_9:
        LDR      R0,??DataTable55  ;; vars + 208
        LDR      R0,[R0, #+0]
        CMP      R8,R0
        BGE      ??CalcGuiOnRedraw_10
        LDR      R9,??DataTable57  ;; vars
        ADD      R0,R8,R9
        LDRB     R0,[R0, #+228]
        ADD      R1,R4,R0, LSL #+2
        LDR      R0,[R1, #+404]
        LDR      R1,[R1, #+700]
        STR      R1,[SP, #+16]
        LDR      R1,[SP, #+44]
        LDR      R2,[SP, #+16]
        ADD      R1,R11,R1
        ADD      R2,R2,R10
        CMP      R1,R2
        ADDLT    R6,R6,#+1
        MOVLT    R10,#+0
        MOVLT    R11,#+0
        CMP      R6,R7
        BLT      ??CalcGuiOnRedraw_11
        LDR      R1,[SP, #+32]
        ADD      R1,R1,R7
        CMP      R6,R1
        BGE      ??CalcGuiOnRedraw_11
        LDR      R1,[R9, #+224]
        LDR      R2,[SP, #+36]
        MOV      R3,#+0
        PUSH     {R3}
        CFI CFA R13+132
        ADD      R1,R1,#+2
        SUB      R9,R6,R7
        ADD      R12,R9,#+1
        MOV      R3,#-16777216
        PUSH     {R3}
        CFI CFA R13+136
        ADD      R2,R10,R2
        MOV      R3,#+0
        PUSH     {R3}
        CFI CFA R13+140
        PUSH     {R3}
        CFI CFA R13+144
        LDR      R3,[SP, #+44]
        MLA      R3,R12,R1,R3
        PUSH     {R3}
        CFI CFA R13+148
        LDR      R3,[SP, #+36]
        ADD      R3,R3,R2
        PUSH     {R3}
        CFI CFA R13+152
        LDR      R3,[SP, #+52]
        MLA      R3,R9,R1,R3
        MOV      R1,#+0
        SWI      +493
        ADD      SP,SP,#+24
        CFI CFA R13+128
??CalcGuiOnRedraw_11:
        LDR      R0,[SP, #+16]
        ADD      R10,R0,R10
??CalcGuiOnRedraw_10:
        ADD      R8,R8,#+1
??CalcGuiOnRedraw_6:
        LDR      R0,??DataTable55  ;; vars + 208
        LDR      R0,[R0, #+0]
        CMP      R0,R8
        BGE      ??CalcGuiOnRedraw_8
??CalcGuiOnRedraw_7:
        LDR      R0,[SP, #+0]
        LDR      R1,[SP, #+20]
        CMP      R0,R1
        BGE      ??CalcGuiOnRedraw_12
        LDR      R9,??DataTable57  ;; vars
        LDR      R1,[SP, #+12]
        LDR      R6,[R9, #+224]
        ASR      R1,R1,#+5
        STR      R1,[SP, #+8]
        LDR      R0,[SP, #+12]
        LDR      R1,[R4, #+388]
        ASR      R8,R0,#+6
        LDR      R0,[R4, #+392]
        SUB      R0,R0,R1
        LDR      R1,[SP, #+8]
        SUB      R0,R0,R8, LSL #+1
        SUB      R0,R0,R6
        SUB      R0,R0,R1
        SUB      R2,R0,#+2
        LDR      R0,[SP, #+20]
        SUB      R3,R0,#+1
        LDR      R0,[SP, #+0]
        MOV      R1,R3
        MUL      R0,R2,R0
        _BLF     ??div32_a,??rA??div32_a
        MOV      R7,R1
        LDR      R1,[SP, #+24]
        SUB      R0,R2,R7
        MUL      R0,R1,R0
        MOV      R1,R3
        _BLF     ??div32_a,??rA??div32_a
        MOV      R0,#-16777216
        PUSH     {R0}
        CFI CFA R13+132
        PUSH     {R0}
        CFI CFA R13+136
        LDR      R2,[SP, #+16]
        LDR      R0,[R4, #+388]
        ADD      R0,R8,R0
        ADD      R0,R6,R0
        ADD      R0,R2,R0
        ADD      R0,R1,R0
        ADD      R0,R7,R0
        ADD      R3,R0,#+2
        LDR      R0,[R4, #+384]
        SUB      R2,R0,R8
        LDR      R0,[R4, #+388]
        ADD      R0,R8,R0
        ADD      R0,R6,R0
        LDR      R6,[SP, #+16]
        ADD      R0,R6,R0
        LDR      R6,[SP, #+12]
        ADD      R0,R1,R0
        ADD      R1,R0,#+2
        LDR      R0,[R4, #+384]
        SUB      R0,R0,R8
        SUB      R0,R0,R6, ASR #+6
        SWI      +492
        ADD      SP,SP,#+8
        CFI CFA R13+128
??CalcGuiOnRedraw_12:
        LDR      R0,[R4, #+364]
        CMP      R0,#+0
        BEQ      ??CalcGuiOnRedraw_13
        LDR      R0,??CalcGuiOnRedraw_1+0x8  ;; vars + 224
        MOV      R1,#+0
        STR      R1,[SP, #+0]
        LDR      R0,[R0, #+0]
        LDR      R2,[SP, #+4]
        MOV      R1,#+40
        ADD      R0,R1,R0, LSL #+2
        LDR      R1,[R4, #+400]
        ADD      R1,R1,R1, LSL #+1
        SUB      R2,R2,R1
        CMP      R2,#+4
        BLT      ??CalcGuiOnRedraw_14
        LDR      R3,[SP, #+4]
        SUB      R3,R3,R1
        ASR      R3,R3,#+2
        STR      R3,[SP, #+0]
        ADD      R2,R3,R3, LSL #+1
        ADD      R1,R2,R1
??CalcGuiOnRedraw_14:
        LDR      R2,[SP, #+12]
        CMP      R0,R2
        SUBLT    R3,R2,R0
        ASRLT    R3,R3,#+1
        MOVGE    R3,#+0
        STR      R3,[SP, #+8]
        LDR      R2,[SP, #+4]
        CMP      R1,R2
        SUBLT    R3,R2,R1
        ASRLT    R3,R3,#+1
        MOVGE    R3,#+0
        STR      R3,[SP, #+16]
        LDR      R2,[R4, #+380]
        LDR      R3,[SP, #+16]
        ADD      R10,R3,R2
        LDR      R2,[R4, #+388]
        LDR      R3,[SP, #+8]
        ADD      R11,R3,R2
        LDR      R2,[R4, #+380]
        LDR      R3,[SP, #+16]
        ADD      R2,R3,R2
        ADD      R6,R1,R2
        LDR      R1,[R4, #+388]
        LDR      R2,[SP, #+8]
        ADD      R1,R2,R1
        ADD      R7,R0,R1
        MOV      R1,#-16777216
        MOV      R0,R5
        SWI      +608
        MVN      R1,#+0
        MOV      R0,R5
        SWI      +702
        MOV      R0,R5
        SWI      +701
        MOV      R8,R0
        MOV      R0,R5
        SWI      +607
        PUSH     {R8}
        CFI CFA R13+132
        PUSH     {R0}
        CFI CFA R13+136
        MOV      R3,R7, LSL #+16
        MOV      R3,R3, LSR #+16
        MOV      R2,R6, LSL #+16
        MOV      R2,R2, LSR #+16
        MOV      R1,R11, LSL #+16
        MOV      R1,R1, LSR #+16
        MOV      R0,R10, LSL #+16
        MOV      R0,R0, LSR #+16
        SWI      +492
        MOV      R1,#+0
        STR      R1,[SP, #+12]
        ADD      SP,SP,#+8
        CFI CFA R13+128
??CalcGuiOnRedraw_15:
        MOV      R8,#+0
??CalcGuiOnRedraw_16:
        LDR      R1,[R4, #+400]
        LDR      R2,[SP, #+0]
        LDR      R9,??DataTable57  ;; vars
        LDR      R0,[SP, #+16]
        LDR      R3,[SP, #+4]
        ADD      R1,R2,R1
        LDR      R2,[R9, #+224]
        MLA      R6,R1,R8,R0
        LDR      R1,[SP, #+4]
        LDR      R0,[SP, #+8]
        ADD      R2,R2,#+10
        MLA      R7,R2,R1,R0
        LDR      R1,[R4, #+364]
        MOV      R2,#+12
        ADD      R3,R3,R3, LSL #+1
        MLA      R1,R2,R1,R3
        ADD      R1,R8,R1
        ADD      R1,R4,R1, LSL #+2
        LDR      R1,[R1, #+404]
        ADD      R8,R8,#+1
        STR      R1,[SP, #+12]
        LDR      R0,[R9, #+220]
        SWI      +497
        LDR      R0,[R4, #+380]
        LDR      R1,[R4, #+400]
        ADD      R10,R6,R0
        LDR      R0,[R4, #+388]
        MOV      R10,R10, LSL #+16
        ADD      R11,R7,R0
        LDR      R0,[R4, #+380]
        MOV      R10,R10, LSR #+16
        ADD      R0,R6,R0
        ADD      R0,R1,R0
        LDR      R1,[SP, #+0]
        MOV      R11,R11, LSL #+16
        ADD      R6,R1,R0
        LDR      R0,[R4, #+388]
        LDR      R1,[R9, #+224]
        ADD      R0,R7,R0
        ADD      R0,R1,R0
        ADD      R7,R0,#+10
        MOV      R1,#-16777216
        MOV      R0,R5
        SWI      +608
        LDR      R1,??CalcGuiOnRedraw_1  ;; 0xffffffffffc0c0c0
        MOV      R0,R5
        SWI      +702
        MOV      R0,R5
        SWI      +701
        MOV      R9,R0
        MOV      R0,R5
        SWI      +607
        PUSH     {R9}
        CFI CFA R13+132
        PUSH     {R0}
        CFI CFA R13+136
        MOV      R11,R11, LSR #+16
        MOV      R6,R6, LSL #+16
        MOV      R6,R6, LSR #+16
        MOV      R7,R7, LSL #+16
        MOV      R7,R7, LSR #+16
        MOV      R3,R7
        MOV      R2,R6
        MOV      R1,R11
        MOV      R0,R10
        SWI      +492
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+140
        ADD      R3,R11,#+5
        MOV      R2,R10
        MOV      R1,#+2
        MOV      R0,#-16777216
        PUSH     {R0}
        CFI CFA R13+144
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+148
        PUSH     {R0}
        CFI CFA R13+152
        PUSH     {R7}
        CFI CFA R13+156
        PUSH     {R6}
        CFI CFA R13+160
        LDR      R0,[SP, #+44]
        SWI      +493
        CMP      R8,#+3
        ADD      SP,SP,#+32
        CFI CFA R13+128
        BLT      ??CalcGuiOnRedraw_16
        LDR      R1,[SP, #+4]
        ADD      R1,R1,#+1
        STR      R1,[SP, #+4]
        CMP      R1,#+4
        BLT      ??CalcGuiOnRedraw_15
??CalcGuiOnRedraw_13:
        LDR      R0,[SP, #+52]
        SWI      +497
        LDR      R1,[SP, #+48]
        MOV      R0,R5
        SWI      +489
        ADD      SP,SP,#+92
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??CalcGuiOnRedraw_1:
        DC32     0xffffffffffc0c0c0
        DC32     `?<Constant "%1.10lg">`
        DC32     vars + 224
        CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock48 Using cfiCommon0
        CFI NoFunction
        THUMB
??CalcGuiOnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock48
        REQUIRE ??CalcGuiOnKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock49 Using cfiCommon1
        CFI Function ??CalcGuiOnKey
        ARM
??CalcGuiOnKey:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB      SP,SP,#+8
        CFI CFA R13+20
        MOV      R4,R0
        LDR      R0,[SP, #+20]
        MOV      R5,R1
        LDR      R1,??CalcGuiOnKey_1  ;; KBD_SHORT_RELEASE
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        BEQ      ??CalcGuiOnKey_2
        LDR      R1,??CalcGuiOnKey_1+0x4  ;; KBD_REPEAT
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        BNE      ??CalcGuiOnKey_3
??CalcGuiOnKey_2:
        LDR      R0,??CalcGuiOnKey_1+0x8  ;; KEY_DIEZ
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BNE      ??CalcGuiOnKey_4
        LDR      R5,[R4, #+364]
        ADD      R0,R5,#+1
        STR      R0,[R4, #+364]
        CMP      R0,#+4
        BLT      ??CalcGuiOnKey_3
??CalcGuiOnKey_5:
        MOV      R0,#+0
        STR      R0,[R4, #+364]
        B        ??CalcGuiOnKey_3
??CalcGuiOnKey_4:
        LDR      R0,??DataTable47  ;; KEY_DIGITAL_0
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BLT      ??CalcGuiOnKey_6
        LDR      R0,??DataTable47  ;; KEY_DIGITAL_0
        LDR      R0,[R0, #+0]
        ADD      R0,R0,#+9
        CMP      R0,R5
        BGE      ??CalcGuiOnKey_7
??CalcGuiOnKey_6:
        LDR      R0,??DataTable48  ;; KEY_STAR
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BNE      ??CalcGuiOnKey_8
??CalcGuiOnKey_7:
        MOV      R0,R5
        BL       ??GetOperIndexByKey
        LDR      R5,[R4, #+364]
        MOV      R1,#+12
        MLA      R0,R1,R5,R0
        BL       ??insert_operation
        CMP      R5,#+0
        MOVNE    R0,#+0
        STRNE    R0,[R4, #+364]
??CalcGuiOnKey_9:
        LDR      R0,??CalcGuiOnKey_1+0xC  ;; calc_set + 33
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        LDRNE    R0,??DataTable54  ;; vars + 216
        MOVNE    R1,#+1
        STRNE    R1,[R0, #+0]
??CalcGuiOnKey_10:
        MVN      R0,#+0
        STR      R0,[R4, #+372]
??CalcGuiOnKey_3:
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +495
        POP      {R0,R1,R4,R5,PC}  ;; return
??CalcGuiOnKey_8:
        LDR      R0,??CalcGuiOnKey_1+0x10  ;; KEY_DEL
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BNE      ??CalcGuiOnKey_11
        BL       ??remove_operation
        B        ??CalcGuiOnKey_9
??CalcGuiOnKey_11:
        LDR      R0,??CalcGuiOnKey_1+0x14  ;; KEY_LEFT
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BNE      ??CalcGuiOnKey_12
        LDR      R0,??DataTable56  ;; vars + 212
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??CalcGuiOnKey_10
        LDR      R0,??DataTable57  ;; vars
        LDR      R1,[R0, #+212]
        SUB      R1,R1,#+1
??CalcGuiOnKey_13:
        STR      R1,[R0, #+212]
        B        ??CalcGuiOnKey_10
??CalcGuiOnKey_12:
        LDR      R0,??CalcGuiOnKey_1+0x18  ;; KEY_RIGHT
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BNE      ??CalcGuiOnKey_14
        LDR      R0,??DataTable57  ;; vars
        LDR      R1,[R0, #+212]
        LDR      R0,[R0, #+208]
        CMP      R1,R0
        BGE      ??CalcGuiOnKey_10
        LDR      R0,??DataTable57  ;; vars
        ADD      R1,R1,#+1
        B        ??CalcGuiOnKey_13
??CalcGuiOnKey_14:
        LDR      R0,??CalcGuiOnKey_1+0x1C  ;; KEY_UP
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BEQ      ??CalcGuiOnKey_15
        LDR      R0,??CalcGuiOnKey_1+0x20  ;; KEY_DOWN
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BNE      ??CalcGuiOnKey_16
??CalcGuiOnKey_15:
        MOV      R2,SP
        ADD      R1,SP,#+4
        MOV      R0,R4
        BL       ??GetMaxCurRow
        LDR      R1,[R4, #+372]
        CMN      R1,#+1
        STREQ    R0,[R4, #+372]
        LDR      R0,??CalcGuiOnKey_1+0x1C  ;; KEY_UP
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        LDR      R0,[SP, #+0]
        BNE      ??CalcGuiOnKey_17
        CMP      R0,#+1
        BLT      ??CalcGuiOnKey_18
        SUB      R1,R0,#+1
        B        ??CalcGuiOnKey_19
??CalcGuiOnKey_17:
        LDR      R1,[SP, #+4]
        CMP      R0,R1
        BGE      ??CalcGuiOnKey_18
        ADD      R1,R0,#+1
??CalcGuiOnKey_19:
        STR      R1,[SP, #+0]
??CalcGuiOnKey_18:
        LDR      R2,[R4, #+372]
        LDR      R1,[SP, #+0]
        MOV      R0,R4
        BL       ??SetCursPos
        B        ??CalcGuiOnKey_3
??CalcGuiOnKey_16:
        LDR      R0,??CalcGuiOnKey_1+0x24  ;; KEY_RIGHT_SOFT
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BNE      ??CalcGuiOnKey_20
        _BLF     ??CreateCalcMenu,??CreateCalcMenu??rA
        B        ??CalcGuiOnKey_3
??CalcGuiOnKey_20:
        LDR      R0,??CalcGuiOnKey_1+0x28  ;; KEY_LEFT_SOFT
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BNE      ??CalcGuiOnKey_21
        LDR      R0,??DataTable54  ;; vars + 216
        MOV      R1,#+1
        STR      R1,[R0, #+0]
        B        ??CalcGuiOnKey_3
??CalcGuiOnKey_21:
        LDR      R0,??CalcGuiOnKey_1+0x2C  ;; KEY_ESC
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BNE      ??CalcGuiOnKey_3
        LDR      R0,[R4, #+364]
        CMP      R0,#+0
        BNE      ??CalcGuiOnKey_5
        LDR      R0,??DataTable55  ;; vars + 208
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??CalcGuiOnKey_22
        LDR      R0,??DataTable56  ;; vars + 212
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??CalcGuiOnKey_23
??CalcGuiOnKey_22:
        LDR      R0,??DataTable57  ;; vars
        MOV      R1,#+0
        STR      R1,[R0, #+212]
        STR      R1,[R0, #+208]
        MOV      R1,#+1
        STR      R1,[R0, #+216]
        B        ??CalcGuiOnKey_10
??CalcGuiOnKey_23:
        LDR      R0,??CalcGuiOnKey_1+0x30  ;; ??isScalkaBook
        SWI      +304
        SWI      +303
        POP      {R0,R1,R4,R5,PC}
        DATA
??CalcGuiOnKey_1:
        DC32     KBD_SHORT_RELEASE
        DC32     KBD_REPEAT
        DC32     KEY_DIEZ
        DC32     calc_set + 33
        DC32     KEY_DEL
        DC32     KEY_LEFT
        DC32     KEY_RIGHT
        DC32     KEY_UP
        DC32     KEY_DOWN
        DC32     KEY_RIGHT_SOFT
        DC32     KEY_LEFT_SOFT
        DC32     KEY_ESC
        DC32     ??isScalkaBook
        CFI EndBlock cfiBlock49

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable47:
        DC32     KEY_DIGITAL_0

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable48:
        DC32     KEY_STAR

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable54:
        DC32     vars + 216

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable55:
        DC32     vars + 208

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable56:
        DC32     vars + 212

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable57:
        DC32     vars

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock50 Using cfiCommon0
        CFI NoFunction
        THUMB
??CalcGui_constr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock50
        REQUIRE ??CalcGui_constr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock51 Using cfiCommon1
        CFI Function ??CalcGui_constr
        ARM
??CalcGui_constr:
        LDR      R1,??CalcGui_constr_1  ;; CalcGuiName
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        SWI      +544
        MOV      R1,#+996
        MOV      R0,R4
        SWI      +546
        LDR      R1,??CalcGui_constr_1+0x4  ;; ??CalcGuiOnCreate
        MOV      R0,R4
        SWI      +548
        LDR      R1,??CalcGui_constr_1+0x8  ;; ??CalcGuiOnClose
        MOV      R0,R4
        SWI      +550
        LDR      R1,??CalcGui_constr_1+0xC  ;; ??CalcGuiOnRedraw
        MOV      R0,R4
        SWI      +552
        LDR      R1,??CalcGui_constr_1+0x10  ;; ??CalcGuiOnKey
        MOV      R0,R4
        SWI      +554
        POP      {R4,PC}          ;; return
        DATA
??CalcGui_constr_1:
        DC32     CalcGuiName
        DC32     ??CalcGuiOnCreate
        DC32     ??CalcGuiOnClose
        DC32     ??CalcGuiOnRedraw
        DC32     ??CalcGuiOnKey
        CFI EndBlock cfiBlock51

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock52 Using cfiCommon0
        CFI NoFunction
        THUMB
??CalcGui_destr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock52
        REQUIRE ??CalcGui_destr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock53 Using cfiCommon1
        CFI Function ??CalcGui_destr
        ARM
??CalcGui_destr:
        BX       LR               ;; return
        CFI EndBlock cfiBlock53

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock54 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateCalkGUI??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock54
        REQUIRE ??CreateCalkGUI

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock55 Using cfiCommon1
        CFI Function ??CreateCalkGUI
        ARM
??CreateCalkGUI:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        MOV      R0,#+144
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R2,??CreateCalkGUI_1  ;; ??CalcGui_constr
        LDR      R1,??CreateCalkGUI_1+0x4  ;; ??CalcGui_destr
        MOV      R5,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+16
        PUSH     {R0}
        CFI CFA R13+20
        PUSH     {R0}
        CFI CFA R13+24
        MOV      R3,R4
        MOV      R0,R5
        SWI      +496
        CMP      R0,#+0
        ADD      SP,SP,#+12
        CFI CFA R13+12
        BNE      ??CreateCalkGUI_2
        MOV      R0,R5
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R0,#+0
        POP      {R4,R5,PC}
??CreateCalkGUI_2:
        CMP      R4,#+0
        BEQ      ??CreateCalkGUI_3
        MOV      R1,R5
        MOV      R0,R4
        SWI      +491
??CreateCalkGUI_3:
        MOV      R1,#+4
        MOV      R0,R5
        SWI      +310
        MOV      R1,#+1
        MOV      R0,R5
        SWI      +641
        MOV      R0,R5
        SWI      +673
        MOV      R0,R5
        POP      {R4,R5,PC}       ;; return
        DATA
??CreateCalkGUI_1:
        DC32     ??CalcGui_constr
        DC32     ??CalcGui_destr
        CFI EndBlock cfiBlock55

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock56 Using cfiCommon1
        CFI NoFunction
        ARM
??abs??rA:
        LDR      R12,??Subroutine28_0  ;; abs
        BX       R12
        DATA
??Subroutine28_0:
        DC32     abs
        CFI EndBlock cfiBlock56

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock57 Using cfiCommon1
        CFI NoFunction
        ARM
??IsMathFunc??rA:
        LDR      R12,??Subroutine29_0  ;; ??IsMathFunc
        BX       R12
        DATA
??Subroutine29_0:
        DC32     ??IsMathFunc
        CFI EndBlock cfiBlock57

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock58 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine30_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine30_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock58

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock59 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine31_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine31_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock59

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock60 Using cfiCommon1
        CFI NoFunction
        ARM
??modf??rA:
        LDR      R12,??Subroutine32_0  ;; modf
        BX       R12
        DATA
??Subroutine32_0:
        DC32     modf
        CFI EndBlock cfiBlock60

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock61 Using cfiCommon1
        CFI NoFunction
        ARM
??__dEqual??rA:
        LDR      R12,??Subroutine33_0  ;; __dEqual
        BX       R12
        DATA
??Subroutine33_0:
        DC32     __dEqual
        CFI EndBlock cfiBlock61

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock62 Using cfiCommon1
        CFI NoFunction
        ARM
??__dGreaterEqual??rA:
        LDR      R12,??Subroutine34_0  ;; __dGreaterEqual
        BX       R12
        DATA
??Subroutine34_0:
        DC32     __dGreaterEqual
        CFI EndBlock cfiBlock62

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock63 Using cfiCommon1
        CFI NoFunction
        ARM
??__dNotEqual??rA:
        LDR      R12,??Subroutine35_0  ;; __dNotEqual
        BX       R12
        DATA
??Subroutine35_0:
        DC32     __dNotEqual
        CFI EndBlock cfiBlock63

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock64 Using cfiCommon1
        CFI NoFunction
        ARM
??__dAdd??rA:
        LDR      R12,??Subroutine36_0  ;; __dAdd
        BX       R12
        DATA
??Subroutine36_0:
        DC32     __dAdd
        CFI EndBlock cfiBlock64

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock65 Using cfiCommon1
        CFI NoFunction
        ARM
??__dMul??rA:
        LDR      R12,??Subroutine37_0  ;; __dMul
        BX       R12
        DATA
??Subroutine37_0:
        DC32     __dMul
        CFI EndBlock cfiBlock65

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock66 Using cfiCommon1
        CFI NoFunction
        ARM
??_Log??rA:
        LDR      R12,??Subroutine38_0  ;; _Log
        BX       R12
        DATA
??Subroutine38_0:
        DC32     _Log
        CFI EndBlock cfiBlock66

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock67 Using cfiCommon1
        CFI NoFunction
        ARM
??__dDiv??rA:
        LDR      R12,??Subroutine39_0  ;; __dDiv
        BX       R12
        DATA
??Subroutine39_0:
        DC32     __dDiv
        CFI EndBlock cfiBlock67

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock68 Using cfiCommon1
        CFI NoFunction
        ARM
??sqrt??rA:
        LDR      R12,??Subroutine40_0  ;; sqrt
        BX       R12
        DATA
??Subroutine40_0:
        DC32     sqrt
        CFI EndBlock cfiBlock68

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock69 Using cfiCommon1
        CFI NoFunction
        ARM
??__dSub??rA:
        LDR      R12,??Subroutine41_0  ;; __dSub
        BX       R12
        DATA
??Subroutine41_0:
        DC32     __dSub
        CFI EndBlock cfiBlock69

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock70 Using cfiCommon1
        CFI NoFunction
        ARM
??_Sin??rA:
        LDR      R12,??Subroutine42_0  ;; _Sin
        BX       R12
        DATA
??Subroutine42_0:
        DC32     _Sin
        CFI EndBlock cfiBlock70

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock71 Using cfiCommon1
        CFI NoFunction
        ARM
??tan??rA:
        LDR      R12,??Subroutine43_0  ;; tan
        BX       R12
        DATA
??Subroutine43_0:
        DC32     tan
        CFI EndBlock cfiBlock71

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock72 Using cfiCommon1
        CFI NoFunction
        ARM
??asin??rA:
        LDR      R12,??Subroutine44_0  ;; asin
        BX       R12
        DATA
??Subroutine44_0:
        DC32     asin
        CFI EndBlock cfiBlock72

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock73 Using cfiCommon1
        CFI NoFunction
        ARM
??acos??rA:
        LDR      R12,??Subroutine45_0  ;; acos
        BX       R12
        DATA
??Subroutine45_0:
        DC32     acos
        CFI EndBlock cfiBlock73

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock74 Using cfiCommon1
        CFI NoFunction
        ARM
??exp??rA:
        LDR      R12,??Subroutine46_0  ;; exp
        BX       R12
        DATA
??Subroutine46_0:
        DC32     exp
        CFI EndBlock cfiBlock74

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock75 Using cfiCommon1
        CFI NoFunction
        ARM
??atan??rA:
        LDR      R12,??Subroutine47_0  ;; atan
        BX       R12
        DATA
??Subroutine47_0:
        DC32     atan
        CFI EndBlock cfiBlock75

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock76 Using cfiCommon1
        CFI NoFunction
        ARM
??pow??rA:
        LDR      R12,??Subroutine48_0  ;; pow
        BX       R12
        DATA
??Subroutine48_0:
        DC32     pow
        CFI EndBlock cfiBlock76

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock77 Using cfiCommon1
        CFI NoFunction
        ARM
??_Sinh??rA:
        LDR      R12,??Subroutine49_0  ;; _Sinh
        BX       R12
        DATA
??Subroutine49_0:
        DC32     _Sinh
        CFI EndBlock cfiBlock77

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock78 Using cfiCommon1
        CFI NoFunction
        ARM
??_Cosh??rA:
        LDR      R12,??Subroutine50_0  ;; _Cosh
        BX       R12
        DATA
??Subroutine50_0:
        DC32     _Cosh
        CFI EndBlock cfiBlock78

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock79 Using cfiCommon1
        CFI NoFunction
        ARM
??tanh??rA:
        LDR      R12,??Subroutine51_0  ;; tanh
        BX       R12
        DATA
??Subroutine51_0:
        DC32     tanh
        CFI EndBlock cfiBlock79

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock80 Using cfiCommon1
        CFI NoFunction
        ARM
??gamma??rA:
        LDR      R12,??Subroutine52_0  ;; ??gamma
        BX       R12
        DATA
??Subroutine52_0:
        DC32     ??gamma
        CFI EndBlock cfiBlock80

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock81 Using cfiCommon1
        CFI NoFunction
        ARM
??strtod??rA:
        LDR      R12,??Subroutine53_0  ;; strtod
        BX       R12
        DATA
??Subroutine53_0:
        DC32     strtod
        CFI EndBlock cfiBlock81

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock82 Using cfiCommon1
        CFI NoFunction
        ARM
??rA??div32_a:
        LDR      R12,??Subroutine54_0  ;; ??div32_a
        MOV      PC,R12
        DATA
??Subroutine54_0:
        DC32     ??div32_a
        CFI EndBlock cfiBlock82

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock83 Using cfiCommon1
        CFI NoFunction
        ARM
??CreateCalcMenu??rA:
        LDR      R12,??Subroutine55_0  ;; ??CreateCalcMenu
        BX       R12
        DATA
??Subroutine55_0:
        DC32     ??CreateCalcMenu
        CFI EndBlock cfiBlock83

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock84 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine56_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine56_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock84

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock85 Using cfiCommon1
        CFI Function ??IsMathFunc
        ARM
??IsMathFunc:
        CMP      R0,#+12
        CMPNE    R0,#+15
        CMPNE    R0,#+18
        CMPNE    R0,#+24
        CMPNE    R0,#+25
        CMPNE    R0,#+26
        CMPNE    R0,#+27
        CMPNE    R0,#+30
        CMPNE    R0,#+36
        CMPNE    R0,#+37
        CMPNE    R0,#+39
        CMPNE    R0,#+40
        CMPNE    R0,#+41
        CMPNE    R0,#+42
        CMPNE    R0,#+43
        CMPNE    R0,#+44
        MOVEQ    R0,#+1
        BXEQ     LR
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock85

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
// 8 096 bytes in segment CODE
//   346 bytes in segment DATA_C
// 1 508 bytes in segment DATA_Z
//    12 bytes in segment INITTAB
// 
// 7 556 bytes of CODE  memory (+ 552 bytes shared)
//   346 bytes of CONST memory
// 1 508 bytes of DATA  memory
//
//Errors: none
//Warnings: none
