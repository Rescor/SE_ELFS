//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:49:04 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\i /
//                       mages.cpp                                           /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\i /
//                       mages.cpp -D NDEBUG -D OLDFUNCTIONS -lC             /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\AdvSoftkeys\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\Obj\ -s9 --cpu_mode arm --endian little      /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\images.s79                              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME images

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
        PUBLIC ??ImageHandler_Free
        FUNCTION ??ImageHandler_Free,0203H
        LOCFRAME CSTACK, 32, STACK
        MULTWEAK ??ImageHandler_Free??rT
        PUBLIC ??ImageHandler_Get
        FUNCTION ??ImageHandler_Get,0203H
        LOCFRAME CSTACK, 44, STACK
        MULTWEAK ??ImageHandler_Get??rT
        PUBLIC ??destroy_all_images
        FUNCTION ??destroy_all_images,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??destroy_all_images??rT
        PUBLIC ??images_add
        FUNCTION ??images_add,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??images_add??rT
        PUBWEAK ?init?tab?DATA_I
        PUBLIC handles
        PUBLIC images
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        

??ImageHandler_Free??rT SYMBOL "??rT", ??ImageHandler_Free

??ImageHandler_Get??rT SYMBOL "??rT", ??ImageHandler_Get

??destroy_all_images??rT SYMBOL "??rT", ??destroy_all_images

??images_add??rT    SYMBOL "??rT", ??images_add

        EXTERN SYNC

// Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\images.cpp
//    1 #include "..\\include\Lib_Clara.h" 
//    2 #include "..\\include\Dir.h" 
//    3 #include "header\images.h"

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//    4 IMAGEID images[10]={NOIMAGE,NOIMAGE,NOIMAGE,NOIMAGE,NOIMAGE,NOIMAGE,NOIMAGE};
images:
        DS8 20
        REQUIRE `?<Initializer for images>`
//    5 u16 handles[10]={NOIMAGE,NOIMAGE,NOIMAGE,NOIMAGE,NOIMAGE,NOIMAGE,NOIMAGE};
handles:
        DS8 20
        REQUIRE `?<Initializer for handles>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??ImageHandler_Get??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??ImageHandler_Get
//    6 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??ImageHandler_Get
        ARM
//    7 wchar_t ImageHandler_Get(wchar_t * path, wchar_t * fname, int x)
//    8 {
??ImageHandler_Get:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R4,R0
//    9   char error_code;
//   10   images[x]=NOIMAGE;
        LDR      R0,??DataTable4  ;; images
        SUB      SP,SP,#+4
        CFI CFA R13+32
        MOV      R5,R1
        ADD      R6,R0,R2, LSL #+1
        MOV      R7,#+255
        ORR      R7,R7,#0xFF00
        STRH     R7,[R6, #+0]
//   11   handles[x]=NOIMAGE;
        ADD      R8,R0,R2, LSL #+1
        STRH     R7,[R8, #+20]
//   12   if (!fstat(path,fname,0))
        MOV      R2,#+0
        MOV      R0,R4
        SWI      +284
        CMP      R0,#+0
        BNE      ??ImageHandler_Get_1
//   13   {
//   14     if (!REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(SYNC,&handles[x],&error_code))
        LDR      R9,??DataTable3  ;; SYNC
        MOV      R2,SP
        LDR      R0,[R9, #+0]
        ADD      R1,R8,#+20
        SWI      +365
        CMP      R0,#+0
        BNE      ??ImageHandler_Get_1
//   15     {
//   16       if (!REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(SYNC,handles[x],path,fname,0,&images[x],&error_code))
        MOV      R0,SP
        PUSH     {R0}
        CFI CFA R13+36
        MOV      R3,R5
        MOV      R2,R4
        MOV      R0,R6
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+44
        LDRH     R1,[R8, #+20]
        LDR      R0,[R9, #+0]
        SWI      +643
        CMP      R0,#+0
        ADD      SP,SP,#+12
        CFI CFA R13+32
        BNE      ??ImageHandler_Get_1
//   17       {
//   18         if (error_code)
        LDRB     R0,[SP, #+0]
        CMP      R0,#+0
//   19         {
//   20           handles[x]=NOIMAGE;
        STRHNE   R7,[R8, #+20]
//   21         }
//   22       }
//   23     }
//   24   }
//   25   return(images[x]);
??ImageHandler_Get_1:
        LDRH     R0,[R6, #+0]
        POP      {R1,R4-R9,PC}    ;; return
        CFI EndBlock cfiBlock1
//   26 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??ImageHandler_Free??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??ImageHandler_Free
//   27 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??ImageHandler_Free
        ARM
//   28 wchar_t ImageHandler_Free(int x)
//   29 {
//   30   if (images[x]!=NOIMAGE)
??ImageHandler_Free:
        LDR      R1,??DataTable4  ;; images
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+4
        CFI CFA R13+20
        ADD      R4,R1,R0, LSL #+1
        LDRH     R2,[R4, #+0]
        MOV      R5,#+255
        ORR      R5,R5,#0xFF00
        CMP      R2,R5
        BEQ      ??ImageHandler_Free_1
//   31   {
//   32     char error_code;
//   33     REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER(SYNC,handles[x],0,0,images[x],1,&error_code);
        ADD      R6,R1,R0, LSL #+1
        MOV      R0,SP
        PUSH     {R0}
        CFI CFA R13+24
        MOV      R3,#+0
        MOV      R0,#+1
        PUSH     {R0}
        CFI CFA R13+28
        LDR      R0,??DataTable3  ;; SYNC
        PUSH     {R2}
        CFI CFA R13+32
        LDRH     R1,[R6, #+20]
        LDR      R0,[R0, #+0]
        MOV      R2,#+0
        SWI      +644
//   34     images[x]=NOIMAGE;
        STRH     R5,[R4, #+0]
//   35     handles[x]=NOIMAGE;
        STRH     R5,[R6, #+20]
        ADD      SP,SP,#+12
        CFI CFA R13+20
//   36   }
//   37   return 0;
??ImageHandler_Free_1:
        MOV      R0,#+0
        POP      {R1,R4-R6,PC}    ;; return
        CFI EndBlock cfiBlock3
//   38 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     SYNC

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??images_add??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??images_add
//   39 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??images_add
        ARM
//   40 void images_add(wchar_t *path, wchar_t *name, int index)
//   41 {
//   42   ImageHandler_Get(path, name, index);
??images_add:
        B        ??ImageHandler_Get  ;; tailcall
        CFI EndBlock cfiBlock5
//   43 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??destroy_all_images??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??destroy_all_images
//   44 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??destroy_all_images
        ARM
//   45 void destroy_all_images()
//   46 {
??destroy_all_images:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
//   47   int x;
//   48   for (x=0;x<7;x++)
        MOV      R4,#+0
        MOV      R6,#+255
        ORR      R6,R6,#0xFF00
??destroy_all_images_1:
        LDR      R0,??DataTable4  ;; images
        ADD      R5,R0,R4, LSL #+1
        LDRH     R0,[R5, #+0]
        CMP      R0,R6
        BEQ      ??destroy_all_images_2
//   49   {
//   50     if (images[x]!=NOIMAGE)
//   51     {
//   52       ImageHandler_Free(x);
        MOV      R0,R4
        BL       ??ImageHandler_Free
//   53     }
//   54     images[x]=NOIMAGE;
??destroy_all_images_2:
        STRH     R6,[R5, #+0]
//   55   }
        ADD      R4,R4,#+1
        CMP      R4,#+7
        BLT      ??destroy_all_images_1
//   56 };
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     images

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for images>`:
        DATA
        DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535
        DC8 0, 0, 0, 0, 0, 0
`?<Initializer for handles>`:
        DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535
        DC8 0, 0, 0, 0, 0, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
//   57 
// 
// 364 bytes in segment CODE
//  40 bytes in segment DATA_I
//  40 bytes in segment DATA_ID
//  12 bytes in segment INITTAB
// 
// 348 bytes of CODE  memory (+ 28 bytes shared)
//  40 bytes of CONST memory
//  40 bytes of DATA  memory
//
//Errors: none
//Warnings: none
