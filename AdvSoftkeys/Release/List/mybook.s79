//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:49:15 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\m /
//                       ybook.cpp                                           /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\m /
//                       ybook.cpp -D NDEBUG -D OLDFUNCTIONS -lC             /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\AdvSoftkeys\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\Obj\ -s9 --cpu_mode arm --endian little      /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\mybook.s79                              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME mybook

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
        PUBLIC ??Change
        FUNCTION ??Change,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??Change??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
        MULTWEAK ??Init??rA
        PUBLIC ??MyBook_Create
        FUNCTION ??MyBook_Create,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??MyBook_Create??rT
        PUBLIC ??MyBook_OnClose
        FUNCTION ??MyBook_OnClose,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??MyBook_OnClose??rT
        PUBLIC ??MyBook_OnShowAuthorInfo
        FUNCTION ??MyBook_OnShowAuthorInfo,0603H
        LOCFRAME CSTACK, 224, STACK
        MULTWEAK ??MyBook_OnShowAuthorInfo??rT
        PUBLIC ??MyBook_OnTerminate
        FUNCTION ??MyBook_OnTerminate,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??MyBook_OnTerminate??rT
        PUBLIC ??Send_REDRAW_RELEASE
        FUNCTION ??Send_REDRAW_RELEASE,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??Send_REDRAW_RELEASE??rT
        PUBLIC ??SetWorkState
        FUNCTION ??SetWorkState,0603H
        MULTWEAK ??SetWorkState??rT
        MULTWEAK ??cmpfile??rA
        MULTWEAK ??csofts_destroy??rA
        MULTWEAK ??destroy_all_images??rA
        PUBLIC ??onElfKilled
        FUNCTION ??onElfKilled,0603H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??onElfKilled??rT
        PUBLIC ??onThemeChange
        FUNCTION ??onThemeChange,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??onThemeChange??rT
        PUBLIC ??onTimer2
        FUNCTION ??onTimer2,0603H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??onTimer2??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        PUBLIC ??update
        FUNCTION ??update,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??update??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC MyBook
        PUBLIC base_page
        PUBLIC count
        PUBLIC myelfpath
        PUBLIC timer2
        PUBLIC works
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        








??Change??rT        SYMBOL "??rT", ??Change
??Init??rA          SYMBOL "??rA", ??Init

??MyBook_Create??rT SYMBOL "??rT", ??MyBook_Create

??MyBook_OnClose??rT SYMBOL "??rT", ??MyBook_OnClose

??MyBook_OnShowAuthorInfo??rT SYMBOL "??rT", ??MyBook_OnShowAuthorInfo

??MyBook_OnTerminate??rT SYMBOL "??rT", ??MyBook_OnTerminate

??Send_REDRAW_RELEASE??rT SYMBOL "??rT", ??Send_REDRAW_RELEASE

??SetWorkState??rT  SYMBOL "??rT", ??SetWorkState
??cmpfile??rA       SYMBOL "??rA", ??cmpfile
??csofts_destroy??rA SYMBOL "??rA", ??csofts_destroy
??destroy_all_images??rA SYMBOL "??rA", ??destroy_all_images

??onElfKilled??rT   SYMBOL "??rT", ??onElfKilled

??onThemeChange??rT SYMBOL "??rT", ??onThemeChange

??onTimer2??rT      SYMBOL "??rT", ??onTimer2
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

??update??rT        SYMBOL "??rT", ??update

        EXTERN ??DispDraw
        FUNCTION ??DispDraw,0602H
        EXTERN ??Init
        FUNCTION ??Init,0202H
        EXTERN ??NewKey
        FUNCTION ??NewKey,0602H
        EXTERN ??cmpfile
        FUNCTION ??cmpfile,0202H
        EXTERN ??csofts_destroy
        FUNCTION ??csofts_destroy,0202H
        EXTERN ??destroy_all_images
        FUNCTION ??destroy_all_images,0202H
        EXTERN ??elf_exit
        FUNCTION ??elf_exit,0602H
        EXTERN ??isSoftkeysBook
        FUNCTION ??isSoftkeysBook,0602H
        EXTERN ??onkey
        FUNCTION ??onkey,0602H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN ??ourredraw
        FUNCTION ??ourredraw,0602H
        EXTERN DREDRAW
        EXTERN DREFRESH
        EXTERN sk
        EXTERN soft

// Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\mybook.cpp
//    1 #include "..\\include\Lib_Clara.h" 
//    2 #include "..\\include\Dir.h" 
//    3 #include "header\structs.h"
//    4 #include "header\main.h"
//    5 #include "header\config_data.h"
//    6 #include "header\conf_loader.h"
//    7 #include "..\\include\cfg_items.h"
//    8 #include "header\iofunc.h"
//    9 #include "revision.h"
//   10 //--------------------------------------------------------------
//   11 #define VERSION_ 0x00AAAA01
//   12 
//   13 #define AuthorInfo L"AdvSoftkeys\n© UltraShot\n"
//   14 //--------------------------------------------------------------

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   15 wchar_t myelfpath[512];
myelfpath:
        DS8 1024
//   16 MyBOOK *MyBook=0;
//   17 bool works=true;

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   18 u16 timer2;
timer2:
        DS8 2
        DS8 2
//   19 int count=0;
count:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyBook_OnTerminate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??MyBook_OnTerminate
//   20 //--------------------------------------------------------------
//   21 extern DISP_OBJ_ONREDRAW_METHOD DREDRAW;
//   22 extern u16 timer;
//   23 extern DISP_OBJ_METHOD DREFRESH;
//   24 extern UI_SOFTKEY sk[3];
//   25 extern RECT rect;
//   26 extern DISP_OBJ *soft;
//   27 //--------------------------------------------------------------
//   28 void DispDraw(DISP_OBJ* DO,int a,int b,int c);
//   29 void Init();
//   30 void Send_REDRAW_RELEASE();
//   31 void csofts_destroy();
//   32 void destroy_all_images();
//   33 void Init();
//   34 int NewKey(int key, int r1 , int mode, LPARAM, DISP_OBJ*);
//   35 int onkey(int key);
//   36 int ourredraw(DISP_OBJ *DO, int a, int b, int c);
//   37 int isSoftkeysBook(BOOK *bk);
//   38 //--------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??MyBook_OnTerminate
        ARM
//   39 int MyBook_OnTerminate(void * ,BOOK* book)
//   40 {
??MyBook_OnTerminate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
//   41   Send_REDRAW_RELEASE();
        BL       ??Send_REDRAW_RELEASE
//   42   FreeBook(book);
        MOV      R0,R4
        SWI      +303
//   43   return(1);
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock1
//   44 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyBook_OnShowAuthorInfo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??MyBook_OnShowAuthorInfo
//   45 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??MyBook_OnShowAuthorInfo
        ARM
//   46 int MyBook_OnShowAuthorInfo(void *mess ,BOOK* book)
//   47 {
//   48   MSG * msg = (MSG*)mess;
//   49   wchar_t text[100];
//   50   snwprintf(text,99,L"%ls\n\nrevision %d", AuthorInfo, __SVN_REVISION__ );
??MyBook_OnShowAuthorInfo:
        LDR      R2,??MyBook_OnShowAuthorInfo_1  ;; `?<Constant L"\\x25\\x6c\\x73\\xa\\xa\\x72\\x65\\x76\\x6`
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB      SP,SP,#+200
        CFI CFA R13+212
        MOV      R4,R0
        MOV      R0,#+85
        ORR      R0,R0,#0xE00
        PUSH     {R0}
        CFI CFA R13+216
        ADD      R3,R2,#+36
        MOV      R1,#+99
//   51   MessageBox(EMPTY_TEXTID,TextID_Create(text, ENC_UCS2, TEXTID_ANY_LEN), NOIMAGE, 1 ,5000, msg->book);
        MOV      R5,#+255
        ADD      R0,SP,#+4
        SWI      +277
        ORR      R5,R5,#0xFF00
        MOV      R2,R5
        MOV      R1,#+0
        ADD      R0,SP,#+4
        SWI      +349
        LDR      R1,[R4, #+0]
        MOV      R3,#+1
        PUSH     {R1}
        CFI CFA R13+220
        MOV      R2,R5
        MOV      R1,#+136
        ORR      R1,R1,#0x1300
        PUSH     {R1}
        CFI CFA R13+224
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
//   52   return(1);
        MOV      R0,#+1
        ADD      SP,SP,#+212
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??MyBook_OnShowAuthorInfo_1:
        DC32     `?<Constant L"\\x25\\x6c\\x73\\xa\\xa\\x72\\x65\\x76\\x6`
        CFI EndBlock cfiBlock3
//   53 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??Send_REDRAW_RELEASE??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??Send_REDRAW_RELEASE
//   54 
//   55 //--------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??Send_REDRAW_RELEASE
        ARM
//   56 void Send_REDRAW_RELEASE()
//   57 {
??Send_REDRAW_RELEASE:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   58   // ïîñûëàåì âñåì  ìåññàãó ñî ñòàðûì è ñâîèì ìåòîäàìè Redraw
//   59   REDRAW_RELEASE_MESSAGE * sbm= new REDRAW_RELEASE_MESSAGE;
        MOV      R0,#+24
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R4,R0
//   60   memset(sbm,0,sizeof(REDRAW_RELEASE_MESSAGE));
        MOV      R2,#+24
        MOV      R1,#+0
        SWI      +274
//   61   sbm->SK_OldOnRedraw=DREDRAW;
        LDR      R0,??DataTable4  ;; DREDRAW
        LDR      R0,[R0, #+0]
        STR      R0,[R4, #+16]
//   62   sbm->SK_NewOnRedraw=DispDraw;
        LDR      R0,??DataTable3  ;; ??DispDraw
        STR      R0,[R4, #+20]
//   63   UI_Event_wData(SBY_REDRAW_RELEASE_EVENT ,sbm,(void (*)(void*))mfree_adr());
        SWI      +33028
        MOV      R2,R0
        MOV      R1,R4
        MOV      R0,#+227
        ORR      R0,R0,#0x300
        SWI      +425
//   64 };
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??onElfKilled??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??onElfKilled
//   65 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??onElfKilled
        ARM
//   66 int onElfKilled(void *mess ,BOOK* book)
//   67 {
??onElfKilled:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//   68   // åñëè áûë óáèò ýëüô ðèñóþùèé íà ÃÝ èëè ïðîñòî íóæíî ïåðåòîñîâàòü ìåòîäû
//   69   REDRAW_RELEASE_MESSAGE * sbm=(REDRAW_RELEASE_MESSAGE*)mess;
//   70   // åãî ëè ìåòîä ìû èñïîëüçóåì â êà÷åñòâå oldRedraw?
//   71   if (sbm->SK_NewOnRedraw==DREDRAW)
        LDR      R5,??DataTable4  ;; DREDRAW
        MOV      R4,R0
        LDR      R0,[R4, #+20]
        LDR      R1,[R5, #+0]
        CMP      R0,R1
        BNE      ??onElfKilled_1
//   72   {
//   73     REDRAW_RELEASE_MESSAGE * ms= new REDRAW_RELEASE_MESSAGE;
        MOV      R0,#+24
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R6,R0
//   74     memcpy(ms,sbm,sizeof(REDRAW_RELEASE_MESSAGE));
        MOV      R2,#+24
        MOV      R1,R4
        SWI      +275
//   75     //memset(ms,0,sizeof(REDRAW_RELEASE_MESSAGE));
//   76     // åñëè îí áûë óáèò, òî çàìåíÿåì ñâîé oldRedraw íà åãî..
//   77     if (sbm->SK_OldOnRedraw!=EMPTY_REDRAW_METHOD) DREDRAW=sbm->SK_OldOnRedraw;
        LDR      R0,[R4, #+16]
//   78 
//   79     // ñòàâèì ñâîé ìåòîä íàâåðõ
//   80     DISP_DESC_SetOnRedraw(DispObject_GetDESC(DispObject_SoftKeys_Get()),DispDraw);
        LDR      R4,??DataTable3  ;; ??DispDraw
        MVN      R7,#+0
        CMP      R0,R7
        STRNE    R0,[R5, #+0]
        SWI      +675
        SWI      +543
        MOV      R1,R4
        SWI      +552
//   81 
//   82     // è øë¸ì ìåññàãó ñíîâà, ÷òîá ñëåäóþùèå ýëüôû ñäåëàëè òîæå ñàìîå
//   83     ms->SK_OldOnRedraw=EMPTY_REDRAW_METHOD;
        STR      R7,[R6, #+16]
//   84     ms->SK_NewOnRedraw=DispDraw;
        STR      R4,[R6, #+20]
//   85     UI_Event_wData(SBY_REDRAW_RELEASE_EVENT ,ms,(void (*)(void*))mfree_adr());
        SWI      +33028
        MOV      R2,R0
        MOV      R1,R6
        MOV      R0,#+227
        ORR      R0,R0,#0x300
        SWI      +425
//   86     return BLOCK_EVENT_GLOBALLY;
        MOV      R0,#+154
        ORR      R0,R0,#0x200
        POP      {R4-R7,PC}
//   87   }
//   88   return 0;
??onElfKilled_1:
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock7
//   89 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     ??DispDraw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyBook_OnClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??MyBook_OnClose
//   90 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??MyBook_OnClose
        ARM
//   91 void MyBook_OnClose(BOOK * book)
//   92 {
??MyBook_OnClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+4
        CFI CFA R13+12
//   93   if (book)
        CMP      R0,#+0
        POPEQ    {R0,R4,PC}
//   94   {
//   95     destroy_all_images();
        _BLF     ??destroy_all_images,??destroy_all_images??rA
//   96     csofts_destroy();
        _BLF     ??csofts_destroy,??csofts_destroy??rA
//   97     ModifyKeyHook(NewKey,KEY_HOOK_REMOVE, NULL);
        LDR      R0,??MyBook_OnClose_1  ;; ??NewKey
        MOV      R1,#+0
        STR      R1,[SP, #+0]
        MOV      R2,#+0
        SWI      +263
//   98     DISP_OBJ *soft=DispObject_SoftKeys_Get();
        SWI      +675
        MOV      R4,R0
//   99     DISP_DESC_SetOnRedraw(DispObject_GetDESC(soft), DREDRAW);
        SWI      +543
        LDR      R1,??DataTable4  ;; DREDRAW
        LDR      R1,[R1, #+0]
        SWI      +552
//  100     DISP_DESC_SetOnRefresh(DispObject_GetDESC(soft), DREFRESH);
        MOV      R0,R4
        SWI      +543
        LDR      R1,??MyBook_OnClose_1+0x4  ;; DREFRESH
        LDR      R1,[R1, #+0]
        SWI      +556
//  101     SUBPROC(elf_exit);
        LDR      R0,??MyBook_OnClose_1+0x8  ;; ??elf_exit
        SWI      +264
//  102   }
//  103 };
        POP      {R0,R4,PC}       ;; return
        DATA
??MyBook_OnClose_1:
        DC32     ??NewKey
        DC32     DREFRESH
        DC32     ??elf_exit
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     DREDRAW

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??onTimer2??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??onTimer2
//  104 //--------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??onTimer2
        ARM
//  105 void onTimer2(u16 timerID, LPARAM lparam)
//  106 {
??onTimer2:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
//  107   wchar_t *extConfig=GetDir(MEM_EXTERNAL+DIR_ELFS_CONFIG);
//  108   wchar_t *folder=new wchar_t[wstrlen(extConfig)+1+wstrlen(L"AdvSoftkeys/")+1];
        LDR      R6,??onTimer2_1+0x4  ;; `?<Constant L"\\x41\\x64\\x76\\x53\\x6f\\x66\\x74\\x6b\\_1`
        MOV      R0,#+20
        SWI      +261
        MOV      R4,R0
        SWI      +343
        MOV      R5,R0
        MOV      R0,R6
        SWI      +343
        ADD      R0,R0,R5
        ADD      R0,R0,#+2
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R5,R0
//  109   wstrcpy(folder,extConfig);
        MOV      R1,R4
//  110   wstrcat(folder,L"/");
//  111   wstrcat(folder,L"AdvSoftkeys/");
//  112   if (cmpfile(L"/tpa/system/settings/",L"current_theme.thm", folder, L"curthm.thm") && count<10)
        LDR      R4,??DataTable8  ;; timer2
        SWI      +338
        ADR      R1,??onTimer2_1  ;; 0x2F, 0x00, 0x00, 0x00
        MOV      R0,R5
        SWI      +340
        MOV      R1,R6
        MOV      R0,R5
        SWI      +340
        ADD      R3,R6,#+108
        MOV      R2,R5
        ADD      R1,R6,#+72
        ADD      R0,R6,#+28
        _BLF     ??cmpfile,??cmpfile??rA
        CMP      R0,#+0
        BEQ      ??onTimer2_2
        LDR      R0,[R4, #+4]
        CMP      R0,#+10
        BGE      ??onTimer2_2
//  113   {
//  114     count++;
        ADD      R0,R0,#+1
        STR      R0,[R4, #+4]
//  115     delete(folder);
        MOV      R0,R5
        _BLF     `??operator delete`,`??operator delete??rA`
//  116     Timer_ReSet(&timer2,100, onTimer2,0);
        LDR      R2,??DataTable7  ;; ??onTimer2
        MOV      R3,#+0
        MOV      R1,#+100
        MOV      R0,R4
        SWI      +296
//  117     return;
        POP      {R4-R6,PC}
//  118   }
//  119   else
//  120   {
//  121     delete(folder);
??onTimer2_2:
        MOV      R0,R5
        _BLF     `??operator delete`,`??operator delete??rA`
//  122     destroy_all_images();
        _BLF     ??destroy_all_images,??destroy_all_images??rA
//  123     Init();
        _BLF     ??Init,??Init??rA
//  124     Timer_Kill(&timer2);
        MOV      R0,R4
        SWI      +298
//  125   }
//  126 };
        POP      {R4-R6,PC}       ;; return
        DATA
??onTimer2_1:
        DC8      0x2F, 0x00, 0x00, 0x00
        DC32     `?<Constant L"\\x41\\x64\\x76\\x53\\x6f\\x66\\x74\\x6b\\_1`
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??onThemeChange??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??onThemeChange
//  127 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??onThemeChange
        ARM
//  128 int onThemeChange(void *mess,BOOK *bk)
//  129 {
//  130   count=0;
//  131   timer2=Timer_Set(1000, onTimer2, 0);
??onThemeChange:
        LDR      R1,??DataTable7  ;; ??onTimer2
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R4,??DataTable8  ;; timer2
        MOV      R2,#+0
        STR      R2,[R4, #+4]
        MOV      R0,#+1000
        SWI      +297
        STRH     R0,[R4, #+0]
//  132   return 0;
        MOV      R0,#+0
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13
//  133 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     ??onTimer2

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     timer2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??update??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??update
//  134 //--------------------------------------------------------------

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
//  135 const PAGE_MSG HW_PageEvents[]@ "DYN_PAGE" ={
HW_PageEvents:
        DATA
        DC32 997, ??MyBook_OnTerminate, 998, ??MyBook_OnShowAuthorInfo, 246
        DC32 ??onThemeChange, 995, ??onElfKilled, 64, 0H

        RSEG DATA_I:DATA:SORT:NOROOT(2)
MyBook:
        DS8 4
        REQUIRE `?<Initializer for MyBook>`
//  136   ELF_TERMINATE_EVENT , MyBook_OnTerminate,
//  137   ELF_SHOW_INFO_EVENT  , MyBook_OnShowAuthorInfo,
//  138   THEME_CHANGED_EVENT_TAG, onThemeChange,
//  139   SBY_REDRAW_RELEASE_EVENT, onElfKilled,
//  140   NIL_EVENT_TAG,            NULL
//  141 };
//  142 
//  143 PAGE_DESC base_page ={"SoftkeysPage",0,HW_PageEvents};
base_page:
        DS8 12
        REQUIRE `?<Initializer for base_page>`

        RSEG DATA_I:DATA:SORT:NOROOT(0)
works:
        DS8 1
        REQUIRE `?<Initializer for works>`
//  144 //--------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??update
        ARM
//  145 wchar_t* update()
//  146 {
//  147   MyBOOK *mbk=(MyBOOK*)FindBook(isSoftkeysBook);
??update:
        LDR      R0,??update_1    ;; ??isSoftkeysBook
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SWI      +304
        MOV      R4,R0
//  148   MyBook_OnTerminate(0,&mbk->bk);
        BL       ??Send_REDRAW_RELEASE
        MOV      R0,R4
        SWI      +303
//  149   return myelfpath;
        LDR      R0,??update_1+0x4  ;; myelfpath
        POP      {R4,PC}          ;; return
        DATA
??update_1:
        DC32     ??isSoftkeysBook
        DC32     myelfpath
        CFI EndBlock cfiBlock15
//  150 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??Change??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??Change
//  151 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??Change
        ARM
//  152 void Change(UI_SOFTKEY *s,int x)
//  153 {
??Change:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R3,R1
//  154   memcpy(&sk[x], s, sizeof(UI_SOFTKEY));
        MOV      R1,R0
        LDR      R0,??Change_1    ;; sk
        MOV      R2,#+32
        ADD      R0,R0,R3, LSL #+5
        SWI      +275
//  155   DispObject_InvalidateRect(soft,0);
        LDR      R0,??Change_1+0x4  ;; soft
        MOV      R1,#+0
        LDR      R0,[R0, #+0]
        SWI      +495
//  156 };
        POP      {PC}             ;; return
        DATA
??Change_1:
        DC32     sk
        DC32     soft
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??SetWorkState??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??SetWorkState
//  157 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??SetWorkState
        ARM
//  158 void SetWorkState(bool state)
//  159 {
//  160   works=state;
??SetWorkState:
        LDR      R1,??SetWorkState_1  ;; works
        STRB     R0,[R1, #+0]
//  161 };
        BX       LR               ;; return
        DATA
??SetWorkState_1:
        DC32     works
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyBook_Create??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ??MyBook_Create
//  162 //--------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ??MyBook_Create
        ARM
//  163 MyBOOK * MyBook_Create()
//  164 {
??MyBook_Create:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  165   MyBook= new MyBOOK;
        LDR      R4,??MyBook_Create_1  ;; MyBook
//  166   memset(MyBook, 0, sizeof(MyBOOK));
//  167   if (CreateBook(&MyBook->bk,MyBook_OnClose,&base_page,"Softkeys",-1,0))
        LDR      R5,??MyBook_Create_1+0x4  ;; `?<Constant L"\\x47\\x55\\x49\\x5f\\x4d\\x4f\\x52\\x45\\`
        MOV      R0,#+60
        _BLF     `??operator new`,`??operator new??rA`
        STR      R0,[R4, #+0]
        MOV      R2,#+60
        MOV      R1,#+0
        SWI      +274
        LDR      R1,??MyBook_Create_1+0x8  ;; ??MyBook_OnClose
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+16
        ADD      R3,R5,#+80
        ADD      R2,R4,#+4
        MVN      R0,R0
        PUSH     {R0}
        CFI CFA R13+20
        LDR      R0,[R4, #+0]
        SWI      +299
        CMP      R0,#+0
        ADD      SP,SP,#+8
        CFI CFA R13+12
        BEQ      ??MyBook_Create_2
//  168   {
//  169     MyBook->redraw=ourredraw;
        LDR      R0,[R4, #+0]
        LDR      R1,??MyBook_Create_1+0xC  ;; ??ourredraw
//  170     MyBook->onkey=onkey;
//  171     MyBook->change=Change;
//  172     MyBook->upd=update;
//  173     MyBook->SetWorkState=SetWorkState;
//  174     MyBook->version=VERSION_;
//  175     textidname2id(L"GUI_MORE_SK",-1,&MyBook->funcstrid);
        ADD      R2,R0,#+32
        STR      R1,[R0, #+28]
        LDR      R1,??MyBook_Create_1+0x10  ;; ??onkey
        STR      R1,[R0, #+24]
        LDR      R1,??MyBook_Create_1+0x14  ;; ??Change
        STR      R1,[R0, #+48]
        LDR      R1,??MyBook_Create_1+0x18  ;; ??update
        STR      R1,[R0, #+44]
        LDR      R1,??MyBook_Create_1+0x1C  ;; ??SetWorkState
        STR      R1,[R0, #+52]
        LDR      R1,??MyBook_Create_1+0x20  ;; 0xaaaa01
        STR      R1,[R0, #+56]
        MVN      R1,#+0
        MOV      R0,R5
        SWI      +647
//  176     textidname2id(L"GUI_OK_SK",-1,&MyBook->okstrid);
        LDR      R0,[R4, #+0]
        MVN      R1,#+0
        ADD      R2,R0,#+36
        ADD      R0,R5,#+24
        SWI      +647
//  177     textidname2id(L"SM_KEYX_BACK_TXT",-1,&MyBook->backstrid);
        LDR      R0,[R4, #+0]
        MVN      R1,#+0
        ADD      R2,R0,#+40
        ADD      R0,R5,#+44
        SWI      +647
//  178     return(MyBook);
        LDR      R0,[R4, #+0]
        POP      {R4,R5,PC}
//  179   }
//  180   return 0;
??MyBook_Create_2:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        DATA
??MyBook_Create_1:
        DC32     MyBook
        DC32     `?<Constant L"\\x47\\x55\\x49\\x5f\\x4d\\x4f\\x52\\x45\\`
        DC32     ??MyBook_OnClose
        DC32     ??ourredraw
        DC32     ??onkey
        DC32     ??Change
        DC32     ??update
        DC32     ??SetWorkState
        DC32     0xaaaa01
        CFI EndBlock cfiBlock21
//  181 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine11_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine11_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI NoFunction
        ARM
??destroy_all_images??rA:
        LDR      R12,??Subroutine12_0  ;; ??destroy_all_images
        BX       R12
        DATA
??Subroutine12_0:
        DC32     ??destroy_all_images
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI NoFunction
        ARM
??csofts_destroy??rA:
        LDR      R12,??Subroutine13_0  ;; ??csofts_destroy
        BX       R12
        DATA
??Subroutine13_0:
        DC32     ??csofts_destroy
        CFI EndBlock cfiBlock24

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine14_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine14_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon1
        CFI NoFunction
        ARM
??cmpfile??rA:
        LDR      R12,??Subroutine15_0  ;; ??cmpfile
        BX       R12
        DATA
??Subroutine15_0:
        DC32     ??cmpfile
        CFI EndBlock cfiBlock26

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine16_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine16_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon1
        CFI NoFunction
        ARM
??Init??rA:
        LDR      R12,??Subroutine17_0  ;; ??Init
        BX       R12
        DATA
??Subroutine17_0:
        DC32     ??Init
        CFI EndBlock cfiBlock28

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for MyBook>`:
        DATA
        DC32 0H
`?<Initializer for base_page>`:
        DC32 `?<Constant "SoftkeysPage">`, 0H, HW_PageEvents

        RSEG DATA_ID:CONST:SORT:NOROOT(0)
`?<Initializer for works>`:
        DATA
        DC8 1

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "SoftkeysPage">`:
        DATA
        DC8 "SoftkeysPage"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x25\\x6c\\x73\\xa\\xa\\x72\\x65\\x76\\x6`:
        DATA
        DC8 25H, 0, 6CH, 0, 73H, 0, 0AH, 0
        DC8 0AH, 0, 72H, 0, 65H, 0, 76H, 0
        DC8 69H, 0, 73H, 0, 69H, 0, 6FH, 0
        DC8 6EH, 0, 20H, 0, 25H, 0, 64H, 0
        DC8 0, 0
        DC8 0, 0
        DC8 41H, 0, 64H, 0, 76H, 0, 53H, 0
        DC8 6FH, 0, 66H, 0, 74H, 0, 6BH, 0
        DC8 65H, 0, 79H, 0, 73H, 0, 0AH, 0
        DC8 0A9H, 0, 20H, 0, 55H, 0, 6CH, 0
        DC8 74H, 0, 72H, 0, 61H, 0, 53H, 0
        DC8 68H, 0, 6FH, 0, 74H, 0, 0AH, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41\\x64\\x76\\x53\\x6f\\x66\\x74\\x6b\\_1`:
        DATA
        DC8 41H, 0, 64H, 0, 76H, 0, 53H, 0
        DC8 6FH, 0, 66H, 0, 74H, 0, 6BH, 0
        DC8 65H, 0, 79H, 0, 73H, 0, 2FH, 0
        DC8 0, 0
        DC8 0, 0
        DC8 2FH, 0, 74H, 0, 70H, 0, 61H, 0
        DC8 2FH, 0, 73H, 0, 79H, 0, 73H, 0
        DC8 74H, 0, 65H, 0, 6DH, 0, 2FH, 0
        DC8 73H, 0, 65H, 0, 74H, 0, 74H, 0
        DC8 69H, 0, 6EH, 0, 67H, 0, 73H, 0
        DC8 2FH, 0, 0, 0
        DC8 63H, 0, 75H, 0, 72H, 0, 72H, 0
        DC8 65H, 0, 6EH, 0, 74H, 0, 5FH, 0
        DC8 74H, 0, 68H, 0, 65H, 0, 6DH, 0
        DC8 65H, 0, 2EH, 0, 74H, 0, 68H, 0
        DC8 6DH, 0, 0, 0
        DC8 63H, 0, 75H, 0, 72H, 0, 74H, 0
        DC8 68H, 0, 6DH, 0, 2EH, 0, 74H, 0
        DC8 68H, 0, 6DH, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 2FH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x47\\x55\\x49\\x5f\\x4d\\x4f\\x52\\x45\\`:
        DATA
        DC8 47H, 0, 55H, 0, 49H, 0, 5FH, 0
        DC8 4DH, 0, 4FH, 0, 52H, 0, 45H, 0
        DC8 5FH, 0, 53H, 0, 4BH, 0, 0, 0
        DC8 47H, 0, 55H, 0, 49H, 0, 5FH, 0
        DC8 4FH, 0, 4BH, 0, 5FH, 0, 53H, 0
        DC8 4BH, 0, 0, 0
        DC8 53H, 0, 4DH, 0, 5FH, 0, 4BH, 0
        DC8 45H, 0, 59H, 0, 58H, 0, 5FH, 0
        DC8 42H, 0, 41H, 0, 43H, 0, 4BH, 0
        DC8 5FH, 0, 54H, 0, 58H, 0, 54H, 0
        DC8 0, 0
        DC8 0, 0
        DC8 "Softkeys"
        DC8 0, 0, 0

        END
//  182 //--------------------------------------------------------------
//  183 
// 
// 1 232 bytes in segment CODE
//   332 bytes in segment DATA_C
//    17 bytes in segment DATA_I
//    17 bytes in segment DATA_ID
// 1 032 bytes in segment DATA_Z
//    40 bytes in segment DYN_PAGE
//    24 bytes in segment INITTAB
// 
// 1 104 bytes of CODE  memory (+ 152 bytes shared)
//   389 bytes of CONST memory
// 1 049 bytes of DATA  memory
//
//Errors: none
//Warnings: none
