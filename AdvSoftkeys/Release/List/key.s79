//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:49:10 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\k /
//                       ey.cpp                                              /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\k /
//                       ey.cpp -D NDEBUG -D OLDFUNCTIONS -lC                /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\AdvSoftkeys\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\Obj\ -s9 --cpu_mode arm --endian little      /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\key.s79                                 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME key

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

??DataTable0 EQU 0
??DataTable1 EQU 0
        PUBLIC ??NewKey
        FUNCTION ??NewKey,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??NewKey??rT
        MULTWEAK ??__getitem??rA
        MULTWEAK ??isImageViewer??rA
        MULTWEAK ??isInIronPatch??rA
        MULTWEAK ??isvisible??rA
        PUBLIC ??onkey
        FUNCTION ??onkey,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??onkey??rT
        PUBLIC ??save
        FUNCTION ??save,0203H
        LOCFRAME CSTACK, 2020, STACK
        MULTWEAK ??save??rT
        PUBLIC ??unicode2win1251
        FUNCTION ??unicode2win1251,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??unicode2win1251??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC pressed
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        





??NewKey??rT        SYMBOL "??rT", ??NewKey
??__getitem??rA     SYMBOL "??rA", ??__getitem
??isImageViewer??rA SYMBOL "??rA", ??isImageViewer
??isInIronPatch??rA SYMBOL "??rA", ??isInIronPatch
??isvisible??rA     SYMBOL "??rA", ??isvisible

??onkey??rT         SYMBOL "??rT", ??onkey

??save??rT          SYMBOL "??rT", ??save

??unicode2win1251??rT SYMBOL "??rT", ??unicode2win1251

        EXTERN ??__getitem
        FUNCTION ??__getitem,0202H
        EXTERN ??isImageViewer
        FUNCTION ??isImageViewer,0202H
        EXTERN ??isInIronPatch
        FUNCTION ??isInIronPatch,0202H
        EXTERN ??isvisible
        FUNCTION ??isvisible,0202H
        EXTERN ACTION_BACK
        EXTERN DB
        EXTERN KBD_SHORT_PRESS
        EXTERN KEY_DEL
        EXTERN KEY_ENTER
        EXTERN KEY_ESC
        EXTERN KEY_LEFT_SOFT
        EXTERN KEY_RIGHT_SOFT
        EXTERN csofts
        EXTERN lastitem
        EXTERN rect
        EXTERN soft
        EXTERN works

// Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\key.cpp
//    1 #include "..\include\Lib_Clara.h"
//    2 #include "..\include\Dir.h"
//    3 #include "header\structs.h"
//    4 #include "header\presets.h"
//    5 #define SID_NULL 0x6FFFFFFF
//    6 

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
//    7 bool pressed[3]={false,false,false};
pressed:
        DS8 3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??onkey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??onkey
//    8 
//    9 extern RECT rect;
//   10 extern ITEM *lastitem;
//   11 extern DISP_OBJ *soft;
//   12 extern bool works;
//   13 extern LIST *csofts;
//   14 extern int DB;
//   15 
//   16 ITEM *getbyname(wchar_t *name);
//   17 void getitem(BOOK *bk);
//   18 int isImageViewer(BOOK *bk);
//   19 void __getitem(BOOK *bk);
//   20 void save();
//   21 int isvisible(LIST *lst, int index);
//   22 bool isInIronPatch(int act);
//   23 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??onkey
        ARM
//   24 int onkey(int key)
//   25 {
??onkey:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//   26   if (works)
        LDR      R0,??onkey_1     ;; works
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        POPEQ    {R4,R5,PC}
//   27   {
//   28     BOOK *bk=Display_GetTopBook(0);
        MOV      R0,#+0
        SWI      +795
        MOV      R5,R0
//   29     if (BookObj_GetDisplayOrientation(bk)==1 && DB==2010)return key;
        SWI      +793
        CMP      R0,#+1
        BNE      ??onkey_2
        LDR      R0,??onkey_1+0x4  ;; DB
        MOV      R1,#+218
        LDR      R0,[R0, #+0]
        ORR      R1,R1,#0x700
        CMP      R0,R1
        BNE      ??onkey_2
??onkey_3:
        MOV      R0,R4
        POP      {R4,R5,PC}
//   30     if (isImageViewer(bk))return key;
??onkey_2:
        MOV      R0,R5
        _BLF     ??isImageViewer,??isImageViewer??rA
        CMP      R0,#+0
        BNE      ??onkey_3
//   31     __getitem(bk);
        MOV      R0,R5
        _BLF     ??__getitem,??__getitem??rA
//   32     if (lastitem)
        LDR      R0,??onkey_1+0x8  ;; lastitem
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        BEQ      ??onkey_4
//   33     {
//   34       if (lastitem->type==T_3SK_LAYOUT)return key;
        LDR      R0,[R1, #+24]
        CMP      R0,#+5
        BEQ      ??onkey_3
//   35       if (lastitem->style==1)
        LDR      R2,[R1, #+16]
        CMP      R2,#+1
//   36       {
//   37         if (lastitem->type==T_YESNO && key==KEY_RIGHT_SOFT)
        CMPEQ    R0,#+2
        BNE      ??onkey_5
        LDR      R0,??DataTable3  ;; KEY_RIGHT_SOFT
        LDR      R0,[R0, #+0]
        CMP      R4,R0
        POPEQ    {R4,R5,PC}
//   38         {
//   39           return KEY_RIGHT_SOFT;
        LDR      R0,??DataTable2  ;; KEY_LEFT_SOFT
        LDR      R0,[R0, #+0]
        CMP      R4,R0
//   40         }
//   41         if (lastitem->type==T_YESNO && key==KEY_LEFT_SOFT)
//   42         {
//   43           return 0xFF;
        MOVEQ    R0,#+255
        POPEQ    {R4,R5,PC}
        LDR      R0,??onkey_1+0xC  ;; KEY_DEL
        LDR      R0,[R0, #+0]
        CMP      R4,R0
//   44         } 
//   45         if (lastitem->type==T_YESNO && key==KEY_DEL)
//   46         {
//   47           return KEY_ESC;
        LDREQ    R0,??onkey_1+0x10  ;; KEY_ESC
        LDREQ    R0,[R0, #+0]
        POPEQ    {R4,R5,PC}
//   48         }
//   49       }
//   50       if (lastitem->keys && csofts)
??onkey_5:
        LDR      R0,[R1, #+20]
        CMP      R0,#+0
        POPEQ    {R4,R5,PC}
        LDR      R1,??onkey_1+0x14  ;; csofts
        LDR      R1,[R1, #+0]
        CMP      R1,#+0
        BEQ      ??onkey_4
//   51       {
//   52         int y=0;
        MOV      R1,#+0
//   53         while(y<lastitem->keys->FirstFree)
??onkey_6:
        LDRH     R2,[R0, #+2]
        CMP      R1,R2
        BGE      ??onkey_4
//   54         {
//   55           KEY *k=(KEY*)lastitem->keys->listdata[y++];
        LDR      R2,[R0, #+4]
        LDR      R2,[R2, +R1, LSL #+2]
        ADD      R1,R1,#+1
//   56           if (k->oldkey==key)
        LDR      R3,[R2, #+0]
        CMP      R3,R4
        BNE      ??onkey_6
//   57           {
//   58             return k->newkey;
        LDR      R0,[R2, #+4]
        POP      {R4,R5,PC}
//   59           }
//   60         }
//   61       }
//   62     }
//   63   }
//   64   return 0;
??onkey_4:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        DATA
??onkey_1:
        DC32     works
        DC32     DB
        DC32     lastitem
        DC32     KEY_DEL
        DC32     KEY_ESC
        DC32     csofts
        CFI EndBlock cfiBlock1
//   65 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??NewKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??NewKey
//   66 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??NewKey
        ARM
//   67 int NewKey(int key, int r1 , int mode, LPARAM, DISP_OBJ*)
//   68 {
??NewKey:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//   69   if (mode==KBD_SHORT_PRESS)
        LDR      R0,??NewKey_1    ;; KBD_SHORT_PRESS
        LDR      R0,[R0, #+0]
        CMP      R2,R0
        BNE      ??NewKey_2
//   70   {
//   71     if (key==KEY_LEFT_SOFT)
        LDR      LR,??DataTable2  ;; KEY_LEFT_SOFT
        LDR      R5,??NewKey_1+0x4  ;; soft
        LDR      LR,[LR, #+0]
        LDR      R0,[R5, #+0]
        LDR      R1,??NewKey_1+0x8  ;; rect
        LDR      R3,??NewKey_1+0xC  ;; pressed
        MOV      R2,#+1
        MOV      R12,#+0
        CMP      R4,LR
        BNE      ??NewKey_3
//   72     {
//   73       pressed[0]=true;
        STRB     R2,[R3, #+0]
//   74       pressed[1]=false;
        STRB     R12,[R3, #+1]
//   75       pressed[2]=false;
??NewKey_4:
        STRB     R12,[R3, #+2]
//   76       DispObject_InvalidateRect(soft,&rect);
        B        ??NewKey_5
//   77       DispObject_SetRefreshTimer(soft,100);
//   78     }
//   79     else if (key==KEY_ENTER)
??NewKey_3:
        LDR      LR,??NewKey_1+0x10  ;; KEY_ENTER
        LDR      LR,[LR, #+0]
        CMP      R4,LR
//   80     {
//   81       pressed[0]=false;
        STRBEQ   R12,[R3, #+0]
//   82       pressed[1]=true;
        STRBEQ   R2,[R3, #+1]
//   83       pressed[2]=false;
        BEQ      ??NewKey_4
//   84       DispObject_InvalidateRect(soft,&rect);
//   85       DispObject_SetRefreshTimer(soft,100);
//   86     }
//   87     else if (key==KEY_RIGHT_SOFT)
        LDR      LR,??DataTable3  ;; KEY_RIGHT_SOFT
        STRB     R12,[R3, #+0]
        LDR      LR,[LR, #+0]
        STRB     R12,[R3, #+1]
        CMP      R4,LR
        BNE      ??NewKey_6
//   88     {
//   89       pressed[0]=false;
//   90       pressed[1]=false;
//   91       pressed[2]=true;
        STRB     R2,[R3, #+2]
//   92       DispObject_InvalidateRect(soft,&rect);
??NewKey_5:
        SWI      +495
//   93       DispObject_SetRefreshTimer(soft,100);
        LDR      R0,[R5, #+0]
        MOV      R1,#+100
        SWI      +733
        MOV      R0,R4
        BL       ??onkey
        POP      {R4,R5,PC}
//   94     }
//   95     else
//   96     {
//   97       pressed[0]=false;
//   98       pressed[1]=false;
//   99       pressed[2]=false;
??NewKey_6:
        STRB     R12,[R3, #+2]
//  100     }
//  101   }
//  102 #ifdef mDEBUG
//  103   if (key==KEY_POWER)
//  104   {
//  105     if (mode==KBD_SHORT_PRESS)
//  106     {
//  107       save();
//  108       BOOK*bk=Display_GetTopBook(0);
//  109       wchar_t ws[100];
//  110       if (strcmp(bk->xbook->name,"CUIDisplayableBook")==0)
//  111       {
//  112         TextID_GetWString(bk->xbook->app_session->name,ws,100);
//  113       }
//  114       else
//  115       {
//  116         str2wstr(ws,bk->xbook->name);
//  117       }
//  118       MessageBox(EMPTY_TEXTID,TextID_CreateIntegerID(lastitem->type),NOIMAGE,1,0,0);
//  119       MessageBox(EMPTY_TEXTID,TextID_Create(ws,ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE,1,0,0);
//  120       return -1;
//  121     }
//  122   }
//  123 #endif
//  124   return (onkey(key));
??NewKey_2:
        MOV      R0,R4
        BL       ??onkey
        POP      {R4,R5,PC}       ;; return
        DATA
??NewKey_1:
        DC32     KBD_SHORT_PRESS
        DC32     soft
        DC32     rect
        DC32     pressed
        DC32     KEY_ENTER
        CFI EndBlock cfiBlock3
//  125 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     KEY_LEFT_SOFT

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     KEY_RIGHT_SOFT

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??unicode2win1251??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??unicode2win1251
//  126 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??unicode2win1251
        ARM
//  127 char *unicode2win1251(char *s, wchar_t *ws, int len)
//  128 {
??unicode2win1251:
        PUSH     {R4}
        CFI R4 Frame(CFA, -4)
        CFI CFA R13+4
//  129   char *d=s;
        MOV      R3,R0
        B        ??unicode2win1251_1
//  130   int c;
//  131   while((c=*ws++)&&((len--)>0))
//  132   {
//  133     if (c==0x401) c=0xA8;
//  134     if (c==0x404) c=0xAA;
//  135     if (c==0x407) c=0xAF;
//  136     if (c==0x451) c=0xB8;
//  137     if (c==0x454) c=0xBA;
//  138     if (c==0x457) c=0xBF;
//  139     if ((c>=0x410)&&(c<0x450)) c-=0x350;
??unicode2win1251_2:
        CMP      R12,#+1040
        BLT      ??unicode2win1251_3
        CMP      R12,#+1104
        MVNLT    R4,#+79
        BICLT    R4,R4,#0x300
        ADDLT    R12,R4,R12
//  140     *s++=c;
??unicode2win1251_3:
        STRB     R12,[R0], #+1
??unicode2win1251_1:
        LDRH     R12,[R1], #+2
        CMP      R12,#+0
        BEQ      ??unicode2win1251_4
        MOV      R4,R2
        SUB      R2,R4,#+1
        CMP      R4,#+1
        BLT      ??unicode2win1251_4
        MOV      R4,#+1
        ORR      R4,R4,#0x400
        CMP      R12,R4
        MOVEQ    R12,#+168
        BEQ      ??unicode2win1251_3
        ADD      R4,R4,#+3
        CMP      R12,R4
        MOVEQ    R12,#+170
        BEQ      ??unicode2win1251_3
        ORR      R4,R4,#0x3
        CMP      R12,R4
        MOVEQ    R12,#+175
        BEQ      ??unicode2win1251_3
        ADD      R4,R4,#+74
        CMP      R12,R4
        MOVEQ    R12,#+184
        BEQ      ??unicode2win1251_3
        ADD      R4,R4,#+3
        CMP      R12,R4
        MOVEQ    R12,#+186
        BEQ      ??unicode2win1251_3
        ORR      R4,R4,#0x3
        CMP      R12,R4
        BNE      ??unicode2win1251_2
        MOV      R12,#+191
        B        ??unicode2win1251_3
//  141   }
//  142   *s=0;
??unicode2win1251_4:
        MOV      R1,#+0
        STRB     R1,[R0, #+0]
//  143   return(d);
        POP      {R4}
        CFI R4 SameValue
        CFI CFA R13+0
        MOV      R0,R3
        BX       LR               ;; return
        CFI EndBlock cfiBlock5
//  144 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??save??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??save
//  145 
//  146 typedef struct
//  147 {
//  148   char unk[200];
//  149 }JUST_BYTEARRAY;
//  150 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??save
        ARM
//  151 void save()
//  152 {
??save:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        SUB      SP,SP,#+900
        CFI CFA R13+928
        SUB      SP,SP,#+1024
        CFI CFA R13+1952
//  153   BOOK *bk=Display_GetTopBook(0);
//  154   LIST *lst = DispObject_SoftKeys_GetList(Display_GetFocusedDispObject(0),bk, 0);
//  155   int file;
//  156   FSTAT fst;
//  157   char cr=0x0D;
//  158   char lf=0x0A;
//  159   char idle=';';
//  160   if ((file=_fopen(GetDir(MEM_EXTERNAL+DIR_OTHER),L"Softs.txt",FSX_O_RDWR|FSX_O_TRUNC,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
        LDR      R5,??save_1      ;; `?<Constant "%02x:">`
        MOV      R0,#+0
        SWI      +795
        MOV      R7,R0
        MOV      R0,#+0
        SWI      +541
        MOV      R2,#+0
        MOV      R1,R7
        SWI      +792
        MOV      R4,R0
        MOV      R1,#+13
        STRB     R1,[SP, #+0]
        MOV      R1,#+10
        STRB     R1,[SP, #+1]
        MOV      R1,#+59
        STRB     R1,[SP, #+2]
        MOV      R0,#+8
        SWI      +261
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+1956
        MOV      R3,#+384
        MOV      R2,#+516
        ADD      R1,R5,#+144
        SWI      +278
        MOVS     R6,R0
        ADD      SP,SP,#+4
        CFI CFA R13+1952
        BMI      ??save_2
//  161   {
//  162     if (fstat(GetDir(MEM_EXTERNAL+DIR_OTHER),L"Softs.txt",&fst)==0)
        MOV      R0,#+8
        SWI      +261
        ADD      R2,SP,#+872
        ADD      R2,R2,#+1024
        ADD      R1,R5,#+144
        SWI      +284
        CMP      R0,#+0
        BNE      ??save_2
//  163     {
//  164       JUST_BYTEARRAY *xls=(JUST_BYTEARRAY*)bk;//DispObject_SoftKeys_GetParams(Display_GetFocusedDispObject(0));
//  165       int x;
//  166       for (x=0;x<199;x++)
        MOV      R8,#+0
        ADR      R9,??save_3      ;; ";"
//  167       {
//  168         char hz[100];
//  169         sprintf(hz,"%02x:",xls->unk[x]);
??save_4:
        LDRB     R2,[R8, +R7]
        MOV      R1,R5
        ADD      R0,SP,#+772
        ADD      R0,R0,#+1024
        SWI      +276
//  170         
//  171         fwrite(file,hz,strlen(hz));
        ADD      R0,SP,#+772
        ADD      R0,R0,#+1024
        SWI      +346
        MOV      R2,R0
        ADD      R1,SP,#+772
        ADD      R1,R1,#+1024
        MOV      R0,R6
        SWI      +281
//  172         if ((x+1)>=4)
        ADD      R8,R8,#+1
        CMP      R8,#+4
        BLT      ??save_5
//  173         {
//  174           if ((x+1)%4==0)
        ASR      R0,R8,#+1
        ADD      R0,R8,R0, LSR #+30
        ASR      R0,R0,#+2
        SUBS     R0,R8,R0, LSL #+2
        BNE      ??save_5
//  175           {
//  176             fwrite(file,";",1);
        MOV      R2,#+1
        MOV      R1,R9
        MOV      R0,R6
        SWI      +281
//  177             fwrite(file,&cr,1);
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R6
        SWI      +281
//  178             fwrite(file,&lf,1);
        MOV      R2,#+1
        ADD      R1,SP,#+1
        MOV      R0,R6
        SWI      +281
//  179           }
//  180         }
//  181       }
??save_5:
        CMP      R8,#+199
        BLT      ??save_4
//  182       fwrite(file,";",1);
        MOV      R2,#+1
        MOV      R1,R9
        MOV      R0,R6
        SWI      +281
//  183       fwrite(file,&cr,1);
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R6
        SWI      +281
//  184       fwrite(file,&lf,1);
        MOV      R2,#+1
        ADD      R1,SP,#+1
        MOV      R0,R6
        SWI      +281
//  185       for (x=0;x<lst->FirstFree;x++)
        LDRH     R0,[R4, #+2]
        MOV      R8,#+0
        MVN      R7,#-1879048192
        CMP      R0,#+0
        BNE      ??save_6
//  186       {
//  187         SOFTKEY * sk = (SOFTKEY*)List_Get(lst,x);
//  188         char pattern[1024];
//  189         
//  190         wchar_t name[128];
//  191         char name2[128];
//  192         if (sk->text!=EMPTY_TEXTID)
//  193         {
//  194           TextID_GetWString(sk->text,name,100);
//  195           unicode2win1251(name2, name, 100);
//  196         }
//  197         else
//  198         {
//  199           strcpy(name2,"Not Defined");
//  200         }
//  201         char name3[128];
//  202         char name4[128];
//  203         char name5[128];
//  204         if (sk->text_mini!=SID_NULL)
//  205         {
//  206           TextID_GetWString(sk->text_mini, name,100);
//  207           unicode2win1251(name3, name, 100);
//  208         }
//  209         else
//  210         {
//  211           strcpy(name3,"Not Defined");
//  212         }
//  213         if (sk->text_disabled!=SID_NULL)
//  214         {
//  215           TextID_GetWString(sk->text_disabled, name,100);
//  216           unicode2win1251(name4, name, 100);
//  217         }
//  218         else
//  219         {
//  220           strcpy(name4,"Not Defined");
//  221         }
//  222         if (sk->text_help!=SID_NULL)
//  223         {
//  224           TextID_GetWString(sk->text_help, name,100);
//  225           unicode2win1251(name5, name, 100);
//  226         }
//  227         else
//  228         {
//  229           strcpy(name5,"Not Defined");
//  230         }
//  231         sprintf(pattern,"%x-%x:%x:%x) %s:%s:%s:%s: %d:%d::%X:0x%X:%X:%X",sk->action,sk->unk, sk->unk2, sk->unk3, name2, name3, name4, name5, sk->enable, sk->visible, sk->parent_action, (int)sk->proc, (int)sk->list, sk->unk4);
//  232         fwrite(file,pattern,strlen(pattern));
//  233         fwrite(file,&idle,1);
//  234         fwrite(file,&cr,1);
//  235         fwrite(file,&lf,1);
//  236       }
//  237       fwrite(file,&cr,1);
??save_7:
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R6
        SWI      +281
//  238       fwrite(file,&lf,1);
        MOV      R2,#+1
        ADD      R1,SP,#+1
        MOV      R0,R6
        SWI      +281
//  239       fwrite(file,"Visible:",8);
        MOV      R2,#+8
        ADD      R1,R5,#+68
        MOV      R0,R6
        SWI      +281
//  240       
//  241       fwrite(file,&cr,1);
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R6
        SWI      +281
//  242       fwrite(file,&lf,1);
        MOV      R2,#+1
        ADD      R1,SP,#+1
        MOV      R0,R6
        SWI      +281
//  243       for (x=0;x<lst->FirstFree;x++)
        LDRH     R0,[R4, #+2]
        MOV      R8,#+0
        CMP      R0,#+0
        BNE      ??save_8
//  244       {
//  245         SOFTKEY * sk = (SOFTKEY*)List_Get(lst,x);
//  246         if (sk->visible && sk->action!=ACTION_BACK && isvisible(lst,x) && isInIronPatch(sk->action)!=true && sk->text!=EMPTY_TEXTID && sk->parent_action==0xFFFF)
//  247         {
//  248           char pattern[1024];
//  249           
//  250           wchar_t name[128];
//  251           char name2[128];
//  252           if (sk->text!=EMPTY_TEXTID)
//  253           {
//  254             TextID_GetWString(sk->text,name,100);
//  255             unicode2win1251(name2, name, 100);
//  256           }
//  257           else
//  258           {
//  259             strcpy(name2,"Not Defined");
//  260           }
//  261           char name3[128];
//  262           char name4[128];
//  263           char name5[128];
//  264           if (sk->text_mini!=SID_NULL)
//  265           {
//  266             TextID_GetWString(sk->text_mini, name,100);
//  267             unicode2win1251(name3, name, 100);
//  268           }
//  269           else
//  270           {
//  271             strcpy(name3,"Not Defined");
//  272           }
//  273           if (sk->text_disabled!=SID_NULL)
//  274           {
//  275             TextID_GetWString(sk->text_disabled, name,100);
//  276             unicode2win1251(name4, name, 100);
//  277           }
//  278           else
//  279           {
//  280             strcpy(name4,"Not Defined");
//  281           }
//  282           if (sk->text_help!=SID_NULL)
//  283           {
//  284             TextID_GetWString(sk->text_help, name,100);
//  285             unicode2win1251(name5, name, 100);
//  286           }
//  287           else
//  288           {
//  289             strcpy(name5,"Not Defined");
//  290           }
//  291           sprintf(pattern,"%x-%x-%x) %s:%s:%s:%s: %d:%d::%X:0x%X:%X:%d:%X:%X:%X:%X:%X:%X",sk->action,sk->book,sk->DISP_OBJ1,name2, name3, name4, name5, sk->enable, sk->visible, sk->parent_action, (int)sk->proc, (int)sk->list, sk->unk, sk->unk6[0], sk->unk6[1],sk->unk6[2],sk->unk6[3], sk->unk6[4], sk->unk6[5]);
//  292           fwrite(file,pattern,strlen(pattern));
//  293           fwrite(file,&idle,1);
//  294           fwrite(file,&cr,1);
//  295           fwrite(file,&lf,1);
//  296         }
//  297       }
//  298     }
//  299   }
//  300   fclose(file);
??save_2:
        MOV      R0,R6
        SWI      +279
//  301 };
        ADD      SP,SP,#+900
        CFI CFA R13+1052
        ADD      SP,SP,#+1024
        CFI CFA R13+28
        POP      {R4-R9,PC}       ;; return
        CFI CFA R13+1952
??save_9:
        ADD      R1,R5,#+8
        ADD      R0,SP,#+644
        ADD      R0,R0,#+1024
        SWI      +416
??save_10:
        LDRH     R0,[R9, #+34]
        ADD      R1,R5,#+20
        ADD      R8,R8,#+1
        PUSH     {R0}
        CFI CFA R13+1956
        LDR      R0,[R9, #+36]
        PUSH     {R0}
        CFI CFA R13+1960
        LDR      R0,[R9, #+40]
        PUSH     {R0}
        CFI CFA R13+1964
        LDRH     R0,[R9, #+32]
        PUSH     {R0}
        CFI CFA R13+1968
        LDRB     R0,[R9, #+57]
        PUSH     {R0}
        CFI CFA R13+1972
        LDRB     R0,[R9, #+56]
        PUSH     {R0}
        CFI CFA R13+1976
        ADD      R0,SP,#+668
        ADD      R0,R0,#+1024
        PUSH     {R0}
        CFI CFA R13+1980
        ADD      R0,SP,#+1312
        PUSH     {R0}
        CFI CFA R13+1984
        ADD      R0,SP,#+420
        ADD      R0,R0,#+1024
        PUSH     {R0}
        CFI CFA R13+1988
        ADD      R0,SP,#+552
        ADD      R0,R0,#+1024
        PUSH     {R0}
        CFI CFA R13+1992
        LDRH     R0,[R9, #+14]
        PUSH     {R0}
        CFI CFA R13+1996
        LDRH     R0,[R9, #+12]
        PUSH     {R0}
        CFI CFA R13+2000
        LDRH     R2,[R9, #+0]
        LDRH     R3,[R9, #+2]
        ADD      R0,SP,#+52
        SWI      +276
        ADD      SP,SP,#+48
        CFI CFA R13+1952
        ADD      R0,SP,#+4
        SWI      +346
        MOV      R2,R0
        ADD      R1,SP,#+4
        MOV      R0,R6
        SWI      +281
        MOV      R2,#+1
        ADD      R1,SP,#+2
        MOV      R0,R6
        SWI      +281
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R6
        SWI      +281
        MOV      R2,#+1
        ADD      R1,SP,#+1
        MOV      R0,R6
        SWI      +281
??save_6:
        LDRH     R0,[R4, #+2]
        CMP      R8,R0
        BGE      ??save_7
        MOV      R1,R8
        MOV      R0,R4
        SWI      +429
        MOV      R9,R0
        LDR      R0,[R9, #+16]
        CMP      R0,R7
        BEQ      ??save_11
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        SWI      +351
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        ADD      R0,SP,#+516
        ADD      R0,R0,#+1024
        BL       ??unicode2win1251
        B        ??save_12
??save_11:
        ADD      R1,R5,#+8
        ADD      R0,SP,#+516
        ADD      R0,R0,#+1024
        SWI      +416
??save_12:
        LDR      R0,[R9, #+20]
        CMP      R0,R7
        BEQ      ??save_13
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        SWI      +351
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        ADD      R0,SP,#+388
        ADD      R0,R0,#+1024
        BL       ??unicode2win1251
        B        ??save_14
??save_13:
        ADD      R1,R5,#+8
        ADD      R0,SP,#+388
        ADD      R0,R0,#+1024
        SWI      +416
??save_14:
        LDR      R0,[R9, #+24]
        CMP      R0,R7
        BEQ      ??save_15
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        SWI      +351
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        ADD      R0,SP,#+260
        ADD      R0,R0,#+1024
        BL       ??unicode2win1251
        B        ??save_16
??save_15:
        ADD      R1,R5,#+8
        ADD      R0,SP,#+260
        ADD      R0,R0,#+1024
        SWI      +416
??save_16:
        LDR      R0,[R9, #+28]
        CMP      R0,R7
        BEQ      ??save_9
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        SWI      +351
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        ADD      R0,SP,#+644
        ADD      R0,R0,#+1024
        BL       ??unicode2win1251
        B        ??save_10
        DATA
??save_3:
        DC8      ";",+0,+0
        ARM
??save_17:
        ADD      R1,R5,#+8
        ADD      R0,SP,#+260
        ADD      R0,R0,#+1024
        SWI      +416
??save_18:
        LDRB     R0,[R9, #+63]
        ADD      R1,R5,#+80
        PUSH     {R0}
        CFI CFA R13+1956
        LDRB     R0,[R9, #+62]
        PUSH     {R0}
        CFI CFA R13+1960
        LDRB     R0,[R9, #+61]
        PUSH     {R0}
        CFI CFA R13+1964
        LDRB     R0,[R9, #+60]
        PUSH     {R0}
        CFI CFA R13+1968
        LDRB     R0,[R9, #+59]
        PUSH     {R0}
        CFI CFA R13+1972
        LDRB     R0,[R9, #+58]
        PUSH     {R0}
        CFI CFA R13+1976
        LDRH     R0,[R9, #+2]
        PUSH     {R0}
        CFI CFA R13+1980
        LDR      R0,[R9, #+36]
        PUSH     {R0}
        CFI CFA R13+1984
        LDR      R0,[R9, #+40]
        PUSH     {R0}
        CFI CFA R13+1988
        LDRH     R0,[R9, #+32]
        PUSH     {R0}
        CFI CFA R13+1992
        LDRB     R0,[R9, #+57]
        PUSH     {R0}
        CFI CFA R13+1996
        LDRB     R0,[R9, #+56]
        PUSH     {R0}
        CFI CFA R13+2000
        ADD      R0,SP,#+308
        ADD      R0,R0,#+1024
        PUSH     {R0}
        CFI CFA R13+2004
        ADD      R0,SP,#+696
        ADD      R0,R0,#+1024
        PUSH     {R0}
        CFI CFA R13+2008
        ADD      R0,SP,#+572
        ADD      R0,R0,#+1024
        PUSH     {R0}
        CFI CFA R13+2012
        ADD      R0,SP,#+1472
        PUSH     {R0}
        CFI CFA R13+2016
        LDR      R0,[R9, #+8]
        PUSH     {R0}
        CFI CFA R13+2020
        LDRH     R2,[R9, #+0]
        LDR      R3,[R9, #+4]
        ADD      R0,SP,#+72
        SWI      +276
        ADD      SP,SP,#+68
        CFI CFA R13+1952
        ADD      R0,SP,#+4
        SWI      +346
        MOV      R2,R0
        ADD      R1,SP,#+4
        MOV      R0,R6
        SWI      +281
        MOV      R2,#+1
        ADD      R1,SP,#+2
        MOV      R0,R6
        SWI      +281
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R6
        SWI      +281
        MOV      R2,#+1
        ADD      R1,SP,#+1
        MOV      R0,R6
        SWI      +281
??save_19:
        ADD      R8,R8,#+1
??save_8:
        LDRH     R0,[R4, #+2]
        CMP      R8,R0
        BGE      ??save_2
        MOV      R1,R8
        MOV      R0,R4
        SWI      +429
        MOV      R9,R0
        LDRB     R0,[R9, #+57]
        CMP      R0,#+0
        BEQ      ??save_19
        LDRH     R0,[R9, #+0]
        LDR      R1,??save_1+0x4  ;; ACTION_BACK
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        BEQ      ??save_19
        MOV      R1,R8
        MOV      R0,R4
        _BLF     ??isvisible,??isvisible??rA
        CMP      R0,#+0
        BEQ      ??save_19
        LDRH     R0,[R9, #+0]
        _BLF     ??isInIronPatch,??isInIronPatch??rA
        CMP      R0,#+0
        BNE      ??save_19
        LDR      R0,[R9, #+16]
        CMP      R0,R7
        BEQ      ??save_19
        LDRH     R1,[R9, #+32]
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        CMP      R1,R2
        BNE      ??save_19
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        SWI      +351
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        ADD      R0,SP,#+388
        ADD      R0,R0,#+1024
        BL       ??unicode2win1251
        LDR      R0,[R9, #+20]
        CMP      R0,R7
        BEQ      ??save_20
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        SWI      +351
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        ADD      R0,SP,#+516
        ADD      R0,R0,#+1024
        BL       ??unicode2win1251
        B        ??save_21
??save_20:
        ADD      R1,R5,#+8
        ADD      R0,SP,#+516
        ADD      R0,R0,#+1024
        SWI      +416
??save_21:
        LDR      R0,[R9, #+24]
        CMP      R0,R7
        BEQ      ??save_22
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        SWI      +351
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        ADD      R0,SP,#+644
        ADD      R0,R0,#+1024
        BL       ??unicode2win1251
        B        ??save_23
??save_22:
        ADD      R1,R5,#+8
        ADD      R0,SP,#+644
        ADD      R0,R0,#+1024
        SWI      +416
??save_23:
        LDR      R0,[R9, #+28]
        CMP      R0,R7
        BEQ      ??save_17
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        SWI      +351
        MOV      R2,#+100
        ADD      R1,SP,#+4
        ADD      R1,R1,#+1024
        ADD      R0,SP,#+260
        ADD      R0,R0,#+1024
        BL       ??unicode2win1251
        B        ??save_18
        DATA
??save_1:
        DC32     `?<Constant "%02x:">`
        DC32     ACTION_BACK
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI NoFunction
        ARM
??isImageViewer??rA:
        LDR      R12,??Subroutine4_0  ;; ??isImageViewer
        BX       R12
        DATA
??Subroutine4_0:
        DC32     ??isImageViewer
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI NoFunction
        ARM
??__getitem??rA:
        LDR      R12,??Subroutine5_0  ;; ??__getitem
        BX       R12
        DATA
??Subroutine5_0:
        DC32     ??__getitem
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI NoFunction
        ARM
??isvisible??rA:
        LDR      R12,??Subroutine6_0  ;; ??isvisible
        BX       R12
        DATA
??Subroutine6_0:
        DC32     ??isvisible
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI NoFunction
        ARM
??isInIronPatch??rA:
        LDR      R12,??Subroutine7_0  ;; ??isInIronPatch
        BX       R12
        DATA
??Subroutine7_0:
        DC32     ??isInIronPatch
        CFI EndBlock cfiBlock11

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "%02x:">`:
        DATA
        DC8 "%02x:"
        DC8 0, 0
        DC8 "Not Defined"
        DC8 "%x-%x:%x:%x) %s:%s:%s:%s: %d:%d::%X:0x%X:%X:%X"
        DC8 0
        DC8 "Visible:"
        DC8 0, 0, 0
        DC8 25H, 78H, 2DH, 25H, 78H, 2DH, 25H, 78H
        DC8 29H, 20H, 25H, 73H, 3AH, 25H, 73H, 3AH
        DC8 25H, 73H, 3AH, 25H, 73H, 3AH, 20H, 25H
        DC8 64H, 3AH, 25H, 64H, 3AH, 3AH, 25H, 58H
        DC8 3AH, 30H, 78H, 25H, 58H, 3AH, 25H, 58H
        DC8 3AH, 25H, 64H, 3AH, 25H, 58H, 3AH, 25H
        DC8 58H, 3AH, 25H, 58H, 3AH, 25H, 58H, 3AH
        DC8 25H, 58H, 3AH, 25H, 58H, 0
        DC8 0, 0
        DC8 53H, 0, 6FH, 0, 66H, 0, 74H, 0
        DC8 73H, 0, 2EH, 0, 74H, 0, 78H, 0
        DC8 74H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
        DATA
        DC8 ";"

        END
//  302 
// 
// 2 428 bytes in segment CODE
//   166 bytes in segment DATA_C
//     3 bytes in segment DATA_Z
//    12 bytes in segment INITTAB
// 
// 2 364 bytes of CODE  memory (+ 76 bytes shared)
//   166 bytes of CONST memory
//     3 bytes of DATA  memory
//
//Errors: none
//Warnings: none
