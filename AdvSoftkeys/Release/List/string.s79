//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:49:32 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\s /
//                       tring.cpp                                           /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\s /
//                       tring.cpp -D NDEBUG -D OLDFUNCTIONS -lC             /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\AdvSoftkeys\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\Obj\ -s9 --cpu_mode arm --endian little      /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\string.s79                              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME string

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??abc2ABC
        FUNCTION ??abc2ABC,0203H
        MULTWEAK ??abc2ABC??rT
        PUBLIC ??getchr
        FUNCTION ??getchr,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??getchr??rT
        PUBLIC ??getint
        FUNCTION ??getint,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??getint??rT
        PUBLIC ??getparam
        FUNCTION ??getparam,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??getparam??rT
        PUBLIC ??getwchr
        FUNCTION ??getwchr,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??getwchr??rT
        PUBLIC ??h2i
        FUNCTION ??h2i,0203H
        MULTWEAK ??h2i??rT
        PUBLIC ??memmem
        FUNCTION ??memmem,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??memmem??rT
        PUBLIC ??oct2int
        FUNCTION ??oct2int,0203H
        MULTWEAK ??oct2int??rT
        MULTWEAK `??operator new[]??rA`
        PUBLIC ??pos2bs
        FUNCTION ??pos2bs,0203H
        MULTWEAK ??pos2bs??rT
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        


??abc2ABC??rT       SYMBOL "??rT", ??abc2ABC

??getchr??rT        SYMBOL "??rT", ??getchr

??getint??rT        SYMBOL "??rT", ??getint

??getparam??rT      SYMBOL "??rT", ??getparam

??getwchr??rT       SYMBOL "??rT", ??getwchr

??h2i??rT           SYMBOL "??rT", ??h2i

??memmem??rT        SYMBOL "??rT", ??memmem

??oct2int??rT       SYMBOL "??rT", ??oct2int
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

??pos2bs??rT        SYMBOL "??rT", ??pos2bs

        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??pos2bs??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??pos2bs
// Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\string.cpp
//    1 #include "..\\include\Lib_Clara.h" 
//    2 #include "..\\include\Dir.h"
//    3  

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??pos2bs
        ARM
//    4 int pos2bs(int n)
//    5 {
//    6   int res=n;
??pos2bs:
        MOV      R1,R0
//    7   if (n<=512)
        MOV      R2,#+1
        ORR      R2,R2,#0x200
        CMP      R0,R2
//    8   {
//    9     res=512;
        MOVLT    R1,#+512
        BLT      ??pos2bs_1
//   10   }
//   11   else if ((n%512)>0)
        ASR      R2,R0,#+8
        ADD      R2,R0,R2, LSR #+23
        ASR      R2,R2,#+9
        LSL      R2,R2,#+9
        SUB      R0,R0,R2
        CMP      R0,#+1
//   12   {
//   13     res=n-(n%512)+512;
        ADDGE    R1,R2,#+512
//   14   }
//   15   return res;
??pos2bs_1:
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//   16 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??oct2int??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??oct2int
//   17 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??oct2int
        ARM
//   18 int oct2int(const char *oct)
//   19 {
//   20   int ch;
//   21   int value = 0;
??oct2int:
        MOV      R1,#+0
        B        ??oct2int_1
//   22   while (((ch = *oct++) >= '0') &&
//   23          (ch <= '7'))
//   24   {
//   25     value <<= 3;
//   26     value += (ch - '0');
??oct2int_2:
        ADD      R1,R2,R1, LSL #+3
        SUB      R1,R1,#+48
//   27   }
??oct2int_1:
        LDRB     R2,[R0], #+1
        CMP      R2,#+48
        BLT      ??oct2int_3
        CMP      R2,#+56
        BLT      ??oct2int_2
//   28   return value;
??oct2int_3:
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock3
//   29 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??abc2ABC??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??abc2ABC
//   30 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??abc2ABC
        ARM
//   31 void abc2ABC(char *ws)
//   32 {
??abc2ABC:
        LDRB     R1,[R0, #+0]
        CMP      R1,#+0
        BXEQ     LR
//   33   while (*ws) 
//   34   {
//   35     if (*ws>0x39)
??abc2ABC_1:
        LDRB     R1,[R0, #+0]
        CMP      R1,#+58
//   36     {
//   37       *ws&=~0x20; 
        ANDCS    R1,R1,#0xDF
        STRBCS   R1,[R0, #+0]
//   38     }
//   39     *ws++;
//   40   }
        LDRB     R1,[R0, #+1]!
        CMP      R1,#+0
        BNE      ??abc2ABC_1
//   41 };
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??h2i??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??h2i
//   42 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??h2i
        ARM
//   43 int h2i(char * h)
//   44 {
//   45   char c;
//   46   int res=0;
??h2i:
        MOV      R1,#+0
//   47   while((*h++)!='X');
??h2i_1:
        LDRB     R2,[R0], #+1
        CMP      R2,#+88
        BNE      ??h2i_1
//   48   do
//   49   {
//   50     c=*h++;
??h2i_2:
        LDRB     R2,[R0], #+1
//   51     if (c>0x60) c-=0x20; else c-=0x30;
        CMP      R2,#+97
        ADDCS    R2,R2,#+224
        ADDCC    R2,R2,#+208
        AND      R2,R2,#0xFF
//   52     if (c>9) c-=7;
        CMP      R2,#+10
        ADDCS    R2,R2,#+249
        ANDCS    R2,R2,#0xFF
//   53     res<<=4;
//   54     res|=c;
        ORR      R1,R2,R1, LSL #+4
//   55   }
//   56   while(*h!='\0');
        LDRB     R2,[R0, #+0]
        CMP      R2,#+0
        BNE      ??h2i_2
//   57   return(res);
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock7
//   58 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??memmem??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??memmem
//   59 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??memmem
        ARM
//   60 void *memmem(const unsigned char *haystack, size_t haystacklen, const void *needle, size_t needlelen)
//   61 {
??memmem:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R2
        MOV      R6,R3
//   62   const unsigned char *cursor;
//   63   const unsigned char *last_possible_needle_location = (unsigned char *)haystack + haystacklen - needlelen;
        MOV      R0,R6
        RSB      R0,R0,#+0
        ADD      R2,R1,R4
        ADD      R7,R0,R2
//   64   if (needlelen > haystacklen) return(NULL);
        CMP      R1,R6
        BCS      ??memmem_1
??memmem_2:
        MOV      R0,#+0
        POP      {R4-R7,PC}
//   65   if (needle == NULL) return(NULL);
??memmem_1:
        CMP      R5,#+0
//   66   if (haystack == NULL) return(NULL);
        CMPNE    R4,#+0
//   67   if (needlelen == 0) return(NULL);
        CMPNE    R6,#+0
//   68   if (haystacklen == 0) return(NULL);
        CMPNE    R1,#+0
        BEQ      ??memmem_2
//   69   
//   70   for (cursor = haystack; cursor <= last_possible_needle_location; cursor++) 
        B        ??memmem_3
??memmem_4:
        ADD      R4,R4,#+1
??memmem_3:
        CMP      R7,R4
        BCC      ??memmem_2
//   71   {
//   72     if (memcmp(needle, cursor, needlelen) == 0) 
        MOV      R2,R6
        MOV      R1,R4
        MOV      R0,R5
        SWI      +637
        CMP      R0,#+0
        BNE      ??memmem_4
//   73     {
//   74       return((void *) cursor);
        MOV      R0,R4
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock9
//   75     }
//   76   }
//   77   return(NULL);
//   78 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??getparam??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??getparam
//   79 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??getparam
        ARM
//   80 char *getparam(char *buf, char *mask, char end, int fsize)
//   81 {
??getparam:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R5,R0
        MOV      R6,R1
        MOV      R4,R2
        MOV      R7,R3
//   82   char *str=0;
//   83   if (str=(char*)memmem((unsigned char const*)buf,fsize,mask,strlen(mask)))
        MOV      R0,R6
        SWI      +346
        MOV      R3,R0
        MOV      R2,R6
        MOV      R1,R7
        MOV      R0,R5
        BL       ??memmem
        MOVS     R5,R0
        BEQ      ??getparam_1
//   84   {
//   85     char *ret=0;;
//   86     int addr=(int)str;
//   87     str=(char*)(addr+strlen(mask)+2);
        MOV      R0,R6
        SWI      +346
        ADD      R0,R0,R5
        ADD      R5,R0,#+2
//   88     int x=0;
//   89     int len=0;
        LDRB     R1,[R5, #+0]
        MOV      R0,#+0
        CMP      R1,R4
        BNE      ??getparam_2
        B        ??getparam_3
//   90     while (str[x]!=end)
//   91     {
//   92       x++;
??getparam_4:
        ADD      R0,R0,#+1
//   93     }
??getparam_2:
        LDRB     R1,[R0, +R5]
        CMP      R1,R4
        BNE      ??getparam_4
//   94     len=x+1;
??getparam_3:
        ADD      R4,R0,#+1
//   95     if (len>1)
        CMP      R4,#+2
        BLT      ??getparam_1
//   96     {
//   97       ret=new char[len+1];
        ADD      R0,R4,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R6,R0
//   98       memcpy(ret,str,len);
        MOV      R2,R4
        MOV      R1,R5
        SWI      +275
//   99       ret[len]='\0';
        MOV      R0,#+0
        STRB     R0,[R4, +R6]
//  100       return ret;
        MOV      R0,R6
        POP      {R4-R7,PC}
//  101     }
//  102     return 0;
//  103   }
//  104   return 0;
??getparam_1:
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock11
//  105 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??getint??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??getint
//  106 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??getint
        ARM
//  107 int getint(char *line, int *pos,char end)
//  108 {
??getint:
        PUSH     {R4-R6}
        CFI R6 Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  109   bool minus=false;
//  110   if (line[pos[0]]=='-')
        LDR      R3,[R1, #+0]
        MOV      R12,#+0
        LDRB     R4,[R3, +R0]
//  111   {
//  112     minus=true;
//  113     pos[0]++;
//  114   }
//  115   int ret=0;
        MOV      R6,#+10
        CMP      R4,#+45
        ADDEQ    R3,R3,#+1
        STREQ    R3,[R1, #+0]
        LDR      R4,[R1, #+0]
        MOVEQ    R12,#+1
        LDRB     R4,[R4, +R0]
        MOV      R3,#+0
        CMP      R4,R2
        BEQ      ??getint_1
//  116   while (line[pos[0]]!=end)
//  117   {
//  118     ret=(ret*10)+(line[pos[0]]-0x30);
??getint_2:
        LDR      R4,[R1, #+0]
        LDRB     R5,[R4, +R0]
//  119     pos[0]++;
        ADD      R4,R4,#+1
        STR      R4,[R1, #+0]
//  120   }
        LDRB     R4,[R4, +R0]
        MLA      R3,R6,R3,R5
        CMP      R4,R2
        SUB      R3,R3,#+48
        BNE      ??getint_2
//  121   pos[0]++;
??getint_1:
        LDR      R0,[R1, #+0]
//  122   if (minus)ret=-ret;
        CMP      R12,#+0
        ADD      R0,R0,#+1
        STR      R0,[R1, #+0]
//  123   return ret;
        POP      {R4-R6}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI CFA R13+0
        RSBNE    R3,R3,#+0
        MOV      R0,R3
        BX       LR               ;; return
        CFI EndBlock cfiBlock13
//  124 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??getchr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??getchr
//  125 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??getchr
        ARM
//  126 char *getchr(char *line, int *pos, char end)
//  127 {
??getchr:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//  128   char *ret;
//  129   int start,en;
//  130   start=pos[0];
        LDR      R5,[R1, #+0]
        MOV      R4,R0
        B        ??getchr_1
//  131   while (line[pos[0]]!=end && line[pos[0]]!=0)
//  132   {
//  133     pos[0]++;
??getchr_2:
        STR      R0,[R1, #+0]
//  134   }
??getchr_1:
        LDR      R3,[R1, #+0]
        ADD      R0,R3,#+1
        ADD      R12,R3,R4
        LDRB     R6,[R12, #+0]
        CMP      R6,R2
        CMPNE    R6,#+0
        BNE      ??getchr_2
//  135   en=pos[0];
//  136   pos[0]++;
        STR      R0,[R1, #+0]
//  137   int len=en-start;
        SUB      R6,R3,R5
//  138   if (len>0)
        CMP      R6,#+1
        BLT      ??getchr_3
//  139   {  
//  140     ret = new char[len+1];
        ADD      R0,R6,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R7,R0
//  141     memcpy(ret, &line[start], len);
        MOV      R2,R6
        ADD      R1,R5,R4
        SWI      +275
//  142     ret[len]='\0';
        MOV      R0,#+0
        STRB     R0,[R6, +R7]
//  143     return ret;
        MOV      R0,R7
        POP      {R4-R7,PC}
//  144   }
//  145   return 0;
??getchr_3:
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock15
//  146 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??getwchr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??getwchr
//  147 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??getwchr
        ARM
//  148 wchar_t *getwchr(char *line, int *pos, char end)
//  149 {
??getwchr:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
//  150   int start,en;
//  151   start=pos[0];
        LDR      R5,[R1, #+0]
        MOV      R4,R0
        LDRB     R0,[R5, +R4]
        CMP      R0,R2
        BEQ      ??getwchr_1
//  152   while (line[pos[0]]!=end)
//  153   {
//  154     pos[0]++;
??getwchr_2:
        LDR      R0,[R1, #+0]
        ADD      R0,R0,#+1
        STR      R0,[R1, #+0]
//  155   }
        LDRB     R0,[R0, +R4]
        CMP      R0,R2
        BNE      ??getwchr_2
//  156   en=pos[0];
??getwchr_1:
        LDR      R0,[R1, #+0]
//  157   pos[0]++;
        ADD      R2,R0,#+1
        STR      R2,[R1, #+0]
//  158   int len=en-start;
        SUB      R6,R0,R5
//  159   if (len>0)
        CMP      R6,#+1
        BLT      ??getwchr_3
//  160   {
//  161     wchar_t *wret=new wchar_t[len/2+1];
        ADD      R0,R6,R6, LSR #+31
        ASR      R7,R0,#+1
        ADD      R0,R7,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R8,R0
//  162     memcpy(wret,&line[start], len);
        MOV      R2,R6
        ADD      R1,R5,R4
        SWI      +275
//  163     wret[len/2]=L'\0';
        ADD      R0,R8,R7, LSL #+1
        MOV      R1,#+0
        STRH     R1,[R0, #+0]
//  164     return wret;
        MOV      R0,R8
        POP      {R4-R8,PC}
//  165   }
//  166   return 0;
??getwchr_3:
        MOV      R0,#+0
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock17
//  167 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine9_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine9_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock18

        END
// 
// 924 bytes in segment CODE
// 
// 876 bytes of CODE memory (+ 48 bytes shared)
//
//Errors: none
//Warnings: none
