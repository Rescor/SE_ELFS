##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:49:37 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\un #
#                       tar.cpp                                              #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\un #
#                       tar.cpp -D NDEBUG -D OLDFUNCTIONS -lC                #
#                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\List\ -lA Z:\home\perk11\www\perk11.info\svn\S #
#                       E\AdvSoftkeys\Release\List\ -o                       #
#                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\Obj\ -s9 --cpu_mode arm --endian little --cpu  #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --eec++ --dlib_config                           #
#                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I         #
#                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2    #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\List\untar.lst                                 #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\Obj\untar.r79                                  #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\untar.cpp
      1          #include "..\\include\Lib_Clara.h" 
      2          #include "..\\include\Dir.h" 
      3          #include "header\untar.h"
      4          #include "header\string.h"
      5          #define F_SAVESIZE 300
      6          
      7          //Рабочий модуль для распаковки *.thm...
      8          //может работать с некоторыми архивами некорректно, т.к. особо логику *.tar не разбирал...
      9          //(C) UltraShot
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          TAR_HEADER *tar_getnextheader(int file)
     12          {
   \                     ??tar_getnextheader:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0040A0E1           MOV      R4,R0
     13            TAR_HEADER *h=new TAR_HEADER;
   \   0000000C   6C00A0E3           MOV      R0,#+108
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   0050A0E1           MOV      R5,R0
     14            memset(h,0,sizeof(TAR_HEADER));
   \   00000018   6C20A0E3           MOV      R2,#+108
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   120100EF           SWI      +274
     15            fread(file,h->fname,0x64);
   \   00000024   6420A0E3           MOV      R2,#+100
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   180100EF           SWI      +280
     16            lseek(file,0x18,SEEK_CUR);
   \   00000034   0120A0E3           MOV      R2,#+1
   \   00000038   1810A0E3           MOV      R1,#+24
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   760100EF           SWI      +374
     17            char size[13];
     18            fread(file,size,12);
   \   00000044   0C20A0E3           MOV      R2,#+12
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   180100EF           SWI      +280
     19            h->size=oct2int(size);
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   ........           _BLF     ??oct2int,??oct2int??rA
   \   0000005C   680085E5           STR      R0,[R5, #+104]
     20            if (h->size>0)
   \   00000060   010050E3           CMP      R0,#+1
   \   00000064   060000BA           BLT      ??tar_getnextheader_1
     21            {
     22              lseek(file,HEADER_SIZE-0x64-0x18-12, SEEK_CUR);
   \   00000068   0120A0E3           MOV      R2,#+1
   \   0000006C   5E1FA0E3           MOV      R1,#+376
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   760100EF           SWI      +374
     23            }
     24            else
     25            {
     26              delete(h);
     27              return 0;
     28            }
     29            return h;
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   10D08DE2           ADD      SP,SP,#+16
   \   00000080   3080BDE8           POP      {R4,R5,PC}
   \                     ??tar_getnextheader_1:
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   10D08DE2           ADD      SP,SP,#+16
   \   00000094   3080BDE8           POP      {R4,R5,PC}       ;; return
     30          };
     31          

   \                                 In segment CODE, align 4, keep-with-next
     32          int tar_savefile(int file, int size, wchar_t *path, wchar_t *fname)
     33          {
   \                     ??tar_savefile:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0200A0E1           MOV      R0,R2
     34            int sfile;
     35            if ((sfile=_fopen(path,fname,FSX_O_RDWR|FSX_O_TRUNC,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   04002DE9           PUSH     {R2}
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0310A0E1           MOV      R1,R3
   \   0000001C   603FA0E3           MOV      R3,#+384
   \   00000020   812FA0E3           MOV      R2,#+516
   \   00000024   160100EF           SWI      +278
   \   00000028   0060B0E1           MOVS     R6,R0
   \   0000002C   04D08DE2           ADD      SP,SP,#+4
   \   00000030   1700004A           BMI      ??tar_savefile_1
     36            {
     37              int x=0;
     38              for (x=0;x<size;x=x+F_SAVESIZE)
   \   00000034   0070A0E3           MOV      R7,#+0
   \   00000038   010055E3           CMP      R5,#+1
   \   0000003C   120000AA           BGE      ??tar_savefile_2
   \   00000040   130000EA           B        ??tar_savefile_1
     39              {
     40                int ts=F_SAVESIZE;
   \                     ??tar_savefile_3:
   \   00000044   4B8FA0E3           MOV      R8,#+300
     41                if ((size-x)>=F_SAVESIZE)
   \   00000048   070045E0           SUB      R0,R5,R7
   \   0000004C   4B0F50E3           CMP      R0,#+300
     42                {
     43                  ts=F_SAVESIZE;
     44                }
     45                else if ((size-x)<F_SAVESIZE)
     46                {
     47                  ts=size-x;
   \   00000050   0080A0B1           MOVLT    R8,R0
     48                }
     49                char *buf=new char[ts+1];
   \   00000054   010088E2           ADD      R0,R8,#+1
   \   00000058   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   0000005C   0090A0E1           MOV      R9,R0
     50                fread(file, buf, ts);
   \   00000060   0820A0E1           MOV      R2,R8
   \   00000064   0910A0E1           MOV      R1,R9
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   180100EF           SWI      +280
     51                fwrite(sfile, buf, ts);
   \   00000070   0820A0E1           MOV      R2,R8
   \   00000074   0910A0E1           MOV      R1,R9
   \   00000078   0600A0E1           MOV      R0,R6
   \   0000007C   190100EF           SWI      +281
     52                delete(buf);
   \   00000080   0900A0E1           MOV      R0,R9
   \   00000084   ........           _BLF     `??operator delete`,`??operator delete??rA`
     53              }
   \   00000088   4B7F87E2           ADD      R7,R7,#+300
   \                     ??tar_savefile_2:
   \   0000008C   050057E1           CMP      R7,R5
   \   00000090   EBFFFFBA           BLT      ??tar_savefile_3
     54            }
     55            fclose(sfile);
   \                     ??tar_savefile_1:
   \   00000094   0600A0E1           MOV      R0,R6
   \   00000098   170100EF           SWI      +279
     56            return 0;
   \   0000009C   0000A0E3           MOV      R0,#+0
   \   000000A0   F083BDE8           POP      {R4-R9,PC}       ;; return
     57          };
     58          

   \                                 In segment CODE, align 4, keep-with-next
     59          int tar_uncompress(wchar_t *path, wchar_t *name, wchar_t *folder)
     60          {
   \                     ??tar_uncompress:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   E8D04DE2           SUB      SP,SP,#+232
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0240A0E1           MOV      R4,R2
     61            int res=0;
   \   00000014   0050A0E3           MOV      R5,#+0
     62            int file;
     63            FSTAT fst;
     64            if (fstat(path,name,&fst)==0)
   \   00000018   0D20A0E1           MOV      R2,SP
   \   0000001C   1C0100EF           SWI      +284
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   2A00001A           BNE      ??tar_uncompress_1
     65            {
     66              if ((file=_fopen(path,name,FSX_O_RDONLY,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
   \   00000028   01002DE9           PUSH     {R0}
   \   0000002C   603FA0E3           MOV      R3,#+384
   \   00000030   0120A0E3           MOV      R2,#+1
   \   00000034   0710A0E1           MOV      R1,R7
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   160100EF           SWI      +278
   \   00000040   0060B0E1           MOVS     R6,R0
   \   00000044   04D08DE2           ADD      SP,SP,#+4
   \   00000048   1F00004A           BMI      ??tar_uncompress_2
     67              {
     68                int pos=0;
   \   0000004C   0070A0E3           MOV      R7,#+0
   \   00000050   0F0000EA           B        ??tar_uncompress_3
     69                while (pos<fst.fsize)
     70                {
     71                  lseek(file,pos,SEEK_SET);
     72                  TAR_HEADER *h=0;
     73                  if (pos<fst.fsize)
     74                  {
     75                    h=tar_getnextheader(file);
     76                    pos=pos+0x200;
     77                    if (h)
     78                    {
     79                      wchar_t fname[0x64+1];
     80                      str2wstr(fname, h->fname);
   \                     ??tar_uncompress_4:
   \   00000054   0810A0E1           MOV      R1,R8
   \   00000058   1C008DE2           ADD      R0,SP,#+28
   \   0000005C   580100EF           SWI      +344
     81                      tar_savefile(file, h->size, folder, fname);
   \   00000060   681098E5           LDR      R1,[R8, #+104]
   \   00000064   1C308DE2           ADD      R3,SP,#+28
   \   00000068   0420A0E1           MOV      R2,R4
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   ........           BL       ??tar_savefile
     82                      pos=pos+h->size;
     83                      pos = pos2bs(pos);
   \   00000074   680098E5           LDR      R0,[R8, #+104]
     84                      delete(h);
     85                      res++;
   \   00000078   015085E2           ADD      R5,R5,#+1
   \   0000007C   000087E0           ADD      R0,R7,R0
   \   00000080   800F80E2           ADD      R0,R0,#+512
   \   00000084   ........           _BLF     ??pos2bs,??pos2bs??rA
   \   00000088   0070A0E1           MOV      R7,R0
   \   0000008C   0800A0E1           MOV      R0,R8
   \   00000090   ........           _BLF     `??operator delete`,`??operator delete??rA`
     86                    }
   \                     ??tar_uncompress_3:
   \   00000094   08009DE5           LDR      R0,[SP, #+8]
   \   00000098   000057E1           CMP      R7,R0
   \   0000009C   0A0000AA           BGE      ??tar_uncompress_2
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0710A0E1           MOV      R1,R7
   \   000000A8   0600A0E1           MOV      R0,R6
   \   000000AC   760100EF           SWI      +374
   \   000000B0   08009DE5           LDR      R0,[SP, #+8]
   \   000000B4   000057E1           CMP      R7,R0
   \   000000B8   030000AA           BGE      ??tar_uncompress_2
   \   000000BC   0600A0E1           MOV      R0,R6
   \   000000C0   ........           BL       ??tar_getnextheader
   \   000000C4   0080B0E1           MOVS     R8,R0
   \   000000C8   E1FFFF1A           BNE      ??tar_uncompress_4
     87                    else break;
     88                  }
     89                  else break;
     90                }
     91              }
     92              fclose(file);
   \                     ??tar_uncompress_2:
   \   000000CC   0600A0E1           MOV      R0,R6
   \   000000D0   170100EF           SWI      +279
     93            }
     94            return res;
   \                     ??tar_uncompress_1:
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   E8D08DE2           ADD      SP,SP,#+232
   \   000000DC   F081BDE8           POP      {R4-R8,PC}       ;; return
     95          };

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     tar_getnextheader(int)            28
     tar_savefile(int, int, wchar_t *, wchar_t *)
                                       32
     tar_uncompress(wchar_t *, wchar_t *, wchar_t *)
                                      260


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     tar_getnextheader(int)          152
     tar_savefile(int, int, wchar_t *, wchar_t *)
                                     164
     tar_uncompress(wchar_t *, wchar_t *, wchar_t *)
                                     224
      Others                          72

 
 612 bytes in segment CODE
 
 540 bytes of CODE memory (+ 72 bytes shared)

Errors: none
Warnings: none
