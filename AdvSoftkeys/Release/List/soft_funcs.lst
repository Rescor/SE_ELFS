##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:49:27 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\so #
#                       ft_funcs.cpp                                         #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\so #
#                       ft_funcs.cpp -D NDEBUG -D OLDFUNCTIONS -lC           #
#                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\List\ -lA Z:\home\perk11\www\perk11.info\svn\S #
#                       E\AdvSoftkeys\Release\List\ -o                       #
#                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\Obj\ -s9 --cpu_mode arm --endian little --cpu  #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --eec++ --dlib_config                           #
#                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I         #
#                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2    #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\List\soft_funcs.lst                            #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\Obj\soft_funcs.r79                             #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\soft_funcs.cpp
      1          #include "..\\include\Lib_Clara.h" 
      2          #include "..\\include\Dir.h"
      3          #include "header\structs.h"
      4          #include "header\presets.h"
      5          
      6          //------------------------------------------------------------------
      7          //определяем, находится ли число между двумя другими числами:

   \                                 In segment CODE, align 4, keep-with-next
      8          bool isbetween(int num, int min, int max)
      9          {
     10            if (num >= min && num <=max)
   \                     ??isbetween:
   \   00000000   010050E1           CMP      R0,R1
   \   00000004   000052A1           CMPGE    R2,R0
     11            {
     12              return true;
   \   00000008   0100A0A3           MOVGE    R0,#+1
   \   0000000C   1EFF2FA1           BXGE     LR
     13            }
     14            return false;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR               ;; return
     15          };
     16          //------------------------------------------------------------------
     17          //случайно не патч ли от IronMaster'а?

   \                                 In segment CODE, align 4, keep-with-next
     18          bool isInIronPatch(int act)
     19          {
     20            return isbetween(act, 0xFFC, 0xFFF);
   \                     ??isInIronPatch:
   \   00000000   FC10A0E3           MOV      R1,#+252
   \   00000004   F01E81E3           ORR      R1,R1,#0xF00
   \   00000008   010050E1           CMP      R0,R1
   \   0000000C   020000BA           BLT      ??isInIronPatch_1
   \   00000010   400D50E3           CMP      R0,#+4096
   \   00000014   0100A0B3           MOVLT    R0,#+1
   \   00000018   1EFF2FB1           BXLT     LR
   \                     ??isInIronPatch_1:
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   1EFF2FE1           BX       LR               ;; return
     21          };
     22          //------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     23          int getelemindex(LIST *lst, int act)
     24          {
   \                     ??getelemindex:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     25            int x;
     26            for (x=0;x<lst->FirstFree;x++)
   \   0000000C   0060A0E3           MOV      R6,#+0
   \   00000010   000000EA           B        ??getelemindex_1
   \                     ??getelemindex_2:
   \   00000014   016086E2           ADD      R6,R6,#+1
   \                     ??getelemindex_1:
   \   00000018   B200D4E1           LDRH     R0,[R4, #+2]
   \   0000001C   000056E1           CMP      R6,R0
   \   00000020   070000AA           BGE      ??getelemindex_3
     27            {
     28              SOFTKEY *sk=(SOFTKEY*)List_Get(lst,x);
   \   00000024   0610A0E1           MOV      R1,R6
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   AD0100EF           SWI      +429
     29              if (sk->action==act)
   \   00000030   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000034   050050E1           CMP      R0,R5
   \   00000038   F5FFFF1A           BNE      ??getelemindex_2
     30              {
     31                return x;
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   7080BDE8           POP      {R4-R6,PC}
     32              }
     33            }
     34            return -1;
   \                     ??getelemindex_3:
   \   00000044   0000E0E3           MVN      R0,#+0
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
     35          };
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          int checkelement(SOFTKEY *sk, int check)
     38          {
     39            if (sk->action==ACTION_INFO)
   \                     ??checkelement:
   \   00000000   B020D0E1           LDRH     R2,[R0, #+0]
   \   00000004   28309FE5           LDR      R3,??checkelement_1  ;; ACTION_INFO
   \   00000008   003093E5           LDR      R3,[R3, #+0]
   \   0000000C   030052E1           CMP      R2,R3
   \   00000010   0200000A           BEQ      ??checkelement_2
     40            {
     41              return 1;
     42            }
     43            else
     44            {
     45              if (sk->book)return 1;
   \   00000014   040090E5           LDR      R0,[R0, #+4]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0100000A           BEQ      ??checkelement_3
   \                     ??checkelement_2:
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   1EFF2FE1           BX       LR
     46              if (check)return 1;
   \                     ??checkelement_3:
   \   00000028   000051E3           CMP      R1,#+0
   \   0000002C   0100A013           MOVNE    R0,#+1
     47              return 0;
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??checkelement_1:
   \   00000034   ........           DC32     ACTION_INFO
     48            }
     49          };
     50          //------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     51          int isvisible(LIST *lst, int index)
     52          {
   \                     ??isvisible:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     53            SOFTKEY *sk=(SOFTKEY*)List_Get(lst,index);
   \   00000008   AD0100EF           SWI      +429
     54            if (sk->parent_action==0xFFFF)
   \   0000000C   B012D0E1           LDRH     R1,[R0, #+32]
   \   00000010   FF00A0E3           MOV      R0,#+255
   \   00000014   FF0C80E3           ORR      R0,R0,#0xFF00
   \   00000018   000051E1           CMP      R1,R0
   \   0000001C   0100001A           BNE      ??isvisible_1
     55            {
     56              return 1;
   \                     ??isvisible_2:
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   1080BDE8           POP      {R4,PC}
     57            }
     58            else
     59            {
     60              int index=getelemindex(lst,sk->parent_action);
   \                     ??isvisible_1:
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       ??getelemindex
   \   00000030   0010A0E1           MOV      R1,R0
     61              if (index!=-1)
   \   00000034   010071E3           CMN      R1,#+1
   \   00000038   0800000A           BEQ      ??isvisible_3
     62              {
     63                SOFTKEY *sk2=(SOFTKEY*)List_Get(lst,index);
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   AD0100EF           SWI      +429
     64                if (sk2->visible && sk2->text!=EMPTY_TEXTID)
   \   00000044   3910D0E5           LDRB     R1,[R0, #+57]
   \   00000048   000051E3           CMP      R1,#+0
   \   0000004C   0300000A           BEQ      ??isvisible_3
   \   00000050   100090E5           LDR      R0,[R0, #+16]
   \   00000054   9014E0E3           MVN      R1,#-1879048192
   \   00000058   010050E1           CMP      R0,R1
   \   0000005C   EFFFFF1A           BNE      ??isvisible_2
     65                {
     66                  return 1;
     67                }
     68              }
     69            }
     70            return 0;
   \                     ??isvisible_3:
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   1080BDE8           POP      {R4,PC}          ;; return
     71          };
     72          

   \                                 In segment CODE, align 4, keep-with-next
     73          int getcount(LIST *lst, int check)
     74          {
   \                     ??getcount:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0050A0E1           MOV      R5,R0
     75            int res=0;
     76            int x;
     77            for (x=0;x<lst->FirstFree;x++)
   \   00000008   B200D5E1           LDRH     R0,[R5, #+2]
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   0070A0E3           MOV      R7,#+0
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   2C00001A           BNE      ??getcount_1
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   F081BDE8           POP      {R4-R8,PC}
     78            {
     79              SOFTKEY *sk=(SOFTKEY*)List_Get(lst,x);
   \                     ??getcount_2:
   \   00000028   0710A0E1           MOV      R1,R7
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   AD0100EF           SWI      +429
   \   00000034   0080A0E1           MOV      R8,R0
     80              if (sk->visible && sk->action!=ACTION_BACK && sk->action!=ACTION_LONG_BACK && isvisible(lst,x) && isInIronPatch(sk->action)!=true && sk->text!=EMPTY_TEXTID && sk->parent_action==0xFFFF && checkelement(sk, check))
   \   00000038   3900D8E5           LDRB     R0,[R8, #+57]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   2200000A           BEQ      ??getcount_3
   \   00000044   B000D8E1           LDRH     R0,[R8, #+0]
   \   00000048   98109FE5           LDR      R1,??getcount_4  ;; ACTION_BACK
   \   0000004C   001091E5           LDR      R1,[R1, #+0]
   \   00000050   010050E1           CMP      R0,R1
   \   00000054   1D00000A           BEQ      ??getcount_3
   \   00000058   8C109FE5           LDR      R1,??getcount_4+0x4  ;; ACTION_LONG_BACK
   \   0000005C   001091E5           LDR      R1,[R1, #+0]
   \   00000060   010050E1           CMP      R0,R1
   \   00000064   1900000A           BEQ      ??getcount_3
   \   00000068   0710A0E1           MOV      R1,R7
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   ........           BL       ??isvisible
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   1400000A           BEQ      ??getcount_3
   \   0000007C   B000D8E1           LDRH     R0,[R8, #+0]
   \   00000080   FC10A0E3           MOV      R1,#+252
   \   00000084   F01E81E3           ORR      R1,R1,#0xF00
   \   00000088   010050E1           CMP      R0,R1
   \   0000008C   010000BA           BLT      ??getcount_5
   \   00000090   400D50E3           CMP      R0,#+4096
   \   00000094   0D0000BA           BLT      ??getcount_3
   \                     ??getcount_5:
   \   00000098   100098E5           LDR      R0,[R8, #+16]
   \   0000009C   9014E0E3           MVN      R1,#-1879048192
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   0900000A           BEQ      ??getcount_3
   \   000000A8   B002D8E1           LDRH     R0,[R8, #+32]
   \   000000AC   FF10A0E3           MOV      R1,#+255
   \   000000B0   FF1C81E3           ORR      R1,R1,#0xFF00
   \   000000B4   010050E1           CMP      R0,R1
   \   000000B8   0400001A           BNE      ??getcount_3
   \   000000BC   0610A0E1           MOV      R1,R6
   \   000000C0   0800A0E1           MOV      R0,R8
   \   000000C4   ........           BL       ??checkelement
   \   000000C8   000050E3           CMP      R0,#+0
     81              {
     82                res++;
   \   000000CC   01408412           ADDNE    R4,R4,#+1
     83              }
     84            }
   \                     ??getcount_3:
   \   000000D0   017087E2           ADD      R7,R7,#+1
   \                     ??getcount_1:
   \   000000D4   B200D5E1           LDRH     R0,[R5, #+2]
   \   000000D8   000057E1           CMP      R7,R0
   \   000000DC   D1FFFFBA           BLT      ??getcount_2
     85            return res;
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??getcount_4:
   \   000000E8   ........           DC32     ACTION_BACK
   \   000000EC   ........           DC32     ACTION_LONG_BACK
     86          };
     87          //------------------------------------------------------------------

   Maximum stack usage in bytes:

     Function                     CSTACK
     --------                     ------
     checkelement(SOFTKEY *, int)     0
     getcount(LIST *, int)           24
     getelemindex(LIST *, int)       16
     isInIronPatch(int)               0
     isbetween(int, int, int)         0
     isvisible(LIST *, int)           8


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     isbetween(int, int, int)       24
     isInIronPatch(int)             36
     getelemindex(LIST *, int)      76
     checkelement(SOFTKEY *, int)   56
     isvisible(LIST *, int)        104
     getcount(LIST *, int)         240
      Others                        24

 
 560 bytes in segment CODE
 
 536 bytes of CODE memory (+ 24 bytes shared)

Errors: none
Warnings: none
