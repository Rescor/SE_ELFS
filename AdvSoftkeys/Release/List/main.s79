//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:49:13 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\m /
//                       ain.cpp                                             /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\m /
//                       ain.cpp -D NDEBUG -D OLDFUNCTIONS -lC               /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\AdvSoftkeys\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\Obj\ -s9 --cpu_mode arm --endian little      /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\main.s79                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
        PUBLIC ??Init
        FUNCTION ??Init,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??Init??rT
        MULTWEAK ??MyBook_Create??rA
        PUBLIC ??OnBackExitGui
        FUNCTION ??OnBackExitGui,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??OnBackExitGui??rT
        PUBLIC ??OnYesExitGui
        FUNCTION ??OnYesExitGui,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??OnYesExitGui??rT
        MULTWEAK ??cmpfile??rA
        MULTWEAK ??copyfile??rA
        MULTWEAK ??csofts_create_empty??rA
        MULTWEAK ??csofts_fill??rA
        PUBLIC ??elf_exit
        FUNCTION ??elf_exit,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??elf_exit??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new[]??rA`
        MULTWEAK ??redraw_init??rA
        MULTWEAK ??skin_execute_xml??rA
        MULTWEAK ??tar_uncompress??rA
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC help
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 36, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        










kill_data           SYMBOL "kill_data"

??Init??rT          SYMBOL "??rT", ??Init
??MyBook_Create??rA SYMBOL "??rA", ??MyBook_Create

??OnBackExitGui??rT SYMBOL "??rT", ??OnBackExitGui

??OnYesExitGui??rT  SYMBOL "??rT", ??OnYesExitGui
??cmpfile??rA       SYMBOL "??rA", ??cmpfile
??copyfile??rA      SYMBOL "??rA", ??copyfile
??csofts_create_empty??rA SYMBOL "??rA", ??csofts_create_empty
??csofts_fill??rA   SYMBOL "??rA", ??csofts_fill

??elf_exit??rT      SYMBOL "??rT", ??elf_exit
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`
??redraw_init??rA   SYMBOL "??rA", ??redraw_init
??skin_execute_xml??rA SYMBOL "??rA", ??skin_execute_xml
??tar_uncompress??rA SYMBOL "??rA", ??tar_uncompress

        EXTERN ??MyBook_Create
        FUNCTION ??MyBook_Create,0202H
        EXTERN ??NewKey
        FUNCTION ??NewKey,0602H
        EXTERN ??cmpfile
        FUNCTION ??cmpfile,0202H
        EXTERN ??copyfile
        FUNCTION ??copyfile,0202H
        EXTERN ??csofts_create_empty
        FUNCTION ??csofts_create_empty,0202H
        EXTERN ??csofts_fill
        FUNCTION ??csofts_fill,0202H
        EXTERN ??isSoftkeysBook_ByName
        FUNCTION ??isSoftkeysBook_ByName,0602H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN ??redraw_init
        FUNCTION ??redraw_init,0202H
        EXTERN ??skin_execute_xml
        FUNCTION ??skin_execute_xml,0202H
        EXTERN ??tar_uncompress
        FUNCTION ??tar_uncompress,0202H
        EXTERN ACTION_BACK
        EXTERN ACTION_NO
        EXTERN ACTION_YES
        EXTERN ELF_BEGIN
        EXTERN VAR_ARG_BOOK
        EXTERN VAR_ARG_YESNO_PRE_QUESTION
        EXTERN VAR_ARG_YESNO_QUESTION
        EXTERN kill_data
        FUNCTION kill_data,0202H
        EXTERN myelfpath
        EXTERN rect


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??elf_exit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??elf_exit
// Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\main.cpp
//    1 #include "..\include\Lib_Clara.h"
//    2 #include "..\include\Dir.h"
//    3 #include "header\books.h"
//    4 #include "header\mybook.h"
//    5 #include "header\main.h"
//    6 #include "header\config_data.h"
//    7 #include "header\conf_loader.h"
//    8 #include "..\\include\cfg_items.h"
//    9 #include "header\cfg.h"
//   10 #include "header\iofunc.h"
//   11 #include "header\untar.h"
//   12 #include "header\xml.h"
//   13 #include "..\\include\var_arg.h"
//   14 
//   15 extern wchar_t myelfpath[512];
//   16 extern RECT rect;
//   17 
//   18 int NewKey(int key, int r1 , int mode, LPARAM, DISP_OBJ*);
//   19 int redraw_init();
//   20 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??elf_exit
        ARM
//   21 void elf_exit()
//   22 {
??elf_exit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   23   kill_data(&ELF_BEGIN, (void(*)(void*))mfree_adr());
        SWI      +33028
        MOV      R1,R0
        LDR      R0,??elf_exit_1  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??elf_exit_1:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock1
//   24 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??Init??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??Init
//   25 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??Init
        ARM
//   26 void Init()
//   27 { 
??Init:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
//   28   if (csofts_fill(GetDir(MEM_EXTERNAL+DIR_ELFS_CONFIG), L"AdvSoftkeys.cfg")<0)
        LDR      R4,??Init_1+0x4  ;; `?<Constant L"\\x41\\x64\\x76\\x53\\x6f\\x66\\x74\\x6b\\`
        MOV      R0,#+20
        SWI      +261
        MOV      R1,R4
        _BLF     ??csofts_fill,??csofts_fill??rA
        CMP      R0,#+0
        BPL      ??Init_2
//   29   {
//   30     csofts_create_empty(GetDir(MEM_EXTERNAL+DIR_ELFS_CONFIG), L"AdvSoftkeys.cfg");
        MOV      R0,#+20
        SWI      +261
        MOV      R1,R4
        _BLF     ??csofts_create_empty,??csofts_create_empty??rA
//   31     csofts_fill(GetDir(MEM_EXTERNAL+DIR_ELFS_CONFIG), L"AdvSoftkeys.cfg");
        MOV      R0,#+20
        SWI      +261
        MOV      R1,R4
        _BLF     ??csofts_fill,??csofts_fill??rA
//   32   }
//   33   wchar_t *extConfig=GetDir(MEM_EXTERNAL+DIR_ELFS_CONFIG);
??Init_2:
        MOV      R0,#+20
        SWI      +261
        MOV      R5,R0
//   34   wchar_t *folder=new wchar_t[wstrlen(extConfig)+1+wstrlen(L"AdvSoftkeys/")+1];
        SWI      +343
        MOV      R6,R0
        ADD      R0,R4,#+32
        SWI      +343
        ADD      R0,R0,R6
        ADD      R0,R0,#+2
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R6,R0
//   35   wstrcpy(folder,extConfig);
        MOV      R1,R5
        SWI      +338
//   36   wstrcat(folder,L"/");
        ADR      R1,??Init_1      ;; 0x2F, 0x00, 0x00, 0x00
        MOV      R0,R6
        SWI      +340
//   37   wstrcat(folder,L"AdvSoftkeys/");
        ADD      R1,R4,#+32
        MOV      R0,R6
        SWI      +340
//   38   if (!cmpfile(L"/tpa/system/settings/",L"current_theme.thm", folder, L"curthm.thm"))
        ADD      R3,R4,#+140
        MOV      R2,R6
        ADD      R1,R4,#+104
        ADD      R0,R4,#+60
        _BLF     ??cmpfile,??cmpfile??rA
        CMP      R0,#+0
        BNE      ??Init_3
//   39   {
//   40     rmdir(folder, 0);
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +656
//   41     mkdir(folder);
        MOV      R0,R6
        SWI      +655
//   42     copyfile(L"/tpa/system/settings/",L"current_theme.thm", folder, L"curthm.thm");
        ADD      R3,R4,#+140
        MOV      R2,R6
        ADD      R1,R4,#+104
        ADD      R0,R4,#+60
        _BLF     ??copyfile,??copyfile??rA
//   43     tar_uncompress(folder, L"curthm.thm", folder);
        MOV      R2,R6
        ADD      R1,R4,#+140
        MOV      R0,R6
        _BLF     ??tar_uncompress,??tar_uncompress??rA
//   44   }
//   45   skin_execute_xml(folder, L"Theme.xml");
??Init_3:
        ADD      R1,R4,#+164
        MOV      R0,R6
        _BLF     ??skin_execute_xml,??skin_execute_xml??rA
//   46   delete(folder);   
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//   47   DispObject_InvalidateRect(DispObject_SoftKeys_Get(),&rect);
        SWI      +675
        LDR      R1,??Init_1+0x8  ;; rect
        SWI      +495
//   48 };
        POP      {R4-R6,PC}       ;; return
        DATA
??Init_1:
        DC8      0x2F, 0x00, 0x00, 0x00
        DC32     `?<Constant L"\\x41\\x64\\x76\\x53\\x6f\\x66\\x74\\x6b\\`
        DC32     rect
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnYesExitGui??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??OnYesExitGui
//   49 
//   50 int isSoftkeysBook_ByName(BOOK *bk);
//   51 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   52 GUI *help=0;
help:
        DS8 4
//   53 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??OnYesExitGui
        ARM
//   54 void OnYesExitGui(BOOK * bk, GUI *)
//   55 {
??OnYesExitGui:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   56   GUIObject_Destroy(help);
        LDR      R0,??DataTable4  ;; help
        LDR      R0,[R0, #+0]
        SWI      +462
//   57   FreeBook(bk);
        MOV      R0,R4
        SWI      +303
//   58   SUBPROC(elf_exit);
        LDR      R0,??DataTable5  ;; ??elf_exit
        SWI      +264
//   59 };
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnBackExitGui??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??OnBackExitGui
//   60 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??OnBackExitGui
        ARM
//   61 void OnBackExitGui(BOOK * bk, GUI *)
//   62 {
??OnBackExitGui:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   63   GUIObject_Destroy(help);
        LDR      R0,??DataTable4  ;; help
        LDR      R0,[R0, #+0]
        SWI      +462
//   64   BookObj_Hide(bk, 0);
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +369
//   65   SUBPROC(elf_exit);
        LDR      R0,??DataTable5  ;; ??elf_exit
        SWI      +264
//   66 };
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE main
//   67 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function main
        ARM
//   68 int main(wchar_t *elfpath)
//   69 {
main:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
//   70   BOOK *bk=0;
//   71   if (bk=FindBook(isSoftkeysBook_ByName))
        LDR      R0,??main_0      ;; ??isSoftkeysBook_ByName
        SWI      +304
        MOVS     R5,R0
        BEQ      ??main_1
//   72   {
//   73     BookObj_Show(bk, 0);
//   74     help=CreateYesNoQuestionVA(0,
//   75                                      VAR_BOOK(bk),
//   76                                      VAR_YESNO_PRE_QUESTION(TextID_Create(L"AdvSoftkeys is already runned",ENC_UCS2,TEXTID_ANY_LEN)),
//   77                                      VAR_YESNO_QUESTION(TextID_Create(L"Do you want to close it now?",ENC_UCS2,TEXTID_ANY_LEN)),
//   78                                      0);
        LDR      R4,??main_0+0x4  ;; `?<Constant L"\\x41\\x64\\x76\\x53\\x6f\\x66\\x74\\x6b\\_2`
        MOV      R1,#+0
        SWI      +370
        MOV      R6,#+255
        ORR      R6,R6,#0xFF00
        MOV      R2,R6
        MOV      R1,#+0
        ADD      R0,R4,#+60
        SWI      +349
        MOV      R7,R0
        MOV      R2,R6
        MOV      R1,#+0
        MOV      R0,R4
        LDR      R4,??DataTable4  ;; help
        SWI      +349
        LDR      R3,??main_0+0x8  ;; VAR_ARG_YESNO_PRE_QUESTION
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+24
        LDR      R1,??main_0+0xC  ;; VAR_ARG_YESNO_QUESTION
        PUSH     {R7}
        CFI CFA R13+28
        PUSH     {R1}
        CFI CFA R13+32
        LDR      R1,??main_0+0x10  ;; VAR_ARG_BOOK
        PUSH     {R0}
        CFI CFA R13+36
        MOV      R2,R5
//   79     GUIObject_SoftKeys_SetAction(help,ACTION_YES,OnYesExitGui);
//   80     GUIObject_SoftKeys_SetAction(help,ACTION_NO,OnBackExitGui);
        LDR      R5,??main_0+0x14  ;; ??OnBackExitGui
        MOV      R0,#+0
        SWI      +677
        LDR      R2,??main_0+0x18  ;; ??OnYesExitGui
        STR      R0,[R4, #+0]
        LDR      R0,??main_0+0x1C  ;; ACTION_YES
        LDR      R1,[R0, #+0]
        LDR      R0,[R4, #+0]
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
        LDR      R0,??main_0+0x20  ;; ACTION_NO
        MOV      R2,R5
        LDR      R1,[R0, #+0]
        LDR      R0,[R4, #+0]
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
//   81     GUIObject_SoftKeys_SetAction(help,ACTION_BACK,OnBackExitGui);
        LDR      R0,??main_0+0x24  ;; ACTION_BACK
        MOV      R2,R5
        LDR      R1,[R0, #+0]
        LDR      R0,[R4, #+0]
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
//   82     return 0;
        MOV      R0,#+0
        ADD      SP,SP,#+16
        CFI CFA R13+20
        POP      {R4-R7,PC}
//   83   }
//   84   wstrcpy(myelfpath,elfpath);
??main_1:
        LDR      R0,??main_0+0x28  ;; myelfpath
        MOV      R1,R4
        SWI      +338
//   85   if (MyBook_Create())
        _BLF     ??MyBook_Create,??MyBook_Create??rA
        CMP      R0,#+0
        BEQ      ??main_2
//   86   {
//   87     Init();
        BL       ??Init
//   88     ModifyKeyHook(NewKey,KEY_HOOK_ADD,NULL);
        LDR      R0,??main_0+0x2C  ;; ??NewKey
        MOV      R2,#+0
        MOV      R1,#+1
        SWI      +263
//   89     redraw_init();
        _BLF     ??redraw_init,??redraw_init??rA
        MOV      R0,#+0
        POP      {R4-R7,PC}
//   90   }
//   91   else
//   92   {
//   93     SUBPROC(elf_exit);
??main_2:
        LDR      R0,??DataTable5  ;; ??elf_exit
        SWI      +264
//   94   }
//   95   return 0;
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
        DATA
??main_0:
        DC32     ??isSoftkeysBook_ByName
        DC32     `?<Constant L"\\x41\\x64\\x76\\x53\\x6f\\x66\\x74\\x6b\\_2`
        DC32     VAR_ARG_YESNO_PRE_QUESTION
        DC32     VAR_ARG_YESNO_QUESTION
        DC32     VAR_ARG_BOOK
        DC32     ??OnBackExitGui
        DC32     ??OnYesExitGui
        DC32     ACTION_YES
        DC32     ACTION_NO
        DC32     ACTION_BACK
        DC32     myelfpath
        DC32     ??NewKey
        CFI EndBlock cfiBlock9
//   96 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     help

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable5:
        DC32     ??elf_exit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine5_0  ;; kill_data
        BX       R12
        DATA
??Subroutine5_0:
        DC32     kill_data
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI NoFunction
        ARM
??csofts_fill??rA:
        LDR      R12,??Subroutine6_0  ;; ??csofts_fill
        BX       R12
        DATA
??Subroutine6_0:
        DC32     ??csofts_fill
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI NoFunction
        ARM
??csofts_create_empty??rA:
        LDR      R12,??Subroutine7_0  ;; ??csofts_create_empty
        BX       R12
        DATA
??Subroutine7_0:
        DC32     ??csofts_create_empty
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine8_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine8_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        ARM
??cmpfile??rA:
        LDR      R12,??Subroutine9_0  ;; ??cmpfile
        BX       R12
        DATA
??Subroutine9_0:
        DC32     ??cmpfile
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        ARM
??copyfile??rA:
        LDR      R12,??Subroutine10_0  ;; ??copyfile
        BX       R12
        DATA
??Subroutine10_0:
        DC32     ??copyfile
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
??tar_uncompress??rA:
        LDR      R12,??Subroutine11_0  ;; ??tar_uncompress
        BX       R12
        DATA
??Subroutine11_0:
        DC32     ??tar_uncompress
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
??skin_execute_xml??rA:
        LDR      R12,??Subroutine12_0  ;; ??skin_execute_xml
        BX       R12
        DATA
??Subroutine12_0:
        DC32     ??skin_execute_xml
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine13_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine13_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        ARM
??MyBook_Create??rA:
        LDR      R12,??Subroutine14_0  ;; ??MyBook_Create
        BX       R12
        DATA
??Subroutine14_0:
        DC32     ??MyBook_Create
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI NoFunction
        ARM
??redraw_init??rA:
        LDR      R12,??Subroutine15_0  ;; ??redraw_init
        BX       R12
        DATA
??Subroutine15_0:
        DC32     ??redraw_init
        CFI EndBlock cfiBlock20

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41\\x64\\x76\\x53\\x6f\\x66\\x74\\x6b\\`:
        DATA
        DC8 41H, 0, 64H, 0, 76H, 0, 53H, 0
        DC8 6FH, 0, 66H, 0, 74H, 0, 6BH, 0
        DC8 65H, 0, 79H, 0, 73H, 0, 2EH, 0
        DC8 63H, 0, 66H, 0, 67H, 0, 0, 0
        DC8 41H, 0, 64H, 0, 76H, 0, 53H, 0
        DC8 6FH, 0, 66H, 0, 74H, 0, 6BH, 0
        DC8 65H, 0, 79H, 0, 73H, 0, 2FH, 0
        DC8 0, 0
        DC8 0, 0
        DC8 2FH, 0, 74H, 0, 70H, 0, 61H, 0
        DC8 2FH, 0, 73H, 0, 79H, 0, 73H, 0
        DC8 74H, 0, 65H, 0, 6DH, 0, 2FH, 0
        DC8 73H, 0, 65H, 0, 74H, 0, 74H, 0
        DC8 69H, 0, 6EH, 0, 67H, 0, 73H, 0
        DC8 2FH, 0, 0, 0
        DC8 63H, 0, 75H, 0, 72H, 0, 72H, 0
        DC8 65H, 0, 6EH, 0, 74H, 0, 5FH, 0
        DC8 74H, 0, 68H, 0, 65H, 0, 6DH, 0
        DC8 65H, 0, 2EH, 0, 74H, 0, 68H, 0
        DC8 6DH, 0, 0, 0
        DC8 63H, 0, 75H, 0, 72H, 0, 74H, 0
        DC8 68H, 0, 6DH, 0, 2EH, 0, 74H, 0
        DC8 68H, 0, 6DH, 0, 0, 0
        DC8 0, 0
        DC8 54H, 0, 68H, 0, 65H, 0, 6DH, 0
        DC8 65H, 0, 2EH, 0, 78H, 0, 6DH, 0
        DC8 6CH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 2FH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41\\x64\\x76\\x53\\x6f\\x66\\x74\\x6b\\_2`:
        DATA
        DC8 41H, 0, 64H, 0, 76H, 0, 53H, 0
        DC8 6FH, 0, 66H, 0, 74H, 0, 6BH, 0
        DC8 65H, 0, 79H, 0, 73H, 0, 20H, 0
        DC8 69H, 0, 73H, 0, 20H, 0, 61H, 0
        DC8 6CH, 0, 72H, 0, 65H, 0, 61H, 0
        DC8 64H, 0, 79H, 0, 20H, 0, 72H, 0
        DC8 75H, 0, 6EH, 0, 6EH, 0, 65H, 0
        DC8 64H, 0, 0, 0
        DC8 44H, 0, 6FH, 0, 20H, 0, 79H, 0
        DC8 6FH, 0, 75H, 0, 20H, 0, 77H, 0
        DC8 61H, 0, 6EH, 0, 74H, 0, 20H, 0
        DC8 74H, 0, 6FH, 0, 20H, 0, 63H, 0
        DC8 6CH, 0, 6FH, 0, 73H, 0, 65H, 0
        DC8 20H, 0, 69H, 0, 74H, 0, 20H, 0
        DC8 6EH, 0, 6FH, 0, 77H, 0, 3FH, 0
        DC8 0, 0
        DC8 0, 0

        END
// 
// 900 bytes in segment CODE
// 308 bytes in segment DATA_C
//   4 bytes in segment DATA_Z
//  12 bytes in segment INITTAB
// 
// 748 bytes of CODE  memory (+ 164 bytes shared)
// 308 bytes of CONST memory
//   4 bytes of DATA  memory
//
//Errors: none
//Warnings: none
