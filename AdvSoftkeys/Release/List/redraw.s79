//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:49:25 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\r /
//                       edraw.cpp                                           /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\r /
//                       edraw.cpp -D NDEBUG -D OLDFUNCTIONS -lC             /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\AdvSoftkeys\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\Obj\ -s9 --cpu_mode arm --endian little      /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\redraw.s79                              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME redraw

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable13 EQU 0
??DataTable15 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
        PUBLIC ??DispDraw
        FUNCTION ??DispDraw,0603H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??DispDraw??rT
        MULTWEAK ??DrawHighlightID2??rA
        MULTWEAK ??DrawHighlightID??rA
        PUBLIC ??DrawSofts
        FUNCTION ??DrawSofts,0203H
        LOCFRAME CSTACK, 80, STACK
        MULTWEAK ??DrawSofts??rT
        PUBLIC ??GetOrientation
        FUNCTION ??GetOrientation,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??GetOrientation??rT
        PUBLIC ??GetSize
        FUNCTION ??GetSize,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??GetSize??rT
        PUBLIC ??NotSupported
        FUNCTION ??NotSupported,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??NotSupported??rT
        PUBLIC ??RefreshTimer
        FUNCTION ??RefreshTimer,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??RefreshTimer??rT
        PUBLIC ??__getitem
        FUNCTION ??__getitem,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??__getitem??rT
        MULTWEAK ??get_labels??rA
        MULTWEAK ??getbyname??rA
        MULTWEAK ??getitem??rA
        MULTWEAK `??operator delete??rA`
        PUBLIC ??ourredraw
        FUNCTION ??ourredraw,0203H
        LOCFRAME CSTACK, 44, STACK
        MULTWEAK ??ourredraw??rT
        PUBLIC ??redraw_init
        FUNCTION ??redraw_init,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??redraw_init??rT
        PUBWEAK ?init?tab?DATA_I
        PUBLIC DB
        PUBLIC DREDRAW
        PUBLIC DREFRESH
        PUBLIC SoftSize
        PUBLIC StatusSize
        PUBLIC books
        PUBLIC height
        PUBLIC rect
        PUBLIC soft
        PUBLIC uic
        PUBLIC width
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        







??DispDraw??rT      SYMBOL "??rT", ??DispDraw
??DrawHighlightID2??rA SYMBOL "??rA", ??DrawHighlightID2
??DrawHighlightID??rA SYMBOL "??rA", ??DrawHighlightID

??DrawSofts??rT     SYMBOL "??rT", ??DrawSofts

??GetOrientation??rT SYMBOL "??rT", ??GetOrientation

??GetSize??rT       SYMBOL "??rT", ??GetSize

??NotSupported??rT  SYMBOL "??rT", ??NotSupported

??RefreshTimer??rT  SYMBOL "??rT", ??RefreshTimer

??__getitem??rT     SYMBOL "??rT", ??__getitem
??get_labels??rA    SYMBOL "??rA", ??get_labels
??getbyname??rA     SYMBOL "??rA", ??getbyname
??getitem??rA       SYMBOL "??rA", ??getitem
`??operator delete??rA` SYMBOL "??rA", `??operator delete`

??ourredraw??rT     SYMBOL "??rT", ??ourredraw

??redraw_init??rT   SYMBOL "??rT", ??redraw_init

        EXTERN ??DrawHighlightID
        FUNCTION ??DrawHighlightID,0202H
        EXTERN ??DrawHighlightID2
        FUNCTION ??DrawHighlightID2,0202H
        EXTERN ??get_labels
        FUNCTION ??get_labels,0202H
        EXTERN ??getbyname
        FUNCTION ??getbyname,0202H
        EXTERN ??getitem
        FUNCTION ??getitem,0202H
        EXTERN ??isMMBrowserBook
        FUNCTION ??isMMBrowserBook,0602H
        EXTERN ??isMenuBook
        FUNCTION ??isMenuBook,0602H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN colors
        EXTERN images
        EXTERN lastitem
        EXTERN pressed
        EXTERN sk
        EXTERN works

// Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\redraw.cpp
//    1 #include "..\include\Lib_Clara.h"
//    2 #include "..\include\Dir.h"
//    3 #include "header\structs.h"
//    4 #include "header\books.h"
//    5 #include "header\images.h"
//    6 #include "header\presets.h"
//    7 
//    8 typedef struct
//    9 {
//   10   char unk[0x18];
//   11   char type;
//   12   char unk1[3];
//   13   void *defmenu;
//   14 }MBOOK;
//   15 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   16 DISP_OBJ *soft=0;
//   17 DISP_OBJ_METHOD DREFRESH;
//   18 DISP_OBJ_ONREDRAW_METHOD DREDRAW;
//   19 
//   20 #define INT_NUM 6
//   21 extern int colors[INT_NUM];
//   22 extern bool works;
//   23 extern bool pressed[3];
//   24 extern ITEM*lastitem;
//   25 extern UI_SOFTKEY sk[3];
//   26 
//   27 int StatusSize=0;
//   28 int SoftSize=0;
//   29 RECT rect;
rect:
        DS8 8
        REQUIRE `?<Initializer for rect>`
soft:
        DS8 4
        REQUIRE `?<Initializer for soft>`
DREFRESH:
        DS8 4
        REQUIRE `?<Initializer for DREFRESH>`
DREDRAW:
        DS8 4
        REQUIRE `?<Initializer for DREDRAW>`
StatusSize:
        DS8 4
        REQUIRE `?<Initializer for StatusSize>`
SoftSize:
        DS8 4
        REQUIRE `?<Initializer for SoftSize>`
//   30 int height=0,width=0,uic=0,DB=2020;
height:
        DS8 4
        REQUIRE `?<Initializer for height>`
width:
        DS8 4
        REQUIRE `?<Initializer for width>`
uic:
        DS8 4
        REQUIRE `?<Initializer for uic>`
DB:
        DS8 4
        REQUIRE `?<Initializer for DB>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetSize??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??GetSize
//   31 
//   32 ITEM *getbyname(wchar_t *name);
//   33 void getitem(BOOK *bk);
//   34 
//   35 LABELS *get_labels(DISP_OBJ *sk, DISP_OBJ *DO, BOOK *bk, int vis);
//   36 
//   37 int GetOrientation(BOOK *bk);
//   38 void __getitem(BOOK *bk);
//   39 void DrawHighlightID2(int font,int text,int ct, int XPos, int YPos, int borderColor, int NormalColor, bool);
//   40 void DrawHighlightID(int font,int text,int CEN, int XPos, int YPos, int MaxXPos, int MaxYPos, int borderColor, int NormalColor, bool);
//   41 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??GetSize
        ARM
//   42 void GetSize()
//   43 {
??GetSize:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   44   int a=Display_GetHeight(0);
//   45   switch (a)
        MOV      R0,#+0
        SWI      +600
        SUBS     R0,R0,#+160
        BEQ      ??GetSize_1
        SUBS     R0,R0,#+160
        MOVNE    R0,#+18
        MOVNE    R1,#+26
//   46   {
//   47   case 320:
//   48     StatusSize=24;
        MOVEQ    R0,#+24
//   49     SoftSize=30;
        MOVEQ    R1,#+30
        B        ??GetSize_2
//   50     break;
//   51   case 220:
//   52     StatusSize=18;
//   53     SoftSize=26;
//   54     break;
//   55   case 160:
//   56     StatusSize=14;
??GetSize_1:
        MOV      R0,#+14
//   57     SoftSize=18;
        MOV      R1,#+18
??GetSize_2:
        LDR      R2,??DataTable6  ;; rect
        STR      R1,[R2, #+24]
        STR      R0,[R2, #+20]
//   58     break;
//   59   default:
//   60     StatusSize=18;
//   61     SoftSize=26;
//   62     break;
//   63   }
//   64 };
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??NotSupported??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??NotSupported
//   65 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   66 char *books[]={"MM_Browser",
books:
        DS8 12
        REQUIRE `?<Initializer for books>`
//   67                "ImageViewerBook",
//   68                "AudioPlayerBook"};
//   69 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??NotSupported
        ARM
//   70 int NotSupported(BOOK *bk)
//   71 {
??NotSupported:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//   72   int x;
//   73   for (x=0;x<3;x++)
        MOV      R5,#+0
//   74   {
//   75     if (strstr(bk->xbook->name,books[x]))
??NotSupported_1:
        LDR      R0,??NotSupported_2  ;; books
        LDR      R1,[R0, +R5, LSL #+2]
        LDR      R0,[R4, #+0]
        LDR      R0,[R0, #+4]
        SWI      +664
        CMP      R0,#+0
        BNE      ??NotSupported_3
//   76     {
//   77       return 1;
//   78     }
//   79   }
        ADD      R5,R5,#+1
        CMP      R5,#+3
        BLT      ??NotSupported_1
//   80   if (bk==FindBook(get_IsMediaPlayerVideoBook()))
        SWI      +33208
        SWI      +304
        CMP      R4,R0
        BNE      ??NotSupported_4
//   81   {
//   82     return 1;
??NotSupported_3:
        MOV      R0,#+1
        POP      {R4,R5,PC}
//   83   }
//   84   return 0;
??NotSupported_4:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        DATA
??NotSupported_2:
        DC32     books
        CFI EndBlock cfiBlock3
//   85 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??ourredraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??ourredraw
//   86 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??ourredraw
        ARM
//   87 int ourredraw(DISP_OBJ *DO, int a, int b, int c)
//   88 {
//   89   if (!works) return 0;
??ourredraw:
        LDR      R0,??DataTable11  ;; works
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??ourredraw_1
??ourredraw_2:
        MOV      R0,#+0
        POP      {R4-R11,PC}      ;; return
//   90   DISP_OBJ *foc=Display_GetFocusedDispObject(0);
??ourredraw_1:
        MOV      R0,#+0
        SWI      +541
        MOV      R8,R0
//   91   BOOK *bk=Display_GetTopBook(0);
        MOV      R0,#+0
        SWI      +795
        MOV      R4,R0
//   92   __getitem(bk);
        BL       ??__getitem
        LDR      R0,??DataTable12  ;; lastitem
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??ourredraw_3
//   93   if (lastitem){ if (lastitem->style==2) return 0; }
        LDR      R0,[R0, #+16]
        CMP      R0,#+2
        BEQ      ??ourredraw_2
//   94   int stat=GetOrientation(bk);
??ourredraw_3:
        LDR      R6,??DataTable6  ;; rect
        MOV      R5,#+218
        LDR      R0,[R6, #+40]
        ORR      R5,R5,#0x700
        CMP      R0,R5
        MOVEQ    R7,#+0
        BEQ      ??ourredraw_4
        MOV      R0,R4
        SWI      +793
        MOV      R7,R0
//   95   SOFTKEY_PARAMS *xls=(SOFTKEY_PARAMS*)DispObject_SoftKeys_GetParams(foc);
??ourredraw_4:
        MOV      R0,R8
        SWI      +791
        MOV      R11,R0
//   96   if (xls->visible_softs_count==3 && bk!=Find_StandbyBook())return 0;
        LDRB     R0,[R11, #+7]
        LDRB     R1,[R11, #+6]
        ORR      R0,R1,R0, LSL #+8
        CMP      R0,#+3
        BNE      ??ourredraw_5
        SWI      +305
        CMP      R4,R0
        BNE      ??ourredraw_2
//   97   GC* gc=get_DisplayGC();
??ourredraw_5:
        SWI      +485
        MOVS     R8,R0
//   98   if (!gc)return 1;
        BNE      ??ourredraw_6
??ourredraw_7:
        MOV      R0,#+1
        POP      {R4-R11,PC}
//   99   if (bk==FindBook(isMenuBook))
??ourredraw_6:
        LDR      R0,??ourredraw_8  ;; ??isMenuBook
        LDR      R10,??DataTable9  ;; images
        MOV      R9,#+255
        ORR      R9,R9,#0xFF00
        SWI      +304
        CMP      R4,R0
        BNE      ??ourredraw_9
//  100   {
//  101     MBOOK *mb=(MBOOK*)bk;
//  102     if (mb->type==0)
        LDR      R0,[R6, #+24]
        LDR      R1,[R6, #+28]
        SUB      R2,R0,R1
        LDRB     R0,[R4, #+24]
        CMP      R0,#+0
        BNE      ??ourredraw_10
//  103     {
//  104       if (mb->defmenu)
        LDR      R0,[R4, #+28]
        CMP      R0,#+0
        BEQ      ??ourredraw_7
//  105       {
//  106         if (images[DESKTOP]!=NOIMAGE)
        LDRH     R0,[R10, #+10]
??ourredraw_11:
        CMP      R0,R9
        BEQ      ??ourredraw_7
//  107         {
//  108           GC_PutChar(gc,0,SoftSize-height,0,0,images[DESKTOP]);
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R3,#+0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+44
??ourredraw_12:
        MOV      R1,#+0
??ourredraw_13:
        MOV      R0,R8
        SWI      +320
        ADD      SP,SP,#+8
        CFI CFA R13+36
        MOV      R0,#+1
        POP      {R4-R11,PC}
//  109         }
//  110       }
//  111     }
//  112     else
//  113     {
//  114       if (images[NAVIGATION]!=NOIMAGE)
??ourredraw_10:
        LDRH     R0,[R10, #+12]
        B        ??ourredraw_11
//  115       {
//  116         GC_PutChar(gc,0,SoftSize-height,0,0,images[NAVIGATION]);
//  117       }
//  118     }
//  119   }
//  120   else if (bk==Find_StandbyBook())
??ourredraw_9:
        SWI      +305
        CMP      R4,R0
        BNE      ??ourredraw_14
//  121   {
//  122     if (lastitem && lastitem->type>T_STANDBY)
        LDR      R0,??DataTable12  ;; lastitem
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??ourredraw_7
        LDR      R0,[R0, #+24]
        CMP      R0,#+1
        BLT      ??ourredraw_7
//  123     {
//  124       if (images[STANDBY]!=NOIMAGE)
        LDRH     R0,[R10, #+8]
        CMP      R0,R9
        BEQ      ??ourredraw_15
//  125       {
//  126         GC_PutChar(gc,0,SoftSize-height,0,0,images[STANDBY]);
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R3,#+0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+44
        LDR      R1,[R6, #+28]
        LDR      R0,[R6, #+24]
        SUB      R2,R0,R1
        MOV      R1,R3
        MOV      R0,R8
        SWI      +320
        ADD      SP,SP,#+8
        CFI CFA R13+36
//  127       }
//  128       if (images[STANDBY_SOFTKEY]!=NOIMAGE)
??ourredraw_15:
        LDRH     R0,[R10, #+0]
        CMP      R0,R9
        BEQ      ??ourredraw_7
//  129       {
//  130         GC_PutChar(gc,0,0,0,0,images[STANDBY_SOFTKEY]);
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R3,#+0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+44
        MOV      R2,R0
        B        ??ourredraw_12
        CFI CFA R13+36
//  131       }
//  132     }
//  133   }
//  134   else
//  135   { 
//  136     if (DB==2010)goto L_draw;
??ourredraw_14:
        LDR      R0,[R6, #+40]
        CMP      R0,R5
        BEQ      ??ourredraw_16
//  137     if (xls->background==0 && stat==0 && NotSupported(bk)==false)
        LDRB     R0,[R11, #+30]
        CMP      R0,#+0
        CMPEQ    R7,#+0
        BNE      ??ourredraw_7
        MOV      R0,R4
        BL       ??NotSupported
        CMP      R0,#+0
        BNE      ??ourredraw_7
//  138     {
//  139     L_draw:
//  140       if (images[NAVIGATION]!=NOIMAGE)
??ourredraw_16:
        LDRH     R0,[R10, #+12]
        CMP      R0,R9
        BEQ      ??ourredraw_7
//  141       {
//  142         GC_PutChar(gc,0,SoftSize-height,0,0,images[NAVIGATION]);
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R3,#+0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+44
        LDR      R1,[R6, #+28]
        LDR      R0,[R6, #+24]
        SUB      R2,R0,R1
        MOV      R1,R3
        B        ??ourredraw_13
        DATA
??ourredraw_8:
        DC32     ??isMenuBook
        CFI EndBlock cfiBlock5
//  143       }
//  144     }
//  145   }
//  146   return 1;
//  147 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetOrientation??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??GetOrientation
//  148 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??GetOrientation
        ARM
//  149 int GetOrientation(BOOK *bk)
//  150 {
//  151   if (DB==2010)
??GetOrientation:
        LDR      R1,??GetOrientation_1  ;; rect + 40
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R1,[R1, #+0]
        MOV      R2,#+218
        ORR      R2,R2,#0x700
        CMP      R1,R2
//  152   {
//  153     return 0;
        MOVEQ    R0,#+0
        POPEQ    {PC}
//  154   }
//  155   return BookObj_GetDisplayOrientation(bk);
        SWI      +793
        POP      {PC}             ;; return
        DATA
??GetOrientation_1:
        DC32     rect + 40
        CFI EndBlock cfiBlock7
//  156 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??DrawSofts??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??DrawSofts
//  157 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??DrawSofts
        ARM
//  158 void DrawSofts(DISP_OBJ *DO,BOOK *bk, LABELS *lbl)
//  159 {
??DrawSofts:
        PUSH     {R0,R2,R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+44
//  160   int stat=GetOrientation(bk);
        LDR      R5,??DataTable6  ;; rect
        SUB      SP,SP,#+12
        CFI CFA R13+56
        LDR      R0,[R5, #+40]
        MOV      R4,R1
        MOV      R11,#+218
        ORR      R11,R11,#0x700
        CMP      R0,R11
        MOVEQ    R1,#+0
        STREQ    R1,[SP, #+4]
        BEQ      ??DrawSofts_1
        MOV      R0,R4
        SWI      +793
        STR      R0,[SP, #+4]
//  161   GC* gc=get_DisplayGC();
??DrawSofts_1:
        SWI      +485
        MOV      R6,R0
//  162   SOFTKEY_PARAMS *xls=(SOFTKEY_PARAMS*)DispObject_SoftKeys_GetParams(Display_GetFocusedDispObject(0));
        MOV      R0,#+0
        SWI      +541
        SWI      +791
        MOVS     R7,R0
//  163   if (!xls)return;
//  164   if (!gc)return;
        CMPNE    R6,#+0
        BEQ      ??DrawSofts_2
//  165   int color=xls->color;
        LDRB     R1,[R7, #+35]
        LDRB     R2,[R7, #+34]
//  166   if (DB==2010)goto L_draw2;
        LDR      R9,??DataTable14  ;; pressed
        LDR      R10,??DataTable12  ;; lastitem
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[R7, #+33]
        MVN      R8,#-1879048192
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[R7, #+32]
        ORR      R1,R2,R1, LSL #+8
        STR      R1,[SP, #+8]
        LDR      R0,[R5, #+40]
        CMP      R0,R11
        BEQ      ??DrawSofts_3
//  167   if (lastitem)
        LDR      R0,[R10, #+0]
        CMP      R0,#+0
        BEQ      ??DrawSofts_4
//  168   {
//  169     if (lastitem->style==0 && pressed[1]==true && lbl->strids[1]==EMPTY_TEXTID)
        LDR      R0,[R0, #+16]
        CMP      R0,#+0
        BNE      ??DrawSofts_5
        LDRB     R0,[R9, #+1]
        CMP      R0,#+0
        BEQ      ??DrawSofts_5
        LDR      R0,[SP, #+16]
        LDR      R0,[R0, #+4]
        CMP      R0,R8
        BNE      ??DrawSofts_5
//  170     {
//  171       pressed[1]=false;
        MOV      R0,#+0
        STRB     R0,[R9, #+1]
//  172       pressed[0]=true;
        MOV      R0,#+1
        STRB     R0,[R9, #+0]
//  173     }
//  174     if (xls->background==0 && !FindBook(isMMBrowserBook) && bk!=FindBook(get_IsAudioPlayerBook()) && bk!=FindBook(get_IsMediaPlayerVideoBook()))//bk!=FindBook(isImageViewerBook) && ) ) && NotSupported(bk)==false && xls->background==0 && stat==0)
??DrawSofts_5:
        LDRB     R0,[R7, #+30]
        CMP      R0,#+0
        BNE      ??DrawSofts_4
        LDR      R0,??DrawSofts_6  ;; ??isMMBrowserBook
        SWI      +304
        CMP      R0,#+0
        BNE      ??DrawSofts_4
        SWI      +33419
        SWI      +304
        CMP      R4,R0
        BEQ      ??DrawSofts_4
        SWI      +33208
        SWI      +304
        CMP      R4,R0
        BEQ      ??DrawSofts_4
??DrawSofts_3:
        LDRB     R3,[R9, #+0]
        LDR      R2,??DataTable9  ;; images
        LDR      R0,[R10, #+0]
        CMP      R3,#+0
        LDRHNE   R3,[R2, #+2]
        LDR      R0,[R0, #+24]
        MOV      R1,#+255
        ORR      R1,R1,#0xFF00
        CMPNE    R3,R1
        BEQ      ??DrawSofts_7
        LDR      R4,[SP, #+16]
        LDR      R4,[R4, #+0]
        CMP      R4,R8
        BEQ      ??DrawSofts_7
        CMP      R0,#+1
        BLT      ??DrawSofts_7
//  175     {
//  176     L_draw2:
//  177       if (pressed[0] && images[LEFT_PRESSED]!=NOIMAGE && lbl->strids[0]!=EMPTY_TEXTID && lastitem->type>T_STANDBY)
//  178       {
//  179         GC_PutChar(gc,0,0,0,0,images[LEFT_PRESSED]);
??DrawSofts_8:
        PUSH     {R3}
        CFI CFA R13+60
        B        ??DrawSofts_9
        CFI CFA R13+56
//  180       }
//  181       else if (pressed[1] && images[MIDDLE_PRESSED]!=NOIMAGE && lbl->strids[1]!=EMPTY_TEXTID)
??DrawSofts_7:
        LDRB     R3,[R9, #+1]
        CMP      R3,#+0
        LDRHNE   R3,[R2, #+4]
        CMPNE    R3,R1
        BEQ      ??DrawSofts_10
        LDR      R4,[SP, #+16]
        LDR      R4,[R4, #+4]
        CMP      R4,R8
        BNE      ??DrawSofts_8
//  182       {
//  183         GC_PutChar(gc,0,0,0,0,images[MIDDLE_PRESSED]);
//  184       }
//  185       else if (pressed[2] && images[RIGHT_PRESSED]!=NOIMAGE && lbl->strids[2]!=EMPTY_TEXTID && lastitem->type>T_STANDBY)
??DrawSofts_10:
        LDRB     R3,[R9, #+2]
        CMP      R3,#+0
        LDRHNE   R2,[R2, #+6]
        CMPNE    R2,R1
        BEQ      ??DrawSofts_4
        LDR      R1,[SP, #+16]
        LDR      R1,[R1, #+8]
        CMP      R1,R8
        BEQ      ??DrawSofts_4
        CMP      R0,#+1
        BLT      ??DrawSofts_4
//  186       {
//  187         GC_PutChar(gc,0,0,0,0,images[RIGHT_PRESSED]);
        PUSH     {R2}
        CFI CFA R13+60
??DrawSofts_9:
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+64
        MOV      R3,#+0
        MOV      R2,R0
        MOV      R1,R0
        MOV      R0,R6
        SWI      +320
        ADD      SP,SP,#+8
        CFI CFA R13+56
//  188       }
//  189     }
//  190   }
//  191   int x;
//  192   for (x=0;x<3;x++)
??DrawSofts_4:
        MOV      R4,#+0
//  193   {
//  194     int c=0;
//  195     int b=0;
//  196     if (lbl->enable[x])
??DrawSofts_11:
        LDR      R0,??DrawSofts_6+0x4  ;; colors
        ADD      R1,R0,R4, LSL #+3
        LDR      R0,[SP, #+16]
        ADD      R0,R4,R0
        LDRB     R0,[R0, #+12]
        CMP      R0,#+0
//  197     {
//  198       c=colors[x*2];
//  199     }
//  200     else
//  201     {
//  202       c=0xAAAAAAAA;
//  203     }
//  204     if (pressed[x])
        LDRB     R0,[R4, +R9]
        LDRNE    R6,[R1, #+0]
        LDREQ    R6,??DrawSofts_6+0x8  ;; 0xffffffffaaaaaaaa
        CMP      R0,#+0
//  205     {
//  206       c=colors[x*2+1];
        LDRNE    R6,[R1, #+4]
//  207     }
//  208     b=clBlack;
//  209     if (uic && color)c=color;
        LDR      R1,[R5, #+36]
        CMP      R1,#+0
        LDRNE    R1,[SP, #+8]
        CMPNE    R1,#+0
        MOVNE    R6,R1
//  210     if (xls->background==1)
        LDRB     R1,[R7, #+30]
        CMP      R1,#+1
        BNE      ??DrawSofts_12
//  211     {
//  212       if (pressed[x])
        CMP      R0,#+0
        MOVEQ    R8,#-16777216
        MVNEQ    R6,#+0
//  213       {
//  214         b=clWhite;
        MVNNE    R8,#+0
//  215         c=clBlack;
        MOVNE    R6,#-16777216
        B        ??DrawSofts_13
//  216       }
//  217       else
//  218       {
//  219         b=clBlack;
//  220         c=clWhite;
//  221       }
//  222     }
//  223     else
//  224     {
//  225       b=clBlack;
??DrawSofts_12:
        MOV      R8,#-16777216
//  226     }
//  227     if (stat==0)
??DrawSofts_13:
        LDR      R3,[SP, #+16]
        LDR      R2,??DrawSofts_6+0xC  ;; sk
        ADD      R3,R3,R4, LSL #+2
        STR      R3,[SP, #+0]
        LDR      R3,[SP, #+4]
        ADD      R10,R2,R4, LSL #+5
        CMP      R3,#+0
        BNE      ??DrawSofts_14
//  228     {
//  229       int pos=sk[x].y-(height-SoftSize);
        LDR      R3,[R10, #+4]
        LDR      R11,[R5, #+28]
//  230       if (pressed[x])pos++;
        CMP      R0,#+0
        SUB      R3,R3,R11
        LDR      R11,[R5, #+24]
        ADD      R3,R11,R3
        ADDNE    R3,R3,#+1
//  231       DrawHighlightID2(sk[x].font, lbl->strids[x], sk[x].ct, sk[x].x, pos, b, c, xls->background);
        CMP      R1,#+0
        MOVNE    R0,#+1
        MOVEQ    R0,#+0
        PUSH     {R0}
        CFI CFA R13+60
        PUSH     {R6}
        CFI CFA R13+64
        PUSH     {R8}
        CFI CFA R13+68
        PUSH     {R3}
        CFI CFA R13+72
        LDR      R0,[SP, #+16]
        LDR      R3,[R2, +R4, LSL #+5]
        LDR      R2,[R10, #+8]
        LDR      R1,[R0, #+0]
        LDR      R0,[R10, #+12]
        _BLF     ??DrawHighlightID2,??DrawHighlightID2??rA
        ADD      SP,SP,#+16
        CFI CFA R13+56
        B        ??DrawSofts_15
//  232     }
//  233     else
//  234     {
//  235       if (pressed[x])
??DrawSofts_14:
        CMP      R0,#+0
//  236       {
//  237         b=clWhite;
//  238         c=clBlack;
//  239       }
//  240       else
//  241       {
//  242         b=clBlack;
//  243         c=clWhite;
//  244       }
//  245       DrawHighlightID(sk[x].hfont,lbl->strids[x],sk[x].hct,sk[x].hx,sk[x].hy,height-DispObject_GetWindowWidth(DO),width,b, c, xls->background);
        LDR      R0,[SP, #+12]
        MVNNE    R8,#+0
        MOVNE    R6,#-16777216
        MOVEQ    R8,#-16777216
        MVNEQ    R6,#+0
        CMP      R1,#+0
        MOVNE    R11,#+1
        MOVEQ    R11,#+0
        SWI      +755
        PUSH     {R11}
        CFI CFA R13+60
        PUSH     {R6}
        CFI CFA R13+64
        PUSH     {R8}
        CFI CFA R13+68
        LDR      R1,[R5, #+32]
        PUSH     {R1}
        CFI CFA R13+72
        LDR      R1,[R5, #+28]
        SUB      R0,R1,R0
        PUSH     {R0}
        CFI CFA R13+76
        LDR      R0,[R10, #+20]
        PUSH     {R0}
        CFI CFA R13+80
        LDR      R3,[R10, #+16]
        LDR      R2,[R10, #+24]
        LDR      R0,[SP, #+24]
        LDR      R1,[R0, #+0]
        LDR      R0,[R10, #+28]
        _BLF     ??DrawHighlightID,??DrawHighlightID??rA
        ADD      SP,SP,#+24
        CFI CFA R13+56
//  246     }
//  247   }
??DrawSofts_15:
        ADD      R4,R4,#+1
        CMP      R4,#+3
        BLT      ??DrawSofts_11
??DrawSofts_2:
        ADD      SP,SP,#+20       ;; stack cleaning
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??DrawSofts_6:
        DC32     ??isMMBrowserBook
        DC32     colors
        DC32     0xffffffffaaaaaaaa
        DC32     sk
        CFI EndBlock cfiBlock9
//  248 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     rect

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     images

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??__getitem??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??__getitem
//  249 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??__getitem
        ARM
//  250 void __getitem(BOOK *bk)
//  251 {
??__getitem:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//  252   bool t=false;
//  253   if (Find_StandbyBook()==bk)
        SWI      +305
        CMP      R0,R4
        BNE      ??__getitem_1
//  254   {
//  255     GUI *g=SBY_GetMainInput(bk);
        MOV      R0,R4
        SWI      +535
//  256     if (!g)return;
        CMP      R0,#+0
        POPEQ    {R4,R5,PC}
//  257     int vis=MainInput_getVisible(g);
//  258     if (vis==1)
        SWI      +502
        CMP      R0,#+1
        BNE      ??__getitem_1
//  259     {
//  260       lastitem=getbyname(L"Keylock");
        LDR      R4,??DataTable12  ;; lastitem
        LDR      R5,??__getitem_2  ;; `?<Constant L"\\x4b\\x65\\x79\\x6c\\x6f\\x63\\x6b">`
        MOV      R0,R5
        _BLF     ??getbyname,??getbyname??rA
        STR      R0,[R4, #+0]
//  261       if (!lastitem)lastitem=getbyname(L"DEFAULT");
        CMP      R0,#+0
        POPNE    {R4,R5,PC}
        ADD      R0,R5,#+16
        _BLF     ??getbyname,??getbyname??rA
        STR      R0,[R4, #+0]
        POP      {R4,R5,PC}
//  262       t=true;
//  263     }
//  264   }
//  265   if (t==false)
//  266   {
//  267     getitem(bk);
??__getitem_1:
        MOV      R0,R4
        _BLF     ??getitem,??getitem??rA
        POP      {R4,R5,PC}       ;; return
        DATA
??__getitem_2:
        DC32     `?<Constant L"\\x4b\\x65\\x79\\x6c\\x6f\\x63\\x6b">`
        CFI EndBlock cfiBlock11
//  268   }
//  269 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??DispDraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??DispDraw
//  270 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??DispDraw
        ARM
//  271 void DispDraw(DISP_OBJ* DO,int a,int b,int c)
//  272 { 
??DispDraw:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R4,R0
        MOV      R7,R1
        MOV      R8,R2
        MOV      R9,R3
//  273   BOOK *bk=Display_GetTopBook(0);
        MOV      R0,#+0
        SWI      +795
        MOV      R5,R0
//  274   DISP_OBJ *focused = Display_GetFocusedDispObject(0);
        MOV      R0,#+0
        SWI      +541
        MOV      R6,R0
//  275   if (!bk)return;
        CMP      R5,#+0
        POPEQ    {R4-R9,PC}
//  276   __getitem(bk);
        MOV      R0,R5
        BL       ??__getitem
//  277   DREDRAW(DO, a, b, c);
        MOV      R1,R7
        LDR      R7,??DispDraw_1  ;; rect + 16
        MOV      R3,R9
        LDR      R7,[R7, #+0]
        MOV      R2,R8
        MOV      R0,R4
        BLX      R7
//  278   if (!works)return;
        LDR      R0,??DataTable11  ;; works
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        POPEQ    {R4-R9,PC}
//  279   SoftKeys_Update(DO);
        MOV      R0,R4
        SWI      +803
//  280   if (!focused)return;
        CMP      R6,#+0
        POPEQ    {R4-R9,PC}
//  281   SOFTKEY_PARAMS *xls=(SOFTKEY_PARAMS*)DispObject_SoftKeys_GetParams(focused);
        MOV      R0,R6
        SWI      +791
//  282   int vis=0;
//  283   if (xls)
        CMP      R0,#+0
        POPEQ    {R4-R9,PC}
//  284   {
//  285     vis = xls->visible_softs_count;
        LDRB     R1,[R0, #+7]
        LDRB     R0,[R0, #+6]
//  286     if (vis==3)
        LDR      R8,??DataTable12  ;; lastitem
        MOV      R7,#+0
        ORR      R9,R0,R1, LSL #+8
        CMP      R9,#+3
        BNE      ??DispDraw_2
//  287     {
//  288       if (bk!=Find_StandbyBook())
        SWI      +305
        CMP      R5,R0
        LDR      R0,[R8, #+0]
        BEQ      ??DispDraw_3
//  289       {
//  290         if (lastitem)
        CMP      R0,#+0
        POPEQ    {R4-R9,PC}
//  291         {
//  292           lastitem->type=T_3SK_LAYOUT;
        MOV      R1,#+5
        STR      R1,[R0, #+24]
        POP      {R4-R9,PC}
//  293         }
//  294         return;
//  295       }
//  296       else
//  297       {
//  298         if (lastitem)lastitem->type=T_STANDBY;
??DispDraw_3:
        CMP      R0,#+0
        BEQ      ??DispDraw_4
        STR      R7,[R0, #+24]
        B        ??DispDraw_4
//  299       }
//  300     }
//  301     else if (vis==0xFFFF || vis==0)
??DispDraw_2:
        MOV      R0,#+255
        ORR      R0,R0,#0xFF00
        CMP      R9,R0
        CMPNE    R9,#+0
        POPEQ    {R4-R9,PC}
//  302     {
//  303       return;
//  304     }
//  305   }
//  306   else return;
//  307   LABELS* lbl= get_labels(DO, focused, bk, vis);
??DispDraw_4:
        MOV      R3,R9
        MOV      R2,R5
        MOV      R1,R6
        MOV      R0,R4
        _BLF     ??get_labels,??get_labels??rA
        MOV      R6,R0
//  308   if (lastitem && lbl)
        LDR      R0,[R8, #+0]
        CMP      R0,#+0
        CMPNE    R6,#+0
        BEQ      ??DispDraw_5
//  309   {
//  310     if (lastitem->style==2)return;
        LDR      R1,[R0, #+16]
        CMP      R1,#+2
        POPEQ    {R4-R9,PC}
//  311     if (lastitem->type!=T_DDMENU && lastitem->type!=T_MESSAGEBOX)
        LDR      R1,[R0, #+24]
        CMP      R1,#+4
        CMPNE    R1,#+3
        BEQ      ??DispDraw_6
//  312     {
//  313       int x;
//  314       for (x=0;x<3;x++)
        MOV      R1,#+0
        MVN      R8,#-1879048192
//  315       {
//  316         if (lastitem->strids[x]!=EMPTY_TEXTID)
??DispDraw_7:
        ADD      R2,R0,R1, LSL #+2
        LDR      R3,[R2, #+4]
        CMP      R3,R8
        BEQ      ??DispDraw_8
//  317         {
//  318           lbl->strids[x]=lastitem->strids[x];
        MOV      R2,R3
        STR      R2,[R6, +R1, LSL #+2]
//  319           lbl->enable[x]=true;
        ADD      R2,R1,R6
        MOV      R3,#+1
        STRB     R3,[R2, #+12]
//  320         }
//  321       }
??DispDraw_8:
        ADD      R1,R1,#+1
        CMP      R1,#+3
        BLT      ??DispDraw_7
//  322     }
//  323     DrawSofts(DO, bk, lbl);
??DispDraw_6:
        MOV      R2,R6
        MOV      R1,R5
        MOV      R0,R4
        BL       ??DrawSofts
//  324     pressed[0] = false;
        LDR      R0,??DataTable14  ;; pressed
        MOV      R1,#+0
        STRB     R1,[R0, #+0]
//  325     pressed[1] = false;
        STRB     R1,[R0, #+1]
//  326     pressed[2] = false;
        STRB     R1,[R0, #+2]
//  327   }
//  328   delete(lbl);
??DispDraw_5:
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//  329 };
        POP      {R4-R9,PC}       ;; return
        DATA
??DispDraw_1:
        DC32     rect + 16
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable11:
        DC32     works

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable12:
        DC32     lastitem

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??RefreshTimer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??RefreshTimer
//  330 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??RefreshTimer
        ARM
//  331 void RefreshTimer(DISP_OBJ *DO)
//  332 {
//  333   pressed[0]=false;
??RefreshTimer:
        LDR      R1,??DataTable14  ;; pressed
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  334   pressed[1]=false;
//  335   pressed[2]=false;
//  336   DispObject_InvalidateRect(DO,&rect);
        LDR      R4,??DataTable16  ;; rect
        MOV      R2,#+0
        STRB     R2,[R1, #+0]
        STRB     R2,[R1, #+1]
        STRB     R2,[R1, #+2]
        MOV      R1,R4
        SWI      +495
//  337   DispObject_KillRefreshTimer(soft);
        LDR      R0,[R4, #+8]
        SWI      +734
//  338 };
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable14:
        DC32     pressed

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??redraw_init??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??redraw_init
//  339 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??redraw_init
        ARM
//  340 int redraw_init()
//  341 {
??redraw_init:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  342   height=Display_GetHeight(0);
        LDR      R4,??DataTable16  ;; rect
        MOV      R0,#+0
//  343   width=Display_GetWidth(0);
//  344   switch(GetChipID()&CHIPID_MASK)
        MOV      R5,#+0
        SWI      +600
        STR      R0,[R4, #+28]
        MOV      R0,#+0
        SWI      +601
        STR      R0,[R4, #+32]
        SWI      +590
        AND      R0,R0,#0xFE00
        SUBS     R0,R0,#+28672
        SUBSNE   R0,R0,#+4096
        BEQ      ??redraw_init_1
        SUBS     R0,R0,#+6144
        BEQ      ??redraw_init_2
        B        ??redraw_init_3
//  345   {
//  346   case CHIPID_DB2000:
//  347   case CHIPID_DB2010:
//  348     DB=2010;
??redraw_init_1:
        MOV      R0,#+218
        ORR      R0,R0,#0x700
        STR      R0,[R4, #+40]
//  349     uic=false;
        STR      R5,[R4, #+36]
        B        ??redraw_init_3
//  350     break;
//  351   case CHIPID_DB2020:
//  352     DB=2020;
??redraw_init_2:
        MOV      R0,#+228
        ORR      R0,R0,#0x700
        STR      R0,[R4, #+40]
//  353     uic=true;
        MOV      R0,#+1
        STR      R0,[R4, #+36]
//  354     break;
//  355   }
//  356   GetSize();
??redraw_init_3:
        BL       ??GetSize
//  357   rect.x1=0;
        STRH     R5,[R4, #+0]
//  358   rect.y1=0;
        STRH     R5,[R4, #+4]
//  359   rect.x2=Display_GetWidth(0);
        MOV      R0,#+0
        SWI      +601
        STRH     R0,[R4, #+2]
//  360   rect.y2=SoftSize;
        LDR      R0,[R4, #+24]
        STRH     R0,[R4, #+6]
//  361   soft=DispObject_SoftKeys_Get();
        SWI      +675
        STR      R0,[R4, #+8]
//  362   if (soft)
        CMP      R0,#+0
        BEQ      ??redraw_init_4
//  363   {
//  364     DREDRAW=DispObject_GetOnRedraw(soft);
        SWI      +553
        STR      R0,[R4, #+16]
//  365     DISP_DESC_SetOnRedraw(DispObject_GetDESC(soft), DispDraw);
        LDR      R0,[R4, #+8]
        SWI      +543
        LDR      R1,??redraw_init_5  ;; ??DispDraw
        SWI      +552
//  366     DREFRESH=DispObject_GetonRefresh(soft);
        LDR      R0,[R4, #+8]
        SWI      +557
        STR      R0,[R4, #+12]
//  367     DISP_DESC_SetOnRefresh(DispObject_GetDESC(soft), RefreshTimer);
        LDR      R0,[R4, #+8]
        SWI      +543
        LDR      R1,??redraw_init_5+0x4  ;; ??RefreshTimer
        SWI      +556
//  368     //---------------------------------------------------------
//  369   }
//  370   return 1;
??redraw_init_4:
        MOV      R0,#+1
        POP      {R4,R5,PC}       ;; return
        DATA
??redraw_init_5:
        DC32     ??DispDraw
        DC32     ??RefreshTimer
        CFI EndBlock cfiBlock17
//  371 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable16:
        DC32     rect

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
??DrawHighlightID2??rA:
        LDR      R12,??Subroutine9_0  ;; ??DrawHighlightID2
        BX       R12
        DATA
??Subroutine9_0:
        DC32     ??DrawHighlightID2
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        ARM
??DrawHighlightID??rA:
        LDR      R12,??Subroutine10_0  ;; ??DrawHighlightID
        BX       R12
        DATA
??Subroutine10_0:
        DC32     ??DrawHighlightID
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI NoFunction
        ARM
??getbyname??rA:
        LDR      R12,??Subroutine11_0  ;; ??getbyname
        BX       R12
        DATA
??Subroutine11_0:
        DC32     ??getbyname
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI NoFunction
        ARM
??getitem??rA:
        LDR      R12,??Subroutine12_0  ;; ??getitem
        BX       R12
        DATA
??Subroutine12_0:
        DC32     ??getitem
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
??get_labels??rA:
        LDR      R12,??Subroutine13_0  ;; ??get_labels
        BX       R12
        DATA
??Subroutine13_0:
        DC32     ??get_labels
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine14_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine14_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock23

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for rect>`:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for soft>`:
        DC32 0H
`?<Initializer for DREFRESH>`:
        DC8 0, 0, 0, 0
`?<Initializer for DREDRAW>`:
        DC8 0, 0, 0, 0
`?<Initializer for StatusSize>`:
        DC32 0
`?<Initializer for SoftSize>`:
        DC32 0
`?<Initializer for height>`:
        DC32 0
`?<Initializer for width>`:
        DC32 0
`?<Initializer for uic>`:
        DC32 0
`?<Initializer for DB>`:
        DC32 2020

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for books>`:
        DATA
        DC32 `?<Constant "MM_Browser">`, `?<Constant "ImageViewerBook">`
        DC32 `?<Constant "AudioPlayerBook">`

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "MM_Browser">`:
        DATA
        DC8 "MM_Browser"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ImageViewerBook">`:
        DATA
        DC8 "ImageViewerBook"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "AudioPlayerBook">`:
        DATA
        DC8 "AudioPlayerBook"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x4b\\x65\\x79\\x6c\\x6f\\x63\\x6b">`:
        DATA
        DC8 4BH, 0, 65H, 0, 79H, 0, 6CH, 0
        DC8 6FH, 0, 63H, 0, 6BH, 0, 0, 0
        DC8 44H, 0, 45H, 0, 46H, 0, 41H, 0
        DC8 55H, 0, 4CH, 0, 54H, 0, 0, 0

        END
//  372 
// 
// 2 496 bytes in segment CODE
//    76 bytes in segment DATA_C
//    56 bytes in segment DATA_I
//    56 bytes in segment DATA_ID
//    12 bytes in segment INITTAB
// 
// 2 388 bytes of CODE  memory (+ 120 bytes shared)
//   132 bytes of CONST memory
//    56 bytes of DATA  memory
//
//Errors: none
//Warnings: none
