##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:49:07 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\io #
#                       func.cpp                                             #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\io #
#                       func.cpp -D NDEBUG -D OLDFUNCTIONS -lC               #
#                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\List\ -lA Z:\home\perk11\www\perk11.info\svn\S #
#                       E\AdvSoftkeys\Release\List\ -o                       #
#                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\Obj\ -s9 --cpu_mode arm --endian little --cpu  #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --eec++ --dlib_config                           #
#                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I         #
#                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2    #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\List\iofunc.lst                                #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\Obj\iofunc.r79                                 #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\iofunc.cpp
      1          #include "..\\include\Lib_Clara.h" 
      2          #include "..\\include\Dir.h" 
      3          #define COPYSIZE 500
      4          

   \                                 In segment CODE, align 4, keep-with-next
      5          char *file_read(wchar_t *path, wchar_t *name, int *len)
      6          {
   \                     ??file_read:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0240A0E1           MOV      R4,R2
      7            int file;
      8            FSTAT fst;
      9            if (fstat(path,name,&fst)==0)
   \   00000014   0D20A0E1           MOV      R2,SP
   \   00000018   1C0100EF           SWI      +284
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   1900001A           BNE      ??file_read_1
     10            {
     11              if ((file=_fopen(path,name,FSX_O_RDONLY,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   603FA0E3           MOV      R3,#+384
   \   0000002C   0120A0E3           MOV      R2,#+1
   \   00000030   0610A0E1           MOV      R1,R6
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   160100EF           SWI      +278
   \   0000003C   0050B0E1           MOVS     R5,R0
   \   00000040   04D08DE2           ADD      SP,SP,#+4
   \   00000044   0F00004A           BMI      ??file_read_2
     12              {
     13                char *buf=0;
     14                buf=new char[fst.fsize+1];
   \   00000048   08009DE5           LDR      R0,[SP, #+8]
   \   0000004C   010080E2           ADD      R0,R0,#+1
   \   00000050   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
     15                fread(file,buf,fst.fsize);
   \   00000054   08209DE5           LDR      R2,[SP, #+8]
   \   00000058   0060A0E1           MOV      R6,R0
   \   0000005C   0610A0E1           MOV      R1,R6
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   180100EF           SWI      +280
     16                fclose(file);
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   170100EF           SWI      +279
     17                if (len)
   \   00000070   000054E3           CMP      R4,#+0
     18                {
     19                  len[0]=fst.fsize;
   \   00000074   08009D15           LDRNE    R0,[SP, #+8]
   \   00000078   00008415           STRNE    R0,[R4, #+0]
     20                }
     21                return buf;
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   1CD08DE2           ADD      SP,SP,#+28
   \   00000084   7080BDE8           POP      {R4-R6,PC}
     22              }
     23              fclose(file);
   \                     ??file_read_2:
   \   00000088   170100EF           SWI      +279
     24            }
     25            return 0;
   \                     ??file_read_1:
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   1CD08DE2           ADD      SP,SP,#+28
   \   00000094   7080BDE8           POP      {R4-R6,PC}       ;; return
     26          };
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          void copyfile(wchar_t *path, wchar_t *name, wchar_t *path2, wchar_t *name2)
     29          {
   \                     ??copyfile:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
     30            FSTAT fst;
     31            int file;
     32            if (fstat(path,name,&fst)==0)
   \   00000018   0D20A0E1           MOV      R2,SP
   \   0000001C   1C0100EF           SWI      +284
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   2F00001A           BNE      ??copyfile_1
     33            {
     34              if ((file=_fopen(path,name,FSX_O_RDONLY,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
   \   00000028   01002DE9           PUSH     {R0}
   \   0000002C   603FA0E3           MOV      R3,#+384
   \   00000030   0120A0E3           MOV      R2,#+1
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   160100EF           SWI      +278
   \   00000040   0040B0E1           MOVS     R4,R0
   \   00000044   04D08DE2           ADD      SP,SP,#+4
   \   00000048   2400004A           BMI      ??copyfile_2
     35              {
     36                int sfile;
     37                if ((sfile=_fopen(path2,name2,FSX_O_RDWR|FSX_O_TRUNC,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   603FA0E3           MOV      R3,#+384
   \   00000058   812FA0E3           MOV      R2,#+516
   \   0000005C   0710A0E1           MOV      R1,R7
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   160100EF           SWI      +278
   \   00000068   0050B0E1           MOVS     R5,R0
   \   0000006C   04D08DE2           ADD      SP,SP,#+4
   \   00000070   1800004A           BMI      ??copyfile_3
     38                {
     39                  int size=fst.fsize;
   \   00000074   08609DE5           LDR      R6,[SP, #+8]
     40                  int x=0;
     41                  for (x=0;x<size;x=x+COPYSIZE)
   \   00000078   0070A0E3           MOV      R7,#+0
   \   0000007C   010056E3           CMP      R6,#+1
   \   00000080   120000AA           BGE      ??copyfile_4
   \   00000084   130000EA           B        ??copyfile_3
     42                  {
     43                    int ts=COPYSIZE;
   \                     ??copyfile_5:
   \   00000088   7D8FA0E3           MOV      R8,#+500
     44                    if ((size-x)>=COPYSIZE)
   \   0000008C   070046E0           SUB      R0,R6,R7
   \   00000090   7D0F50E3           CMP      R0,#+500
     45                    {
     46                      ts=COPYSIZE;
     47                    }
     48                    else if ((size-x)<COPYSIZE)
     49                    {
     50                      ts=size-x;
   \   00000094   0080A0B1           MOVLT    R8,R0
     51                    }
     52                    char *buf=new char[ts+1];
   \   00000098   010088E2           ADD      R0,R8,#+1
   \   0000009C   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   000000A0   0090A0E1           MOV      R9,R0
     53                    fread(file, buf, ts);
   \   000000A4   0820A0E1           MOV      R2,R8
   \   000000A8   0910A0E1           MOV      R1,R9
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   180100EF           SWI      +280
     54                    fwrite(sfile, buf, ts);
   \   000000B4   0820A0E1           MOV      R2,R8
   \   000000B8   0910A0E1           MOV      R1,R9
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   190100EF           SWI      +281
     55                    delete(buf);
   \   000000C4   0900A0E1           MOV      R0,R9
   \   000000C8   ........           _BLF     `??operator delete`,`??operator delete??rA`
     56                  }
   \   000000CC   7D7F87E2           ADD      R7,R7,#+500
   \                     ??copyfile_4:
   \   000000D0   060057E1           CMP      R7,R6
   \   000000D4   EBFFFFBA           BLT      ??copyfile_5
     57                }
     58                fclose(sfile);
   \                     ??copyfile_3:
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   170100EF           SWI      +279
     59              }
     60              fclose(file);
   \                     ??copyfile_2:
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   170100EF           SWI      +279
     61            }
     62          };
   \                     ??copyfile_1:
   \   000000E8   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   000000EC   F083BDE8           POP      {R4-R9,PC}       ;; return
     63          
     64          #define CMPSIZE 500

   \                                 In segment CODE, align 4, keep-with-next
     65          int cmpfile(wchar_t *path, wchar_t *name, wchar_t *path2, wchar_t *name2)
     66          {
   \                     ??cmpfile:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0180A0E1           MOV      R8,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
     67            int res=0;
   \   00000018   0050A0E3           MOV      R5,#+0
     68            FSTAT fst;
     69            int file;
     70            if (fstat(path,name,&fst)==0)
   \   0000001C   04208DE2           ADD      R2,SP,#+4
   \   00000020   1C0100EF           SWI      +284
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   4600001A           BNE      ??cmpfile_1
     71            {
     72              FSTAT fst2;
     73              if (fstat(path2,name2,&fst2)==0)
   \   0000002C   20208DE2           ADD      R2,SP,#+32
   \   00000030   0710A0E1           MOV      R1,R7
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   1C0100EF           SWI      +284
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   4000001A           BNE      ??cmpfile_1
     74              {
     75                if (fst.fsize!=fst2.fsize)
   \   00000044   0C009DE5           LDR      R0,[SP, #+12]
   \   00000048   28109DE5           LDR      R1,[SP, #+40]
   \   0000004C   010050E1           CMP      R0,R1
   \   00000050   3C00001A           BNE      ??cmpfile_1
     76                {
     77                  res=0;
     78                }
     79                else
     80                {
     81                  if ((file=_fopen(path,name,FSX_O_RDONLY,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   603FA0E3           MOV      R3,#+384
   \   00000060   0120A0E3           MOV      R2,#+1
   \   00000064   0810A0E1           MOV      R1,R8
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   160100EF           SWI      +278
   \   00000070   0040B0E1           MOVS     R4,R0
   \   00000074   04D08DE2           ADD      SP,SP,#+4
   \   00000078   3000004A           BMI      ??cmpfile_2
     82                  {
     83                    int sfile;
     84                    if ((sfile=_fopen(path2,name2,FSX_O_RDONLY,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   603FA0E3           MOV      R3,#+384
   \   00000088   0120A0E3           MOV      R2,#+1
   \   0000008C   0710A0E1           MOV      R1,R7
   \   00000090   0600A0E1           MOV      R0,R6
   \   00000094   160100EF           SWI      +278
   \   00000098   0080B0E1           MOVS     R8,R0
   \   0000009C   04D08DE2           ADD      SP,SP,#+4
   \   000000A0   2400004A           BMI      ??cmpfile_3
     85                    {
     86                      int size=fst.fsize;
   \   000000A4   0C609DE5           LDR      R6,[SP, #+12]
     87                      int x=0;
     88                      for (x=0;x<size;x=x+CMPSIZE)
   \   000000A8   0070A0E3           MOV      R7,#+0
   \   000000AC   050000EA           B        ??cmpfile_4
     89                      {
     90                        int ts=CMPSIZE;
     91                        if ((size-x)>=CMPSIZE)
     92                        {
     93                          ts=CMPSIZE;
     94                        }
     95                        else if ((size-x)<CMPSIZE)
     96                        {
     97                          ts=size-x;
     98                        }
     99                        char *buf=new char[ts+1];
    100                        fread(file, buf, ts);
    101                        char *buf2=new char[ts+1];
    102                        fread(sfile,buf2,ts);
    103                        if (memcmp(buf,buf2,ts)!=0)
    104                        {
    105                          res=0;
    106                          break;
    107                        }
    108                        else
    109                        {
    110                          res=1;
    111                        }
    112                        delete(buf2);
   \                     ??cmpfile_5:
   \   000000B0   0A00A0E1           MOV      R0,R10
   \   000000B4   ........           _BLF     `??operator delete`,`??operator delete??rA`
    113                        delete(buf);
   \   000000B8   0900A0E1           MOV      R0,R9
   \   000000BC   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   000000C0   0150A0E3           MOV      R5,#+1
   \   000000C4   7D7F87E2           ADD      R7,R7,#+500
   \                     ??cmpfile_4:
   \   000000C8   060057E1           CMP      R7,R6
   \   000000CC   190000AA           BGE      ??cmpfile_3
   \   000000D0   7D5FA0E3           MOV      R5,#+500
   \   000000D4   070046E0           SUB      R0,R6,R7
   \   000000D8   7D0F50E3           CMP      R0,#+500
   \   000000DC   0050A0B1           MOVLT    R5,R0
   \   000000E0   01A085E2           ADD      R10,R5,#+1
   \   000000E4   0A00A0E1           MOV      R0,R10
   \   000000E8   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   000000EC   0090A0E1           MOV      R9,R0
   \   000000F0   0520A0E1           MOV      R2,R5
   \   000000F4   0910A0E1           MOV      R1,R9
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   180100EF           SWI      +280
   \   00000100   0A00A0E1           MOV      R0,R10
   \   00000104   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000108   00A0A0E1           MOV      R10,R0
   \   0000010C   0520A0E1           MOV      R2,R5
   \   00000110   0A10A0E1           MOV      R1,R10
   \   00000114   0800A0E1           MOV      R0,R8
   \   00000118   180100EF           SWI      +280
   \   0000011C   0520A0E1           MOV      R2,R5
   \   00000120   0A10A0E1           MOV      R1,R10
   \   00000124   0900A0E1           MOV      R0,R9
   \   00000128   7D0200EF           SWI      +637
   \   0000012C   000050E3           CMP      R0,#+0
   \   00000130   DEFFFF0A           BEQ      ??cmpfile_5
   \   00000134   0050A0E3           MOV      R5,#+0
    114                      }
    115                    }
    116                    fclose(sfile);
   \                     ??cmpfile_3:
   \   00000138   0800A0E1           MOV      R0,R8
   \   0000013C   170100EF           SWI      +279
    117                  }
    118                  fclose(file);
   \                     ??cmpfile_2:
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   170100EF           SWI      +279
    119                }
    120              }
    121            }
    122            return res;
   \                     ??cmpfile_1:
   \   00000148   0500A0E1           MOV      R0,R5
   \   0000014C   3CD08DE2           ADD      SP,SP,#+60
   \   00000150   F087BDE8           POP      {R4-R10,PC}      ;; return
    123          };

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     cmpfile(wchar_t *, wchar_t *, wchar_t *, wchar_t *)
                                       96
     copyfile(wchar_t *, wchar_t *, wchar_t *, wchar_t *)
                                       60
     file_read(wchar_t *, wchar_t *, int *)
                                       48


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     file_read(wchar_t *, wchar_t *, int *)
                                     152
     copyfile(wchar_t *, wchar_t *, wchar_t *, wchar_t *)
                                     240
     cmpfile(wchar_t *, wchar_t *, wchar_t *, wchar_t *)
                                     340
      Others                          36

 
 768 bytes in segment CODE
 
 732 bytes of CODE memory (+ 36 bytes shared)

Errors: none
Warnings: none
