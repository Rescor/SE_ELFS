//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:49:40 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\x /
//                       ml.cpp                                              /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\x /
//                       ml.cpp -D NDEBUG -D OLDFUNCTIONS -lC                /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\AdvSoftkeys\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\Obj\ -s9 --cpu_mode arm --endian little      /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\xml.s79                                 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME xml

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??abc2ABC??rA
        MULTWEAK ??file_read??rA
        PUBLIC ??get_xml_param
        FUNCTION ??get_xml_param,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??get_xml_param??rT
        MULTWEAK ??h2i??rA
        MULTWEAK ??images_add??rA
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new[]??rA`
        PUBLIC ??skin_execute_xml
        FUNCTION ??skin_execute_xml,0203H
        LOCFRAME CSTACK, 32, STACK
        MULTWEAK ??skin_execute_xml??rT
        PUBLIC ??xml_get_maxlen
        FUNCTION ??xml_get_maxlen,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??xml_get_maxlen??rT
        PUBWEAK ?init?tab?DATA_I
        PUBLIC colors
        PUBLIC params
        PUBLIC params_wstr
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        






??abc2ABC??rA       SYMBOL "??rA", ??abc2ABC
??file_read??rA     SYMBOL "??rA", ??file_read

??get_xml_param??rT SYMBOL "??rT", ??get_xml_param
??h2i??rA           SYMBOL "??rA", ??h2i
??images_add??rA    SYMBOL "??rA", ??images_add
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

??skin_execute_xml??rT SYMBOL "??rT", ??skin_execute_xml

??xml_get_maxlen??rT SYMBOL "??rT", ??xml_get_maxlen

        EXTERN ??abc2ABC
        FUNCTION ??abc2ABC,0202H
        EXTERN ??file_read
        FUNCTION ??file_read,0202H
        EXTERN ??h2i
        FUNCTION ??h2i,0202H
        EXTERN ??images_add
        FUNCTION ??images_add,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H

// Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\xml.cpp
//    1 #include "..\\include\Lib_Clara.h" 
//    2 #include "..\\include\Dir.h" 
//    3 #include "header\string.h"
//    4 #include "header\iofunc.h"
//    5 //------------------------------------------------------------------
//    6 void images_add(wchar_t *path, wchar_t *name, int index);
//    7 //------------------------------------------------------------------
//    8 #define STANDBY_SOFTKEY 0
//    9 #define LEFT_PRESSED 1
//   10 #define MIDDLE_PRESSED 2
//   11 #define RIGHT_PRESSED 3
//   12 #define STANDBY 4
//   13 #define DESKTOP 5
//   14 #define NAVIGATION 6
//   15 #define INT_NUM 6
//   16 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   17 char *params[]={        "Softkey_text_left Color", 
//   18                         "Softkey_text_left_pressed Color", 
//   19                         "Softkey_text_middle Color", 
//   20                         "Softkey_text_middle_pressed Color", 
//   21                         "Softkey_text_right Color", 
//   22                         "Softkey_text_right_pressed Color"};
//   23 
//   24 char *params_wstr[]={   "Standby_softkey_image Source",
//   25                         "Softkey_left_pressed_image Source",
//   26                         "Softkey_middle_pressed_image Source",
//   27                         "Softkey_right_pressed_image Source",
//   28                         "Standby_image Source",
//   29                         "Desktop_image Source",
//   30                         "Background_image Source"};
//   31 
//   32 int colors[INT_NUM];
colors:
        DS8 24
        REQUIRE `?<Initializer for colors>`
params:
        DS8 24
        REQUIRE `?<Initializer for params>`
params_wstr:
        DS8 28
        REQUIRE `?<Initializer for params_wstr>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??xml_get_maxlen??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??xml_get_maxlen
//   33 //------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??xml_get_maxlen
        ARM
//   34 int xml_get_maxlen(char *param)
//   35 {
??xml_get_maxlen:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//   36   int x=0;
//   37   for (x=0;x<strlen(param);x++)
        MOV      R5,#+0
        B        ??xml_get_maxlen_1
??xml_get_maxlen_2:
        ADD      R5,R5,#+1
??xml_get_maxlen_1:
        MOV      R0,R4
        SWI      +346
        CMP      R5,R0
        BGE      ??xml_get_maxlen_3
//   38   {
//   39     if (param[x]==0x22)
        LDRB     R0,[R5, +R4]
        CMP      R0,#+34
        BNE      ??xml_get_maxlen_2
//   40     {
//   41       return x;
        MOV      R0,R5
        POP      {R4,R5,PC}
//   42     }
//   43   }
//   44   return 0;
??xml_get_maxlen_3:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock1
//   45 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??get_xml_param??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??get_xml_param
//   46 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??get_xml_param
        ARM
//   47 char *get_xml_param(char *xml, char *param)
//   48 {
??get_xml_param:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   49   char *fname=strstr(xml, param);
        SWI      +664
        MOVS     R4,R0
//   50   if (fname)
        BEQ      ??get_xml_param_1
//   51   { 
//   52     while ((*fname++)!=0)
??get_xml_param_2:
        LDRB     R0,[R4], #+1
        CMP      R0,#+0
        POPEQ    {R4,R5,PC}
//   53     {
//   54       if (fname[0]==0x22)
        LDRB     R0,[R4, #+0]
        CMP      R0,#+34
        BNE      ??get_xml_param_2
//   55       {
//   56         *fname++;
//   57         char *test=new char[xml_get_maxlen(fname) + 1];
        ADD      R4,R4,#+1
        MOV      R0,R4
        BL       ??xml_get_maxlen
        ADD      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R5,R0
//   58         strncpy(test,fname,xml_get_maxlen(fname));
        MOV      R0,R4
        BL       ??xml_get_maxlen
        MOV      R2,R0
        MOV      R1,R4
        MOV      R0,R5
        SWI      +639
//   59         test[xml_get_maxlen(fname)]='\0';
        MOV      R0,R4
        BL       ??xml_get_maxlen
        MOV      R1,#+0
        STRB     R1,[R0, +R5]
//   60         return test;          
        MOV      R0,R5
        POP      {R4,R5,PC}
//   61       }
//   62     }
//   63   }
//   64   return 0;
??get_xml_param_1:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock3
//   65 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??skin_execute_xml??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??skin_execute_xml
//   66 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??skin_execute_xml
        ARM
//   67 int skin_execute_xml(wchar_t *folder, wchar_t *name)
//   68 {
??skin_execute_xml:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
//   69   memset(colors,0,sizeof(int)*INT_NUM);
        LDR      R5,??skin_execute_xml_1  ;; colors
        SUB      SP,SP,#+4
        CFI CFA R13+32
        MOV      R4,R0
        MOV      R6,R1
        MOV      R2,#+24
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +274
//   70   int len=0;
        MOV      R1,#+0
        STR      R1,[SP, #+0]
//   71   char *buf=file_read(folder, name, &len);
        MOV      R2,SP
        MOV      R1,R6
        MOV      R0,R4
        _BLF     ??file_read,??file_read??rA
        MOV      R6,R0
//   72   int x;
//   73   for (x=0;x<INT_NUM;x++)
        MOV      R7,#+0
        B        ??skin_execute_xml_2
//   74   {
//   75     if (x==2)
??skin_execute_xml_3:
        CMP      R7,#+2
//   76     {
//   77       colors[x]=colors[0];
        LDREQ    R0,[R5, #+0]
        STREQ    R0,[R5, #+8]
        BEQ      ??skin_execute_xml_2
//   78     }
//   79     else if (x==3)
        CMP      R7,#+3
//   80     {
//   81       colors[x]=colors[1];
        LDREQ    R0,[R5, #+4]
        STREQ    R0,[R5, #+12]
//   82     }
//   83     char *val=get_xml_param(buf, params[x]);
??skin_execute_xml_2:
        ADD      R0,R5,R7, LSL #+2
        LDR      R1,[R0, #+24]
        MOV      R0,R6
        BL       ??get_xml_param
        MOVS     R8,R0
//   84     if (val)
        BEQ      ??skin_execute_xml_4
//   85     {
//   86       abc2ABC(val);
        _BLF     ??abc2ABC,??abc2ABC??rA
//   87       int cl=h2i(val);
//   88       cl=cl|0xFF000000;
//   89       colors[x]=cl;
        MOV      R0,R8
        _BLF     ??h2i,??h2i??rA
        ORR      R0,R0,#0xFF000000
        STR      R0,[R5, +R7, LSL #+2]
//   90       delete(val);
        MOV      R0,R8
        _BLF     `??operator delete`,`??operator delete??rA`
//   91     }
//   92   }
??skin_execute_xml_4:
        ADD      R7,R7,#+1
        CMP      R7,#+6
        BLT      ??skin_execute_xml_3
//   93   for (x=0;x<7;x++)
        MOV      R7,#+0
//   94   {
//   95     char *val=get_xml_param(buf, params_wstr[x]);
??skin_execute_xml_5:
        ADD      R0,R5,R7, LSL #+2
        LDR      R1,[R0, #+48]
        MOV      R0,R6
        BL       ??get_xml_param
        MOVS     R8,R0
//   96     if (val)
        BEQ      ??skin_execute_xml_6
//   97     {
//   98       wchar_t *wval=new wchar_t[strlen(val)+1];
        SWI      +346
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R9,R0
//   99       str2wstr(wval,val);
        MOV      R1,R8
        SWI      +344
//  100       images_add(folder, wval, x);
        MOV      R2,R7
        MOV      R1,R9
        MOV      R0,R4
        _BLF     ??images_add,??images_add??rA
//  101       delete(wval);
        MOV      R0,R9
        _BLF     `??operator delete`,`??operator delete??rA`
//  102       delete(val);
        MOV      R0,R8
        _BLF     `??operator delete`,`??operator delete??rA`
//  103     }
//  104   }
??skin_execute_xml_6:
        ADD      R7,R7,#+1
        CMP      R7,#+7
        BLT      ??skin_execute_xml_5
//  105   delete(buf);
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//  106   return 0;
        MOV      R0,#+0
        POP      {R1,R4-R9,PC}    ;; return
        DATA
??skin_execute_xml_1:
        DC32     colors
        CFI EndBlock cfiBlock5
//  107 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine3_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine3_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI NoFunction
        ARM
??file_read??rA:
        LDR      R12,??Subroutine4_0  ;; ??file_read
        BX       R12
        DATA
??Subroutine4_0:
        DC32     ??file_read
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI NoFunction
        ARM
??abc2ABC??rA:
        LDR      R12,??Subroutine5_0  ;; ??abc2ABC
        BX       R12
        DATA
??Subroutine5_0:
        DC32     ??abc2ABC
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI NoFunction
        ARM
??h2i??rA:
        LDR      R12,??Subroutine6_0  ;; ??h2i
        BX       R12
        DATA
??Subroutine6_0:
        DC32     ??h2i
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine7_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine7_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI NoFunction
        ARM
??images_add??rA:
        LDR      R12,??Subroutine8_0  ;; ??images_add
        BX       R12
        DATA
??Subroutine8_0:
        DC32     ??images_add
        CFI EndBlock cfiBlock11

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for colors>`:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for params>`:
        DC32 `?<Constant "Softkey_text_left Color">`
        DC32 `?<Constant "Softkey_text_left_pre...">`
        DC32 `?<Constant "Softkey_text_middle C...">`
        DC32 `?<Constant "Softkey_text_middle_p...">`
        DC32 `?<Constant "Softkey_text_right Color">`
        DC32 `?<Constant "Softkey_text_right_pr...">`
`?<Initializer for params_wstr>`:
        DC32 `?<Constant "Standby_softkey_image...">`
        DC32 `?<Constant "Softkey_left_pressed_...">`
        DC32 `?<Constant "Softkey_middle_presse...">`
        DC32 `?<Constant "Softkey_right_pressed...">`
        DC32 `?<Constant "Standby_image Source">`
        DC32 `?<Constant "Desktop_image Source">`
        DC32 `?<Constant "Background_image Source">`

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Softkey_text_left Color">`:
        DATA
        DC8 "Softkey_text_left Color"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Softkey_text_left_pre...">`:
        DATA
        DC8 "Softkey_text_left_pressed Color"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Softkey_text_middle C...">`:
        DATA
        DC8 "Softkey_text_middle Color"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Softkey_text_middle_p...">`:
        DATA
        DC8 "Softkey_text_middle_pressed Color"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Softkey_text_right Color">`:
        DATA
        DC8 "Softkey_text_right Color"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Softkey_text_right_pr...">`:
        DATA
        DC8 "Softkey_text_right_pressed Color"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Standby_softkey_image...">`:
        DATA
        DC8 "Standby_softkey_image Source"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Softkey_left_pressed_...">`:
        DATA
        DC8 "Softkey_left_pressed_image Source"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Softkey_middle_presse...">`:
        DATA
        DC8 "Softkey_middle_pressed_image Source"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Softkey_right_pressed...">`:
        DATA
        DC8 "Softkey_right_pressed_image Source"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Standby_image Source">`:
        DATA
        DC8 "Standby_image Source"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Desktop_image Source">`:
        DATA
        DC8 "Desktop_image Source"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Background_image Source">`:
        DATA
        DC8 "Background_image Source"

        END
//  108 //------------------------------------------------------------------
// 
// 552 bytes in segment CODE
// 396 bytes in segment DATA_C
//  76 bytes in segment DATA_I
//  76 bytes in segment DATA_ID
//  12 bytes in segment INITTAB
// 
// 468 bytes of CODE  memory (+ 96 bytes shared)
// 472 bytes of CONST memory
//  76 bytes of DATA  memory
//
//Errors: none
//Warnings: none
