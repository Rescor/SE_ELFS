//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:49:34 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\u /
//                       i.cpp                                               /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\u /
//                       i.cpp -D NDEBUG -D OLDFUNCTIONS -lC                 /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\AdvSoftkeys\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\Obj\ -s9 --cpu_mode arm --endian little      /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\ui.s79                                  /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME ui

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
        PUBLIC ??addui
        FUNCTION ??addui,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??addui??rT
        PUBLIC ??auto_select
        FUNCTION ??auto_select,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??auto_select??rT
        MULTWEAK ??getint??rA
        MULTWEAK ??getparam??rA
        MULTWEAK `??operator delete??rA`
        PUBLIC ??set_ui
        FUNCTION ??set_ui,0203H
        LOCFRAME CSTACK, 148, STACK
        MULTWEAK ??set_ui??rT
        PUBWEAK ?init?tab?DATA_I
        PUBLIC sk
        PUBLIC sk176
        PUBLIC sk240
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        




??addui??rT         SYMBOL "??rT", ??addui

??auto_select??rT   SYMBOL "??rT", ??auto_select
??getint??rA        SYMBOL "??rA", ??getint
??getparam??rA      SYMBOL "??rA", ??getparam
`??operator delete??rA` SYMBOL "??rA", `??operator delete`

??set_ui??rT        SYMBOL "??rT", ??set_ui

        EXTERN ??getint
        FUNCTION ??getint,0202H
        EXTERN ??getparam
        FUNCTION ??getparam,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H

// Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\ui.cpp
//    1 #include "..\\include\Lib_Clara.h" 
//    2 #include "..\\include\Dir.h"
//    3 #include "header\string.h"
//    4 
//    5 typedef struct
//    6 {
//    7   int x;
//    8   int y;
//    9   int ct;
//   10   int font;
//   11   int hx;
//   12   int hy;
//   13   int hct;
//   14   int hfont;
//   15 }UI_SOFTKEY;
//   16 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   17 UI_SOFTKEY sk[3]={ {0,296,0,0x18,320,220,1,0x12} , {0,293,2,0x2C,320,115,1,0x2C} , {240,296,1,0x18,320,0,1,0x12} };
sk:
        DS8 96
        REQUIRE `?<Initializer for sk>`
//   18 int sk240[24]=   {  0,296,0,0x18,320,220,1,0x12  ,  0,293,2,0x2C,320,115,1,0x2C  ,  240,296,1,0x18,320,0,1,0x12 };
sk240:
        DS8 96
        REQUIRE `?<Initializer for sk240>`
//   19 int sk176[24]=   {  0,198,0,0x18,220,156,1,0x12  ,  0,193,2,0x2C,220,80 ,1,0x2C  ,  176,198,1,0x18,220,0,1,0x12 };
sk176:
        DS8 96
        REQUIRE `?<Initializer for sk176>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??auto_select??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??auto_select
//   20 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??auto_select
        ARM
//   21 void auto_select()
//   22 {
??auto_select:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   23   int a=Display_GetHeight(0);
//   24   switch (a)
        LDR      R4,??DataTable1  ;; sk
        MOV      R0,#+0
        SWI      +600
        CMP      R0,#+320
        MOV      R2,#+96
//   25   {
//   26   case 320:
//   27     memcpy(&sk[0], &sk240[0], 96);
        ADDEQ    R1,R4,#+96
//   28     break;
//   29   case 220:
//   30     memcpy(&sk[0], &sk176[0], 96);
        ADDNE    R1,R4,#+192
        MOV      R0,R4
        SWI      +275
//   31     break;
//   32   default:
//   33     memcpy(&sk[0], &sk176[0], 96);
//   34     break;
//   35   }
//   36 };
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??addui??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??addui
//   37 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??addui
        ARM
//   38 void addui(char *line,int elem)
//   39 {
??addui:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
//   40   int x=0;
//   41   //--------------------
//   42   sk[elem].x=getint(line, &x,':');
        LDR      R6,??DataTable1  ;; sk
        SUB      SP,SP,#+4
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
        MOV      R1,#+0
        STR      R1,[SP, #+0]
        MOV      R2,#+58
        MOV      R1,SP
        _BLF     ??getint,??getint??rA
        STR      R0,[R6, +R5, LSL #+5]
//   43   sk[elem].y=getint(line, &x,':');
        ADD      R5,R6,R5, LSL #+5
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getint,??getint??rA
        STR      R0,[R5, #+4]
//   44   sk[elem].ct=getint(line, &x,':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getint,??getint??rA
        STR      R0,[R5, #+8]
//   45   sk[elem].font=getint(line, &x,':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getint,??getint??rA
        STR      R0,[R5, #+12]
//   46   sk[elem].hx=getint(line, &x,':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getint,??getint??rA
        STR      R0,[R5, #+16]
//   47   sk[elem].hy=getint(line, &x,':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getint,??getint??rA
        STR      R0,[R5, #+20]
//   48   sk[elem].hct=getint(line, &x,':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getint,??getint??rA
        STR      R0,[R5, #+24]
//   49   sk[elem].hfont=getint(line, &x,';');
        MOV      R2,#+59
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getint,??getint??rA
        STR      R0,[R5, #+28]
//   50   //--------------------
//   51 };
        POP      {R0,R4-R6,PC}    ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     sk

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??set_ui??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??set_ui
//   52 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??set_ui
        ARM
//   53 int set_ui(char *buf, int fsize)
//   54 {
??set_ui:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+128
        CFI CFA R13+148
        MOV      R4,R0
        MOV      R5,R1
//   55   auto_select();
        BL       ??auto_select
//   56   int x;
//   57   for (x=0;x<3;x++)
        MOV      R6,#+0
//   58   {
//   59     char pattern[128];
//   60     sprintf(pattern,"%dsk)",x);
??set_ui_1:
        LDR      R1,??set_ui_2    ;; `?<Constant "%dsk)">`
        MOV      R2,R6
        MOV      R0,SP
        SWI      +276
//   61     char *param;
//   62     if (param=getparam(buf,pattern,';', fsize))
        MOV      R3,R5
        MOV      R2,#+59
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getparam,??getparam??rA
        MOVS     R7,R0
        BEQ      ??set_ui_3
//   63     {
//   64       addui(param,x);
        MOV      R1,R6
        BL       ??addui
//   65       delete(param);
        MOV      R0,R7
        _BLF     `??operator delete`,`??operator delete??rA`
//   66     }
//   67     else
//   68     {
//   69       break;
//   70     }
//   71   }
        ADD      R6,R6,#+1
        CMP      R6,#+3
        BLT      ??set_ui_1
//   72   return 1;
??set_ui_3:
        MOV      R0,#+1
        ADD      SP,SP,#+128
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??set_ui_2:
        DC32     `?<Constant "%dsk)">`
        CFI EndBlock cfiBlock5
//   73 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        ARM
??getint??rA:
        LDR      R12,??Subroutine3_0  ;; ??getint
        BX       R12
        DATA
??Subroutine3_0:
        DC32     ??getint
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI NoFunction
        ARM
??getparam??rA:
        LDR      R12,??Subroutine4_0  ;; ??getparam
        BX       R12
        DATA
??Subroutine4_0:
        DC32     ??getparam
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine5_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine5_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock8

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for sk>`:
        DATA
        DC32 0, 296, 0, 24, 320, 220, 1, 18, 0, 293, 2, 44, 320, 115, 1, 44
        DC32 240, 296, 1, 24, 320, 0, 1, 18
`?<Initializer for sk240>`:
        DC32 0, 296, 0, 24, 320, 220, 1, 18, 0, 293, 2, 44, 320, 115, 1, 44
        DC32 240, 296, 1, 24, 320, 0, 1, 18
`?<Initializer for sk176>`:
        DC32 0, 198, 0, 24, 220, 156, 1, 18, 0, 193, 2, 44, 220, 80, 1, 44, 176
        DC32 198, 1, 24, 220, 0, 1, 18

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "%dsk)">`:
        DATA
        DC8 "%dsk)"
        DC8 0, 0

        END
// 
// 400 bytes in segment CODE
//   8 bytes in segment DATA_C
// 288 bytes in segment DATA_I
// 288 bytes in segment DATA_ID
//  12 bytes in segment INITTAB
// 
// 352 bytes of CODE  memory (+ 60 bytes shared)
// 296 bytes of CONST memory
// 288 bytes of DATA  memory
//
//Errors: none
//Warnings: none
