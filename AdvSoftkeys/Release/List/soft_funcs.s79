//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:49:27 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\s /
//                       oft_funcs.cpp                                       /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\s /
//                       oft_funcs.cpp -D NDEBUG -D OLDFUNCTIONS -lC         /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\AdvSoftkeys\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\Obj\ -s9 --cpu_mode arm --endian little      /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\soft_funcs.s79                          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME soft_funcs

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??checkelement
        FUNCTION ??checkelement,0203H
        MULTWEAK ??checkelement??rT
        PUBLIC ??getcount
        FUNCTION ??getcount,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??getcount??rT
        PUBLIC ??getelemindex
        FUNCTION ??getelemindex,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??getelemindex??rT
        PUBLIC ??isInIronPatch
        FUNCTION ??isInIronPatch,0203H
        MULTWEAK ??isInIronPatch??rT
        PUBLIC ??isbetween
        FUNCTION ??isbetween,0203H
        MULTWEAK ??isbetween??rT
        PUBLIC ??isvisible
        FUNCTION ??isvisible,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??isvisible??rT
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        

??checkelement??rT  SYMBOL "??rT", ??checkelement

??getcount??rT      SYMBOL "??rT", ??getcount

??getelemindex??rT  SYMBOL "??rT", ??getelemindex

??isInIronPatch??rT SYMBOL "??rT", ??isInIronPatch

??isbetween??rT     SYMBOL "??rT", ??isbetween

??isvisible??rT     SYMBOL "??rT", ??isvisible

        EXTERN ACTION_BACK
        EXTERN ACTION_INFO
        EXTERN ACTION_LONG_BACK


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??isbetween??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??isbetween
// Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\soft_funcs.cpp
//    1 #include "..\\include\Lib_Clara.h" 
//    2 #include "..\\include\Dir.h"
//    3 #include "header\structs.h"
//    4 #include "header\presets.h"
//    5 
//    6 //------------------------------------------------------------------
//    7 //определяем, находится ли число между двумя другими числами:

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??isbetween
        ARM
//    8 bool isbetween(int num, int min, int max)
//    9 {
//   10   if (num >= min && num <=max)
??isbetween:
        CMP      R0,R1
        CMPGE    R2,R0
//   11   {
//   12     return true;
        MOVGE    R0,#+1
        BXGE     LR
//   13   }
//   14   return false;
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//   15 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??isInIronPatch??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??isInIronPatch
//   16 //------------------------------------------------------------------
//   17 //случайно не патч ли от IronMaster'а?

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??isInIronPatch
        ARM
//   18 bool isInIronPatch(int act)
//   19 {
//   20   return isbetween(act, 0xFFC, 0xFFF);
??isInIronPatch:
        MOV      R1,#+252
        ORR      R1,R1,#0xF00
        CMP      R0,R1
        BLT      ??isInIronPatch_1
        CMP      R0,#+4096
        MOVLT    R0,#+1
        BXLT     LR
??isInIronPatch_1:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock3
//   21 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??getelemindex??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??getelemindex
//   22 //------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??getelemindex
        ARM
//   23 int getelemindex(LIST *lst, int act)
//   24 {
??getelemindex:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
//   25   int x;
//   26   for (x=0;x<lst->FirstFree;x++)
        MOV      R6,#+0
        B        ??getelemindex_1
??getelemindex_2:
        ADD      R6,R6,#+1
??getelemindex_1:
        LDRH     R0,[R4, #+2]
        CMP      R6,R0
        BGE      ??getelemindex_3
//   27   {
//   28     SOFTKEY *sk=(SOFTKEY*)List_Get(lst,x);
        MOV      R1,R6
        MOV      R0,R4
        SWI      +429
//   29     if (sk->action==act)
        LDRH     R0,[R0, #+0]
        CMP      R0,R5
        BNE      ??getelemindex_2
//   30     {
//   31       return x;
        MOV      R0,R6
        POP      {R4-R6,PC}
//   32     }
//   33   }
//   34   return -1;
??getelemindex_3:
        MVN      R0,#+0
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock5
//   35 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??checkelement??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??checkelement
//   36 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??checkelement
        ARM
//   37 int checkelement(SOFTKEY *sk, int check)
//   38 {
//   39   if (sk->action==ACTION_INFO)
??checkelement:
        LDRH     R2,[R0, #+0]
        LDR      R3,??checkelement_1  ;; ACTION_INFO
        LDR      R3,[R3, #+0]
        CMP      R2,R3
        BEQ      ??checkelement_2
//   40   {
//   41     return 1;
//   42   }
//   43   else
//   44   {
//   45     if (sk->book)return 1;
        LDR      R0,[R0, #+4]
        CMP      R0,#+0
        BEQ      ??checkelement_3
??checkelement_2:
        MOV      R0,#+1
        BX       LR
//   46     if (check)return 1;
??checkelement_3:
        CMP      R1,#+0
        MOVNE    R0,#+1
//   47     return 0;
        BX       LR               ;; return
        DATA
??checkelement_1:
        DC32     ACTION_INFO
        CFI EndBlock cfiBlock7
//   48   }
//   49 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??isvisible??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??isvisible
//   50 //------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??isvisible
        ARM
//   51 int isvisible(LIST *lst, int index)
//   52 {
??isvisible:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   53   SOFTKEY *sk=(SOFTKEY*)List_Get(lst,index);
        SWI      +429
//   54   if (sk->parent_action==0xFFFF)
        LDRH     R1,[R0, #+32]
        MOV      R0,#+255
        ORR      R0,R0,#0xFF00
        CMP      R1,R0
        BNE      ??isvisible_1
//   55   {
//   56     return 1;
??isvisible_2:
        MOV      R0,#+1
        POP      {R4,PC}
//   57   }
//   58   else
//   59   {
//   60     int index=getelemindex(lst,sk->parent_action);
??isvisible_1:
        MOV      R0,R4
        BL       ??getelemindex
        MOV      R1,R0
//   61     if (index!=-1)
        CMN      R1,#+1
        BEQ      ??isvisible_3
//   62     {
//   63       SOFTKEY *sk2=(SOFTKEY*)List_Get(lst,index);
        MOV      R0,R4
        SWI      +429
//   64       if (sk2->visible && sk2->text!=EMPTY_TEXTID)
        LDRB     R1,[R0, #+57]
        CMP      R1,#+0
        BEQ      ??isvisible_3
        LDR      R0,[R0, #+16]
        MVN      R1,#-1879048192
        CMP      R0,R1
        BNE      ??isvisible_2
//   65       {
//   66         return 1;
//   67       }
//   68     }
//   69   }
//   70   return 0;
??isvisible_3:
        MOV      R0,#+0
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock9
//   71 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??getcount??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??getcount
//   72 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??getcount
        ARM
//   73 int getcount(LIST *lst, int check)
//   74 {
??getcount:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R5,R0
//   75   int res=0;
//   76   int x;
//   77   for (x=0;x<lst->FirstFree;x++)
        LDRH     R0,[R5, #+2]
        MOV      R6,R1
        MOV      R4,#+0
        MOV      R7,#+0
        CMP      R0,#+0
        BNE      ??getcount_1
        MOV      R0,R4
        POP      {R4-R8,PC}
//   78   {
//   79     SOFTKEY *sk=(SOFTKEY*)List_Get(lst,x);
??getcount_2:
        MOV      R1,R7
        MOV      R0,R5
        SWI      +429
        MOV      R8,R0
//   80     if (sk->visible && sk->action!=ACTION_BACK && sk->action!=ACTION_LONG_BACK && isvisible(lst,x) && isInIronPatch(sk->action)!=true && sk->text!=EMPTY_TEXTID && sk->parent_action==0xFFFF && checkelement(sk, check))
        LDRB     R0,[R8, #+57]
        CMP      R0,#+0
        BEQ      ??getcount_3
        LDRH     R0,[R8, #+0]
        LDR      R1,??getcount_4  ;; ACTION_BACK
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        BEQ      ??getcount_3
        LDR      R1,??getcount_4+0x4  ;; ACTION_LONG_BACK
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        BEQ      ??getcount_3
        MOV      R1,R7
        MOV      R0,R5
        BL       ??isvisible
        CMP      R0,#+0
        BEQ      ??getcount_3
        LDRH     R0,[R8, #+0]
        MOV      R1,#+252
        ORR      R1,R1,#0xF00
        CMP      R0,R1
        BLT      ??getcount_5
        CMP      R0,#+4096
        BLT      ??getcount_3
??getcount_5:
        LDR      R0,[R8, #+16]
        MVN      R1,#-1879048192
        CMP      R0,R1
        BEQ      ??getcount_3
        LDRH     R0,[R8, #+32]
        MOV      R1,#+255
        ORR      R1,R1,#0xFF00
        CMP      R0,R1
        BNE      ??getcount_3
        MOV      R1,R6
        MOV      R0,R8
        BL       ??checkelement
        CMP      R0,#+0
//   81     {
//   82       res++;
        ADDNE    R4,R4,#+1
//   83     }
//   84   }
??getcount_3:
        ADD      R7,R7,#+1
??getcount_1:
        LDRH     R0,[R5, #+2]
        CMP      R7,R0
        BLT      ??getcount_2
//   85   return res;
        MOV      R0,R4
        POP      {R4-R8,PC}       ;; return
        DATA
??getcount_4:
        DC32     ACTION_BACK
        DC32     ACTION_LONG_BACK
        CFI EndBlock cfiBlock11
//   86 };

        END
//   87 //------------------------------------------------------------------
// 
// 560 bytes in segment CODE
// 
// 536 bytes of CODE memory (+ 24 bytes shared)
//
//Errors: none
//Warnings: none
