//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:49:19 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\p /
//                       resets.cpp                                          /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\p /
//                       resets.cpp -D NDEBUG -D OLDFUNCTIONS -lC            /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\AdvSoftkeys\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\Obj\ -s9 --cpu_mode arm --endian little      /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\presets.s79                             /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME presets

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable11 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??get_action??rA
        MULTWEAK ??get_enable??rA
        PUBLIC ??lookslike_DDMenu
        FUNCTION ??lookslike_DDMenu,0603H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??lookslike_DDMenu??rT
        PUBLIC ??lookslike_OK
        FUNCTION ??lookslike_OK,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??lookslike_OK??rT
        PUBLIC ??lookslike_YesNo
        FUNCTION ??lookslike_YesNo,0603H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??lookslike_YesNo??rT
        PUBLIC ??preset_DDMenu
        FUNCTION ??preset_DDMenu,0603H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??preset_DDMenu??rT
        PUBLIC ??preset_OK
        FUNCTION ??preset_OK,0603H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??preset_OK??rT
        PUBLIC ??preset_YesNo
        FUNCTION ??preset_YesNo,0603H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??preset_YesNo??rT
        PUBLIC ??preset_default
        FUNCTION ??preset_default,0203H
        LOCFRAME CSTACK, 36, STACK
        MULTWEAK ??preset_default??rT
        PUBLIC ??preset_standby
        FUNCTION ??preset_standby,0203H
        LOCFRAME CSTACK, 56, STACK
        MULTWEAK ??preset_standby??rT
        PUBWEAK ?init?tab?DATA_I
        PUBLIC presets
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        


??get_action??rA    SYMBOL "??rA", ??get_action
??get_enable??rA    SYMBOL "??rA", ??get_enable

??lookslike_DDMenu??rT SYMBOL "??rT", ??lookslike_DDMenu

??lookslike_OK??rT  SYMBOL "??rT", ??lookslike_OK

??lookslike_YesNo??rT SYMBOL "??rT", ??lookslike_YesNo

??preset_DDMenu??rT SYMBOL "??rT", ??preset_DDMenu

??preset_OK??rT     SYMBOL "??rT", ??preset_OK

??preset_YesNo??rT  SYMBOL "??rT", ??preset_YesNo

??preset_default??rT SYMBOL "??rT", ??preset_default

??preset_standby??rT SYMBOL "??rT", ??preset_standby

        EXTERN ??get_action
        FUNCTION ??get_action,0202H
        EXTERN ??get_enable
        FUNCTION ??get_enable,0202H
        EXTERN ACTION_ACCEPT
        EXTERN ACTION_BACK
        EXTERN ACTION_CANCEL
        EXTERN ACTION_DONE
        EXTERN ACTION_INFO
        EXTERN ACTION_NO
        EXTERN ACTION_OK
        EXTERN ACTION_SELECT
        EXTERN ACTION_SELECT1
        EXTERN ACTION_YES
        EXTERN lastitem


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??lookslike_DDMenu??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??lookslike_DDMenu
// Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\presets.cpp
//    1 #include "..\\include\Lib_Clara.h" 
//    2 #include "..\\include\Dir.h"
//    3 #include "header\structs.h"
//    4 #include "header\presets.h"
//    5 wchar_t get_action(LIST *lst, int strid);
//    6 bool get_enable(LIST *lst, int strid);
//    7 #define T_DEFAULT 1
//    8 #define T_YESNO 2
//    9 #define T_MESSAGEBOX 3
//   10 #define T_DDMENU 4
//   11 //------------------------------------------------------------------
//   12 //пресет для выпадающего меню:

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??lookslike_DDMenu
        ARM
//   13 bool lookslike_DDMenu(LIST *lst, int cnt, int left, int right)
//   14 {
??lookslike_DDMenu:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R5,R0
//   15   if (cnt==1)
        LDR      R0,??lookslike_DDMenu_1  ;; ACTION_INFO
        MOV      R6,R3
        LDR      R4,[R0, #+0]
        CMP      R1,#+1
        BNE      ??lookslike_DDMenu_2
//   16   {
//   17     wchar_t act=get_action(lst, left);
        MOV      R1,R2
        MOV      R0,R5
        _BLF     ??get_action,??get_action??rA
//   18     if (act==ACTION_SELECT || act==ACTION_INFO)
        LDR      R1,??lookslike_DDMenu_1+0x4  ;; ACTION_SELECT
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        CMPNE    R0,R4
        BNE      ??lookslike_DDMenu_3
//   19     {
//   20       return true;
??lookslike_DDMenu_4:
        MOV      R0,#+1
        POP      {R4-R7,PC}
//   21     }
//   22   }
//   23   else if (cnt==2)
??lookslike_DDMenu_2:
        CMP      R1,#+2
        BNE      ??lookslike_DDMenu_3
//   24   {
//   25     wchar_t act=get_action(lst, left);
        MOV      R1,R2
        MOV      R0,R5
        _BLF     ??get_action,??get_action??rA
        MOV      R7,R0
//   26     wchar_t act2=get_action(lst, right);
        MOV      R1,R6
        MOV      R0,R5
        _BLF     ??get_action,??get_action??rA
//   27     if (act==ACTION_SELECT1 && act2==ACTION_INFO)
        LDR      R1,??lookslike_DDMenu_1+0x8  ;; ACTION_SELECT1
        LDR      R1,[R1, #+0]
        CMP      R7,R1
        CMPEQ    R0,R4
        BEQ      ??lookslike_DDMenu_4
//   28     {
//   29       return true;
//   30     }
//   31   }
//   32   return false;
??lookslike_DDMenu_3:
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
        DATA
??lookslike_DDMenu_1:
        DC32     ACTION_INFO
        DC32     ACTION_SELECT
        DC32     ACTION_SELECT1
        CFI EndBlock cfiBlock1
//   33 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??preset_DDMenu??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??preset_DDMenu

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??preset_DDMenu
        ARM
//   34 void preset_DDMenu(LABELS *lbl, BOOK *bk, DISP_OBJ *DO, LIST *lst, int cnt, MyBOOK *our, int left, int right)
//   35 {
??preset_DDMenu:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R1,[SP, #+24]
        LDR      R6,[SP, #+28]
        MOV      R4,R0
        MOV      R5,R3
//   36   lbl->strids[1]=left;
        STR      R1,[R4, #+4]
//   37   lbl->enable[1]=get_enable(lst, left);
        MOV      R0,R5
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+13]
//   38   //lbl->enable[1]=true;
//   39   lbl->strids[0]=right;
        STR      R6,[R4, #+0]
//   40   lbl->enable[0]=get_enable(lst, right);
        MOV      R1,R6
        MOV      R0,R5
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+12]
//   41 };
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??lookslike_YesNo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??lookslike_YesNo
//   42 //------------------------------------------------------------------
//   43 //пресет для Да/Нет окна:

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??lookslike_YesNo
        ARM
//   44 bool lookslike_YesNo(LIST *lst, int cnt, int left, int right)
//   45 {
??lookslike_YesNo:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//   46   if (cnt==2)
        CMP      R1,#+2
        MOV      R6,R0
        LDR      R0,??DataTable13  ;; ACTION_NO
        MOV      R7,R3
        LDR      R4,[R0, #+0]
        BNE      ??lookslike_YesNo_1
//   47   {
//   48     wchar_t act = get_action(lst, left);
        MOV      R1,R2
        MOV      R0,R6
        _BLF     ??get_action,??get_action??rA
        MOV      R5,R0
//   49     wchar_t act2 = get_action(lst,right);
        MOV      R1,R7
        MOV      R0,R6
        _BLF     ??get_action,??get_action??rA
//   50     if (((act==ACTION_YES || act==ACTION_ACCEPT) && (act2==ACTION_NO || act2==ACTION_CANCEL))||((act2==ACTION_YES || act2==ACTION_ACCEPT) && (act==ACTION_NO || act==ACTION_CANCEL)))
        LDR      R1,??DataTable7  ;; ACTION_ACCEPT
        LDR      R2,??DataTable6  ;; ACTION_YES
        LDR      R1,[R1, #+0]
        LDR      R2,[R2, #+0]
        LDR      R3,??DataTable12  ;; ACTION_CANCEL
        CMP      R5,R2
        LDR      R3,[R3, #+0]
        CMPNE    R5,R1
        BNE      ??lookslike_YesNo_2
        CMP      R0,R4
        CMPNE    R0,R3
        BEQ      ??lookslike_YesNo_3
??lookslike_YesNo_2:
        CMP      R0,R2
        CMPNE    R0,R1
        BNE      ??lookslike_YesNo_4
        CMP      R5,R4
        CMPNE    R5,R3
        BNE      ??lookslike_YesNo_4
//   51     {
//   52       return true;
??lookslike_YesNo_3:
        MOV      R0,#+1
        POP      {R4-R7,PC}
//   53     }
//   54   }
//   55   else if (cnt==1)
??lookslike_YesNo_1:
        CMP      R1,#+1
        BNE      ??lookslike_YesNo_4
//   56   {
//   57     wchar_t act = get_action(lst, left);
        MOV      R1,R2
        MOV      R0,R6
        _BLF     ??get_action,??get_action??rA
//   58     if (act==ACTION_CANCEL || act==ACTION_NO)
        LDR      R1,??DataTable12  ;; ACTION_CANCEL
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        CMPNE    R0,R4
        BEQ      ??lookslike_YesNo_3
//   59     {
//   60       return true;
//   61     }
//   62   }
//   63   return false;
??lookslike_YesNo_4:
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock5
//   64 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??preset_YesNo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??preset_YesNo
//   65 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??preset_YesNo
        ARM
//   66 void preset_YesNo(LABELS *lbl, BOOK *bk, DISP_OBJ *DO, LIST *lst, int cnt, MyBOOK *our, int left, int right)
//   67 {
??preset_YesNo:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        LDR      R6,[SP, #+32]
        LDR      R7,[SP, #+36]
        MOV      R4,R0
        MOV      R0,R1
//   68   if (strcmp(bk->xbook->name,"ScreensaverBook")!=0)
        LDR      R0,[R0, #+0]
        LDR      R1,??DataTable8  ;; `?<Constant "ScreensaverBook">`
        LDR      R0,[R0, #+4]
        MOV      R5,R3
        SWI      +345
        CMP      R0,#+0
        BEQ      ??preset_YesNo_1
//   69   {
//   70     wchar_t act = get_action(lst, left);
        MOV      R1,R6
        MOV      R0,R5
        _BLF     ??get_action,??get_action??rA
        MOV      R8,R0
//   71     wchar_t act2 = get_action(lst,right);
        MOV      R1,R7
        MOV      R0,R5
        _BLF     ??get_action,??get_action??rA
//   72     int ct=0;
        MOV      R1,#+0
//   73     if (left!=EMPTY_TEXTID)ct++;
        MVN      R2,#-1879048192
        CMP      R6,R2
        MOVNE    R1,#+1
//   74     if (right!=EMPTY_TEXTID)ct++;
        CMP      R7,R2
        BEQ      ??preset_YesNo_2
        ADD      R1,R1,#+1
//   75     if (ct==2)
        CMP      R1,#+2
        BNE      ??preset_YesNo_2
//   76     {
//   77       if (act==ACTION_YES || act==ACTION_ACCEPT)
        LDR      R1,??DataTable6  ;; ACTION_YES
        LDR      R1,[R1, #+0]
        CMP      R8,R1
        BEQ      ??preset_YesNo_3
        LDR      R2,??DataTable7  ;; ACTION_ACCEPT
        LDR      R2,[R2, #+0]
        CMP      R8,R2
        BNE      ??preset_YesNo_4
//   78       {
//   79         lbl->strids[1]=left;
??preset_YesNo_3:
        STR      R6,[R4, #+4]
//   80         lbl->enable[1]=get_enable(lst, left);
        MOV      R1,R6
        MOV      R0,R5
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+13]
//   81         lbl->strids[2]=right;
        STR      R7,[R4, #+8]
//   82         lbl->enable[2]=get_enable(lst, right);
        MOV      R1,R7
        B        ??preset_YesNo_5
//   83       }
//   84       else if (act2==ACTION_YES || act2==ACTION_ACCEPT)
??preset_YesNo_4:
        CMP      R0,R1
        CMPNE    R0,R2
        POPNE    {R4-R8,PC}
//   85       {
//   86         lbl->strids[1]=right;
        STR      R7,[R4, #+4]
//   87         lbl->enable[1]=get_enable(lst, right);
        MOV      R1,R7
        MOV      R0,R5
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+13]
//   88         lbl->strids[2]=left;
        B        ??preset_YesNo_6
//   89         lbl->enable[2]=get_enable(lst, left);
//   90       }
//   91     }
//   92     else if (ct==1)
??preset_YesNo_2:
        CMP      R1,#+1
        POPNE    {R4-R8,PC}
//   93     {
//   94       lbl->strids[2]=left;
??preset_YesNo_6:
        STR      R6,[R4, #+8]
//   95       lbl->enable[2]=get_enable(lst, left);
        MOV      R1,R6
??preset_YesNo_7:
        B        ??preset_YesNo_5
//   96     }
//   97   }
//   98   else
//   99   {
//  100     lbl->strids[0]=left;
??preset_YesNo_1:
        STR      R6,[R4, #+0]
//  101     lbl->enable[0]=get_enable(lst,left);
        MOV      R1,R6
        MOV      R0,R5
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+12]
//  102     lbl->strids[2]=right;
        STR      R7,[R4, #+8]
//  103     lbl->enable[2]=get_enable(lst,right);
        MOV      R1,R7
??preset_YesNo_5:
        MOV      R0,R5
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+14]
//  104   }
//  105 };
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     ACTION_YES

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     ACTION_ACCEPT

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??lookslike_OK??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??lookslike_OK
//  106 //------------------------------------------------------------------
//  107 //пресет для МессагБокса:

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??lookslike_OK
        ARM
//  108 bool lookslike_OK(LIST *lst, int cnt, int left, int right)
//  109 {
??lookslike_OK:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  110   if (cnt==1 && right==EMPTY_TEXTID)
        CMP      R1,#+1
        MVNEQ    R1,#-1879048192
        CMPEQ    R3,R1
        BNE      ??lookslike_OK_1
//  111   {
//  112     wchar_t act=get_action(lst, left);
        MOV      R1,R2
        _BLF     ??get_action,??get_action??rA
//  113     if (act==ACTION_OK)
        LDR      R1,??lookslike_OK_2  ;; ACTION_OK
        LDR      R1,[R1, #+0]
        CMP      R0,R1
//  114     {
//  115       return true;
        MOVEQ    R0,#+1
        POPEQ    {PC}
//  116     }
//  117   }
//  118   return false;
??lookslike_OK_1:
        MOV      R0,#+0
        POP      {PC}             ;; return
        DATA
??lookslike_OK_2:
        DC32     ACTION_OK
        CFI EndBlock cfiBlock9
//  119 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??preset_OK??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??preset_OK

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??preset_OK
        ARM
//  120 void preset_OK(LABELS *lbl, BOOK *bk, DISP_OBJ *DO, LIST *lst, int cnt, MyBOOK *our, int left, int right)
//  121 {
??preset_OK:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R6,[SP, #+24]
        MOV      R4,R0
        MOV      R0,R1
//  122   if (strcmp(bk->xbook->name,"ScreensaverBook")!=0)
        LDR      R0,[R0, #+0]
        LDR      R1,??DataTable8  ;; `?<Constant "ScreensaverBook">`
        LDR      R0,[R0, #+4]
        MOV      R5,R3
        SWI      +345
        CMP      R0,#+0
        BEQ      ??preset_OK_1
//  123   {
//  124     lbl->strids[1]=left;
        STR      R6,[R4, #+4]
//  125     lbl->enable[1]=get_enable(lst,left);
        MOV      R1,R6
        MOV      R0,R5
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+13]
//  126     lbl->enable[2]=false;
        MOV      R0,#+0
        STRB     R0,[R4, #+14]
//  127     lbl->strids[2]=EMPTY_TEXTID;
        MVN      R0,#-1879048192
        STR      R0,[R4, #+8]
        POP      {R4-R6,PC}
//  128   }
//  129   else
//  130   {
//  131     lbl->strids[0]=left;
??preset_OK_1:
        STR      R6,[R4, #+0]
//  132     lbl->enable[0]=get_enable(lst,left);
        MOV      R1,R6
        MOV      R0,R5
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+12]
//  133   }
//  134 };
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     `?<Constant "ScreensaverBook">`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??preset_default??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??preset_default
//  135 //------------------------------------------------------------------
//  136 //Стандартный пресет:

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??preset_default
        ARM
//  137 void preset_default(LABELS *lbl, BOOK *bk, DISP_OBJ *DO, LIST *lst, int cnt, MyBOOK *our, int left, int right)
//  138 {
??preset_default:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        LDR      R6,[SP, #+44]
        LDR      R7,[SP, #+48]
        MOV      R4,R0
//  139   if (lastitem)lastitem->type=T_DEFAULT;
        LDR      R0,??DataTable14  ;; lastitem
        MOV      R5,R3
        LDR      R0,[R0, #+0]
//  140   if (cnt==1 && right!=EMPTY_TEXTID)cnt++;
//  141   wchar_t act1=get_action(lst, left);
//  142   wchar_t act2=get_action(lst, right);
//  143   lbl->strids[1]=left;
//  144   lbl->enable[1]=get_enable(lst, left);
//  145   lbl->strids[0]=right;
//  146   lbl->enable[0]=get_enable(lst,right);
//  147   if (right==EMPTY_TEXTID)
        MVN      R9,#-1879048192
        CMP      R0,#+0
        MOVNE    R1,#+1
        STRNE    R1,[R0, #+24]
        MOV      R1,R6
        MOV      R0,R5
        _BLF     ??get_action,??get_action??rA
        MOV      R10,R0
        MOV      R1,R7
        MOV      R0,R5
        _BLF     ??get_action,??get_action??rA
        MOV      R11,R0
        STR      R6,[R4, #+4]
        MOV      R1,R6
        MOV      R0,R5
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+13]
        STR      R7,[R4, #+0]
        MOV      R1,R7
        MOV      R0,R5
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+12]
        LDR      R0,??preset_default_1  ;; ACTION_BACK
        CMP      R7,R9
        LDR      R0,[R0, #+0]
        BNE      ??preset_default_2
//  148   {
//  149     if (act1==ACTION_BACK || act1==ACTION_CANCEL || act1==ACTION_NO)
        CMP      R10,R0
        BEQ      ??preset_default_3
        LDR      R0,??DataTable12  ;; ACTION_CANCEL
        LDR      R0,[R0, #+0]
        CMP      R10,R0
        BEQ      ??preset_default_3
        LDR      R0,??DataTable13  ;; ACTION_NO
        LDR      R0,[R0, #+0]
        CMP      R10,R0
        BNE      ??preset_default_4
//  150     {
//  151       lbl->strids[2]=left;
??preset_default_3:
        STR      R6,[R4, #+8]
//  152       lbl->enable[2]=get_enable(lst, left);
        MOV      R1,R6
        MOV      R0,R5
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+14]
//  153       lbl->strids[1]=EMPTY_TEXTID;
        STR      R9,[R4, #+4]
//  154       lbl->enable[1]=false;
        MOV      R0,#+0
        STRB     R0,[R4, #+13]
        B        ??preset_default_4
//  155     }
//  156   }
//  157   else
//  158   {
//  159     if (act2==ACTION_BACK || act2==ACTION_CANCEL || act2==ACTION_NO)
??preset_default_2:
        CMP      R11,R0
        BEQ      ??preset_default_5
        LDR      R0,??DataTable12  ;; ACTION_CANCEL
        LDR      R0,[R0, #+0]
        CMP      R11,R0
        BEQ      ??preset_default_5
        LDR      R0,??DataTable13  ;; ACTION_NO
        LDR      R0,[R0, #+0]
        CMP      R11,R0
        BNE      ??preset_default_4
//  160     {
//  161       lbl->strids[2]=right;
??preset_default_5:
        STR      R7,[R4, #+8]
//  162       lbl->enable[2]=get_enable(lst, right);
        MOV      R1,R7
        MOV      R0,R5
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+14]
//  163       lbl->strids[0]=EMPTY_TEXTID;
        STR      R9,[R4, #+0]
//  164       lbl->enable[0]=false;
        MOV      R0,#+0
        STRB     R0,[R4, #+12]
//  165     }
//  166   }
//  167   if (get_action(lst, right)==ACTION_DONE)
??preset_default_4:
        MOV      R1,R7
        MOV      R0,R5
        _BLF     ??get_action,??get_action??rA
        LDR      R1,??preset_default_1+0x4  ;; ACTION_DONE
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        POPNE    {R4-R11,PC}
//  168   {
//  169     lbl->strids[1]=right;
        STR      R7,[R4, #+4]
//  170     lbl->strids[0]=left;
        STR      R6,[R4, #+0]
//  171     int temp=lbl->enable[1];
        LDRB     R0,[R4, #+13]
//  172     lbl->enable[1]=lbl->enable[0];
        LDRB     R1,[R4, #+12]
//  173     lbl->enable[0]=temp;
        CMP      R0,#+0
        STRB     R1,[R4, #+13]
        MOVNE    R0,#+1
        STRB     R0,[R4, #+12]
//  174   }
//  175 };
        POP      {R4-R11,PC}      ;; return
        DATA
??preset_default_1:
        DC32     ACTION_BACK
        DC32     ACTION_DONE
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable12:
        DC32     ACTION_CANCEL

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable13:
        DC32     ACTION_NO

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??preset_standby??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??preset_standby
//  176 //------------------------------------------------------------------
//  177 //Пресет для главного экрана:

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??preset_standby
        ARM
//  178 void preset_standby(LABELS *lbl, BOOK *bk, DISP_OBJ *DO, LIST *lst, int cnt, MyBOOK *our, int left, int right)
//  179 {
??preset_standby:
        PUSH     {R2,R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+40
        LDR      R7,[SP, #+40]
        LDR      R8,[SP, #+44]
        LDR      R9,[SP, #+48]
        LDR      R10,[SP, #+52]
        MOV      R4,R0
//  180   if (lastitem)lastitem->type=0;
        LDR      R0,??DataTable14  ;; lastitem
        MOV      R5,R1
        LDR      R0,[R0, #+0]
        MOV      R6,R3
        CMP      R0,#+0
        MOVNE    R1,#+0
        STRNE    R1,[R0, #+24]
//  181   int vis=MainInput_getVisible(SBY_GetMainInput(bk));
//  182   if (vis==0)
        MOV      R0,R5
        SWI      +535
        MOV      R11,#+1
        SWI      +502
        CMP      R0,#+0
        BNE      ??preset_standby_1
//  183   {
//  184     if (cnt>0)
        CMP      R7,#+1
        POPLT    {R0,R4-R11,PC}
//  185     {
//  186       lbl->enable[1]=true;
        STRB     R11,[R4, #+13]
//  187       lbl->strids[0]=left;
        STR      R9,[R4, #+0]
//  188       lbl->enable[0]=get_enable(lst, left);
        MOV      R1,R9
        MOV      R0,R6
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+12]
//  189       lbl->strids[2]=right;
        STR      R10,[R4, #+8]
//  190       lbl->enable[2]=get_enable(lst, right);
        MOV      R1,R10
        MOV      R0,R6
        _BLF     ??get_enable,??get_enable??rA
        STRB     R0,[R4, #+14]
        POP      {R0,R4-R11,PC}
//  191     }
//  192   }
//  193   else
//  194   {
//  195     lbl->strids[2]=our->backstrid;
??preset_standby_1:
        LDR      R0,[R8, #+40]
//  196     lbl->enable[2]=true;
//  197     preset_default(lbl,bk,DO,lst, cnt, our, left, right);
        MOV      R3,R6
        STR      R0,[R4, #+8]
        STRB     R11,[R4, #+14]
        PUSH     {R10}
        CFI CFA R13+44
        PUSH     {R9}
        CFI CFA R13+48
        PUSH     {R8}
        CFI CFA R13+52
        PUSH     {R7}
        CFI CFA R13+56
        LDR      R2,[SP, #+16]
        MOV      R1,R5
        MOV      R0,R4
        BL       ??preset_default
        ADD      SP,SP,#+16
        CFI CFA R13+40
//  198   }
//  199 };
        POP      {R0,R4-R11,PC}   ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable14:
        DC32     lastitem

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
??get_action??rA:
        LDR      R12,??Subroutine8_0  ;; ??get_action
        BX       R12
        DATA
??Subroutine8_0:
        DC32     ??get_action
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
??get_enable??rA:
        LDR      R12,??Subroutine9_0  ;; ??get_enable
        BX       R12
        DATA
??Subroutine9_0:
        DC32     ??get_enable
        CFI EndBlock cfiBlock17
//  200 //------------------------------------------------------------------

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//  201 int presets[]={  (int)lookslike_YesNo,  (int)preset_YesNo,
presets:
        DS8 32
        REQUIRE `?<Initializer for presets>`

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for presets>`:
        DATA
        DC32 ??lookslike_YesNo, ??preset_YesNo, ??lookslike_OK, ??preset_OK
        DC32 ??lookslike_DDMenu, ??preset_DDMenu, 0, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ScreensaverBook">`:
        DATA
        DC8 "ScreensaverBook"

        END
//  202                  (int)lookslike_OK,     (int)preset_OK,
//  203                  (int)lookslike_DDMenu, (int)preset_DDMenu,
//  204                  0,                0};
//  205 //------------------------------------------------------------------
// 
// 1 452 bytes in segment CODE
//    16 bytes in segment DATA_C
//    32 bytes in segment DATA_I
//    32 bytes in segment DATA_ID
//    12 bytes in segment INITTAB
// 
// 1 396 bytes of CODE  memory (+ 68 bytes shared)
//    48 bytes of CONST memory
//    32 bytes of DATA  memory
//
//Errors: none
//Warnings: none
