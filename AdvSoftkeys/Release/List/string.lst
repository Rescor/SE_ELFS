##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:49:32 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\st #
#                       ring.cpp                                             #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\st #
#                       ring.cpp -D NDEBUG -D OLDFUNCTIONS -lC               #
#                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\List\ -lA Z:\home\perk11\www\perk11.info\svn\S #
#                       E\AdvSoftkeys\Release\List\ -o                       #
#                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\Obj\ -s9 --cpu_mode arm --endian little --cpu  #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --eec++ --dlib_config                           #
#                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I         #
#                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2    #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\List\string.lst                                #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\Obj\string.r79                                 #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\string.cpp
      1          #include "..\\include\Lib_Clara.h" 
      2          #include "..\\include\Dir.h"
      3           

   \                                 In segment CODE, align 4, keep-with-next
      4          int pos2bs(int n)
      5          {
      6            int res=n;
   \                     ??pos2bs:
   \   00000000   0010A0E1           MOV      R1,R0
      7            if (n<=512)
   \   00000004   0120A0E3           MOV      R2,#+1
   \   00000008   802F82E3           ORR      R2,R2,#0x200
   \   0000000C   020050E1           CMP      R0,R2
      8            {
      9              res=512;
   \   00000010   801FA0B3           MOVLT    R1,#+512
   \   00000014   060000BA           BLT      ??pos2bs_1
     10            }
     11            else if ((n%512)>0)
   \   00000018   4024A0E1           ASR      R2,R0,#+8
   \   0000001C   A22B80E0           ADD      R2,R0,R2, LSR #+23
   \   00000020   C224A0E1           ASR      R2,R2,#+9
   \   00000024   8224A0E1           LSL      R2,R2,#+9
   \   00000028   020040E0           SUB      R0,R0,R2
   \   0000002C   010050E3           CMP      R0,#+1
     12            {
     13              res=n-(n%512)+512;
   \   00000030   801F82A2           ADDGE    R1,R2,#+512
     14            }
     15            return res;
   \                     ??pos2bs_1:
   \   00000034   0100A0E1           MOV      R0,R1
   \   00000038   1EFF2FE1           BX       LR               ;; return
     16          };
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          int oct2int(const char *oct)
     19          {
     20            int ch;
     21            int value = 0;
   \                     ??oct2int:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   010000EA           B        ??oct2int_1
     22            while (((ch = *oct++) >= '0') &&
     23                   (ch <= '7'))
     24            {
     25              value <<= 3;
     26              value += (ch - '0');
   \                     ??oct2int_2:
   \   00000008   811182E0           ADD      R1,R2,R1, LSL #+3
   \   0000000C   301041E2           SUB      R1,R1,#+48
     27            }
   \                     ??oct2int_1:
   \   00000010   ........           LDRB     R2,[R0], #+1
   \   00000014   300052E3           CMP      R2,#+48
   \   00000018   010000BA           BLT      ??oct2int_3
   \   0000001C   380052E3           CMP      R2,#+56
   \   00000020   F8FFFFBA           BLT      ??oct2int_2
     28            return value;
   \                     ??oct2int_3:
   \   00000024   0100A0E1           MOV      R0,R1
   \   00000028   1EFF2FE1           BX       LR               ;; return
     29          };
     30          

   \                                 In segment CODE, align 4, keep-with-next
     31          void abc2ABC(char *ws)
     32          {
   \                     ??abc2ABC:
   \   00000000   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F01           BXEQ     LR
     33            while (*ws) 
     34            {
     35              if (*ws>0x39)
   \                     ??abc2ABC_1:
   \   0000000C   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000010   3A0051E3           CMP      R1,#+58
     36              {
     37                *ws&=~0x20; 
   \   00000014   DF100122           ANDCS    R1,R1,#0xDF
   \   00000018   0010C025           STRBCS   R1,[R0, #+0]
     38              }
     39              *ws++;
     40            }
   \   0000001C   0110F0E5           LDRB     R1,[R0, #+1]!
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   F8FFFF1A           BNE      ??abc2ABC_1
     41          };
   \   00000028   1EFF2FE1           BX       LR               ;; return
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          int h2i(char * h)
     44          {
     45            char c;
     46            int res=0;
   \                     ??h2i:
   \   00000000   0010A0E3           MOV      R1,#+0
     47            while((*h++)!='X');
   \                     ??h2i_1:
   \   00000004   ........           LDRB     R2,[R0], #+1
   \   00000008   580052E3           CMP      R2,#+88
   \   0000000C   FCFFFF1A           BNE      ??h2i_1
     48            do
     49            {
     50              c=*h++;
   \                     ??h2i_2:
   \   00000010   ........           LDRB     R2,[R0], #+1
     51              if (c>0x60) c-=0x20; else c-=0x30;
   \   00000014   610052E3           CMP      R2,#+97
   \   00000018   E0208222           ADDCS    R2,R2,#+224
   \   0000001C   D0208232           ADDCC    R2,R2,#+208
   \   00000020   FF2002E2           AND      R2,R2,#0xFF
     52              if (c>9) c-=7;
   \   00000024   0A0052E3           CMP      R2,#+10
   \   00000028   F9208222           ADDCS    R2,R2,#+249
   \   0000002C   FF200222           ANDCS    R2,R2,#0xFF
     53              res<<=4;
     54              res|=c;
   \   00000030   011282E1           ORR      R1,R2,R1, LSL #+4
     55            }
     56            while(*h!='\0');
   \   00000034   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   F3FFFF1A           BNE      ??h2i_2
     57            return(res);
   \   00000040   0100A0E1           MOV      R0,R1
   \   00000044   1EFF2FE1           BX       LR               ;; return
     58          };
     59          

   \                                 In segment CODE, align 4, keep-with-next
     60          void *memmem(const unsigned char *haystack, size_t haystacklen, const void *needle, size_t needlelen)
     61          {
   \                     ??memmem:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0250A0E1           MOV      R5,R2
   \   0000000C   0360A0E1           MOV      R6,R3
     62            const unsigned char *cursor;
     63            const unsigned char *last_possible_needle_location = (unsigned char *)haystack + haystacklen - needlelen;
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   000060E2           RSB      R0,R0,#+0
   \   00000018   042081E0           ADD      R2,R1,R4
   \   0000001C   027080E0           ADD      R7,R0,R2
     64            if (needlelen > haystacklen) return(NULL);
   \   00000020   060051E1           CMP      R1,R6
   \   00000024   0100002A           BCS      ??memmem_1
   \                     ??memmem_2:
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   F080BDE8           POP      {R4-R7,PC}
     65            if (needle == NULL) return(NULL);
   \                     ??memmem_1:
   \   00000030   000055E3           CMP      R5,#+0
     66            if (haystack == NULL) return(NULL);
   \   00000034   00005413           CMPNE    R4,#+0
     67            if (needlelen == 0) return(NULL);
   \   00000038   00005613           CMPNE    R6,#+0
     68            if (haystacklen == 0) return(NULL);
   \   0000003C   00005113           CMPNE    R1,#+0
   \   00000040   F8FFFF0A           BEQ      ??memmem_2
     69            
     70            for (cursor = haystack; cursor <= last_possible_needle_location; cursor++) 
   \   00000044   000000EA           B        ??memmem_3
   \                     ??memmem_4:
   \   00000048   014084E2           ADD      R4,R4,#+1
   \                     ??memmem_3:
   \   0000004C   040057E1           CMP      R7,R4
   \   00000050   F4FFFF3A           BCC      ??memmem_2
     71            {
     72              if (memcmp(needle, cursor, needlelen) == 0) 
   \   00000054   0620A0E1           MOV      R2,R6
   \   00000058   0410A0E1           MOV      R1,R4
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   7D0200EF           SWI      +637
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   F6FFFF1A           BNE      ??memmem_4
     73              {
     74                return((void *) cursor);
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   F080BDE8           POP      {R4-R7,PC}       ;; return
     75              }
     76            }
     77            return(NULL);
     78          };
     79          

   \                                 In segment CODE, align 4, keep-with-next
     80          char *getparam(char *buf, char *mask, char end, int fsize)
     81          {
   \                     ??getparam:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0240A0E1           MOV      R4,R2
   \   00000010   0370A0E1           MOV      R7,R3
     82            char *str=0;
     83            if (str=(char*)memmem((unsigned char const*)buf,fsize,mask,strlen(mask)))
   \   00000014   0600A0E1           MOV      R0,R6
   \   00000018   5A0100EF           SWI      +346
   \   0000001C   0030A0E1           MOV      R3,R0
   \   00000020   0620A0E1           MOV      R2,R6
   \   00000024   0710A0E1           MOV      R1,R7
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   ........           BL       ??memmem
   \   00000030   0050B0E1           MOVS     R5,R0
   \   00000034   1900000A           BEQ      ??getparam_1
     84            {
     85              char *ret=0;;
     86              int addr=(int)str;
     87              str=(char*)(addr+strlen(mask)+2);
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   5A0100EF           SWI      +346
   \   00000040   050080E0           ADD      R0,R0,R5
   \   00000044   025080E2           ADD      R5,R0,#+2
     88              int x=0;
     89              int len=0;
   \   00000048   0010D5E5           LDRB     R1,[R5, #+0]
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   040051E1           CMP      R1,R4
   \   00000054   0100001A           BNE      ??getparam_2
   \   00000058   030000EA           B        ??getparam_3
     90              while (str[x]!=end)
     91              {
     92                x++;
   \                     ??getparam_4:
   \   0000005C   010080E2           ADD      R0,R0,#+1
     93              }
   \                     ??getparam_2:
   \   00000060   0510D0E7           LDRB     R1,[R0, +R5]
   \   00000064   040051E1           CMP      R1,R4
   \   00000068   FBFFFF1A           BNE      ??getparam_4
     94              len=x+1;
   \                     ??getparam_3:
   \   0000006C   014080E2           ADD      R4,R0,#+1
     95              if (len>1)
   \   00000070   020054E3           CMP      R4,#+2
   \   00000074   090000BA           BLT      ??getparam_1
     96              {
     97                ret=new char[len+1];
   \   00000078   010084E2           ADD      R0,R4,#+1
   \   0000007C   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000080   0060A0E1           MOV      R6,R0
     98                memcpy(ret,str,len);
   \   00000084   0420A0E1           MOV      R2,R4
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   130100EF           SWI      +275
     99                ret[len]='\0';
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   0600C4E7           STRB     R0,[R4, +R6]
    100                return ret;
   \   00000098   0600A0E1           MOV      R0,R6
   \   0000009C   F080BDE8           POP      {R4-R7,PC}
    101              }
    102              return 0;
    103            }
    104            return 0;
   \                     ??getparam_1:
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   F080BDE8           POP      {R4-R7,PC}       ;; return
    105          };
    106          

   \                                 In segment CODE, align 4, keep-with-next
    107          int getint(char *line, int *pos,char end)
    108          {
   \                     ??getint:
   \   00000000   70002DE9           PUSH     {R4-R6}
    109            bool minus=false;
    110            if (line[pos[0]]=='-')
   \   00000004   003091E5           LDR      R3,[R1, #+0]
   \   00000008   00C0A0E3           MOV      R12,#+0
   \   0000000C   0040D3E7           LDRB     R4,[R3, +R0]
    111            {
    112              minus=true;
    113              pos[0]++;
    114            }
    115            int ret=0;
   \   00000010   0A60A0E3           MOV      R6,#+10
   \   00000014   2D0054E3           CMP      R4,#+45
   \   00000018   01308302           ADDEQ    R3,R3,#+1
   \   0000001C   00308105           STREQ    R3,[R1, #+0]
   \   00000020   004091E5           LDR      R4,[R1, #+0]
   \   00000024   01C0A003           MOVEQ    R12,#+1
   \   00000028   0040D4E7           LDRB     R4,[R4, +R0]
   \   0000002C   0030A0E3           MOV      R3,#+0
   \   00000030   020054E1           CMP      R4,R2
   \   00000034   0800000A           BEQ      ??getint_1
    116            while (line[pos[0]]!=end)
    117            {
    118              ret=(ret*10)+(line[pos[0]]-0x30);
   \                     ??getint_2:
   \   00000038   004091E5           LDR      R4,[R1, #+0]
   \   0000003C   0050D4E7           LDRB     R5,[R4, +R0]
    119              pos[0]++;
   \   00000040   014084E2           ADD      R4,R4,#+1
   \   00000044   004081E5           STR      R4,[R1, #+0]
    120            }
   \   00000048   0040D4E7           LDRB     R4,[R4, +R0]
   \   0000004C   965323E0           MLA      R3,R6,R3,R5
   \   00000050   020054E1           CMP      R4,R2
   \   00000054   303043E2           SUB      R3,R3,#+48
   \   00000058   F6FFFF1A           BNE      ??getint_2
    121            pos[0]++;
   \                     ??getint_1:
   \   0000005C   000091E5           LDR      R0,[R1, #+0]
    122            if (minus)ret=-ret;
   \   00000060   00005CE3           CMP      R12,#+0
   \   00000064   010080E2           ADD      R0,R0,#+1
   \   00000068   000081E5           STR      R0,[R1, #+0]
    123            return ret;
   \   0000006C   7000BDE8           POP      {R4-R6}
   \   00000070   00306312           RSBNE    R3,R3,#+0
   \   00000074   0300A0E1           MOV      R0,R3
   \   00000078   1EFF2FE1           BX       LR               ;; return
    124          };
    125          

   \                                 In segment CODE, align 4, keep-with-next
    126          char *getchr(char *line, int *pos, char end)
    127          {
   \                     ??getchr:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    128            char *ret;
    129            int start,en;
    130            start=pos[0];
   \   00000004   005091E5           LDR      R5,[R1, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000000EA           B        ??getchr_1
    131            while (line[pos[0]]!=end && line[pos[0]]!=0)
    132            {
    133              pos[0]++;
   \                     ??getchr_2:
   \   00000010   000081E5           STR      R0,[R1, #+0]
    134            }
   \                     ??getchr_1:
   \   00000014   003091E5           LDR      R3,[R1, #+0]
   \   00000018   010083E2           ADD      R0,R3,#+1
   \   0000001C   04C083E0           ADD      R12,R3,R4
   \   00000020   0060DCE5           LDRB     R6,[R12, #+0]
   \   00000024   020056E1           CMP      R6,R2
   \   00000028   00005613           CMPNE    R6,#+0
   \   0000002C   F7FFFF1A           BNE      ??getchr_2
    135            en=pos[0];
    136            pos[0]++;
   \   00000030   000081E5           STR      R0,[R1, #+0]
    137            int len=en-start;
   \   00000034   056043E0           SUB      R6,R3,R5
    138            if (len>0)
   \   00000038   010056E3           CMP      R6,#+1
   \   0000003C   090000BA           BLT      ??getchr_3
    139            {  
    140              ret = new char[len+1];
   \   00000040   010086E2           ADD      R0,R6,#+1
   \   00000044   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000048   0070A0E1           MOV      R7,R0
    141              memcpy(ret, &line[start], len);
   \   0000004C   0620A0E1           MOV      R2,R6
   \   00000050   041085E0           ADD      R1,R5,R4
   \   00000054   130100EF           SWI      +275
    142              ret[len]='\0';
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   0700C6E7           STRB     R0,[R6, +R7]
    143              return ret;
   \   00000060   0700A0E1           MOV      R0,R7
   \   00000064   F080BDE8           POP      {R4-R7,PC}
    144            }
    145            return 0;
   \                     ??getchr_3:
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   F080BDE8           POP      {R4-R7,PC}       ;; return
    146          };
    147          

   \                                 In segment CODE, align 4, keep-with-next
    148          wchar_t *getwchr(char *line, int *pos, char end)
    149          {
   \                     ??getwchr:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    150            int start,en;
    151            start=pos[0];
   \   00000004   005091E5           LDR      R5,[R1, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0400D5E7           LDRB     R0,[R5, +R4]
   \   00000010   020050E1           CMP      R0,R2
   \   00000014   0500000A           BEQ      ??getwchr_1
    152            while (line[pos[0]]!=end)
    153            {
    154              pos[0]++;
   \                     ??getwchr_2:
   \   00000018   000091E5           LDR      R0,[R1, #+0]
   \   0000001C   010080E2           ADD      R0,R0,#+1
   \   00000020   000081E5           STR      R0,[R1, #+0]
    155            }
   \   00000024   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000028   020050E1           CMP      R0,R2
   \   0000002C   F9FFFF1A           BNE      ??getwchr_2
    156            en=pos[0];
   \                     ??getwchr_1:
   \   00000030   000091E5           LDR      R0,[R1, #+0]
    157            pos[0]++;
   \   00000034   012080E2           ADD      R2,R0,#+1
   \   00000038   002081E5           STR      R2,[R1, #+0]
    158            int len=en-start;
   \   0000003C   056040E0           SUB      R6,R0,R5
    159            if (len>0)
   \   00000040   010056E3           CMP      R6,#+1
   \   00000044   0D0000BA           BLT      ??getwchr_3
    160            {
    161              wchar_t *wret=new wchar_t[len/2+1];
   \   00000048   A60F86E0           ADD      R0,R6,R6, LSR #+31
   \   0000004C   C070A0E1           ASR      R7,R0,#+1
   \   00000050   010087E2           ADD      R0,R7,#+1
   \   00000054   8000A0E1           LSL      R0,R0,#+1
   \   00000058   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   0000005C   0080A0E1           MOV      R8,R0
    162              memcpy(wret,&line[start], len);
   \   00000060   0620A0E1           MOV      R2,R6
   \   00000064   041085E0           ADD      R1,R5,R4
   \   00000068   130100EF           SWI      +275
    163              wret[len/2]=L'\0';
   \   0000006C   870088E0           ADD      R0,R8,R7, LSL #+1
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   B010C0E1           STRH     R1,[R0, #+0]
    164              return wret;
   \   00000078   0800A0E1           MOV      R0,R8
   \   0000007C   F081BDE8           POP      {R4-R8,PC}
    165            }
    166            return 0;
   \                     ??getwchr_3:
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   F081BDE8           POP      {R4-R8,PC}       ;; return
    167          };

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     abc2ABC(char *)                    0
     getchr(char *, int *, char)       20
     getint(char *, int *, char)       12
     getparam(char *, char *, char, int)
                                       20
     getwchr(char *, int *, char)      24
     h2i(char *)                        0
     memmem(unsigned char const *, size_t, void const *, size_t)
                                       20
     oct2int(char const *)              0
     pos2bs(int)                        0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     pos2bs(int)                      60
     oct2int(char const *)            44
     abc2ABC(char *)                  44
     h2i(char *)                      72
     memmem(unsigned char const *, size_t, void const *, size_t)
                                     116
     getparam(char *, char *, char, int)
                                     168
     getint(char *, int *, char)     124
     getchr(char *, int *, char)     112
     getwchr(char *, int *, char)    136
      Others                          48

 
 924 bytes in segment CODE
 
 876 bytes of CODE memory (+ 48 bytes shared)

Errors: none
Warnings: none
