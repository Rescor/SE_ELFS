//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:48:58 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\c /
//                       fg.cpp                                              /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\c /
//                       fg.cpp -D NDEBUG -D OLDFUNCTIONS -lC                /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\AdvSoftkeys\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\Obj\ -s9 --cpu_mode arm --endian little      /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\R /
//                       elease\List\cfg.s79                                 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME cfg

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

??DataTable0 EQU 0
??DataTable1 EQU 0
        PUBLIC ??addline
        FUNCTION ??addline,0203H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??addline??rT
        PUBLIC ??csofts_create_empty
        FUNCTION ??csofts_create_empty,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??csofts_create_empty??rT
        PUBLIC ??csofts_destroy
        FUNCTION ??csofts_destroy,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??csofts_destroy??rT
        PUBLIC ??csofts_fill
        FUNCTION ??csofts_fill,0203H
        LOCFRAME CSTACK, 148, STACK
        MULTWEAK ??csofts_fill??rT
        MULTWEAK ??file_read??rA
        MULTWEAK ??getint??rA
        MULTWEAK ??getparam??rA
        MULTWEAK ??getwchr??rA
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK ??set_ui??rA
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC csofts
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        








??addline??rT       SYMBOL "??rT", ??addline

??csofts_create_empty??rT SYMBOL "??rT", ??csofts_create_empty

??csofts_destroy??rT SYMBOL "??rT", ??csofts_destroy

??csofts_fill??rT   SYMBOL "??rT", ??csofts_fill
??file_read??rA     SYMBOL "??rA", ??file_read
??getint??rA        SYMBOL "??rA", ??getint
??getparam??rA      SYMBOL "??rA", ??getparam
??getwchr??rA       SYMBOL "??rA", ??getwchr
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
??set_ui??rA        SYMBOL "??rA", ??set_ui

        EXTERN ??file_read
        FUNCTION ??file_read,0202H
        EXTERN ??getint
        FUNCTION ??getint,0202H
        EXTERN ??getparam
        FUNCTION ??getparam,0202H
        EXTERN ??getwchr
        FUNCTION ??getwchr,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN ??set_ui
        FUNCTION ??set_ui,0202H

// Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\cfg.cpp
//    1 #include "..\\include\Lib_Clara.h" 
//    2 #include "..\\include\Dir.h" 
//    3 #include "header\structs.h"
//    4 #include "header\string.h"
//    5 #include "header\iofunc.h"
//    6 int set_ui(char *buf, int fsize);
//    7 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//    8 LIST *csofts=0;
csofts:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??addline??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??addline
//    9 #define SID_NULL 0x6FFFFFFF
//   10 #define DELETE(a) if (a) delete(a);a=0
//   11 #define F_READ 0x001
//   12 #define F_RIGHTS 0x180
//   13 #define F_WRITE 0x204
//   14 #define F_APPEND 0x108
//   15 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??addline
        ARM
//   16 void addline(char *line)
//   17 {
??addline:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        SUB      SP,SP,#+4
        CFI CFA R13+28
        MOV      R4,R0
//   18   ITEM *it=new ITEM;
        MOV      R0,#+28
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R5,R0
//   19   memset(it,0,sizeof(ITEM));
        MOV      R2,#+28
        MOV      R1,#+0
        SWI      +274
//   20   //--------------------
//   21   char between=0xFF;
//   22   int x=0;
        MOV      R1,#+0
        STR      R1,[SP, #+0]
//   23   //--------------------
//   24   it->name=getwchr(line,&x,between);
        MOV      R2,#+255
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getwchr,??getwchr??rA
        STR      R0,[R5, #+0]
//   25   //--------------------
//   26   it->strids[0]=SID_NULL;
        MVN      R0,#-1879048192
        STR      R0,[R5, #+4]
//   27   it->strids[1]=SID_NULL;
        STR      R0,[R5, #+8]
//   28   it->strids[2]=SID_NULL;
        STR      R0,[R5, #+12]
//   29   //--------------------
//   30   wchar_t *str=getwchr(line,&x,between);
        MOV      R2,#+255
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getwchr,??getwchr??rA
        MOVS     R6,R0
//   31   if (str)it->strids[0]=TextID_Create(str,ENC_UCS2,TEXTID_ANY_LEN);
        MOV      R7,#+255
        ORR      R7,R7,#0xFF00
        BEQ      ??addline_1
        MOV      R2,R7
        MOV      R1,#+0
        SWI      +349
        STR      R0,[R5, #+4]
//   32   delete(str);
??addline_1:
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//   33   //--------------------
//   34   str=getwchr(line,&x,between);
        MOV      R2,#+255
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getwchr,??getwchr??rA
        MOVS     R6,R0
//   35   if (str)it->strids[1]=TextID_Create(str,ENC_UCS2,TEXTID_ANY_LEN);
        BEQ      ??addline_2
        MOV      R2,R7
        MOV      R1,#+0
        SWI      +349
        STR      R0,[R5, #+8]
//   36   delete(str);
??addline_2:
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//   37   //--------------------
//   38   str=getwchr(line,&x,between);
        MOV      R2,#+255
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getwchr,??getwchr??rA
        MOVS     R6,R0
//   39   if (str)it->strids[2]=TextID_Create(str,ENC_UCS2,TEXTID_ANY_LEN);
        BEQ      ??addline_3
        MOV      R2,R7
        MOV      R1,#+0
        SWI      +349
        STR      R0,[R5, #+12]
//   40   delete(str);
??addline_3:
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//   41   //--------------------
//   42   it->style=getint(line,&x,':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getint,??getint??rA
        STR      R0,[R5, #+16]
//   43   //--------------------
//   44   int howmany=getint(line,&x,':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getint,??getint??rA
        MOV      R6,R0
//   45   //--------------------
//   46   int j;
//   47   for (j=0;j<howmany;j++)
        MOV      R7,#+0
        CMP      R6,#+1
        BGE      ??addline_4
        B        ??addline_5
//   48   {
//   49     KEY *key=new KEY;
??addline_6:
        MOV      R0,#+8
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R8,R0
//   50     key->oldkey=getint(line,&x,'-'); 
        MOV      R2,#+45
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getint,??getint??rA
        STR      R0,[R8, #+0]
//   51     key->newkey=getint(line,&x,':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        _BLF     ??getint,??getint??rA
        STR      R0,[R8, #+4]
//   52     if (!it->keys)it->keys=List_Create();
        LDR      R0,[R5, #+20]
        CMP      R0,#+0
        BNE      ??addline_7
        SWI      +361
        STR      R0,[R5, #+20]
//   53     List_InsertLast(it->keys, key);
??addline_7:
        LDR      R0,[R5, #+20]
        MOV      R1,R8
        SWI      +432
//   54   }
        ADD      R7,R7,#+1
??addline_4:
        CMP      R7,R6
        BLT      ??addline_6
//   55   //--------------------
//   56   List_InsertLast(csofts, it);
??addline_5:
        LDR      R0,??DataTable2  ;; csofts
        MOV      R1,R5
        LDR      R0,[R0, #+0]
        SWI      +432
//   57 };
        POP      {R0,R4-R8,PC}    ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??csofts_fill??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??csofts_fill
//   58 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??csofts_fill
        ARM
//   59 int csofts_fill(wchar_t *path, wchar_t *name)
//   60 {
??csofts_fill:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+132
        CFI CFA R13+148
//   61   int fsize=0;
        MOV      R3,#+0
        STR      R3,[SP, #+0]
//   62   char *buf=file_read(path, name, &fsize);
        MOV      R2,SP
        _BLF     ??file_read,??file_read??rA
        MOVS     R4,R0
//   63   if (buf)
        BEQ      ??csofts_fill_1
//   64   {
//   65     char *param=0;
//   66     int x=0;
//   67     if (!csofts)csofts=List_Create();
        LDR      R6,??DataTable2  ;; csofts
        MOV      R5,#+0
        LDR      R0,[R6, #+0]
        CMP      R0,#+0
        BNE      ??csofts_fill_2
        SWI      +361
        STR      R0,[R6, #+0]
        B        ??csofts_fill_2
//   68     while (1)
//   69     {
//   70       char pattern[128];
//   71       sprintf(pattern,"%d)",x);
//   72       if (param=getparam(buf,pattern,0xFE, fsize))
//   73       {
//   74         addline(param);
??csofts_fill_3:
        BL       ??addline
//   75         delete(param);
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//   76       }
//   77       else
//   78       {
//   79         break;
//   80       }
//   81       x++;
        ADD      R5,R5,#+1
??csofts_fill_2:
        MOV      R2,R5
        ADR      R1,??csofts_fill_4  ;; "%d)"
        ADD      R0,SP,#+4
        SWI      +276
        LDR      R3,[SP, #+0]
        MOV      R2,#+254
        ADD      R1,SP,#+4
        MOV      R0,R4
        _BLF     ??getparam,??getparam??rA
        MOVS     R6,R0
        BNE      ??csofts_fill_3
//   82     }
//   83     set_ui(buf,fsize);
        LDR      R1,[SP, #+0]
        MOV      R0,R4
        _BLF     ??set_ui,??set_ui??rA
//   84     delete(buf);
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
//   85     return 0;
        MOV      R0,#+0
        ADD      SP,SP,#+132
        CFI CFA R13+16
        POP      {R4-R6,PC}
        CFI CFA R13+148
//   86   }
//   87   return -1;
??csofts_fill_1:
        MVN      R0,#+0
        ADD      SP,SP,#+132
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        DATA
??csofts_fill_4:
        DC8      "%d)"
        CFI EndBlock cfiBlock3
//   88 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??csofts_destroy??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??csofts_destroy
//   89 //------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??csofts_destroy
        ARM
//   90 void csofts_destroy()
//   91 {
??csofts_destroy:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//   92   if (csofts)
        LDR      R4,??DataTable2  ;; csofts
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        POPEQ    {R4-R7,PC}
        MOV      R5,#+0
        MVN      R7,#-1879048192
        B        ??csofts_destroy_1
//   93   {
//   94     while (csofts->FirstFree)
//   95     {
//   96       ITEM *it=(ITEM*)List_RemoveAt(csofts,0);
//   97       DELETE(it->name);
//   98       if (it->strids[0]!=SID_NULL)TextID_Destroy(it->strids[0]);
//   99       if (it->strids[1]!=SID_NULL)TextID_Destroy(it->strids[1]);
//  100       if (it->strids[2]!=SID_NULL)TextID_Destroy(it->strids[2]);
//  101       if (it->keys)
//  102       {
//  103         while (it->keys->FirstFree)
//  104         {
//  105           KEY *k=(KEY*)List_RemoveAt(it->keys,0);
??csofts_destroy_2:
        MOV      R1,#+0
        SWI      +377
//  106           DELETE(k);
        CMP      R0,#+0
        BEQ      ??csofts_destroy_3
        _BLF     `??operator delete`,`??operator delete??rA`
//  107         }
??csofts_destroy_3:
        LDR      R0,[R6, #+20]
        LDRH     R1,[R0, #+2]
        CMP      R1,#+0
        BNE      ??csofts_destroy_2
//  108         List_Destroy(it->keys);
        SWI      +362
//  109         it->keys=0;
        STR      R5,[R6, #+20]
//  110       }
//  111       DELETE(it);
??csofts_destroy_4:
        CMP      R6,#+0
        BEQ      ??csofts_destroy_1
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
??csofts_destroy_1:
        LDR      R0,[R4, #+0]
        LDRH     R1,[R0, #+2]
        CMP      R1,#+0
        BEQ      ??csofts_destroy_5
        MOV      R1,#+0
        SWI      +377
        MOV      R6,R0
        LDR      R0,[R6, #+0]
        CMP      R0,#+0
        BEQ      ??csofts_destroy_6
        _BLF     `??operator delete`,`??operator delete??rA`
??csofts_destroy_6:
        STR      R5,[R6, #+0]
        LDR      R0,[R6, #+4]
        CMP      R0,R7
        BEQ      ??csofts_destroy_7
        SWI      +353
??csofts_destroy_7:
        LDR      R0,[R6, #+8]
        CMP      R0,R7
        BEQ      ??csofts_destroy_8
        SWI      +353
??csofts_destroy_8:
        LDR      R0,[R6, #+12]
        CMP      R0,R7
        BEQ      ??csofts_destroy_9
        SWI      +353
??csofts_destroy_9:
        LDR      R0,[R6, #+20]
        CMP      R0,#+0
        BEQ      ??csofts_destroy_4
        B        ??csofts_destroy_3
//  112     }
//  113     List_Destroy(csofts);
??csofts_destroy_5:
        SWI      +362
//  114     csofts=0;
        STR      R5,[R4, #+0]
//  115   }
//  116 };
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     csofts

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??csofts_create_empty??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??csofts_create_empty
//  117 //----------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??csofts_create_empty
        ARM
//  118 void csofts_create_empty(wchar_t *path, wchar_t *name)
//  119 {
??csofts_create_empty:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB      SP,SP,#+4
        CFI CFA R13+16
//  120   int file;
//  121   char cr=0x0D;
        MOV      R3,#+13
        STRB     R3,[SP, #+1]
//  122   char lf=0x0A;
        MOV      R3,#+10
        STRB     R3,[SP, #+2]
//  123   char endstr=0xFE;
        MOV      R3,#+254
        STRB     R3,[SP, #+3]
//  124   char between=0xFF;
        MOV      R3,#+255
        STRB     R3,[SP, #+0]
//  125   if ((file=_fopen(path,name,F_WRITE,F_RIGHTS,0))>=0)
        MOV      R2,#+0
        PUSH     {R2}
        CFI CFA R13+20
        MOV      R3,#+384
        MOV      R2,#+516
        SWI      +278
        MOVS     R4,R0
        ADD      SP,SP,#+4
        CFI CFA R13+16
        BMI      ??csofts_create_empty_1
//  126   {
//  127     //0):
//  128     fwrite(file,"0): ",4);
        LDR      R5,??csofts_create_empty_2  ;; `?<Constant "0): ">`
        MOV      R2,#+4
        MOV      R1,R5
        SWI      +281
//  129     fwrite(file,L"DEFAULT",7*2);
        MOV      R2,#+14
        ADD      R1,R5,#+8
        MOV      R0,R4
        SWI      +281
//  130     fwrite(file,&between,1);
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R4
        SWI      +281
//  131     fwrite(file,&between,1);
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R4
        SWI      +281
//  132     fwrite(file,&between,1);
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R4
        SWI      +281
//  133     fwrite(file,&between,1);
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R4
        SWI      +281
//  134     fwrite(file,"1:4:2-3:3-4:8-2:4-8:;",strlen("1:4:2-3:3-4:8-2:4-8:;"));
        ADD      R0,R5,#+24
        SWI      +346
        MOV      R2,R0
        ADD      R1,R5,#+24
        MOV      R0,R4
        SWI      +281
//  135     fwrite(file,&cr,1);
        MOV      R2,#+1
        ADD      R1,SP,#+1
        MOV      R0,R4
        SWI      +281
//  136     fwrite(file,&lf,1);
        MOV      R2,#+1
        ADD      R1,SP,#+2
        MOV      R0,R4
        SWI      +281
//  137     //1):
//  138     fwrite(file,"1): ",4);
        MOV      R2,#+4
        ADD      R1,R5,#+48
        MOV      R0,R4
        SWI      +281
//  139     fwrite(file,L"StandbyBook",11*2);
        MOV      R2,#+22
        ADD      R1,R5,#+56
        MOV      R0,R4
        SWI      +281
//  140     fwrite(file,&between,1);
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R4
        SWI      +281
//  141     fwrite(file,&between,1);
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R4
        SWI      +281
//  142     fwrite(file,&between,1);
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R4
        SWI      +281
//  143     fwrite(file,&between,1);
        MOV      R2,#+1
        MOV      R1,SP
        MOV      R0,R4
        SWI      +281
//  144     fwrite(file,"1:0:",strlen("1:0:"));
        ADD      R0,R5,#+80
        SWI      +346
        MOV      R2,R0
        ADD      R1,R5,#+80
        MOV      R0,R4
        SWI      +281
//  145     fwrite(file,&endstr,1);
        MOV      R2,#+1
        ADD      R1,SP,#+3
        MOV      R0,R4
        SWI      +281
//  146     fwrite(file,&cr,1);
        MOV      R2,#+1
        ADD      R1,SP,#+1
        MOV      R0,R4
        SWI      +281
//  147     fwrite(file,&lf,1);
        MOV      R2,#+1
        ADD      R1,SP,#+2
        MOV      R0,R4
        SWI      +281
//  148   }
//  149   fclose(file);
??csofts_create_empty_1:
        MOV      R0,R4
        SWI      +279
//  150 };
        POP      {R0,R4,R5,PC}    ;; return
        DATA
??csofts_create_empty_2:
        DC32     `?<Constant "0): ">`
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine4_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine4_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI NoFunction
        ARM
??getwchr??rA:
        LDR      R12,??Subroutine5_0  ;; ??getwchr
        BX       R12
        DATA
??Subroutine5_0:
        DC32     ??getwchr
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine6_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine6_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI NoFunction
        ARM
??getint??rA:
        LDR      R12,??Subroutine7_0  ;; ??getint
        BX       R12
        DATA
??Subroutine7_0:
        DC32     ??getint
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI NoFunction
        ARM
??file_read??rA:
        LDR      R12,??Subroutine8_0  ;; ??file_read
        BX       R12
        DATA
??Subroutine8_0:
        DC32     ??file_read
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI NoFunction
        ARM
??getparam??rA:
        LDR      R12,??Subroutine9_0  ;; ??getparam
        BX       R12
        DATA
??Subroutine9_0:
        DC32     ??getparam
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        ARM
??set_ui??rA:
        LDR      R12,??Subroutine10_0  ;; ??set_ui
        BX       R12
        DATA
??Subroutine10_0:
        DC32     ??set_ui
        CFI EndBlock cfiBlock14

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "%d)"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "0): ">`:
        DATA
        DC8 "0): "
        DC8 0, 0, 0
        DC8 44H, 0, 45H, 0, 46H, 0, 41H, 0
        DC8 55H, 0, 4CH, 0, 54H, 0, 0, 0
        DC8 "1:4:2-3:3-4:8-2:4-8:;"
        DC8 0, 0
        DC8 "1): "
        DC8 0, 0, 0
        DC8 53H, 0, 74H, 0, 61H, 0, 6EH, 0
        DC8 64H, 0, 62H, 0, 79H, 0, 42H, 0
        DC8 6FH, 0, 6FH, 0, 6BH, 0, 0, 0
        DC8 "1:0:"
        DC8 0, 0, 0

        END
// 
// 1 304 bytes in segment CODE
//    92 bytes in segment DATA_C
//     4 bytes in segment DATA_Z
//    12 bytes in segment INITTAB
// 
// 1 204 bytes of CODE  memory (+ 112 bytes shared)
//    92 bytes of CONST memory
//     4 bytes of DATA  memory
//
//Errors: none
//Warnings: none
