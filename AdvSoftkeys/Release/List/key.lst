##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:49:11 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\ke #
#                       y.cpp                                                #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\ke #
#                       y.cpp -D NDEBUG -D OLDFUNCTIONS -lC                  #
#                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\List\ -lA Z:\home\perk11\www\perk11.info\svn\S #
#                       E\AdvSoftkeys\Release\List\ -o                       #
#                       Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\Obj\ -s9 --cpu_mode arm --endian little --cpu  #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --eec++ --dlib_config                           #
#                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I         #
#                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2    #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\List\key.lst                                   #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\Re #
#                       lease\Obj\key.r79                                    #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\AdvSoftkeys\key.cpp
      1          #include "..\include\Lib_Clara.h"
      2          #include "..\include\Dir.h"
      3          #include "header\structs.h"
      4          #include "header\presets.h"
      5          #define SID_NULL 0x6FFFFFFF
      6          

   \                                 In segment DATA_Z, align 1, align-sorted
      7          bool pressed[3]={false,false,false};
   \                     pressed:
   \   00000000                      DS8 3
      8          
      9          extern RECT rect;
     10          extern ITEM *lastitem;
     11          extern DISP_OBJ *soft;
     12          extern bool works;
     13          extern LIST *csofts;
     14          extern int DB;
     15          
     16          ITEM *getbyname(wchar_t *name);
     17          void getitem(BOOK *bk);
     18          int isImageViewer(BOOK *bk);
     19          void __getitem(BOOK *bk);
     20          void save();
     21          int isvisible(LIST *lst, int index);
     22          bool isInIronPatch(int act);
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          int onkey(int key)
     25          {
   \                     ??onkey:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     26            if (works)
   \   00000008   14019FE5           LDR      R0,??onkey_1     ;; works
   \   0000000C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3080BD08           POPEQ    {R4,R5,PC}
     27            {
     28              BOOK *bk=Display_GetTopBook(0);
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   1B0300EF           SWI      +795
   \   00000020   0050A0E1           MOV      R5,R0
     29              if (BookObj_GetDisplayOrientation(bk)==1 && DB==2010)return key;
   \   00000024   190300EF           SWI      +793
   \   00000028   010050E3           CMP      R0,#+1
   \   0000002C   0700001A           BNE      ??onkey_2
   \   00000030   F0009FE5           LDR      R0,??onkey_1+0x4  ;; DB
   \   00000034   DA10A0E3           MOV      R1,#+218
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   701E81E3           ORR      R1,R1,#0x700
   \   00000040   010050E1           CMP      R0,R1
   \   00000044   0100001A           BNE      ??onkey_2
   \                     ??onkey_3:
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   3080BDE8           POP      {R4,R5,PC}
     30              if (isImageViewer(bk))return key;
   \                     ??onkey_2:
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   ........           _BLF     ??isImageViewer,??isImageViewer??rA
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   F9FFFF1A           BNE      ??onkey_3
     31              __getitem(bk);
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   ........           _BLF     ??__getitem,??__getitem??rA
     32              if (lastitem)
   \   00000068   BC009FE5           LDR      R0,??onkey_1+0x8  ;; lastitem
   \   0000006C   001090E5           LDR      R1,[R0, #+0]
   \   00000070   000051E3           CMP      R1,#+0
   \   00000074   2800000A           BEQ      ??onkey_4
     33              {
     34                if (lastitem->type==T_3SK_LAYOUT)return key;
   \   00000078   180091E5           LDR      R0,[R1, #+24]
   \   0000007C   050050E3           CMP      R0,#+5
   \   00000080   F0FFFF0A           BEQ      ??onkey_3
     35                if (lastitem->style==1)
   \   00000084   102091E5           LDR      R2,[R1, #+16]
   \   00000088   010052E3           CMP      R2,#+1
     36                {
     37                  if (lastitem->type==T_YESNO && key==KEY_RIGHT_SOFT)
   \   0000008C   02005003           CMPEQ    R0,#+2
   \   00000090   0E00001A           BNE      ??onkey_5
   \   00000094   ........           LDR      R0,??DataTable3  ;; KEY_RIGHT_SOFT
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   000054E1           CMP      R4,R0
   \   000000A0   3080BD08           POPEQ    {R4,R5,PC}
     38                  {
     39                    return KEY_RIGHT_SOFT;
   \   000000A4   ........           LDR      R0,??DataTable2  ;; KEY_LEFT_SOFT
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   000054E1           CMP      R4,R0
     40                  }
     41                  if (lastitem->type==T_YESNO && key==KEY_LEFT_SOFT)
     42                  {
     43                    return 0xFF;
   \   000000B0   FF00A003           MOVEQ    R0,#+255
   \   000000B4   3080BD08           POPEQ    {R4,R5,PC}
   \   000000B8   70009FE5           LDR      R0,??onkey_1+0xC  ;; KEY_DEL
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000054E1           CMP      R4,R0
     44                  } 
     45                  if (lastitem->type==T_YESNO && key==KEY_DEL)
     46                  {
     47                    return KEY_ESC;
   \   000000C4   68009F05           LDREQ    R0,??onkey_1+0x10  ;; KEY_ESC
   \   000000C8   00009005           LDREQ    R0,[R0, #+0]
   \   000000CC   3080BD08           POPEQ    {R4,R5,PC}
     48                  }
     49                }
     50                if (lastitem->keys && csofts)
   \                     ??onkey_5:
   \   000000D0   140091E5           LDR      R0,[R1, #+20]
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   3080BD08           POPEQ    {R4,R5,PC}
   \   000000DC   54109FE5           LDR      R1,??onkey_1+0x14  ;; csofts
   \   000000E0   001091E5           LDR      R1,[R1, #+0]
   \   000000E4   000051E3           CMP      R1,#+0
   \   000000E8   0B00000A           BEQ      ??onkey_4
     51                {
     52                  int y=0;
   \   000000EC   0010A0E3           MOV      R1,#+0
     53                  while(y<lastitem->keys->FirstFree)
   \                     ??onkey_6:
   \   000000F0   B220D0E1           LDRH     R2,[R0, #+2]
   \   000000F4   020051E1           CMP      R1,R2
   \   000000F8   070000AA           BGE      ??onkey_4
     54                  {
     55                    KEY *k=(KEY*)lastitem->keys->listdata[y++];
   \   000000FC   042090E5           LDR      R2,[R0, #+4]
   \   00000100   012192E7           LDR      R2,[R2, +R1, LSL #+2]
   \   00000104   011081E2           ADD      R1,R1,#+1
     56                    if (k->oldkey==key)
   \   00000108   003092E5           LDR      R3,[R2, #+0]
   \   0000010C   040053E1           CMP      R3,R4
   \   00000110   F6FFFF1A           BNE      ??onkey_6
     57                    {
     58                      return k->newkey;
   \   00000114   040092E5           LDR      R0,[R2, #+4]
   \   00000118   3080BDE8           POP      {R4,R5,PC}
     59                    }
     60                  }
     61                }
     62              }
     63            }
     64            return 0;
   \                     ??onkey_4:
   \   0000011C   0000A0E3           MOV      R0,#+0
   \   00000120   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??onkey_1:
   \   00000124   ........           DC32     works
   \   00000128   ........           DC32     DB
   \   0000012C   ........           DC32     lastitem
   \   00000130   ........           DC32     KEY_DEL
   \   00000134   ........           DC32     KEY_ESC
   \   00000138   ........           DC32     csofts
     65          };
     66          

   \                                 In segment CODE, align 4, keep-with-next
     67          int NewKey(int key, int r1 , int mode, LPARAM, DISP_OBJ*)
     68          {
   \                     ??NewKey:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     69            if (mode==KBD_SHORT_PRESS)
   \   00000008   A0009FE5           LDR      R0,??NewKey_1    ;; KBD_SHORT_PRESS
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   000052E1           CMP      R2,R0
   \   00000014   2200001A           BNE      ??NewKey_2
     70            {
     71              if (key==KEY_LEFT_SOFT)
   \   00000018   ........           LDR      LR,??DataTable2  ;; KEY_LEFT_SOFT
   \   0000001C   90509FE5           LDR      R5,??NewKey_1+0x4  ;; soft
   \   00000020   00E09EE5           LDR      LR,[LR, #+0]
   \   00000024   000095E5           LDR      R0,[R5, #+0]
   \   00000028   88109FE5           LDR      R1,??NewKey_1+0x8  ;; rect
   \   0000002C   88309FE5           LDR      R3,??NewKey_1+0xC  ;; pressed
   \   00000030   0120A0E3           MOV      R2,#+1
   \   00000034   00C0A0E3           MOV      R12,#+0
   \   00000038   0E0054E1           CMP      R4,LR
   \   0000003C   0300001A           BNE      ??NewKey_3
     72              {
     73                pressed[0]=true;
   \   00000040   0020C3E5           STRB     R2,[R3, #+0]
     74                pressed[1]=false;
   \   00000044   01C0C3E5           STRB     R12,[R3, #+1]
     75                pressed[2]=false;
   \                     ??NewKey_4:
   \   00000048   02C0C3E5           STRB     R12,[R3, #+2]
     76                DispObject_InvalidateRect(soft,&rect);
   \   0000004C   0C0000EA           B        ??NewKey_5
     77                DispObject_SetRefreshTimer(soft,100);
     78              }
     79              else if (key==KEY_ENTER)
   \                     ??NewKey_3:
   \   00000050   68E09FE5           LDR      LR,??NewKey_1+0x10  ;; KEY_ENTER
   \   00000054   00E09EE5           LDR      LR,[LR, #+0]
   \   00000058   0E0054E1           CMP      R4,LR
     80              {
     81                pressed[0]=false;
   \   0000005C   00C0C305           STRBEQ   R12,[R3, #+0]
     82                pressed[1]=true;
   \   00000060   0120C305           STRBEQ   R2,[R3, #+1]
     83                pressed[2]=false;
   \   00000064   F7FFFF0A           BEQ      ??NewKey_4
     84                DispObject_InvalidateRect(soft,&rect);
     85                DispObject_SetRefreshTimer(soft,100);
     86              }
     87              else if (key==KEY_RIGHT_SOFT)
   \   00000068   ........           LDR      LR,??DataTable3  ;; KEY_RIGHT_SOFT
   \   0000006C   00C0C3E5           STRB     R12,[R3, #+0]
   \   00000070   00E09EE5           LDR      LR,[LR, #+0]
   \   00000074   01C0C3E5           STRB     R12,[R3, #+1]
   \   00000078   0E0054E1           CMP      R4,LR
   \   0000007C   0700001A           BNE      ??NewKey_6
     88              {
     89                pressed[0]=false;
     90                pressed[1]=false;
     91                pressed[2]=true;
   \   00000080   0220C3E5           STRB     R2,[R3, #+2]
     92                DispObject_InvalidateRect(soft,&rect);
   \                     ??NewKey_5:
   \   00000084   EF0100EF           SWI      +495
     93                DispObject_SetRefreshTimer(soft,100);
   \   00000088   000095E5           LDR      R0,[R5, #+0]
   \   0000008C   6410A0E3           MOV      R1,#+100
   \   00000090   DD0200EF           SWI      +733
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       ??onkey
   \   0000009C   3080BDE8           POP      {R4,R5,PC}
     94              }
     95              else
     96              {
     97                pressed[0]=false;
     98                pressed[1]=false;
     99                pressed[2]=false;
   \                     ??NewKey_6:
   \   000000A0   02C0C3E5           STRB     R12,[R3, #+2]
    100              }
    101            }
    102          #ifdef mDEBUG
    103            if (key==KEY_POWER)
    104            {
    105              if (mode==KBD_SHORT_PRESS)
    106              {
    107                save();
    108                BOOK*bk=Display_GetTopBook(0);
    109                wchar_t ws[100];
    110                if (strcmp(bk->xbook->name,"CUIDisplayableBook")==0)
    111                {
    112                  TextID_GetWString(bk->xbook->app_session->name,ws,100);
    113                }
    114                else
    115                {
    116                  str2wstr(ws,bk->xbook->name);
    117                }
    118                MessageBox(EMPTY_TEXTID,TextID_CreateIntegerID(lastitem->type),NOIMAGE,1,0,0);
    119                MessageBox(EMPTY_TEXTID,TextID_Create(ws,ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE,1,0,0);
    120                return -1;
    121              }
    122            }
    123          #endif
    124            return (onkey(key));
   \                     ??NewKey_2:
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       ??onkey
   \   000000AC   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??NewKey_1:
   \   000000B0   ........           DC32     KBD_SHORT_PRESS
   \   000000B4   ........           DC32     soft
   \   000000B8   ........           DC32     rect
   \   000000BC   ........           DC32     pressed
   \   000000C0   ........           DC32     KEY_ENTER
    125          };
    126          

   \                                 In segment CODE, align 4, keep-with-next
    127          char *unicode2win1251(char *s, wchar_t *ws, int len)
    128          {
   \                     ??unicode2win1251:
   \   00000000   10002DE9           PUSH     {R4}
    129            char *d=s;
   \   00000004   0030A0E1           MOV      R3,R0
   \   00000008   060000EA           B        ??unicode2win1251_1
    130            int c;
    131            while((c=*ws++)&&((len--)>0))
    132            {
    133              if (c==0x401) c=0xA8;
    134              if (c==0x404) c=0xAA;
    135              if (c==0x407) c=0xAF;
    136              if (c==0x451) c=0xB8;
    137              if (c==0x454) c=0xBA;
    138              if (c==0x457) c=0xBF;
    139              if ((c>=0x410)&&(c<0x450)) c-=0x350;
   \                     ??unicode2win1251_2:
   \   0000000C   410E5CE3           CMP      R12,#+1040
   \   00000010   030000BA           BLT      ??unicode2win1251_3
   \   00000014   450E5CE3           CMP      R12,#+1104
   \   00000018   4F40E0B3           MVNLT    R4,#+79
   \   0000001C   C04FC4B3           BICLT    R4,R4,#0x300
   \   00000020   0CC084B0           ADDLT    R12,R4,R12
    140              *s++=c;
   \                     ??unicode2win1251_3:
   \   00000024   ........           STRB     R12,[R0], #+1
   \                     ??unicode2win1251_1:
   \   00000028   ........           LDRH     R12,[R1], #+2
   \   0000002C   00005CE3           CMP      R12,#+0
   \   00000030   1D00000A           BEQ      ??unicode2win1251_4
   \   00000034   0240A0E1           MOV      R4,R2
   \   00000038   012044E2           SUB      R2,R4,#+1
   \   0000003C   010054E3           CMP      R4,#+1
   \   00000040   190000BA           BLT      ??unicode2win1251_4
   \   00000044   0140A0E3           MOV      R4,#+1
   \   00000048   404E84E3           ORR      R4,R4,#0x400
   \   0000004C   04005CE1           CMP      R12,R4
   \   00000050   A8C0A003           MOVEQ    R12,#+168
   \   00000054   F2FFFF0A           BEQ      ??unicode2win1251_3
   \   00000058   034084E2           ADD      R4,R4,#+3
   \   0000005C   04005CE1           CMP      R12,R4
   \   00000060   AAC0A003           MOVEQ    R12,#+170
   \   00000064   EEFFFF0A           BEQ      ??unicode2win1251_3
   \   00000068   034084E3           ORR      R4,R4,#0x3
   \   0000006C   04005CE1           CMP      R12,R4
   \   00000070   AFC0A003           MOVEQ    R12,#+175
   \   00000074   EAFFFF0A           BEQ      ??unicode2win1251_3
   \   00000078   4A4084E2           ADD      R4,R4,#+74
   \   0000007C   04005CE1           CMP      R12,R4
   \   00000080   B8C0A003           MOVEQ    R12,#+184
   \   00000084   E6FFFF0A           BEQ      ??unicode2win1251_3
   \   00000088   034084E2           ADD      R4,R4,#+3
   \   0000008C   04005CE1           CMP      R12,R4
   \   00000090   BAC0A003           MOVEQ    R12,#+186
   \   00000094   E2FFFF0A           BEQ      ??unicode2win1251_3
   \   00000098   034084E3           ORR      R4,R4,#0x3
   \   0000009C   04005CE1           CMP      R12,R4
   \   000000A0   D9FFFF1A           BNE      ??unicode2win1251_2
   \   000000A4   BFC0A0E3           MOV      R12,#+191
   \   000000A8   DDFFFFEA           B        ??unicode2win1251_3
    141            }
    142            *s=0;
   \                     ??unicode2win1251_4:
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   0010C0E5           STRB     R1,[R0, #+0]
    143            return(d);
   \   000000B4   1000BDE8           POP      {R4}
   \   000000B8   0300A0E1           MOV      R0,R3
   \   000000BC   1EFF2FE1           BX       LR               ;; return
    144          };
    145          
    146          typedef struct
    147          {
    148            char unk[200];
    149          }JUST_BYTEARRAY;
    150          

   \                                 In segment CODE, align 4, keep-with-next
    151          void save()
    152          {
   \                     ??save:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   E1DF4DE2           SUB      SP,SP,#+900
   \   00000008   40DE4DE2           SUB      SP,SP,#+1024
    153            BOOK *bk=Display_GetTopBook(0);
    154            LIST *lst = DispObject_SoftKeys_GetList(Display_GetFocusedDispObject(0),bk, 0);
    155            int file;
    156            FSTAT fst;
    157            char cr=0x0D;
    158            char lf=0x0A;
    159            char idle=';';
    160            if ((file=_fopen(GetDir(MEM_EXTERNAL+DIR_OTHER),L"Softs.txt",FSX_O_RDWR|FSX_O_TRUNC,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
   \   0000000C   58569FE5           LDR      R5,??save_1      ;; `?<Constant "%02x:">`
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1B0300EF           SWI      +795
   \   00000018   0070A0E1           MOV      R7,R0
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   1D0200EF           SWI      +541
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   0710A0E1           MOV      R1,R7
   \   0000002C   180300EF           SWI      +792
   \   00000030   0040A0E1           MOV      R4,R0
   \   00000034   0D10A0E3           MOV      R1,#+13
   \   00000038   0010CDE5           STRB     R1,[SP, #+0]
   \   0000003C   0A10A0E3           MOV      R1,#+10
   \   00000040   0110CDE5           STRB     R1,[SP, #+1]
   \   00000044   3B10A0E3           MOV      R1,#+59
   \   00000048   0210CDE5           STRB     R1,[SP, #+2]
   \   0000004C   0800A0E3           MOV      R0,#+8
   \   00000050   050100EF           SWI      +261
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   02002DE9           PUSH     {R1}
   \   0000005C   603FA0E3           MOV      R3,#+384
   \   00000060   812FA0E3           MOV      R2,#+516
   \   00000064   901085E2           ADD      R1,R5,#+144
   \   00000068   160100EF           SWI      +278
   \   0000006C   0060B0E1           MOVS     R6,R0
   \   00000070   04D08DE2           ADD      SP,SP,#+4
   \   00000074   5500004A           BMI      ??save_2
    161            {
    162              if (fstat(GetDir(MEM_EXTERNAL+DIR_OTHER),L"Softs.txt",&fst)==0)
   \   00000078   0800A0E3           MOV      R0,#+8
   \   0000007C   050100EF           SWI      +261
   \   00000080   DA2F8DE2           ADD      R2,SP,#+872
   \   00000084   402E82E2           ADD      R2,R2,#+1024
   \   00000088   901085E2           ADD      R1,R5,#+144
   \   0000008C   1C0100EF           SWI      +284
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   4D00001A           BNE      ??save_2
    163              {
    164                JUST_BYTEARRAY *xls=(JUST_BYTEARRAY*)bk;//DispObject_SoftKeys_GetParams(Display_GetFocusedDispObject(0));
    165                int x;
    166                for (x=0;x<199;x++)
   \   00000098   0080A0E3           MOV      R8,#+0
   \   0000009C   D39F8FE2           ADR      R9,??save_3      ;; ";"
    167                {
    168                  char hz[100];
    169                  sprintf(hz,"%02x:",xls->unk[x]);
   \                     ??save_4:
   \   000000A0   0720D8E7           LDRB     R2,[R8, +R7]
   \   000000A4   0510A0E1           MOV      R1,R5
   \   000000A8   C10F8DE2           ADD      R0,SP,#+772
   \   000000AC   400E80E2           ADD      R0,R0,#+1024
   \   000000B0   140100EF           SWI      +276
    170                  
    171                  fwrite(file,hz,strlen(hz));
   \   000000B4   C10F8DE2           ADD      R0,SP,#+772
   \   000000B8   400E80E2           ADD      R0,R0,#+1024
   \   000000BC   5A0100EF           SWI      +346
   \   000000C0   0020A0E1           MOV      R2,R0
   \   000000C4   C11F8DE2           ADD      R1,SP,#+772
   \   000000C8   401E81E2           ADD      R1,R1,#+1024
   \   000000CC   0600A0E1           MOV      R0,R6
   \   000000D0   190100EF           SWI      +281
    172                  if ((x+1)>=4)
   \   000000D4   018088E2           ADD      R8,R8,#+1
   \   000000D8   040058E3           CMP      R8,#+4
   \   000000DC   100000BA           BLT      ??save_5
    173                  {
    174                    if ((x+1)%4==0)
   \   000000E0   C800A0E1           ASR      R0,R8,#+1
   \   000000E4   200F88E0           ADD      R0,R8,R0, LSR #+30
   \   000000E8   4001A0E1           ASR      R0,R0,#+2
   \   000000EC   000158E0           SUBS     R0,R8,R0, LSL #+2
   \   000000F0   0B00001A           BNE      ??save_5
    175                    {
    176                      fwrite(file,";",1);
   \   000000F4   0120A0E3           MOV      R2,#+1
   \   000000F8   0910A0E1           MOV      R1,R9
   \   000000FC   0600A0E1           MOV      R0,R6
   \   00000100   190100EF           SWI      +281
    177                      fwrite(file,&cr,1);
   \   00000104   0120A0E3           MOV      R2,#+1
   \   00000108   0D10A0E1           MOV      R1,SP
   \   0000010C   0600A0E1           MOV      R0,R6
   \   00000110   190100EF           SWI      +281
    178                      fwrite(file,&lf,1);
   \   00000114   0120A0E3           MOV      R2,#+1
   \   00000118   01108DE2           ADD      R1,SP,#+1
   \   0000011C   0600A0E1           MOV      R0,R6
   \   00000120   190100EF           SWI      +281
    179                    }
    180                  }
    181                }
   \                     ??save_5:
   \   00000124   C70058E3           CMP      R8,#+199
   \   00000128   DCFFFFBA           BLT      ??save_4
    182                fwrite(file,";",1);
   \   0000012C   0120A0E3           MOV      R2,#+1
   \   00000130   0910A0E1           MOV      R1,R9
   \   00000134   0600A0E1           MOV      R0,R6
   \   00000138   190100EF           SWI      +281
    183                fwrite(file,&cr,1);
   \   0000013C   0120A0E3           MOV      R2,#+1
   \   00000140   0D10A0E1           MOV      R1,SP
   \   00000144   0600A0E1           MOV      R0,R6
   \   00000148   190100EF           SWI      +281
    184                fwrite(file,&lf,1);
   \   0000014C   0120A0E3           MOV      R2,#+1
   \   00000150   01108DE2           ADD      R1,SP,#+1
   \   00000154   0600A0E1           MOV      R0,R6
   \   00000158   190100EF           SWI      +281
    185                for (x=0;x<lst->FirstFree;x++)
   \   0000015C   B200D4E1           LDRH     R0,[R4, #+2]
   \   00000160   0080A0E3           MOV      R8,#+0
   \   00000164   9074E0E3           MVN      R7,#-1879048192
   \   00000168   000050E3           CMP      R0,#+0
   \   0000016C   5400001A           BNE      ??save_6
    186                {
    187                  SOFTKEY * sk = (SOFTKEY*)List_Get(lst,x);
    188                  char pattern[1024];
    189                  
    190                  wchar_t name[128];
    191                  char name2[128];
    192                  if (sk->text!=EMPTY_TEXTID)
    193                  {
    194                    TextID_GetWString(sk->text,name,100);
    195                    unicode2win1251(name2, name, 100);
    196                  }
    197                  else
    198                  {
    199                    strcpy(name2,"Not Defined");
    200                  }
    201                  char name3[128];
    202                  char name4[128];
    203                  char name5[128];
    204                  if (sk->text_mini!=SID_NULL)
    205                  {
    206                    TextID_GetWString(sk->text_mini, name,100);
    207                    unicode2win1251(name3, name, 100);
    208                  }
    209                  else
    210                  {
    211                    strcpy(name3,"Not Defined");
    212                  }
    213                  if (sk->text_disabled!=SID_NULL)
    214                  {
    215                    TextID_GetWString(sk->text_disabled, name,100);
    216                    unicode2win1251(name4, name, 100);
    217                  }
    218                  else
    219                  {
    220                    strcpy(name4,"Not Defined");
    221                  }
    222                  if (sk->text_help!=SID_NULL)
    223                  {
    224                    TextID_GetWString(sk->text_help, name,100);
    225                    unicode2win1251(name5, name, 100);
    226                  }
    227                  else
    228                  {
    229                    strcpy(name5,"Not Defined");
    230                  }
    231                  sprintf(pattern,"%x-%x:%x:%x) %s:%s:%s:%s: %d:%d::%X:0x%X:%X:%X",sk->action,sk->unk, sk->unk2, sk->unk3, name2, name3, name4, name5, sk->enable, sk->visible, sk->parent_action, (int)sk->proc, (int)sk->list, sk->unk4);
    232                  fwrite(file,pattern,strlen(pattern));
    233                  fwrite(file,&idle,1);
    234                  fwrite(file,&cr,1);
    235                  fwrite(file,&lf,1);
    236                }
    237                fwrite(file,&cr,1);
   \                     ??save_7:
   \   00000170   0120A0E3           MOV      R2,#+1
   \   00000174   0D10A0E1           MOV      R1,SP
   \   00000178   0600A0E1           MOV      R0,R6
   \   0000017C   190100EF           SWI      +281
    238                fwrite(file,&lf,1);
   \   00000180   0120A0E3           MOV      R2,#+1
   \   00000184   01108DE2           ADD      R1,SP,#+1
   \   00000188   0600A0E1           MOV      R0,R6
   \   0000018C   190100EF           SWI      +281
    239                fwrite(file,"Visible:",8);
   \   00000190   0820A0E3           MOV      R2,#+8
   \   00000194   441085E2           ADD      R1,R5,#+68
   \   00000198   0600A0E1           MOV      R0,R6
   \   0000019C   190100EF           SWI      +281
    240                
    241                fwrite(file,&cr,1);
   \   000001A0   0120A0E3           MOV      R2,#+1
   \   000001A4   0D10A0E1           MOV      R1,SP
   \   000001A8   0600A0E1           MOV      R0,R6
   \   000001AC   190100EF           SWI      +281
    242                fwrite(file,&lf,1);
   \   000001B0   0120A0E3           MOV      R2,#+1
   \   000001B4   01108DE2           ADD      R1,SP,#+1
   \   000001B8   0600A0E1           MOV      R0,R6
   \   000001BC   190100EF           SWI      +281
    243                for (x=0;x<lst->FirstFree;x++)
   \   000001C0   B200D4E1           LDRH     R0,[R4, #+2]
   \   000001C4   0080A0E3           MOV      R8,#+0
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   CA00001A           BNE      ??save_8
    244                {
    245                  SOFTKEY * sk = (SOFTKEY*)List_Get(lst,x);
    246                  if (sk->visible && sk->action!=ACTION_BACK && isvisible(lst,x) && isInIronPatch(sk->action)!=true && sk->text!=EMPTY_TEXTID && sk->parent_action==0xFFFF)
    247                  {
    248                    char pattern[1024];
    249                    
    250                    wchar_t name[128];
    251                    char name2[128];
    252                    if (sk->text!=EMPTY_TEXTID)
    253                    {
    254                      TextID_GetWString(sk->text,name,100);
    255                      unicode2win1251(name2, name, 100);
    256                    }
    257                    else
    258                    {
    259                      strcpy(name2,"Not Defined");
    260                    }
    261                    char name3[128];
    262                    char name4[128];
    263                    char name5[128];
    264                    if (sk->text_mini!=SID_NULL)
    265                    {
    266                      TextID_GetWString(sk->text_mini, name,100);
    267                      unicode2win1251(name3, name, 100);
    268                    }
    269                    else
    270                    {
    271                      strcpy(name3,"Not Defined");
    272                    }
    273                    if (sk->text_disabled!=SID_NULL)
    274                    {
    275                      TextID_GetWString(sk->text_disabled, name,100);
    276                      unicode2win1251(name4, name, 100);
    277                    }
    278                    else
    279                    {
    280                      strcpy(name4,"Not Defined");
    281                    }
    282                    if (sk->text_help!=SID_NULL)
    283                    {
    284                      TextID_GetWString(sk->text_help, name,100);
    285                      unicode2win1251(name5, name, 100);
    286                    }
    287                    else
    288                    {
    289                      strcpy(name5,"Not Defined");
    290                    }
    291                    sprintf(pattern,"%x-%x-%x) %s:%s:%s:%s: %d:%d::%X:0x%X:%X:%d:%X:%X:%X:%X:%X:%X",sk->action,sk->book,sk->DISP_OBJ1,name2, name3, name4, name5, sk->enable, sk->visible, sk->parent_action, (int)sk->proc, (int)sk->list, sk->unk, sk->unk6[0], sk->unk6[1],sk->unk6[2],sk->unk6[3], sk->unk6[4], sk->unk6[5]);
    292                    fwrite(file,pattern,strlen(pattern));
    293                    fwrite(file,&idle,1);
    294                    fwrite(file,&cr,1);
    295                    fwrite(file,&lf,1);
    296                  }
    297                }
    298              }
    299            }
    300            fclose(file);
   \                     ??save_2:
   \   000001D0   0600A0E1           MOV      R0,R6
   \   000001D4   170100EF           SWI      +279
    301          };
   \   000001D8   E1DF8DE2           ADD      SP,SP,#+900
   \   000001DC   40DE8DE2           ADD      SP,SP,#+1024
   \   000001E0   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??save_9:
   \   000001E4   081085E2           ADD      R1,R5,#+8
   \   000001E8   A10F8DE2           ADD      R0,SP,#+644
   \   000001EC   400E80E2           ADD      R0,R0,#+1024
   \   000001F0   A00100EF           SWI      +416
   \                     ??save_10:
   \   000001F4   B202D9E1           LDRH     R0,[R9, #+34]
   \   000001F8   141085E2           ADD      R1,R5,#+20
   \   000001FC   018088E2           ADD      R8,R8,#+1
   \   00000200   01002DE9           PUSH     {R0}
   \   00000204   240099E5           LDR      R0,[R9, #+36]
   \   00000208   01002DE9           PUSH     {R0}
   \   0000020C   280099E5           LDR      R0,[R9, #+40]
   \   00000210   01002DE9           PUSH     {R0}
   \   00000214   B002D9E1           LDRH     R0,[R9, #+32]
   \   00000218   01002DE9           PUSH     {R0}
   \   0000021C   3900D9E5           LDRB     R0,[R9, #+57]
   \   00000220   01002DE9           PUSH     {R0}
   \   00000224   3800D9E5           LDRB     R0,[R9, #+56]
   \   00000228   01002DE9           PUSH     {R0}
   \   0000022C   A70F8DE2           ADD      R0,SP,#+668
   \   00000230   400E80E2           ADD      R0,R0,#+1024
   \   00000234   01002DE9           PUSH     {R0}
   \   00000238   520E8DE2           ADD      R0,SP,#+1312
   \   0000023C   01002DE9           PUSH     {R0}
   \   00000240   690F8DE2           ADD      R0,SP,#+420
   \   00000244   400E80E2           ADD      R0,R0,#+1024
   \   00000248   01002DE9           PUSH     {R0}
   \   0000024C   8A0F8DE2           ADD      R0,SP,#+552
   \   00000250   400E80E2           ADD      R0,R0,#+1024
   \   00000254   01002DE9           PUSH     {R0}
   \   00000258   BE00D9E1           LDRH     R0,[R9, #+14]
   \   0000025C   01002DE9           PUSH     {R0}
   \   00000260   BC00D9E1           LDRH     R0,[R9, #+12]
   \   00000264   01002DE9           PUSH     {R0}
   \   00000268   B020D9E1           LDRH     R2,[R9, #+0]
   \   0000026C   B230D9E1           LDRH     R3,[R9, #+2]
   \   00000270   34008DE2           ADD      R0,SP,#+52
   \   00000274   140100EF           SWI      +276
   \   00000278   30D08DE2           ADD      SP,SP,#+48
   \   0000027C   04008DE2           ADD      R0,SP,#+4
   \   00000280   5A0100EF           SWI      +346
   \   00000284   0020A0E1           MOV      R2,R0
   \   00000288   04108DE2           ADD      R1,SP,#+4
   \   0000028C   0600A0E1           MOV      R0,R6
   \   00000290   190100EF           SWI      +281
   \   00000294   0120A0E3           MOV      R2,#+1
   \   00000298   02108DE2           ADD      R1,SP,#+2
   \   0000029C   0600A0E1           MOV      R0,R6
   \   000002A0   190100EF           SWI      +281
   \   000002A4   0120A0E3           MOV      R2,#+1
   \   000002A8   0D10A0E1           MOV      R1,SP
   \   000002AC   0600A0E1           MOV      R0,R6
   \   000002B0   190100EF           SWI      +281
   \   000002B4   0120A0E3           MOV      R2,#+1
   \   000002B8   01108DE2           ADD      R1,SP,#+1
   \   000002BC   0600A0E1           MOV      R0,R6
   \   000002C0   190100EF           SWI      +281
   \                     ??save_6:
   \   000002C4   B200D4E1           LDRH     R0,[R4, #+2]
   \   000002C8   000058E1           CMP      R8,R0
   \   000002CC   A7FFFFAA           BGE      ??save_7
   \   000002D0   0810A0E1           MOV      R1,R8
   \   000002D4   0400A0E1           MOV      R0,R4
   \   000002D8   AD0100EF           SWI      +429
   \   000002DC   0090A0E1           MOV      R9,R0
   \   000002E0   100099E5           LDR      R0,[R9, #+16]
   \   000002E4   070050E1           CMP      R0,R7
   \   000002E8   0A00000A           BEQ      ??save_11
   \   000002EC   6420A0E3           MOV      R2,#+100
   \   000002F0   04108DE2           ADD      R1,SP,#+4
   \   000002F4   401E81E2           ADD      R1,R1,#+1024
   \   000002F8   5F0100EF           SWI      +351
   \   000002FC   6420A0E3           MOV      R2,#+100
   \   00000300   04108DE2           ADD      R1,SP,#+4
   \   00000304   401E81E2           ADD      R1,R1,#+1024
   \   00000308   810F8DE2           ADD      R0,SP,#+516
   \   0000030C   400E80E2           ADD      R0,R0,#+1024
   \   00000310   ........           BL       ??unicode2win1251
   \   00000314   030000EA           B        ??save_12
   \                     ??save_11:
   \   00000318   081085E2           ADD      R1,R5,#+8
   \   0000031C   810F8DE2           ADD      R0,SP,#+516
   \   00000320   400E80E2           ADD      R0,R0,#+1024
   \   00000324   A00100EF           SWI      +416
   \                     ??save_12:
   \   00000328   140099E5           LDR      R0,[R9, #+20]
   \   0000032C   070050E1           CMP      R0,R7
   \   00000330   0A00000A           BEQ      ??save_13
   \   00000334   6420A0E3           MOV      R2,#+100
   \   00000338   04108DE2           ADD      R1,SP,#+4
   \   0000033C   401E81E2           ADD      R1,R1,#+1024
   \   00000340   5F0100EF           SWI      +351
   \   00000344   6420A0E3           MOV      R2,#+100
   \   00000348   04108DE2           ADD      R1,SP,#+4
   \   0000034C   401E81E2           ADD      R1,R1,#+1024
   \   00000350   610F8DE2           ADD      R0,SP,#+388
   \   00000354   400E80E2           ADD      R0,R0,#+1024
   \   00000358   ........           BL       ??unicode2win1251
   \   0000035C   030000EA           B        ??save_14
   \                     ??save_13:
   \   00000360   081085E2           ADD      R1,R5,#+8
   \   00000364   610F8DE2           ADD      R0,SP,#+388
   \   00000368   400E80E2           ADD      R0,R0,#+1024
   \   0000036C   A00100EF           SWI      +416
   \                     ??save_14:
   \   00000370   180099E5           LDR      R0,[R9, #+24]
   \   00000374   070050E1           CMP      R0,R7
   \   00000378   0A00000A           BEQ      ??save_15
   \   0000037C   6420A0E3           MOV      R2,#+100
   \   00000380   04108DE2           ADD      R1,SP,#+4
   \   00000384   401E81E2           ADD      R1,R1,#+1024
   \   00000388   5F0100EF           SWI      +351
   \   0000038C   6420A0E3           MOV      R2,#+100
   \   00000390   04108DE2           ADD      R1,SP,#+4
   \   00000394   401E81E2           ADD      R1,R1,#+1024
   \   00000398   410F8DE2           ADD      R0,SP,#+260
   \   0000039C   400E80E2           ADD      R0,R0,#+1024
   \   000003A0   ........           BL       ??unicode2win1251
   \   000003A4   030000EA           B        ??save_16
   \                     ??save_15:
   \   000003A8   081085E2           ADD      R1,R5,#+8
   \   000003AC   410F8DE2           ADD      R0,SP,#+260
   \   000003B0   400E80E2           ADD      R0,R0,#+1024
   \   000003B4   A00100EF           SWI      +416
   \                     ??save_16:
   \   000003B8   1C0099E5           LDR      R0,[R9, #+28]
   \   000003BC   070050E1           CMP      R0,R7
   \   000003C0   87FFFF0A           BEQ      ??save_9
   \   000003C4   6420A0E3           MOV      R2,#+100
   \   000003C8   04108DE2           ADD      R1,SP,#+4
   \   000003CC   401E81E2           ADD      R1,R1,#+1024
   \   000003D0   5F0100EF           SWI      +351
   \   000003D4   6420A0E3           MOV      R2,#+100
   \   000003D8   04108DE2           ADD      R1,SP,#+4
   \   000003DC   401E81E2           ADD      R1,R1,#+1024
   \   000003E0   A10F8DE2           ADD      R0,SP,#+644
   \   000003E4   400E80E2           ADD      R0,R0,#+1024
   \   000003E8   ........           BL       ??unicode2win1251
   \   000003EC   80FFFFEA           B        ??save_10
   \                     ??save_3:
   \   000003F0   3B000000           DC8      ";",+0,+0
   \                     ??save_17:
   \   000003F4   081085E2           ADD      R1,R5,#+8
   \   000003F8   410F8DE2           ADD      R0,SP,#+260
   \   000003FC   400E80E2           ADD      R0,R0,#+1024
   \   00000400   A00100EF           SWI      +416
   \                     ??save_18:
   \   00000404   3F00D9E5           LDRB     R0,[R9, #+63]
   \   00000408   501085E2           ADD      R1,R5,#+80
   \   0000040C   01002DE9           PUSH     {R0}
   \   00000410   3E00D9E5           LDRB     R0,[R9, #+62]
   \   00000414   01002DE9           PUSH     {R0}
   \   00000418   3D00D9E5           LDRB     R0,[R9, #+61]
   \   0000041C   01002DE9           PUSH     {R0}
   \   00000420   3C00D9E5           LDRB     R0,[R9, #+60]
   \   00000424   01002DE9           PUSH     {R0}
   \   00000428   3B00D9E5           LDRB     R0,[R9, #+59]
   \   0000042C   01002DE9           PUSH     {R0}
   \   00000430   3A00D9E5           LDRB     R0,[R9, #+58]
   \   00000434   01002DE9           PUSH     {R0}
   \   00000438   B200D9E1           LDRH     R0,[R9, #+2]
   \   0000043C   01002DE9           PUSH     {R0}
   \   00000440   240099E5           LDR      R0,[R9, #+36]
   \   00000444   01002DE9           PUSH     {R0}
   \   00000448   280099E5           LDR      R0,[R9, #+40]
   \   0000044C   01002DE9           PUSH     {R0}
   \   00000450   B002D9E1           LDRH     R0,[R9, #+32]
   \   00000454   01002DE9           PUSH     {R0}
   \   00000458   3900D9E5           LDRB     R0,[R9, #+57]
   \   0000045C   01002DE9           PUSH     {R0}
   \   00000460   3800D9E5           LDRB     R0,[R9, #+56]
   \   00000464   01002DE9           PUSH     {R0}
   \   00000468   4D0F8DE2           ADD      R0,SP,#+308
   \   0000046C   400E80E2           ADD      R0,R0,#+1024
   \   00000470   01002DE9           PUSH     {R0}
   \   00000474   AE0F8DE2           ADD      R0,SP,#+696
   \   00000478   400E80E2           ADD      R0,R0,#+1024
   \   0000047C   01002DE9           PUSH     {R0}
   \   00000480   8F0F8DE2           ADD      R0,SP,#+572
   \   00000484   400E80E2           ADD      R0,R0,#+1024
   \   00000488   01002DE9           PUSH     {R0}
   \   0000048C   5C0E8DE2           ADD      R0,SP,#+1472
   \   00000490   01002DE9           PUSH     {R0}
   \   00000494   080099E5           LDR      R0,[R9, #+8]
   \   00000498   01002DE9           PUSH     {R0}
   \   0000049C   B020D9E1           LDRH     R2,[R9, #+0]
   \   000004A0   043099E5           LDR      R3,[R9, #+4]
   \   000004A4   48008DE2           ADD      R0,SP,#+72
   \   000004A8   140100EF           SWI      +276
   \   000004AC   44D08DE2           ADD      SP,SP,#+68
   \   000004B0   04008DE2           ADD      R0,SP,#+4
   \   000004B4   5A0100EF           SWI      +346
   \   000004B8   0020A0E1           MOV      R2,R0
   \   000004BC   04108DE2           ADD      R1,SP,#+4
   \   000004C0   0600A0E1           MOV      R0,R6
   \   000004C4   190100EF           SWI      +281
   \   000004C8   0120A0E3           MOV      R2,#+1
   \   000004CC   02108DE2           ADD      R1,SP,#+2
   \   000004D0   0600A0E1           MOV      R0,R6
   \   000004D4   190100EF           SWI      +281
   \   000004D8   0120A0E3           MOV      R2,#+1
   \   000004DC   0D10A0E1           MOV      R1,SP
   \   000004E0   0600A0E1           MOV      R0,R6
   \   000004E4   190100EF           SWI      +281
   \   000004E8   0120A0E3           MOV      R2,#+1
   \   000004EC   01108DE2           ADD      R1,SP,#+1
   \   000004F0   0600A0E1           MOV      R0,R6
   \   000004F4   190100EF           SWI      +281
   \                     ??save_19:
   \   000004F8   018088E2           ADD      R8,R8,#+1
   \                     ??save_8:
   \   000004FC   B200D4E1           LDRH     R0,[R4, #+2]
   \   00000500   000058E1           CMP      R8,R0
   \   00000504   31FFFFAA           BGE      ??save_2
   \   00000508   0810A0E1           MOV      R1,R8
   \   0000050C   0400A0E1           MOV      R0,R4
   \   00000510   AD0100EF           SWI      +429
   \   00000514   0090A0E1           MOV      R9,R0
   \   00000518   3900D9E5           LDRB     R0,[R9, #+57]
   \   0000051C   000050E3           CMP      R0,#+0
   \   00000520   F4FFFF0A           BEQ      ??save_19
   \   00000524   B000D9E1           LDRH     R0,[R9, #+0]
   \   00000528   40119FE5           LDR      R1,??save_1+0x4  ;; ACTION_BACK
   \   0000052C   001091E5           LDR      R1,[R1, #+0]
   \   00000530   010050E1           CMP      R0,R1
   \   00000534   EFFFFF0A           BEQ      ??save_19
   \   00000538   0810A0E1           MOV      R1,R8
   \   0000053C   0400A0E1           MOV      R0,R4
   \   00000540   ........           _BLF     ??isvisible,??isvisible??rA
   \   00000544   000050E3           CMP      R0,#+0
   \   00000548   EAFFFF0A           BEQ      ??save_19
   \   0000054C   B000D9E1           LDRH     R0,[R9, #+0]
   \   00000550   ........           _BLF     ??isInIronPatch,??isInIronPatch??rA
   \   00000554   000050E3           CMP      R0,#+0
   \   00000558   E6FFFF1A           BNE      ??save_19
   \   0000055C   100099E5           LDR      R0,[R9, #+16]
   \   00000560   070050E1           CMP      R0,R7
   \   00000564   E3FFFF0A           BEQ      ??save_19
   \   00000568   B012D9E1           LDRH     R1,[R9, #+32]
   \   0000056C   FF20A0E3           MOV      R2,#+255
   \   00000570   FF2C82E3           ORR      R2,R2,#0xFF00
   \   00000574   020051E1           CMP      R1,R2
   \   00000578   DEFFFF1A           BNE      ??save_19
   \   0000057C   6420A0E3           MOV      R2,#+100
   \   00000580   04108DE2           ADD      R1,SP,#+4
   \   00000584   401E81E2           ADD      R1,R1,#+1024
   \   00000588   5F0100EF           SWI      +351
   \   0000058C   6420A0E3           MOV      R2,#+100
   \   00000590   04108DE2           ADD      R1,SP,#+4
   \   00000594   401E81E2           ADD      R1,R1,#+1024
   \   00000598   610F8DE2           ADD      R0,SP,#+388
   \   0000059C   400E80E2           ADD      R0,R0,#+1024
   \   000005A0   ........           BL       ??unicode2win1251
   \   000005A4   140099E5           LDR      R0,[R9, #+20]
   \   000005A8   070050E1           CMP      R0,R7
   \   000005AC   0A00000A           BEQ      ??save_20
   \   000005B0   6420A0E3           MOV      R2,#+100
   \   000005B4   04108DE2           ADD      R1,SP,#+4
   \   000005B8   401E81E2           ADD      R1,R1,#+1024
   \   000005BC   5F0100EF           SWI      +351
   \   000005C0   6420A0E3           MOV      R2,#+100
   \   000005C4   04108DE2           ADD      R1,SP,#+4
   \   000005C8   401E81E2           ADD      R1,R1,#+1024
   \   000005CC   810F8DE2           ADD      R0,SP,#+516
   \   000005D0   400E80E2           ADD      R0,R0,#+1024
   \   000005D4   ........           BL       ??unicode2win1251
   \   000005D8   030000EA           B        ??save_21
   \                     ??save_20:
   \   000005DC   081085E2           ADD      R1,R5,#+8
   \   000005E0   810F8DE2           ADD      R0,SP,#+516
   \   000005E4   400E80E2           ADD      R0,R0,#+1024
   \   000005E8   A00100EF           SWI      +416
   \                     ??save_21:
   \   000005EC   180099E5           LDR      R0,[R9, #+24]
   \   000005F0   070050E1           CMP      R0,R7
   \   000005F4   0A00000A           BEQ      ??save_22
   \   000005F8   6420A0E3           MOV      R2,#+100
   \   000005FC   04108DE2           ADD      R1,SP,#+4
   \   00000600   401E81E2           ADD      R1,R1,#+1024
   \   00000604   5F0100EF           SWI      +351
   \   00000608   6420A0E3           MOV      R2,#+100
   \   0000060C   04108DE2           ADD      R1,SP,#+4
   \   00000610   401E81E2           ADD      R1,R1,#+1024
   \   00000614   A10F8DE2           ADD      R0,SP,#+644
   \   00000618   400E80E2           ADD      R0,R0,#+1024
   \   0000061C   ........           BL       ??unicode2win1251
   \   00000620   030000EA           B        ??save_23
   \                     ??save_22:
   \   00000624   081085E2           ADD      R1,R5,#+8
   \   00000628   A10F8DE2           ADD      R0,SP,#+644
   \   0000062C   400E80E2           ADD      R0,R0,#+1024
   \   00000630   A00100EF           SWI      +416
   \                     ??save_23:
   \   00000634   1C0099E5           LDR      R0,[R9, #+28]
   \   00000638   070050E1           CMP      R0,R7
   \   0000063C   6CFFFF0A           BEQ      ??save_17
   \   00000640   6420A0E3           MOV      R2,#+100
   \   00000644   04108DE2           ADD      R1,SP,#+4
   \   00000648   401E81E2           ADD      R1,R1,#+1024
   \   0000064C   5F0100EF           SWI      +351
   \   00000650   6420A0E3           MOV      R2,#+100
   \   00000654   04108DE2           ADD      R1,SP,#+4
   \   00000658   401E81E2           ADD      R1,R1,#+1024
   \   0000065C   410F8DE2           ADD      R0,SP,#+260
   \   00000660   400E80E2           ADD      R0,R0,#+1024
   \   00000664   ........           BL       ??unicode2win1251
   \   00000668   65FFFFEA           B        ??save_18
   \                     ??save_1:
   \   0000066C   ........           DC32     `?<Constant "%02x:">`
   \   00000670   ........           DC32     ACTION_BACK

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     KEY_LEFT_SOFT

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     KEY_RIGHT_SOFT

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%02x:">`:
   \   00000000   253032783A00       DC8 "%02x:"
   \   00000006   0000               DC8 0, 0
   \   00000008   4E6F74204465       DC8 "Not Defined"
   \              66696E656400
   \   00000014   25782D25783A       DC8 "%x-%x:%x:%x) %s:%s:%s:%s: %d:%d::%X:0x%X:%X:%X"
   \              25783A257829
   \              2025733A2573
   \              3A25733A2573
   \              3A2025643A25
   \              643A3A25583A
   \              307825583A25
   \              583A255800  
   \   00000043   00                 DC8 0
   \   00000044   56697369626C       DC8 "Visible:"
   \              653A00      
   \   0000004D   000000             DC8 0, 0, 0
   \   00000050   25782D25782D       DC8 25H, 78H, 2DH, 25H, 78H, 2DH, 25H, 78H
   \              2578        
   \   00000058   292025733A25       DC8 29H, 20H, 25H, 73H, 3AH, 25H, 73H, 3AH
   \              733A        
   \   00000060   25733A25733A       DC8 25H, 73H, 3AH, 25H, 73H, 3AH, 20H, 25H
   \              2025        
   \   00000068   643A25643A3A       DC8 64H, 3AH, 25H, 64H, 3AH, 3AH, 25H, 58H
   \              2558        
   \   00000070   3A307825583A       DC8 3AH, 30H, 78H, 25H, 58H, 3AH, 25H, 58H
   \              2558        
   \   00000078   3A25643A2558       DC8 3AH, 25H, 64H, 3AH, 25H, 58H, 3AH, 25H
   \              3A25        
   \   00000080   583A25583A25       DC8 58H, 3AH, 25H, 58H, 3AH, 25H, 58H, 3AH
   \              583A        
   \   00000088   25583A255800       DC8 25H, 58H, 3AH, 25H, 58H, 0
   \   0000008E   0000               DC8 0, 0
   \   00000090   53006F006600       DC8 53H, 0, 6FH, 0, 66H, 0, 74H, 0
   \              7400        
   \   00000098   73002E007400       DC8 73H, 0, 2EH, 0, 74H, 0, 78H, 0
   \              7800        
   \   000000A0   74000000           DC8 74H, 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3B00               DC8 ";"
    302          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     NewKey(int, int, int, LPARAM, DISP_OBJ *)
                                       12
     onkey(int)                        12
     save()                          2020
     unicode2win1251(char *, wchar_t *, int)
                                        4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     pressed                           3
     onkey(int)                      316
     NewKey(int, int, int, LPARAM, DISP_OBJ *)
                                     196
     unicode2win1251(char *, wchar_t *, int)
                                     192
     save()                         1652
     ??DataTable2                      4
     ??DataTable3                      4
     ?<Constant "%02x:">             164
     ?<Constant ";">                   2
      Others                          76

 
 2 428 bytes in segment CODE
   166 bytes in segment DATA_C
     3 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
 2 364 bytes of CODE  memory (+ 76 bytes shared)
   166 bytes of CONST memory
     3 bytes of DATA  memory

Errors: none
Warnings: none
