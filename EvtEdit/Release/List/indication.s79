//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:55:43 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\indic /
//                       ation.cpp                                           /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\indic /
//                       ation.cpp -D NDEBUG -D OLDFUNCTIONS -lC             /
//                       Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Relea /
//                       se\List\ -lA Z:\home\perk11\www\perk11.info\svn\SE\ /
//                       EvtEdit\Release\List\ -o                            /
//                       Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Relea /
//                       se\Obj\ -s9 --cpu_mode arm --endian little --cpu    /
//                       ARM926EJ-S --stack_align 4 --interwork -e           /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h -I Z:\home\perk11\IAR2\arm\INC\                /
//                       --inline_threshold=2                                /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Relea /
//                       se\List\indication.s79                              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME indication

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??CreateIndicList
        FUNCTION ??CreateIndicList,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??CreateIndicList??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable3 EQU 0
??DataTable5 EQU 0
        FUNCTION ??IndicPage_OnEnter,0603H
        LOCFRAME CSTACK, 36, STACK
        FUNCTION ??IndicPage_OnExit,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC ??Indic_OnSelect
        FUNCTION ??Indic_OnSelect,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??Indic_OnSelect??rT
        PUBLIC ??Indic_onLBMessage
        FUNCTION ??Indic_onLBMessage,0603H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??Indic_onLBMessage??rT
        PUBLIC ??Switch_SetIndfile
        FUNCTION ??Switch_SetIndfile,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??Switch_SetIndfile??rT
        PUBLIC ??Switch_curstat
        FUNCTION ??Switch_curstat,0603H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??Switch_curstat??rT
        MULTWEAK ??kill_switchlst??rA
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new[]??rA`
        PUBLIC ??set_param
        FUNCTION ??set_param,0203H
        MULTWEAK ??set_param??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC bk_indic
        PUBLIC indic_last
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        




??CreateIndicList??rT SYMBOL "??rT", ??CreateIndicList

??Indic_OnSelect??rT SYMBOL "??rT", ??Indic_OnSelect

??Indic_onLBMessage??rT SYMBOL "??rT", ??Indic_onLBMessage

??Switch_SetIndfile??rT SYMBOL "??rT", ??Switch_SetIndfile

??Switch_curstat??rT SYMBOL "??rT", ??Switch_curstat
??kill_switchlst??rA SYMBOL "??rA", ??kill_switchlst
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

??set_param??rT     SYMBOL "??rT", ??set_param

        EXTERN ??Switch_OnBack
        FUNCTION ??Switch_OnBack,0602H
        EXTERN ??isEvtEditBook
        FUNCTION ??isEvtEditBook,0602H
        EXTERN ??kill_switchlst
        FUNCTION ??kill_switchlst,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN ACTION_BACK
        EXTERN ACTION_SELECT1
        EXTERN PREVIOUS_EVENT
        EXTERN SelectFile_page
        EXTERN lng

// Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\indication.cpp
//    1 #include "..\deleaker\mem2.h"
//    2 #include "..\include\Lib_Clara.h" 
//    3 #include "..\include\Dir.h" 
//    4 #include "header\structs.h"
//    5 #include "header\pages.h"
//    6 #include "header\externals.h"
//    7 #include "header\lng.h"
//    8 
//    9 #define MUSIC 1
//   10 
//   11 extern const PAGE_DESC bk_indic;
//   12 extern const PAGE_DESC bk_Switch;
//   13 extern const PAGE_DESC bk_main;
//   14 extern const PAGE_DESC bk_indic;
//   15 
//   16 void kill_switchlst(MyBOOK *mbk);
//   17 int isEvtEditBook(BOOK *);
//   18 int Switch_onLBMessage(GUI_MESSAGE * msg);
//   19 void Switch_OnBack(BOOK * bk, GUI* );
//   20 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   21 int indic_last=0;
indic_last:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??set_param??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??set_param
//   22 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??set_param
        ARM
//   23 int set_param(int par, int item)
//   24 {
//   25   int x;
//   26   int f=0xF;
??set_param:
        MOV      R2,#+15
//   27   for (x=0;x<item;x++)
        MOV      R3,#+0
        CMP      R1,#+1
        BGE      ??set_param_1
        B        ??set_param_2
//   28   {
//   29     f=f*0x10;
??set_param_3:
        LSL      R2,R2,#+4
//   30   }
        ADD      R3,R3,#+1
??set_param_1:
        CMP      R3,R1
        BLT      ??set_param_3
//   31   return par^f;
??set_param_2:
        EOR      R0,R2,R0
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//   32 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??Indic_onLBMessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??Indic_onLBMessage
//   33 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??Indic_onLBMessage
        ARM
//   34 int Indic_onLBMessage(GUI_MESSAGE * msg)
//   35 {
??Indic_onLBMessage:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R4,R0
//   36   switch( GUIonMessage_GetMsg(msg) )
        SWI      +884
        CMP      R0,#+1
        BNE      ??Indic_onLBMessage_1
//   37   {
//   38   case 1:
//   39     MyBOOK *mbk=(MyBOOK*)FindBook(isEvtEditBook);
        LDR      R0,??Indic_onLBMessage_2  ;; ??isEvtEditBook
//   40     int item=GUIonMessage_GetCreatedItemIndex(msg);
//   41     wchar_t* str=(wchar_t *)List_Get(mbk->switch_lst,item);
//   42     GUIonMessage_SetMenuItemText(msg,TextID_Create(str,ENC_UCS2,TEXTID_ANY_LEN));
//   43     if (item==0)
        LDR      R7,??DataTable2  ;; 0x55555555
        SWI      +304
        MOV      R5,R0
        MOV      R0,R4
        SWI      +311
        MOV      R6,R0
        LDR      R0,[R5, #+180]
        MOV      R1,R6
        SWI      +429
        MOV      R8,#+255
        ORR      R8,R8,#0xFF00
        MOV      R2,R8
        MOV      R1,#+0
        SWI      +349
        MOV      R1,R0
        MOV      R0,R4
        SWI      +312
        LDR      R1,??DataTable6  ;; lng
        CMP      R6,#+0
        BNE      ??Indic_onLBMessage_3
//   44     {
//   45       if (mbk->selev)
        LDR      R0,[R1, #+124]
        LDR      R3,[R1, #+128]
        LDR      R1,[R5, #+28]
        CMP      R1,#+0
        BEQ      ??Indic_onLBMessage_4
//   46         GUIonMessage_SetMenuItemSecondLineText(msg,mbk->selev->rem==0x55555555 ? TextID_Create(lng[ON],ENC_UCS2,TEXTID_ANY_LEN) : TextID_Create(lng[OFF],ENC_UCS2,TEXTID_ANY_LEN));
        LDR      R1,[R1, #+64]
??Indic_onLBMessage_5:
        MOV      R2,R8
        CMP      R1,R7
        MOV      R1,#+0
        MOVEQ    R0,R3
        SWI      +349
        MOV      R1,R0
        MOV      R0,R4
        SWI      +313
        LDR      R0,[R5, #+28]
        CMP      R0,#+0
        B        ??Indic_onLBMessage_6
//   47       else
//   48         GUIonMessage_SetMenuItemSecondLineText(msg,mbk->rem_types==0x55555555 ? TextID_Create(lng[ON],ENC_UCS2,TEXTID_ANY_LEN) : TextID_Create(lng[OFF],ENC_UCS2,TEXTID_ANY_LEN));
??Indic_onLBMessage_4:
        LDR      R1,[R5, #+188]
        B        ??Indic_onLBMessage_5
//   49     }
//   50     else
//   51     {
//   52       if (mbk->selev)
??Indic_onLBMessage_3:
        LDR      R3,[R1, #+128]
        SUB      R0,R6,#+1
        LSL      R2,R0,#+2
        LDR      R0,[R1, #+124]
        LDR      R1,[R5, #+28]
        CMP      R1,#+0
        BEQ      ??Indic_onLBMessage_7
//   53         GUIonMessage_SetMenuItemSecondLineText(msg,((mbk->selev->rem>>(4*(item-1)))&0xF) ? TextID_Create(lng[ON],ENC_UCS2,TEXTID_ANY_LEN) : TextID_Create(lng[OFF],ENC_UCS2,TEXTID_ANY_LEN));
        LDR      R1,[R1, #+64]
        B        ??Indic_onLBMessage_8
//   54       else
//   55         GUIonMessage_SetMenuItemSecondLineText(msg,((mbk->rem_types>>(4*(item-1)))&0xF) ? TextID_Create(lng[ON],ENC_UCS2,TEXTID_ANY_LEN) : TextID_Create(lng[OFF],ENC_UCS2,TEXTID_ANY_LEN));
??Indic_onLBMessage_7:
        LDR      R1,[R5, #+188]
??Indic_onLBMessage_8:
        ASR      R1,R1,R2
        TST      R1,#0xF
        MOV      R2,R8
        MOV      R1,#+0
        MOVNE    R0,R3
        SWI      +349
        MOV      R1,R0
        MOV      R0,R4
        SWI      +313
//   56     }
//   57     if (item==0 && !mbk->selev)
//   58       GUIonMessage_SetItemDisabled (msg,1);
//   59     if (item>0)
        CMP      R6,#+1
        BLT      ??Indic_onLBMessage_1
//   60     {
//   61       if (mbk->selev && mbk->selev->rem==0x55555555)
        LDR      R0,[R5, #+28]
        CMP      R0,#+0
        BEQ      ??Indic_onLBMessage_9
        LDR      R0,[R0, #+64]
        B        ??Indic_onLBMessage_10
//   62         GUIonMessage_SetItemDisabled (msg,1);
//   63       else if (!mbk->selev && mbk->rem_types==0x55555555)
??Indic_onLBMessage_9:
        LDR      R0,[R5, #+188]
??Indic_onLBMessage_10:
        CMP      R0,R7
??Indic_onLBMessage_6:
        BNE      ??Indic_onLBMessage_1
//   64         GUIonMessage_SetItemDisabled (msg,1);
        MOV      R1,#+1
        MOV      R0,R4
        SWI      +642
//   65     }
//   66     break;
//   67   }
//   68   return(1);
??Indic_onLBMessage_1:
        MOV      R0,#+1
        POP      {R4-R8,PC}       ;; return
        DATA
??Indic_onLBMessage_2:
        DC32     ??isEvtEditBook
        CFI EndBlock cfiBlock3
//   69 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??Indic_OnSelect??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??Indic_OnSelect

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??Indic_OnSelect
        ARM
//   70 void Indic_OnSelect(BOOK *bk, GUI* )
//   71 {
??Indic_OnSelect:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//   72   MyBOOK *mbk=(MyBOOK*)bk;
//   73   int item=ListMenu_GetSelectedItem(mbk->ind);
        LDR      R0,[R4, #+112]
        SWI      +318
//   74   if (mbk->selev)
        LDR      R2,[R4, #+28]
        MOV      R5,R0
        LDR      R0,??DataTable2  ;; 0x55555555
        MOV      R1,#+0
        CMP      R2,#+0
        BEQ      ??Indic_OnSelect_1
//   75   {
//   76     if (item==0)
        CMP      R5,#+0
        BNE      ??Indic_OnSelect_2
//   77     {
//   78       if (mbk->selev->rem!=0x55555555)
        LDR      R2,[R2, #+64]
        CMP      R2,R0
        BEQ      ??Indic_OnSelect_3
//   79         mbk->selev->rem=0x55555555;
??Indic_OnSelect_4:
        LDR      R1,[R4, #+28]
        STR      R0,[R1, #+64]
        B        ??Indic_OnSelect_5
//   80       else
//   81         mbk->selev->rem=0;
??Indic_OnSelect_3:
        LDR      R0,[R4, #+28]
        STR      R1,[R0, #+64]
        B        ??Indic_OnSelect_5
//   82     }
//   83     else
//   84     {
//   85       int t=set_param(mbk->selev->rem, item-1);
//   86       mbk->selev->rem=t;
??Indic_OnSelect_2:
        LDR      R0,[R2, #+64]
        SUB      R1,R5,#+1
        BL       ??set_param
        B        ??Indic_OnSelect_4
//   87     }
//   88   }
//   89   else
//   90   {
//   91     if (item==0)
??Indic_OnSelect_1:
        CMP      R5,#+0
        BNE      ??Indic_OnSelect_6
//   92     {
//   93       if (mbk->rem_types!=0x55555555)
        LDR      R2,[R4, #+188]
        CMP      R2,R0
        BNE      ??Indic_OnSelect_7
//   94         mbk->rem_types=0x55555555;
//   95       else
//   96         mbk->rem_types=0;
        STR      R1,[R4, #+188]
        B        ??Indic_OnSelect_5
//   97     }
//   98     else
//   99     {
//  100       int t=set_param(mbk->rem_types, item-1);
//  101       mbk->rem_types=t;
??Indic_OnSelect_6:
        LDR      R0,[R4, #+188]
        SUB      R1,R5,#+1
        BL       ??set_param
??Indic_OnSelect_7:
        STR      R0,[R4, #+188]
//  102     }
//  103   }
//  104   
//  105   indic_last=item;
??Indic_OnSelect_5:
        LDR      R0,??DataTable4  ;; indic_last
        STR      R5,[R0, #+0]
//  106   BookObj_ReturnPage(bk, PREVIOUS_EVENT);
        LDR      R0,??Indic_OnSelect_8  ;; PREVIOUS_EVENT
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        SWI      +302
//  107   BookObj_CallPage(bk,&bk_indic);
        LDR      R1,??Indic_OnSelect_8+0x4  ;; bk_indic
        MOV      R0,R4
        SWI      +696
//  108 };
        POP      {R4,R5,PC}       ;; return
        DATA
??Indic_OnSelect_8:
        DC32     PREVIOUS_EVENT
        DC32     bk_indic
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     0x55555555

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??Switch_SetIndfile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??Switch_SetIndfile
//  109 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??Switch_SetIndfile
        ARM
//  110 void Switch_SetIndfile(BOOK *bk, GUI* )
//  111 {
??Switch_SetIndfile:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  112   MyBOOK *mbk=(MyBOOK*)bk;
//  113   mbk->selectfiletype=2;
        MOV      R1,#+2
        STR      R1,[R0, #+128]
//  114   mbk->fType=MUSIC;
        MOV      R1,#+1
        STR      R1,[R0, #+124]
//  115   mbk->dir1=DIR_AUDIO+MEM_INTERNAL;
        STR      R1,[R0, #+116]
//  116   mbk->dir2=DIR_AUDIO+MEM_EXTERNAL;
        MOV      R1,#+0
        STR      R1,[R0, #+120]
//  117   BookObj_CallPage(bk,&SelectFile_page);
        LDR      R1,??Switch_SetIndfile_1  ;; SelectFile_page
        SWI      +696
//  118 };
        POP      {PC}             ;; return
        DATA
??Switch_SetIndfile_1:
        DC32     SelectFile_page
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??Switch_curstat??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??Switch_curstat
//  119 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??Switch_curstat
        ARM
//  120 void Switch_curstat(BOOK *bk, GUI* )
//  121 {
??Switch_curstat:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
//  122   MyBOOK *mbk=(MyBOOK*)bk;
//  123   if (mbk->indpath && mbk->indname)
        MOV      R4,#+255
        MOV      R5,R0
        LDR      R0,[R5, #+192]
        ORR      R4,R4,#0xFF00
        CMP      R0,#+0
        LDRNE    R0,[R5, #+196]
        CMPNE    R0,#+0
        BEQ      ??Switch_curstat_1
//  124   {
//  125     wchar_t *str=new wchar_t[wstrlen(mbk->indpath)+1+wstrlen(mbk->indname)+1];
        LDR      R0,[R5, #+192]
        SWI      +343
        MOV      R6,R0
        LDR      R0,[R5, #+196]
        SWI      +343
        ADD      R0,R0,R6
        ADD      R0,R0,#+2
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
//  126     wstrcpy(str,mbk->indpath);
        LDR      R1,[R5, #+192]
        MOV      R6,R0
        SWI      +338
//  127     wstrcat(str,L"/");
        ADR      R1,??Switch_curstat_2  ;; 0x2F, 0x00, 0x00, 0x00
        MOV      R0,R6
        SWI      +340
//  128     wstrcat(str,mbk->indname);
        LDR      R1,[R5, #+196]
        MOV      R0,R6
        SWI      +340
//  129     MessageBox(EMPTY_TEXTID,TextID_Create(str,ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE,1,0,0);
        MOV      R2,R4
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +349
        MOV      R1,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+20
        PUSH     {R0}
        CFI CFA R13+24
        MOV      R3,#+1
        MOV      R2,R4
        MVN      R0,#-1879048192
        SWI      +599
//  130     delete(str);
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
        ADD      SP,SP,#+8
        CFI CFA R13+16
        POP      {R4-R6,PC}
//  131   }
//  132   else
//  133     MessageBox(EMPTY_TEXTID,TextID_Create(lng[NOTSETTED],ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE,1,0,0);
??Switch_curstat_1:
        LDR      R0,??Switch_curstat_2+0x4  ;; lng + 272
        MOV      R2,R4
        LDR      R0,[R0, #+0]
        MOV      R1,#+0
        SWI      +349
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+20
        PUSH     {R1}
        CFI CFA R13+24
        MOV      R3,#+1
        MOV      R2,R4
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
        ADD      SP,SP,#+8
        CFI CFA R13+16
//  134 };
        POP      {R4-R6,PC}       ;; return
        DATA
??Switch_curstat_2:
        DC8      0x2F, 0x00, 0x00, 0x00
        DC32     lng + 272
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateIndicList??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??CreateIndicList
//  135 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??CreateIndicList
        ARM
//  136 GUI_LIST * CreateIndicList(BOOK * book, int cnt)
//  137 {
??CreateIndicList:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R5,R0
        MOV      R6,R1
//  138   GUI_LIST * lo=0;
//  139   if (lo=CreateListMenu(book,0))
        MOV      R1,#+0
        SWI      +448
        MOVS     R4,R0
        BEQ      ??CreateIndicList_1
//  140   {
//  141     ListMenu_SetItemCount(lo, cnt);
        MOV      R1,R6
        SWI      +449
//  142     ListMenu_SetCursorToItem(lo, indic_last);
        LDR      R0,??DataTable4  ;; indic_last
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        SWI      +309
//  143     ListMenu_SetOnMessage(lo,Indic_onLBMessage);
        LDR      R1,??CreateIndicList_2  ;; ??Indic_onLBMessage
        MOV      R0,R4
        SWI      +372
//  144     ListMenu_SetItemStyle(lo,3);
        MOV      R1,#+3
        MOV      R0,R4
        SWI      +319
//  145     GUIObject_SoftKeys_SetAction(lo,ACTION_BACK, Switch_OnBack);
        LDR      R0,??CreateIndicList_2+0x4  ;; ACTION_BACK
        LDR      R2,??CreateIndicList_2+0x8  ;; ??Switch_OnBack
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
//  146     GUIObject_SoftKeys_SetAction(lo,ACTION_SELECT1,Indic_OnSelect);
        LDR      R0,??CreateIndicList_2+0xC  ;; ACTION_SELECT1
        LDR      R2,??CreateIndicList_2+0x10  ;; ??Indic_OnSelect
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
//  147     MyBOOK *mbk=(MyBOOK*)book;
//  148     if (!mbk->selev)
        LDR      R0,[R5, #+28]
        CMP      R0,#+0
        BNE      ??CreateIndicList_1
//  149     {
//  150       GUIObject_SoftKeys_SetAction(lo,1,Switch_SetIndfile);
//  151       GUIObject_SoftKeys_SetText(lo,1,TextID_Create(lng[MUSICFILE],ENC_UCS2,TEXTID_ANY_LEN));
        LDR      R5,??DataTable6  ;; lng
        LDR      R2,??CreateIndicList_2+0x14  ;; ??Switch_SetIndfile
        MOV      R1,#+1
        MOV      R0,R4
        SWI      +331
        LDR      R0,[R5, #+264]
        MOV      R6,#+255
        ORR      R6,R6,#0xFF00
        MOV      R2,R6
        MOV      R1,#+0
        SWI      +349
        MOV      R2,R0
        MOV      R1,#+1
        MOV      R0,R4
        SWI      +332
//  152       GUIObject_SoftKeys_SetAction(lo,2,Switch_curstat);
        LDR      R2,??CreateIndicList_2+0x18  ;; ??Switch_curstat
        MOV      R1,#+2
        MOV      R0,R4
        SWI      +331
//  153       GUIObject_SoftKeys_SetText(lo,2,TextID_Create(lng[CURSTATUS],ENC_UCS2,TEXTID_ANY_LEN));
        LDR      R0,[R5, #+268]
        MOV      R2,R6
        MOV      R1,#+0
        SWI      +349
        MOV      R2,R0
        MOV      R1,#+2
        MOV      R0,R4
        SWI      +332
//  154     }
//  155   }
//  156   return(lo);
??CreateIndicList_1:
        MOV      R0,R4
        POP      {R4-R6,PC}       ;; return
        DATA
??CreateIndicList_2:
        DC32     ??Indic_onLBMessage
        DC32     ACTION_BACK
        DC32     ??Switch_OnBack
        DC32     ACTION_SELECT1
        DC32     ??Indic_OnSelect
        DC32     ??Switch_SetIndfile
        DC32     ??Switch_curstat
        CFI EndBlock cfiBlock11
//  157 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     indic_last

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??IndicPage_OnEnter??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??IndicPage_OnEnter
//  158 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??IndicPage_OnEnter
        ARM
//  159 static int IndicPage_OnEnter(void *,BOOK * bk)
//  160 {
??IndicPage_OnEnter:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        MOV      R4,R1
//  161   MyBOOK *mbk=(MyBOOK*)bk;
//  162   if (!mbk->switch_lst)
        LDR      R0,[R4, #+180]
        CMP      R0,#+0
        BNE      ??IndicPage_OnEnter_1
//  163     mbk->switch_lst=List_Create();
        SWI      +361
        STR      R0,[R4, #+180]
//  164   wchar_t *n=new wchar_t[30];
//  165   wstrcpy(n,lng[STANDART]);
??IndicPage_OnEnter_1:
        LDR      R5,??DataTable6  ;; lng
        MOV      R0,#+60
        _BLF     `??operator new[]`,`??operator new[]??rA`
        LDR      R1,[R5, #+244]
        MOV      R6,R0
        SWI      +338
//  166   wchar_t *n1=new wchar_t[30];
        MOV      R0,#+60
        _BLF     `??operator new[]`,`??operator new[]??rA`
//  167   wstrcpy(n1, lng[COLORLEDS]);
        LDR      R1,[R5, #+212]
        MOV      R7,R0
        SWI      +338
//  168   wchar_t *n2=new wchar_t[30];
        MOV      R0,#+60
        _BLF     `??operator new[]`,`??operator new[]??rA`
//  169   wstrcpy(n2, lng[ORANGELEDS]);
        LDR      R1,[R5, #+216]
        MOV      R8,R0
        SWI      +338
//  170   wchar_t *n3=new wchar_t[30];
        MOV      R0,#+60
        _BLF     `??operator new[]`,`??operator new[]??rA`
//  171   wstrcpy(n3, lng[REDLEDS]);
        LDR      R1,[R5, #+220]
        MOV      R9,R0
        SWI      +338
//  172   wchar_t *n4=new wchar_t[30];
        MOV      R0,#+60
        _BLF     `??operator new[]`,`??operator new[]??rA`
//  173   wstrcpy(n4, lng[VIBRA]);
        LDR      R1,[R5, #+224]
        MOV      R10,R0
        SWI      +338
//  174   wchar_t *n5=new wchar_t[30];
        MOV      R0,#+60
        _BLF     `??operator new[]`,`??operator new[]??rA`
//  175   wstrcpy(n5, lng[SOUND]);
        LDR      R1,[R5, #+228]
        MOV      R11,R0
        SWI      +338
//  176   List_InsertLast(mbk->switch_lst,n);
        LDR      R0,[R4, #+180]
        MOV      R1,R6
        SWI      +432
//  177   List_InsertLast(mbk->switch_lst,n1);
        LDR      R0,[R4, #+180]
        MOV      R1,R7
        SWI      +432
//  178   List_InsertLast(mbk->switch_lst,n2);
        LDR      R0,[R4, #+180]
        MOV      R1,R8
        SWI      +432
//  179   List_InsertLast(mbk->switch_lst,n3);
        LDR      R0,[R4, #+180]
        MOV      R1,R9
        SWI      +432
//  180   List_InsertLast(mbk->switch_lst,n4);
        LDR      R0,[R4, #+180]
        MOV      R1,R10
        SWI      +432
//  181   List_InsertLast(mbk->switch_lst,n5);
        LDR      R0,[R4, #+180]
        MOV      R1,R11
        SWI      +432
//  182   mbk->ind=CreateIndicList(bk, mbk->switch_lst->FirstFree);
        LDR      R0,[R4, #+180]
        LDRH     R1,[R0, #+2]
        MOV      R0,R4
        BL       ??CreateIndicList
        STR      R0,[R4, #+112]
//  183   GUIObject_SetTitleText(mbk->ind, TextID_Create(lng[INDICATION],ENC_UCS2,TEXTID_ANY_LEN));
        LDR      R0,[R5, #+208]
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        MOV      R1,#+0
        SWI      +349
        MOV      R1,R0
        LDR      R0,[R4, #+112]
        SWI      +307
//  184   GUIObject_Show(mbk->ind);
        LDR      R0,[R4, #+112]
        SWI      +308
//  185   return 1;
        MOV      R0,#+1
        POP      {R4-R11,PC}      ;; return
        CFI EndBlock cfiBlock13
//  186 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     lng

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??IndicPage_OnExit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??IndicPage_OnExit
//  187 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??IndicPage_OnExit
        ARM
//  188 static int IndicPage_OnExit(void *, BOOK * bk)
//  189 {
??IndicPage_OnExit:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
//  190   MyBOOK *mbk=(MyBOOK *)bk;
//  191   kill_switchlst(mbk);
        MOV      R0,R4
        _BLF     ??kill_switchlst,??kill_switchlst??rA
//  192   FREE_GUI(mbk->ind);
        LDR      R0,[R4, #+112]
        CMP      R0,#+0
        BEQ      ??IndicPage_OnExit_1
        SWI      +462
        STR      R0,[R4, #+112]
//  193   return 1;  
??IndicPage_OnExit_1:
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock15
//  194 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine8_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine8_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine9_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine9_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_switchlst??rA:
        LDR      R12,??Subroutine10_0  ;; ??kill_switchlst
        BX       R12
        DATA
??Subroutine10_0:
        DC32     ??kill_switchlst
        CFI EndBlock cfiBlock18
//  195 

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
//  196 const PAGE_MSG bk_msglst_indic[] @ "DYN_PAGE"  = 
bk_msglst_indic:
        DATA
        DC32 66, ??IndicPage_OnEnter, 67, ??IndicPage_OnExit, 64, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "EvtEdit_IndicationMen...">`:
        DATA
        DC8 "EvtEdit_IndicationMenu_Page"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 2FH, 0, 0, 0
//  197 {
//  198   PAGE_ENTER_EVENT_TAG,    IndicPage_OnEnter,
//  199   PAGE_EXIT_EVENT_TAG,     IndicPage_OnExit,
//  200   NIL_EVENT_TAG,           NULL
//  201 };
//  202 

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//  203 const PAGE_DESC bk_indic = {"EvtEdit_IndicationMenu_Page", 0, bk_msglst_indic};
bk_indic:
        DATA
        DC32 `?<Constant "EvtEdit_IndicationMen...">`, 0H, bk_msglst_indic

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
// 1 548 bytes in segment CODE
//    44 bytes in segment DATA_C
//     4 bytes in segment DATA_Z
//    24 bytes in segment DYN_PAGE
//    12 bytes in segment INITTAB
// 
// 1 480 bytes of CODE  memory (+ 80 bytes shared)
//    68 bytes of CONST memory
//     4 bytes of DATA  memory
//
//Errors: none
//Warnings: none
