//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:55:17 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Strin /
//                       gInput.c                                            /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Strin /
//                       gInput.c -D NDEBUG -D OLDFUNCTIONS -lC              /
//                       Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Relea /
//                       se\List\ -lA Z:\home\perk11\www\perk11.info\svn\SE\ /
//                       EvtEdit\Release\List\ -o                            /
//                       Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Relea /
//                       se\Obj\ -s9 --cpu_mode arm --endian little --cpu    /
//                       ARM926EJ-S --stack_align 4 --interwork -e           /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h -I Z:\home\perk11\IAR2\arm\INC\                /
//                       --inline_threshold=2                                /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Relea /
//                       se\List\StringInput.s79                             /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME StringInput

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??CreateTextInput
        FUNCTION ??CreateTextInput,0203H
        LOCFRAME CSTACK, 92, STACK
        MULTWEAK ??CreateTextInput??rT
??DataTable0 EQU 0
        MULTWEAK ??GetStrID??rA
        PUBLIC ??OnBackCreateTextInputGui
        FUNCTION ??OnBackCreateTextInputGui,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??OnBackCreateTextInputGui??rT
        PUBLIC ??OnOkCreateWinOrPassGui
        FUNCTION ??OnOkCreateWinOrPassGui,0603H
        LOCFRAME CSTACK, 180, STACK
        MULTWEAK ??OnOkCreateWinOrPassGui??rT
        FUNCTION ??StringInputPage_OnEnter,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION ??StringInputPage_OnExit,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??_Geterrno??rA
        PUBLIC ??get_curstrid
        FUNCTION ??get_curstrid,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??get_curstrid??rT
        PUBLIC ??get_headerstrid
        FUNCTION ??get_headerstrid,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??get_headerstrid??rT
        PUBLIC ??getnumwidth
        FUNCTION ??getnumwidth,0203H
        MULTWEAK ??getnumwidth??rT
        PUBLIC ??kickbadsymbols
        FUNCTION ??kickbadsymbols,0203H
        PUBLIC ??kickbadsymbols2
        FUNCTION ??kickbadsymbols2,0203H
        MULTWEAK ??kickbadsymbols2??rT
        MULTWEAK ??kickbadsymbols??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        PUBLIC ??unicode2win1251
        FUNCTION ??unicode2win1251,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??unicode2win1251??rT
        MULTWEAK ??wcstoul??rA
        PUBLIC bk_StringInput
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        




_Geterrno           SYMBOL "_Geterrno"
wcstoul             SYMBOL "wcstoul"

??CreateTextInput??rT SYMBOL "??rT", ??CreateTextInput
??GetStrID??rA      SYMBOL "??rA", ??GetStrID

??OnBackCreateTextInputGui??rT SYMBOL "??rT", ??OnBackCreateTextInputGui

??OnOkCreateWinOrPassGui??rT SYMBOL "??rT", ??OnOkCreateWinOrPassGui
??_Geterrno??rA     SYMBOL "??rA", _Geterrno

??get_curstrid??rT  SYMBOL "??rT", ??get_curstrid

??get_headerstrid??rT SYMBOL "??rT", ??get_headerstrid

??getnumwidth??rT   SYMBOL "??rT", ??getnumwidth


??kickbadsymbols2??rT SYMBOL "??rT", ??kickbadsymbols2
??kickbadsymbols??rT SYMBOL "??rT", ??kickbadsymbols
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

??unicode2win1251??rT SYMBOL "??rT", ??unicode2win1251
??wcstoul??rA       SYMBOL "??rA", wcstoul

        EXTERN ??GetStrID
        FUNCTION ??GetStrID,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN PREVIOUS_EVENT
        EXTERN SelectFile_page
        EXTERN VAR_ARG_BOOK
        EXTERN VAR_ARG_CALL_BACK_OK
        EXTERN VAR_ARG_CALL_BACK_PREV_ACT
        EXTERN VAR_ARG_HTEXT
        EXTERN VAR_ARG_STRINP_EMPTY_STR_EN
        EXTERN VAR_ARG_STRINP_FIXED_TEXT
        EXTERN VAR_ARG_STRINP_MAX_LEN
        EXTERN VAR_ARG_STRINP_MODE
        EXTERN VAR_ARG_STRINP_TEXT
        EXTERN _Geterrno
        FUNCTION _Geterrno,010202H
        EXTERN bk_days
        EXTERN bk_main
        EXTERN events
        EXTERN lng
        EXTERN wcstoul
        FUNCTION wcstoul,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnBackCreateTextInputGui??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??OnBackCreateTextInputGui
// Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\StringInput.c
//    1 #include "..\deleaker\mem2.h"
//    2 #include "..\include\Lib_Clara.h" 
//    3 #include "..\include\Dir.h" 
//    4 #include "header\structs.h"
//    5 #include "..\include\var_arg.h"
//    6 #include "header\pages.h"
//    7 #include "header\externals.h"
//    8 #include "header\lng.h"
//    9 #include <errno.h>
//   10 extern "C" unsigned long wcstoul(const wchar_t *, wchar_t **, int);
//   11 
//   12 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??OnBackCreateTextInputGui
        ARM
//   13 void OnBackCreateTextInputGui(BOOK * bk, u16 *string, int len)
//   14 {
//   15   BookObj_ReturnPage(bk, PREVIOUS_EVENT);
??OnBackCreateTextInputGui:
        LDR      R1,??DataTable1  ;; PREVIOUS_EVENT
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R1,[R1, #+0]
        SWI      +302
//   16 };
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??kickbadsymbols??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??kickbadsymbols
//   17 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??kickbadsymbols
        ARM
//   18 void kickbadsymbols(wchar_t *string, int len)
//   19 {
//   20   char *str=(char*)string;
//   21   if (len>0)
??kickbadsymbols:
        CMP      R1,#+1
        BXLT     LR
//   22   {
//   23     int x;
//   24     for (x=0;x<(len*2);x++)
        MOV      R2,#+0
        LSL      R1,R1,#+1
        CMP      R1,#+1
        BGE      ??kickbadsymbols_1
        BX       LR
//   25     {
//   26       if (str[x]==0xFE || str[x]==0xFF)
??kickbadsymbols_2:
        LDRB     R3,[R2, +R0]
        CMP      R3,#+254
        CMPNE    R3,#+255
//   27       {
//   28         str[x]=' ';
        MOVEQ    R3,#+32
        STRBEQ   R3,[R2, +R0]
//   29       }
//   30     }
        ADD      R2,R2,#+1
??kickbadsymbols_1:
        CMP      R2,R1
        BLT      ??kickbadsymbols_2
//   31   }
//   32 };
        BX       LR               ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??kickbadsymbols2??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??kickbadsymbols2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??kickbadsymbols2
        ARM
//   33 void kickbadsymbols2(wchar_t *string, int len)
//   34 {
//   35   if (len>0)
??kickbadsymbols2:
        CMP      R1,#+1
        BXLT     LR
//   36   {
//   37     int x;
//   38     for (x=0;x<len;x++)
        MOV      R2,#+0
        B        ??kickbadsymbols2_1
//   39     {
//   40       if (string[x]==L':')
??kickbadsymbols2_2:
        ADD      R3,R0,R2, LSL #+1
        LDRH     R12,[R3, #+0]
//   41       {
//   42         string[x]=L'-';
//   43       }
//   44     }
        ADD      R2,R2,#+1
        CMP      R12,#+58
        MOVEQ    R12,#+45
        STRHEQ   R12,[R3, #+0]
??kickbadsymbols2_1:
        CMP      R2,R1
        BLT      ??kickbadsymbols2_2
//   45   }
//   46 };
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??unicode2win1251??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??unicode2win1251
//   47 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??unicode2win1251
        ARM
//   48 char *unicode2win1251(char *s, wchar_t *ws, int len)
//   49 {
??unicode2win1251:
        PUSH     {R4}
        CFI R4 Frame(CFA, -4)
        CFI CFA R13+4
//   50   char *d=s;
        MOV      R3,R0
        B        ??unicode2win1251_1
//   51   int c;
//   52   while((c=*ws++)&&((len--)>0))
//   53   {
//   54     if (c==0x401) c=0xA8;
//   55     if (c==0x404) c=0xAA;
//   56     if (c==0x407) c=0xAF;
//   57     if (c==0x451) c=0xB8;
//   58     if (c==0x454) c=0xBA;
//   59     if (c==0x457) c=0xBF;
//   60     if ((c>=0x410)&&(c<0x450)) c-=0x350;
??unicode2win1251_2:
        CMP      R12,#+1040
        BLT      ??unicode2win1251_3
        CMP      R12,#+1104
        MVNLT    R4,#+79
        BICLT    R4,R4,#0x300
        ADDLT    R12,R4,R12
//   61     *s++=c;
??unicode2win1251_3:
        STRB     R12,[R0], #+1
??unicode2win1251_1:
        LDRH     R12,[R1], #+2
        CMP      R12,#+0
        BEQ      ??unicode2win1251_4
        MOV      R4,R2
        SUB      R2,R4,#+1
        CMP      R4,#+1
        BLT      ??unicode2win1251_4
        MOV      R4,#+1
        ORR      R4,R4,#0x400
        CMP      R12,R4
        MOVEQ    R12,#+168
        BEQ      ??unicode2win1251_3
        ADD      R4,R4,#+3
        CMP      R12,R4
        MOVEQ    R12,#+170
        BEQ      ??unicode2win1251_3
        ORR      R4,R4,#0x3
        CMP      R12,R4
        MOVEQ    R12,#+175
        BEQ      ??unicode2win1251_3
        ADD      R4,R4,#+74
        CMP      R12,R4
        MOVEQ    R12,#+184
        BEQ      ??unicode2win1251_3
        ADD      R4,R4,#+3
        CMP      R12,R4
        MOVEQ    R12,#+186
        BEQ      ??unicode2win1251_3
        ORR      R4,R4,#0x3
        CMP      R12,R4
        BNE      ??unicode2win1251_2
        MOV      R12,#+191
        B        ??unicode2win1251_3
//   62   }
//   63   *s=0;
??unicode2win1251_4:
        MOV      R1,#+0
        STRB     R1,[R0, #+0]
//   64   return(d);
        POP      {R4}
        CFI R4 SameValue
        CFI CFA R13+0
        MOV      R0,R3
        BX       LR               ;; return
        CFI EndBlock cfiBlock7
//   65 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnOkCreateWinOrPassGui??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??OnOkCreateWinOrPassGui
//   66 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??OnOkCreateWinOrPassGui
        ARM
//   67 void OnOkCreateWinOrPassGui(BOOK * bk, wchar_t *string, int len)
//   68 {
??OnOkCreateWinOrPassGui:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+132
        CFI CFA R13+168
        MOV      R4,R0
        MOV      R8,R1
        MOV      R6,R2
//   69   MyBOOK * mbk=(MyBOOK *)bk;
//   70   kickbadsymbols(string, len); 
        MOV      R1,R6
//   71   if (mbk->TextInputType==0)
        LDR      R5,??OnOkCreateWinOrPassGui_1  ;; `?<Constant L"\\x6d\\x69\\x6e\\x3a\\x20\\x25\\x75\\xa\\x`
        MOV      R0,R8
        BL       ??kickbadsymbols
        ADD      R0,R6,#+1
        LSL      R7,R0,#+1
        LDR      R0,[R4, #+64]
        MOV      R9,#+136
        ORR      R9,R9,#0x1300
        MOV      R10,#+255
        ORR      R10,R10,#0xFF00
        MOV      R11,#+0
        CMP      R0,#+0
        BNE      ??OnOkCreateWinOrPassGui_2
//   72   {
//   73     if (mbk->minint==-1)
        LDR      R0,[R4, #+56]
        CMN      R0,#+1
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+52]
        BNE      ??OnOkCreateWinOrPassGui_3
//   74     {
//   75       DELETE(mbk->selev->param);
        CMP      R0,#+0
        BEQ      ??OnOkCreateWinOrPassGui_4
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+52]
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R0,[R4, #+28]
        STR      R11,[R0, #+52]
//   76       if (len>0)
??OnOkCreateWinOrPassGui_4:
        CMP      R6,#+1
        BLT      ??OnOkCreateWinOrPassGui_5
//   77       {
//   78         mbk->selev->param=new wchar_t[len+1];
??OnOkCreateWinOrPassGui_6:
        MOV      R0,R7
        _BLF     `??operator new[]`,`??operator new[]??rA`
        LDR      R1,[R4, #+28]
        STR      R0,[R1, #+52]
//   79         wstrcpy(mbk->selev->param,string);
        LDR      R0,[R4, #+28]
        MOV      R1,R8
        LDR      R0,[R0, #+52]
        SWI      +338
//   80         mbk->selev->param[len]=L'\0';
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+52]
??OnOkCreateWinOrPassGui_7:
        ADD      R0,R0,R6, LSL #+1
        STRH     R11,[R0, #+0]
        B        ??OnOkCreateWinOrPassGui_8
//   81       }
//   82       else
//   83       {
//   84         mbk->selev->param=0;
??OnOkCreateWinOrPassGui_5:
        LDR      R0,[R4, #+28]
        STR      R11,[R0, #+52]
        B        ??OnOkCreateWinOrPassGui_8
//   85       }
//   86     }
//   87     else
//   88     {
//   89       DELETE(mbk->selev->param);
??OnOkCreateWinOrPassGui_3:
        CMP      R0,#+0
        BEQ      ??OnOkCreateWinOrPassGui_9
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+52]
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R0,[R4, #+28]
        STR      R11,[R0, #+52]
//   90       unsigned int ui;
//   91       *_Geterrno()=0;
??OnOkCreateWinOrPassGui_9:
        _BLF     _Geterrno,??_Geterrno??rA
        STR      R11,[R0, #+0]
//   92       ui=wcstoul(string,0,10);
        MOV      R2,#+10
        MOV      R1,#+0
        MOV      R0,R8
        _BLF     wcstoul,??wcstoul??rA
//   93       if (ui<mbk->minint || ui>mbk->maxint || *_Geterrno()==ERANGE)
        LDR      R1,[R4, #+56]
        CMP      R0,R1
        LDRCS    R1,[R4, #+60]
        CMPCS    R1,R0
        BCC      ??OnOkCreateWinOrPassGui_10
        _BLF     _Geterrno,??_Geterrno??rA
        LDR      R0,[R0, #+0]
        CMP      R0,#+34
        BNE      ??OnOkCreateWinOrPassGui_6
//   94       {
//   95         wchar_t ustr[64];
//   96         snwprintf(ustr,MAXELEMS(ustr)-1,L"min: %u\nmax: %u",mbk->minint , mbk->maxint );
??OnOkCreateWinOrPassGui_10:
        LDR      R0,[R4, #+60]
        MOV      R2,R5
        PUSH     {R0}
        CFI CFA R13+172
        LDR      R3,[R4, #+56]
        MOV      R1,#+63
        ADD      R0,SP,#+8
        SWI      +277
//   97         MessageBox(EMPTY_TEXTID,TextID_Create(ustr,ENC_UCS2,TEXTID_ANY_LEN), NOIMAGE, 1, 5000, bk);
        MOV      R2,R10
        MOV      R1,#+0
        ADD      R0,SP,#+8
        SWI      +349
        PUSH     {R4}
        CFI CFA R13+176
        PUSH     {R9}
        CFI CFA R13+180
        MOV      R1,R0
        MOV      R3,#+1
        MOV      R2,R10
??OnOkCreateWinOrPassGui_11:
        B        ??OnOkCreateWinOrPassGui_12
        CFI CFA R13+168
//   98         return;
//   99       }
//  100       else
//  101       {
//  102          mbk->selev->param=new wchar_t[len+1];
//  103          wstrcpy(mbk->selev->param,string);
//  104          mbk->selev->param[len]=L'\0';
//  105       }
//  106     }
//  107   }
//  108   else if (mbk->TextInputType==1)
??OnOkCreateWinOrPassGui_2:
        CMP      R0,#+1
        BNE      ??OnOkCreateWinOrPassGui_13
//  109   {
//  110     DELETE(mbk->selev->txt);
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+56]
        CMP      R0,#+0
        BEQ      ??OnOkCreateWinOrPassGui_14
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+56]
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R0,[R4, #+28]
        STR      R11,[R0, #+56]
//  111     if (len>0)
??OnOkCreateWinOrPassGui_14:
        CMP      R6,#+1
        BLT      ??OnOkCreateWinOrPassGui_8
//  112     {
//  113       mbk->selev->txt=new wchar_t[len+1];
        MOV      R0,R7
        _BLF     `??operator new[]`,`??operator new[]??rA`
        LDR      R1,[R4, #+28]
        STR      R0,[R1, #+56]
//  114       wstrcpy(mbk->selev->txt,string);
        LDR      R0,[R4, #+28]
        MOV      R1,R8
        LDR      R0,[R0, #+56]
        SWI      +338
//  115       mbk->selev->txt[len]=L'\0';
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+56]
        B        ??OnOkCreateWinOrPassGui_7
//  116     }
//  117   }
//  118   else if (mbk->TextInputType==2)
??OnOkCreateWinOrPassGui_13:
        CMP      R0,#+2
        BNE      ??OnOkCreateWinOrPassGui_15
//  119   {
//  120     int res=wcstoul(string,0,10);
        MOV      R2,#+10
        MOV      R1,#+0
        MOV      R0,R8
        _BLF     wcstoul,??wcstoul??rA
//  121     mbk->selev->AskBefore=res;
        LDR      R1,[R4, #+28]
        STR      R0,[R1, #+4]
        B        ??OnOkCreateWinOrPassGui_8
//  122   }
//  123    else if (mbk->TextInputType==3)
??OnOkCreateWinOrPassGui_15:
        CMP      R0,#+3
        BNE      ??OnOkCreateWinOrPassGui_16
//  124   {
//  125     int res=wcstoul(string,0,10);
        MOV      R2,#+10
        MOV      R1,#+0
        MOV      R0,R8
        _BLF     wcstoul,??wcstoul??rA
//  126     mbk->selev->AskAfter=res;
        LDR      R1,[R4, #+28]
        STR      R0,[R1, #+12]
        B        ??OnOkCreateWinOrPassGui_8
//  127   }
//  128   else if (mbk->TextInputType==4)
??OnOkCreateWinOrPassGui_16:
        CMP      R0,#+4
        BNE      ??OnOkCreateWinOrPassGui_17
//  129   {
//  130     kickbadsymbols2(string, len);
        MOV      R1,R6
        MOV      R0,R8
        BL       ??kickbadsymbols2
//  131     if (len>0)
        LDR      R0,[R4, #+28]
        MOV      R7,#+1
        CMP      R6,#+1
        BLT      ??OnOkCreateWinOrPassGui_18
//  132     {
//  133       mbk->selev->isGps=true;
        STRB     R7,[R0, #+16]
//  134       DELETE(mbk->selev->gps);
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+60]
        CMP      R0,#+0
        BEQ      ??OnOkCreateWinOrPassGui_19
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+60]
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R0,[R4, #+28]
        STR      R11,[R0, #+60]
//  135       mbk->selev->gps=new char[wstrlen(string)+1];
??OnOkCreateWinOrPassGui_19:
        MOV      R0,R8
        SWI      +343
        ADD      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        LDR      R1,[R4, #+28]
        STR      R0,[R1, #+60]
//  136       unicode2win1251(mbk->selev->gps,string,wstrlen(string));
        MOV      R0,R8
        SWI      +343
        MOV      R2,R0
        LDR      R0,[R4, #+28]
        MOV      R1,R8
        LDR      R0,[R0, #+60]
        BL       ??unicode2win1251
        B        ??OnOkCreateWinOrPassGui_8
//  137     }
//  138     else
//  139     {
//  140       mbk->selev->isGps=false;
??OnOkCreateWinOrPassGui_18:
        MOV      R1,#+0
        STRB     R1,[R0, #+16]
//  141       DELETE(mbk->selev->gps);
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+60]
        CMP      R0,#+0
        BEQ      ??OnOkCreateWinOrPassGui_20
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+60]
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R0,[R4, #+28]
        STR      R11,[R0, #+60]
//  142       mbk->selev->dtype=0;
??OnOkCreateWinOrPassGui_20:
        LDR      R0,[R4, #+28]
        STR      R11,[R0, #+20]
//  143       mbk->selev->ttype=1;
        LDR      R0,[R4, #+28]
        STR      R7,[R0, #+40]
        B        ??OnOkCreateWinOrPassGui_8
//  144     }
//  145   }
//  146   else if (mbk->TextInputType==5)
??OnOkCreateWinOrPassGui_17:
        CMP      R0,#+5
        BNE      ??OnOkCreateWinOrPassGui_21
//  147   {
//  148     int res=wcstoul(string,0,10);
        MOV      R2,#+10
        MOV      R1,#+0
        MOV      R0,R8
        _BLF     wcstoul,??wcstoul??rA
//  149     mbk->tempvol=res;
        STR      R0,[R4, #+132]
        B        ??OnOkCreateWinOrPassGui_8
//  150   }
//  151   else if (mbk->TextInputType==6)
??OnOkCreateWinOrPassGui_21:
        CMP      R0,#+6
        BNE      ??OnOkCreateWinOrPassGui_22
//  152   {
//  153     TIME *time=mbk->curtime;
        LDR      R6,[R4, #+80]
//  154     *_Geterrno()=0;
        _BLF     _Geterrno,??_Geterrno??rA
        STR      R11,[R0, #+0]
//  155     unsigned int ui=wcstoul(string,0,10);
        MOV      R2,#+10
        MOV      R1,#+0
        MOV      R0,R8
        _BLF     wcstoul,??wcstoul??rA
        MOV      R7,R0
//  156     if (ui<mbk->minint || ui>mbk->maxint || *_Geterrno()==ERANGE)
        LDR      R0,[R4, #+56]
        CMP      R7,R0
        LDRCS    R0,[R4, #+60]
        CMPCS    R0,R7
        BCC      ??OnOkCreateWinOrPassGui_23
        _BLF     _Geterrno,??_Geterrno??rA
        LDR      R0,[R0, #+0]
        CMP      R0,#+34
        BNE      ??OnOkCreateWinOrPassGui_24
//  157     {
//  158       wchar_t ustr[64];
//  159       snwprintf(ustr,MAXELEMS(ustr)-1,L"min: %u\nmax: %u",mbk->minint , mbk->maxint );
??OnOkCreateWinOrPassGui_23:
        LDR      R0,[R4, #+60]
        MOV      R2,R5
        PUSH     {R0}
        CFI CFA R13+172
        LDR      R3,[R4, #+56]
        MOV      R1,#+63
        ADD      R0,SP,#+8
        SWI      +277
//  160       MessageBox(EMPTY_TEXTID,TextID_Create(ustr,ENC_UCS2,TEXTID_ANY_LEN), NOIMAGE, 1, 5000, bk);
        MOV      R2,R10
        MOV      R1,#+0
        ADD      R0,SP,#+8
        SWI      +349
        PUSH     {R4}
        CFI CFA R13+176
        PUSH     {R9}
        CFI CFA R13+180
        MOV      R3,#+1
        MOV      R2,R10
        MOV      R1,R0
        B        ??OnOkCreateWinOrPassGui_12
        CFI CFA R13+168
//  161       return;
//  162     }
//  163     else
//  164     {
//  165       time->sec=ui;
??OnOkCreateWinOrPassGui_24:
        STRB     R7,[R6, #+2]
        B        ??OnOkCreateWinOrPassGui_8
//  166     }
//  167   }
//  168   else if (mbk->TextInputType==7)
??OnOkCreateWinOrPassGui_22:
        CMP      R0,#+7
        BNE      ??OnOkCreateWinOrPassGui_25
//  169   {
//  170     int step=mbk->cur_clone_time;
        LDR      R1,[R4, #+184]
//  171     int x=mbk->selev->time.hour * 3600 + mbk->selev->time.min * 60 + mbk->selev->time.sec;
//  172     x=x+step;
        MOV      R3,#+60
        STR      R1,[SP, #+0]
        LDR      R0,[R4, #+28]
        LDR      R2,[R4, #+28]
        LDRB     R0,[R0, #+44]
        LDRB     R2,[R2, #+45]
        MOV      R1,#+3600
//  173     int i=0,i_max=wcstoul(string,0,10);
        MOV      R7,#+0
        MUL      R2,R3,R2
        MLA      R0,R1,R0,R2
        LDR      R1,[R4, #+28]
        MOV      R2,#+10
        LDRB     R1,[R1, #+46]
        ADD      R0,R1,R0
        LDR      R1,[SP, #+0]
        ADD      R6,R1,R0
        MOV      R1,R7
        MOV      R0,R8
        _BLF     wcstoul,??wcstoul??rA
        MOV      R8,R0
//  174     *_Geterrno()=0;
        _BLF     _Geterrno,??_Geterrno??rA
        STR      R11,[R0, #+0]
//  175     if (i_max<mbk->minint || i_max>mbk->maxint || *_Geterrno()==ERANGE)
        LDR      R0,[R4, #+56]
        CMP      R8,R0
        LDRGE    R0,[R4, #+60]
        CMPGE    R0,R8
        BLT      ??OnOkCreateWinOrPassGui_26
        _BLF     _Geterrno,??_Geterrno??rA
        LDR      R0,[R0, #+0]
        CMP      R0,#+34
        BNE      ??OnOkCreateWinOrPassGui_27
//  176     {
//  177       wchar_t ustr[64];
//  178       snwprintf(ustr,MAXELEMS(ustr)-1,L"min: %u\nmax: %u",mbk->minint , mbk->maxint );
??OnOkCreateWinOrPassGui_26:
        LDR      R0,[R4, #+60]
        MOV      R2,R5
        PUSH     {R0}
        CFI CFA R13+172
        LDR      R3,[R4, #+56]
        MOV      R1,#+63
        ADD      R0,SP,#+8
        SWI      +277
//  179       MessageBox(EMPTY_TEXTID,TextID_Create(ustr,ENC_UCS2,TEXTID_ANY_LEN), NOIMAGE, 1, 5000, bk);
        MOV      R2,R10
        MOV      R1,#+0
        ADD      R0,SP,#+8
        SWI      +349
        PUSH     {R4}
        CFI CFA R13+176
        PUSH     {R9}
        CFI CFA R13+180
        MOV      R3,#+1
        MOV      R2,R10
        MOV      R1,R0
??OnOkCreateWinOrPassGui_12:
        MVN      R0,#-1879048192
        SWI      +599
//  180       return;
        ADD      SP,SP,#+12
        CFI CFA R13+168
        ADD      SP,SP,#+132
        CFI CFA R13+36
        POP      {R4-R11,PC}
        CFI CFA R13+168
//  181     }
//  182     for (x=x;x<86400;x+=step)
??OnOkCreateWinOrPassGui_27:
        MOV      R0,#+81920
        ORR      R0,R0,#0x1180
        CMP      R6,R0
//  183     {
//  184       if (i<i_max)
        CMPLT    R7,R8
        BGE      ??OnOkCreateWinOrPassGui_8
//  185       {
//  186         EVENT *ev=new EVENT;
        MOV      R0,#+68
        _BLF     `??operator new`,`??operator new??rA`
//  187         memcpy(ev,mbk->selev, sizeof(EVENT));
        LDR      R1,[R4, #+28]
        MOV      R9,R0
        MOV      R2,#+68
        SWI      +275
//  188         ev->time.hour=x/3600;
        LDR      R0,??OnOkCreateWinOrPassGui_1+0x4  ;; 0xffffffff91a2b3c5
        SMULL    R1,R2,R0,R6
        ADD      R2,R2,R6
        ASR      R2,R2,#+11
        ADD      R0,R2,R6, LSR #+31
        STRB     R0,[R9, #+44]
//  189         ev->time.min=(x%3600)/60;
        LDR      R0,??OnOkCreateWinOrPassGui_1+0x4  ;; 0xffffffff91a2b3c5
        SMULL    R1,R2,R6,R0
        MOV      R1,#+3600
        ADD      R2,R2,R6
        ASR      R2,R2,#+11
        ADD      R2,R2,R6, LSR #+31
        MUL      R2,R1,R2
        LDR      R1,??OnOkCreateWinOrPassGui_1+0x8  ;; 0xffffffff88888889
        SUB      R0,R6,R2
        SMULL    R2,R3,R1,R0
        ADD      R3,R3,R0
        ASR      R3,R3,#+5
        ADD      R1,R3,R0, LSR #+31
        STRB     R1,[R9, #+45]
//  190         ev->time.sec=((x%3600)%60)/60;
        LDR      R1,??OnOkCreateWinOrPassGui_1+0x8  ;; 0xffffffff88888889
        SMULL    R2,R3,R0,R1
        MOV      R2,#+60
        ADD      R3,R3,R0
        ASR      R3,R3,#+5
        ADD      R3,R3,R0, LSR #+31
        MUL      R3,R2,R3
        SUB      R0,R0,R3
        SMULL    R2,R3,R1,R0
        ADD      R3,R3,R0
        ASR      R3,R3,#+5
        ADD      R0,R3,R0, LSR #+31
        STRB     R0,[R9, #+46]
//  191         if (mbk->selev->txt)
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+56]
        CMP      R0,#+0
        BEQ      ??OnOkCreateWinOrPassGui_28
//  192         {
//  193           ev->txt=new wchar_t[wstrlen(mbk->selev->txt)+1];
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+56]
        SWI      +343
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R9, #+56]
//  194           wstrcpy(ev->txt, mbk->selev->txt);
        LDR      R0,[R4, #+28]
        LDR      R1,[R0, #+56]
        LDR      R0,[R9, #+56]
        SWI      +338
//  195         }
//  196         if (mbk->selev->param)
??OnOkCreateWinOrPassGui_28:
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+52]
        CMP      R0,#+0
        BEQ      ??OnOkCreateWinOrPassGui_29
//  197         {
//  198           ev->param=new wchar_t[wstrlen(mbk->selev->param)+1];
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+52]
        SWI      +343
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R9, #+52]
//  199           wstrcpy(ev->param, mbk->selev->param);
        LDR      R0,[R4, #+28]
        LDR      R1,[R0, #+52]
        LDR      R0,[R9, #+52]
        SWI      +338
//  200         }
//  201         if (mbk->selev->gps)
??OnOkCreateWinOrPassGui_29:
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+60]
        CMP      R0,#+0
        BEQ      ??OnOkCreateWinOrPassGui_30
//  202         {
//  203           ev->gps=new char[strlen(mbk->selev->gps)+1];
        LDR      R0,[R4, #+28]
        LDR      R0,[R0, #+60]
        SWI      +346
        ADD      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R9, #+60]
//  204           strcpy(ev->gps, mbk->selev->gps);
        LDR      R0,[R4, #+28]
        LDR      R1,[R0, #+60]
        LDR      R0,[R9, #+60]
        SWI      +416
//  205         }
//  206         extern LIST *events;
//  207         List_InsertLast(events,ev);
??OnOkCreateWinOrPassGui_30:
        LDR      R0,??OnOkCreateWinOrPassGui_1+0xC  ;; events
        MOV      R1,R9
        LDR      R0,[R0, #+0]
//  208         i++;
        ADD      R7,R7,#+1
        SWI      +432
//  209       }
//  210       else break;
//  211     }
        LDR      R0,[SP, #+0]
        ADD      R6,R0,R6
        B        ??OnOkCreateWinOrPassGui_27
//  212   }
//  213   else if (mbk->TextInputType==8)
??OnOkCreateWinOrPassGui_25:
        CMP      R0,#+8
        BNE      ??OnOkCreateWinOrPassGui_8
//  214   {
//  215     int step=wcstoul(string,0,10);
        MOV      R2,#+10
        MOV      R1,#+0
        MOV      R0,R8
        _BLF     wcstoul,??wcstoul??rA
        MOV      R6,R0
//  216     *_Geterrno()=0;
        _BLF     _Geterrno,??_Geterrno??rA
        STR      R11,[R0, #+0]
//  217     if (step<mbk->minint || step>mbk->maxint || *_Geterrno()==ERANGE)
        LDR      R0,[R4, #+56]
        CMP      R6,R0
        LDRGE    R0,[R4, #+60]
        CMPGE    R0,R6
        BLT      ??OnOkCreateWinOrPassGui_23
        _BLF     _Geterrno,??_Geterrno??rA
        LDR      R0,[R0, #+0]
        CMP      R0,#+34
        BNE      ??OnOkCreateWinOrPassGui_31
//  218     {
//  219       wchar_t ustr[64];
//  220       snwprintf(ustr,MAXELEMS(ustr)-1,L"min: %u\nmax: %u",mbk->minint , mbk->maxint );
??OnOkCreateWinOrPassGui_32:
        B        ??OnOkCreateWinOrPassGui_23
//  221       MessageBox(EMPTY_TEXTID,TextID_Create(ustr,ENC_UCS2,TEXTID_ANY_LEN), NOIMAGE, 1, 5000, bk);
//  222       return;
//  223     }
//  224     else
//  225     {
//  226       step*=60;
//  227     }
//  228     mbk->cur_clone_time=step;
??OnOkCreateWinOrPassGui_31:
        MOV      R0,#+60
        MUL      R1,R0,R6
        STR      R1,[R4, #+184]
//  229   }
//  230   BookObj_ReturnPage(bk, PREVIOUS_EVENT);
??OnOkCreateWinOrPassGui_8:
        LDR      R0,??DataTable1  ;; PREVIOUS_EVENT
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        SWI      +302
//  231   if (mbk->TextInputType==7)
        LDR      R0,[R4, #+64]
        LDR      R1,??OnOkCreateWinOrPassGui_1+0x10  ;; bk_main
        CMP      R0,#+7
        BEQ      ??OnOkCreateWinOrPassGui_33
//  232   {
//  233     extern const PAGE_DESC bk_StringInput;
//  234     BookObj_CallPage(bk,&bk_main);
//  235   }
//  236   else if (mbk->TextInputType==8)
        CMP      R0,#+8
        BNE      ??OnOkCreateWinOrPassGui_34
//  237   {
//  238     extern const PAGE_DESC bk_StringInput;
//  239     mbk->TextInputType=7;
        MOV      R0,#+7
        STR      R0,[R4, #+64]
//  240     mbk->inputType=IT_UNSIGNED_DIGIT;
        MOV      R0,#+9
        STR      R0,[R4, #+68]
//  241     BookObj_CallPage(bk,&bk_StringInput);
        ADD      R1,R5,#+32
        B        ??OnOkCreateWinOrPassGui_33
//  242     return;
//  243   }
//  244   else if (mbk->TextInputType==2 || mbk->TextInputType==3)
??OnOkCreateWinOrPassGui_34:
        CMP      R0,#+2
        CMPNE    R0,#+3
        BNE      ??OnOkCreateWinOrPassGui_35
//  245   {
//  246     BookObj_CallPage(bk,&bk_main);
        MOV      R0,R4
        SWI      +696
//  247     BookObj_CallPage(bk,&bk_days);
        LDR      R1,??OnOkCreateWinOrPassGui_1+0x14  ;; bk_days
        B        ??OnOkCreateWinOrPassGui_33
//  248   }
//  249   else if (mbk->TextInputType==5)
??OnOkCreateWinOrPassGui_35:
        CMP      R0,#+5
//  250   {
//  251     BookObj_CallPage(bk,&SelectFile_page);
        LDREQ    R1,??OnOkCreateWinOrPassGui_1+0x18  ;; SelectFile_page
//  252   }
//  253   else
//  254   {
//  255     BookObj_CallPage(bk,&bk_main);
??OnOkCreateWinOrPassGui_33:
        MOV      R0,R4
        SWI      +696
        ADD      SP,SP,#+132
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??OnOkCreateWinOrPassGui_1:
        DC32     `?<Constant L"\\x6d\\x69\\x6e\\x3a\\x20\\x25\\x75\\xa\\x`
        DC32     0xffffffff91a2b3c5
        DC32     0xffffffff88888889
        DC32     events
        DC32     bk_main
        DC32     bk_days
        DC32     SelectFile_page
        CFI EndBlock cfiBlock9
//  256   }
//  257 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     PREVIOUS_EVENT

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??get_headerstrid??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??get_headerstrid
//  258 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??get_headerstrid
        ARM
//  259 int get_headerstrid(int type)
//  260 {
//  261   switch (type)
??get_headerstrid:
        LDR      R3,??get_headerstrid_2  ;; lng
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        CMP      R0,#+8
        BHI      ??get_headerstrid_3
        ADR      R1,??get_headerstrid_1
        LDRB     R1,[R1, R0]
        ADD      PC,PC,R1, LSL #+2
        DATA
??get_headerstrid_1:
        DC8      +2,+2,+2,+2
        DC8      +2,+15,+5,+7
        DC8      +11,+0,+0,+0
        ARM
//  262   {
//  263   case 0:
//  264   case 1:
//  265   case 2:
//  266   case 3:
//  267   case 4:
//  268     return GetStrID(L"WAP_ENTER_SK");
??get_headerstrid_4:
        LDR      R0,??get_headerstrid_2+0x4  ;; `?<Constant L"\\x57\\x41\\x50\\x5f\\x45\\x4e\\x54\\x45\\`
        _BLF     ??GetStrID,??GetStrID??rA
        POP      {PC}
//  269   case 6:
//  270     return TextID_Create(lng[SECONDS],ENC_UCS2,TEXTID_ANY_LEN);
??get_headerstrid_5:
        LDR      R0,[R3, #+232]
        B        ??get_headerstrid_6
//  271   case 7:
//  272     return TextID_Create(lng[MAXCOUNT],ENC_UCS2,TEXTID_ANY_LEN);
??get_headerstrid_7:
        LDR      R0,[R3, #+240]
        MOV      R1,#+0
        SWI      +349
        POP      {PC}
//  273   case 8:
//  274     return TextID_Create(lng[INTERVAL],ENC_UCS2,TEXTID_ANY_LEN);
??get_headerstrid_8:
        LDR      R0,[R3, #+236]
??get_headerstrid_6:
        MOV      R1,#+0
        SWI      +349
        POP      {PC}
//  275   default:
//  276     return EMPTY_TEXTID;
??get_headerstrid_3:
        MVN      R0,#-1879048192
        POP      {PC}             ;; return
        DATA
??get_headerstrid_2:
        DC32     lng
        DC32     `?<Constant L"\\x57\\x41\\x50\\x5f\\x45\\x4e\\x54\\x45\\`
        CFI EndBlock cfiBlock11
//  277   }
//  278 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??get_curstrid??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??get_curstrid

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??get_curstrid
        ARM
//  279 int get_curstrid(MyBOOK *mbk)
//  280 {
??get_curstrid:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
//  281   switch (mbk->TextInputType)
        MOV      R4,#+255
        MOV      R5,R0
        LDR      R1,[R5, #+64]
        LDR      R3,[R5, #+28]
        ADR      R0,??get_curstrid_2  ;; 0x00, 0x00
        ORR      R4,R4,#0xFF00
        CMP      R1,#+8
        BHI      ??get_curstrid_3
        ADR      R2,??get_curstrid_1
        LDRB     R2,[R2, R1]
        ADD      PC,PC,R2, LSL #+2
        DATA
??get_curstrid_1:
        DC8      +2,+9,+16,+18
        DC8      +21,+52,+46,+52
        DC8      +50,+0,+0,+0
        ARM
//  282   {
//  283   case 0:
//  284     if (mbk->selev->param)
??get_curstrid_4:
        LDR      R1,[R3, #+52]
        MOV      R2,R4
        CMP      R1,#+0
//  285     {
//  286       int ret_strid=TextID_Create(mbk->selev->param,ENC_UCS2,TEXTID_ANY_LEN);
//  287       return ret_strid;
        LDRNE    R0,[R3, #+52]
        MOVNE    R1,#+0
//  288     }
//  289     else
//  290     {
//  291       return TextID_Create(L"",ENC_UCS2,TEXTID_ANY_LEN);
??get_curstrid_5:
        SWI      +349
        POP      {R4-R6,PC}
//  292     }
//  293   case 1:
//  294     if (mbk->selev->txt)
??get_curstrid_6:
        LDR      R1,[R3, #+56]
        MOV      R2,R4
        CMP      R1,#+0
        BEQ      ??get_curstrid_5
//  295     {
//  296       int ret_strid=TextID_Create(mbk->selev->txt,ENC_UCS2,TEXTID_ANY_LEN);
//  297       return ret_strid;
        LDR      R0,[R3, #+56]
        MOV      R1,#+0
        B        ??get_curstrid_7
//  298     }
//  299     else
//  300     {
//  301       return TextID_Create(L"",ENC_UCS2,TEXTID_ANY_LEN);
//  302     }
//  303   case 2:
//  304     return TextID_CreateIntegerID(mbk->selev->AskBefore);
??get_curstrid_8:
        LDR      R0,[R3, #+4]
        B        ??get_curstrid_9
//  305   case 3:
//  306     return TextID_CreateIntegerID(mbk->selev->AskAfter);
??get_curstrid_10:
        LDR      R0,[R3, #+12]
        SWI      +348
        POP      {R4-R6,PC}
//  307   case 4:
//  308     if (mbk->selev->gps)
??get_curstrid_11:
        LDR      R1,[R3, #+60]
        CMP      R1,#+0
        BEQ      ??get_curstrid_12
//  309     {
//  310       wchar_t *ret=new wchar_t[strlen(mbk->selev->gps)+1];
        MOV      R0,R1
        SWI      +346
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R6,R0
//  311       str2wstr(ret,mbk->selev->gps);
        LDR      R0,[R5, #+28]
        LDR      R1,[R0, #+60]
        MOV      R0,R6
        SWI      +344
//  312       int ret_strid=TextID_Create(ret,ENC_UCS2,TEXTID_ANY_LEN);
        MOV      R2,R4
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +349
        MOV      R4,R0
//  313       delete(ret);
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//  314       return ret_strid;
        MOV      R0,R4
        POP      {R4-R6,PC}
//  315     }
//  316     else
//  317     {
//  318       return TextID_Create(L"",ENC_UCS2,TEXTID_ANY_LEN);
??get_curstrid_12:
        MOV      R2,R4
??get_curstrid_7:
        SWI      +349
        POP      {R4-R6,PC}
//  319     }
//  320   case 6:
//  321     return TextID_CreateIntegerID(mbk->curtime->sec);
??get_curstrid_13:
        LDR      R0,[R5, #+80]
        LDRB     R0,[R0, #+2]
??get_curstrid_9:
        SWI      +348
        POP      {R4-R6,PC}
//  322   case 8:
//  323     return TextID_CreateIntegerID(0);
??get_curstrid_14:
        MOV      R0,#+0
        B        ??get_curstrid_9
//  324   }
//  325   return EMPTY_TEXTID;
??get_curstrid_3:
        MVN      R0,#-1879048192
        POP      {R4-R6,PC}       ;; return
        DATA
??get_curstrid_2:
        DC8      0x00, 0x00,+0,+0
        CFI EndBlock cfiBlock13
//  326 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??getnumwidth??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??getnumwidth
//  327 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??getnumwidth
        ARM
//  328 int getnumwidth(unsigned int num)
//  329 {
//  330   int i=1;
??getnumwidth:
        LDR      R2,??getnumwidth_1  ;; 0xffffffffcccccccd
        MOV      R1,#+1
        CMP      R0,#+10
        BCC      ??getnumwidth_2
//  331   while(num>=10)
//  332   {
//  333     num/=10;
??getnumwidth_3:
        UMULL    R3,R12,R2,R0
//  334     i++;
        ADD      R1,R1,#+1
        LSR      R12,R12,#+3
        MOV      R0,R12
//  335   }
        CMP      R0,#+10
        BCS      ??getnumwidth_3
//  336   return (i);
??getnumwidth_2:
        MOV      R0,R1
        BX       LR               ;; return
        DATA
??getnumwidth_1:
        DC32     0xffffffffcccccccd
        CFI EndBlock cfiBlock15
//  337 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateTextInput??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??CreateTextInput
//  338 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??CreateTextInput
        ARM
//  339 void CreateTextInput(MyBOOK *myBook)
//  340 {
??CreateTextInput:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R4,R0
//  341   int text=EMPTY_TEXTID;
//  342   int type=myBook->inputType;
        LDR      R5,[R4, #+68]
//  343   int size=0;
//  344   text=get_curstrid(myBook);
        BL       ??get_curstrid
        MOV      R6,R0
//  345   if (myBook->inputType==IT_UNSIGNED_DIGIT)
        LDR      R0,[R4, #+68]
        CMP      R0,#+9
        BNE      ??CreateTextInput_1
//  346   {
//  347     size=getnumwidth(myBook->maxint);
        LDR      R0,[R4, #+60]
        BL       ??getnumwidth
        MOV      R7,R0
        B        ??CreateTextInput_2
//  348   }
//  349   else
//  350   {
//  351     size=myBook->maxint;
??CreateTextInput_1:
        LDR      R7,[R4, #+60]
//  352   }
//  353   int en=0;
//  354   if (myBook->TextInputType==4 || myBook->TextInputType==1)
??CreateTextInput_2:
        LDR      R0,[R4, #+64]
        MOV      R8,#+0
        CMP      R0,#+4
        CMPNE    R0,#+1
//  355   {
//  356     en=1;
//  357   }
//  358   myBook->text_input = CreateStringInputVA(0,
//  359                                               VAR_HEADER_TEXT(get_headerstrid(myBook->TextInputType)),
//  360                                               VAR_STRINP_FIXED_TEXT(GetStrID(L"EC_TEXTP_TXT")),
//  361                                               VAR_STRINP_ENABLE_EMPTY_STR(en),
//  362                                               VAR_STRINP_MAX_LEN(size),
//  363                                               VAR_STRINP_MODE(type),
//  364                                               VAR_STRINP_TEXT(text),
//  365                                               VAR_BOOK(myBook),
//  366                                               VAR_PREV_ACTION_PROC(OnBackCreateTextInputGui),
//  367                                               VAR_OK_PROC(OnOkCreateWinOrPassGui),
//  368                                               0);
        LDR      R0,??CreateTextInput_3  ;; `?<Constant L"\\x45\\x43\\x5f\\x54\\x45\\x58\\x54\\x50\\`
        MOVEQ    R8,#+1
        _BLF     ??GetStrID,??GetStrID??rA
        MOV      R9,R0
        LDR      R0,[R4, #+64]
        BL       ??get_headerstrid
        LDR      R3,??CreateTextInput_3+0x4  ;; VAR_ARG_STRINP_FIXED_TEXT
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+32
        LDR      R1,??CreateTextInput_3+0x8  ;; ??OnOkCreateWinOrPassGui
        MOV      R2,R0
        PUSH     {R1}
        CFI CFA R13+36
        LDR      R1,??CreateTextInput_3+0xC  ;; VAR_ARG_CALL_BACK_OK
        MOV      R0,#+0
        PUSH     {R1}
        CFI CFA R13+40
        LDR      R1,??CreateTextInput_3+0x10  ;; ??OnBackCreateTextInputGui
        PUSH     {R1}
        CFI CFA R13+44
        LDR      R1,??CreateTextInput_3+0x14  ;; VAR_ARG_CALL_BACK_PREV_ACT
        PUSH     {R1}
        CFI CFA R13+48
        MOV      R1,R4
        PUSH     {R1}
        CFI CFA R13+52
        LDR      R1,??CreateTextInput_3+0x18  ;; VAR_ARG_BOOK
        PUSH     {R1}
        CFI CFA R13+56
        LDR      R1,??CreateTextInput_3+0x1C  ;; VAR_ARG_STRINP_TEXT
        PUSH     {R6}
        CFI CFA R13+60
        PUSH     {R1}
        CFI CFA R13+64
        LDR      R1,??CreateTextInput_3+0x20  ;; VAR_ARG_STRINP_MODE
        PUSH     {R5}
        CFI CFA R13+68
        PUSH     {R1}
        CFI CFA R13+72
        LDR      R1,??CreateTextInput_3+0x24  ;; VAR_ARG_STRINP_MAX_LEN
        PUSH     {R7}
        CFI CFA R13+76
        PUSH     {R1}
        CFI CFA R13+80
        LDR      R1,??CreateTextInput_3+0x28  ;; VAR_ARG_STRINP_EMPTY_STR_EN
        PUSH     {R8}
        CFI CFA R13+84
        PUSH     {R1}
        CFI CFA R13+88
        LDR      R1,??CreateTextInput_3+0x2C  ;; VAR_ARG_HTEXT
        PUSH     {R9}
        CFI CFA R13+92
        SWI      +324
        ADD      SP,SP,#+64
        CFI CFA R13+28
        STR      R0,[R4, #+52]
//  369 };
        POP      {R4-R9,PC}       ;; return
        DATA
??CreateTextInput_3:
        DC32     `?<Constant L"\\x45\\x43\\x5f\\x54\\x45\\x58\\x54\\x50\\`
        DC32     VAR_ARG_STRINP_FIXED_TEXT
        DC32     ??OnOkCreateWinOrPassGui
        DC32     VAR_ARG_CALL_BACK_OK
        DC32     ??OnBackCreateTextInputGui
        DC32     VAR_ARG_CALL_BACK_PREV_ACT
        DC32     VAR_ARG_BOOK
        DC32     VAR_ARG_STRINP_TEXT
        DC32     VAR_ARG_STRINP_MODE
        DC32     VAR_ARG_STRINP_MAX_LEN
        DC32     VAR_ARG_STRINP_EMPTY_STR_EN
        DC32     VAR_ARG_HTEXT
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??StringInputPage_OnEnter??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??StringInputPage_OnEnter
//  370 
//  371 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??StringInputPage_OnEnter
        ARM
//  372 static int StringInputPage_OnEnter(void *,BOOK * bk)
//  373 {
??StringInputPage_OnEnter:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,R1
//  374   CreateTextInput((MyBOOK*)bk);
        BL       ??CreateTextInput
//  375   return (1);
        MOV      R0,#+1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock19
//  376 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??StringInputPage_OnExit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ??StringInputPage_OnExit
//  377 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ??StringInputPage_OnExit
        ARM
//  378 static int StringInputPage_OnExit(void *, BOOK * bk)
//  379 {
??StringInputPage_OnExit:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
//  380   MyBOOK *mbk=(MyBOOK *)bk;
//  381   FREE_GUI(mbk->text_input);
        LDR      R0,[R4, #+52]
        CMP      R0,#+0
        BEQ      ??StringInputPage_OnExit_1
        SWI      +462
        STR      R0,[R4, #+52]
//  382   return (1);  
??StringInputPage_OnExit_1:
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock21
//  383 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine11_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine11_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine12_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine12_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI NoFunction
        ARM
??_Geterrno??rA:
        LDR      R12,??Subroutine13_0  ;; _Geterrno
        BX       R12
        DATA
??Subroutine13_0:
        DC32     _Geterrno
        CFI EndBlock cfiBlock24

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI NoFunction
        ARM
??wcstoul??rA:
        LDR      R12,??Subroutine14_0  ;; wcstoul
        BX       R12
        DATA
??Subroutine14_0:
        DC32     wcstoul
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine15_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine15_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock26

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI NoFunction
        ARM
??GetStrID??rA:
        LDR      R12,??Subroutine16_0  ;; ??GetStrID
        BX       R12
        DATA
??Subroutine16_0:
        DC32     ??GetStrID
        CFI EndBlock cfiBlock27
//  384 

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
//  385 const PAGE_MSG bk_msglst_StringInput[] @ "DYN_PAGE"  = 
bk_msglst_StringInput:
        DATA
        DC32 66, ??StringInputPage_OnEnter, 67, ??StringInputPage_OnExit, 64
        DC32 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "EvtEdit_StringInput_Page">`:
        DATA
        DC8 "EvtEdit_StringInput_Page"
        DC8 0, 0, 0
//  386 {
//  387   PAGE_ENTER_EVENT_TAG,    StringInputPage_OnEnter,
//  388   PAGE_EXIT_EVENT_TAG,     StringInputPage_OnExit,
//  389   NIL_EVENT_TAG,           NULL
//  390 };
//  391 

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x6d\\x69\\x6e\\x3a\\x20\\x25\\x75\\xa\\x`:
        DATA
        DC8 6DH, 0, 69H, 0, 6EH, 0, 3AH, 0
        DC8 20H, 0, 25H, 0, 75H, 0, 0AH, 0
        DC8 6DH, 0, 61H, 0, 78H, 0, 3AH, 0
        DC8 20H, 0, 25H, 0, 75H, 0, 0, 0
//  392 const PAGE_DESC bk_StringInput = {"EvtEdit_StringInput_Page",0,bk_msglst_StringInput};
bk_StringInput:
        DC32 `?<Constant "EvtEdit_StringInput_Page">`, 0H
        DC32 bk_msglst_StringInput

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x57\\x41\\x50\\x5f\\x45\\x4e\\x54\\x45\\`:
        DATA
        DC8 57H, 0, 41H, 0, 50H, 0, 5FH, 0
        DC8 45H, 0, 4EH, 0, 54H, 0, 45H, 0
        DC8 52H, 0, 5FH, 0, 53H, 0, 4BH, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(1)
        DATA
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x45\\x43\\x5f\\x54\\x45\\x58\\x54\\x50\\`:
        DATA
        DC8 45H, 0, 43H, 0, 5FH, 0, 54H, 0
        DC8 45H, 0, 58H, 0, 54H, 0, 50H, 0
        DC8 5FH, 0, 54H, 0, 58H, 0, 54H, 0
        DC8 0, 0
        DC8 0, 0

        END
//  393 
// 
// 2 960 bytes in segment CODE
//   130 bytes in segment DATA_C
//    24 bytes in segment DYN_PAGE
// 
// 2 844 bytes of CODE  memory (+ 116 bytes shared)
//   154 bytes of CONST memory
//
//Errors: none
//Warnings: none
