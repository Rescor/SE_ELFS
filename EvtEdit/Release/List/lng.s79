//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:55:49 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\lng.c /
//                       pp                                                  /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\lng.c /
//                       pp -D NDEBUG -D OLDFUNCTIONS -lC                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Relea /
//                       se\List\ -lA Z:\home\perk11\www\perk11.info\svn\SE\ /
//                       EvtEdit\Release\List\ -o                            /
//                       Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Relea /
//                       se\Obj\ -s9 --cpu_mode arm --endian little --cpu    /
//                       ARM926EJ-S --stack_align 4 --interwork -e           /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h -I Z:\home\perk11\IAR2\arm\INC\                /
//                       --inline_threshold=2                                /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Relea /
//                       se\List\lng.s79                                     /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME lng

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
        PUBLIC ??Lang_Initialize
        FUNCTION ??Lang_Initialize,0203H
        LOCFRAME CSTACK, 44, STACK
        MULTWEAK ??Lang_Initialize??rT
        PUBLIC ??Lang_Remove
        FUNCTION ??Lang_Remove,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??Lang_Remove??rT
        PUBLIC ??char2unicode
        FUNCTION ??char2unicode,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??char2unicode??rT
        PUBLIC ??checkfile
        FUNCTION ??checkfile,0203H
        LOCFRAME CSTACK, 40, STACK
        MULTWEAK ??checkfile??rT
        PUBLIC ??destroy_innative_lng
        FUNCTION ??destroy_innative_lng,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??destroy_innative_lng??rT
        MULTWEAK ??getparam2??rA
        PUBLIC ??isNative
        FUNCTION ??isNative,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??isNative??rT
        PUBLIC ??isbetween
        FUNCTION ??isbetween,0203H
        MULTWEAK ??isbetween??rT
        PUBLIC ??lng_load
        FUNCTION ??lng_load,0203H
        LOCFRAME CSTACK, 196, STACK
        MULTWEAK ??lng_load??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new[]??rA`
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC fbuf
        PUBLIC fsize
        PUBLIC lng
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        




??Lang_Initialize??rT SYMBOL "??rT", ??Lang_Initialize

??Lang_Remove??rT   SYMBOL "??rT", ??Lang_Remove

??char2unicode??rT  SYMBOL "??rT", ??char2unicode

??checkfile??rT     SYMBOL "??rT", ??checkfile

??destroy_innative_lng??rT SYMBOL "??rT", ??destroy_innative_lng
??getparam2??rA     SYMBOL "??rA", ??getparam2

??isNative??rT      SYMBOL "??rT", ??isNative

??isbetween??rT     SYMBOL "??rT", ??isbetween

??lng_load??rT      SYMBOL "??rT", ??lng_load
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

        EXTERN ??getparam2
        FUNCTION ??getparam2,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN ELF_BEGIN
        EXTERN extFolder
        EXTERN intFolder
        EXTERN items

// Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\lng.cpp
//    1 #include "..\deleaker\mem2.h"
//    2 #include "..\include\Lib_Clara.h" 
//    3 #include "..\include\Dir.h" 
//    4 #include "header\structs.h"
//    5 #include "header\lng.h"
//    6 #include "header\string.h"
//    7 
//    8 extern wchar_t *items[];
//    9 
//   10 char *getparam2(char *buf, char *mask, char end, int fsize);
//   11 void Lang_Initialize();
//   12 void Lang_Remove();
//   13 void char2unicode(wchar_t *ws, char const *s, int len);
//   14 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   15 int fsize=0;
fsize:
        DS8 4
//   16 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   17 wchar_t *lng[]={
lng:
        DS8 308
        REQUIRE `?<Initializer for lng>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??isbetween??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??isbetween
//   18   L"Время начала",
//   19   L"Время конца",
//   20   L"Событие", 
//   21   L"Дни", 
//   22   L"Дата начала", 
//   23   L"Дата конца",
//   24   L"Название",
//   25   L"Напоминания", 
//   26   L"GPS",
//   27   L"Создать",
//   28   L"Понедельник",
//   29   L"Вторник",
//   30   L"Среда",
//   31   L"Четверг",
//   32   L"Пятница",
//   33   L"Суббота",
//   34   L"Воскресение",
//   35   L"Рабочие дни",
//   36   L"Выходные",
//   37   L"Все дни",
//   38   L"До начала:",
//   39   L"После начала:",
//   40   L"До конца:",
//   41   L"После конца:", 
//   42   L"Минуты",
//   43   L"Тип напоминания",
//   44   L"По дням",
//   45   L"Дата",
//   46   L"Тип времени",
//   47   L"Опр. время",
//   48   L"Интервал",
//   49   L"Выкл.",
//   50   L"Вкл.",
//   51   L"Вкл. (без звука)",
//   52   L"Обычный",
//   53   L"Любая клавиша",
//   54   L"Автоматически",
//   55   L"Приём всех",
//   56   L"Из списка",
//   57   L"Нет",
//   58   L"Выберите профиль",
//   59   L"Время начала события",
//   60   L"Время конца события (если выбран режим 'интервал')",
//   61   L"Действие, установленное на данное время",
//   62   L"Дни выполнения события (если выбран режим 'по дням')",
//   63   L"Дата начала (если выбран режим 'дата')",
//   64   L"Дата конца (если выбран режим 'дата')",
//   65   L"Название события, которое будет использоваться в напоминаниях, а также на рабочем столе эльфом EvtDesk",
//   66   L"Время напоминаний",
//   67   L"GPS-метка. Используется значение вида CID-LAC. Например, '2028-4ABC'.",
//   68   L"Клоногенератор",
//   69   L"Данная функция используется для 'клонирования' события через определённые промежутки времени",
//   70   L"Индикация",
//   71   L"Цветные диоды",
//   72   L"Оранж. диод",
//   73   L"Красный диод",
//   74   L"Вибрация",
//   75   L"Звук",
//   76   L"Секунды",
//   77   L"Введите интервал",
//   78   L"Введите макс.кол-во",
//   79   L"Стандартные настройки",
//   80   L"Выбор",
//   81   L"Громкость",
//   82   L"Дни",
//   83   L"Действия",
//   84   L"Муз.файл",
//   85   L"Текущий статус",
//   86   L"Муз.файл не установлен",
//   87   L"Дата",
//   88   L"Время",
//   89   L"Сохранить",
//   90   L"На карту памяти",
//   91   L"На телефон",
//   92   0,0,0
//   93 };
//   94 
//   95 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??isbetween
        ARM
//   96 bool isbetween(int f, int f1, int f2)
//   97 {
//   98   if (f>=f1 && f<=f2)return true;
??isbetween:
        CMP      R0,R1
        CMPGE    R2,R0
        MOVGE    R0,#+1
        BXGE     LR
//   99   return false;
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//  100 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??isNative??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??isNative
//  101 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??isNative
        ARM
//  102 bool isNative(void *f)
//  103 {
//  104   return isbetween((int)f, (int)&ELF_BEGIN, ((int)&ELF_BEGIN)+fsize);
??isNative:
        LDR      R1,??isNative_1  ;; ELF_BEGIN
        SUB      SP,SP,#+4
        CFI CFA R13+4
        CMP      R0,R1
        BLT      ??isNative_2
        LDR      R2,??isNative_1+0x4  ;; fsize
        LDR      R2,[R2, #+0]
        ADD      R1,R2,R1
        CMP      R1,R0
        MOVGE    R0,#+1
        BGE      ??isNative_3
??isNative_2:
        MOV      R0,#+0
??isNative_3:
        POP      {R1}
        CFI CFA R13+0
        BX       LR               ;; return
        DATA
??isNative_1:
        DC32     ELF_BEGIN
        DC32     fsize
        CFI EndBlock cfiBlock3
//  105 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??lng_load??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??lng_load
//  106 
//  107 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??lng_load
        ARM
//  108 int lng_load(wchar_t *path, wchar_t *name)
//  109 {
??lng_load:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+156
        CFI CFA R13+192
        MOV      R4,R0
        MOV      R6,R1
//  110   Lang_Initialize();
        BL       ??Lang_Initialize
//  111   int res=1;
        MOV      R5,#+1
//  112   int file;
//  113   FSTAT fst;
//  114   if (fstat(path,name,&fst)==0)
        MOV      R2,SP
        MOV      R1,R6
        MOV      R0,R4
        SWI      +284
        CMP      R0,#+0
        BNE      ??lng_load_1
//  115   {
//  116     res=0;
//  117     if ((file=_fopen(path,name,FSX_O_RDONLY,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
        PUSH     {R0}
        CFI CFA R13+196
        MOV      R5,#+0
        MOV      R3,#+384
        MOV      R2,#+1
        MOV      R1,R6
        MOV      R0,R4
        SWI      +278
        MOVS     R6,R0
        ADD      SP,SP,#+4
        CFI CFA R13+192
        BMI      ??lng_load_2
//  118     {
//  119       char * buf;
//  120       char * param;
//  121       buf=new char[fst.fsize+1];
        LDR      R0,[SP, #+8]
//  122       fread(file,buf,fst.fsize);
//  123       int x=0;
//  124       char endsymbol=';';
        LDR      R9,??lng_load_3  ;; `?<Constant "lnged_%d)">`
        LDR      R10,??DataTable3  ;; lng
        ADD      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        LDR      R2,[SP, #+8]
        MOV      R7,R0
        MOV      R1,R7
        MOV      R0,R6
        SWI      +280
        MOV      R8,#+0
        B        ??lng_load_4
//  125       
//  126       while (1)
//  127       {
//  128         char pattern[128];
//  129         sprintf(pattern,"lnged_%d)",x);
//  130         if (param=getparam2(buf,pattern,endsymbol, fst.fsize))
//  131         {
//  132           
//  133           if (lng[x])
//  134           {
//  135             if (!isNative(lng[x]))
??lng_load_5:
        CMP      R0,#+0
        BNE      ??lng_load_6
//  136             {
//  137               delete(lng[x]);
        MOV      R0,R11
        _BLF     `??operator delete`,`??operator delete??rA`
//  138             }
//  139           }
//  140           lng[x]=new wchar_t[strlen(param)+1];
??lng_load_6:
        MOV      R0,R4
        SWI      +346
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R10, +R8, LSL #+2]
//  141           char2unicode(lng[x],param,strlen(param));
        MOV      R0,R4
        SWI      +346
        MOV      R2,R0
        LDR      R0,[R10, +R8, LSL #+2]
        MOV      R1,R4
        BL       ??char2unicode
//  142           delete(param);
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
//  143         }
//  144         else break;
//  145         x++;
        ADD      R8,R8,#+1
??lng_load_4:
        MOV      R2,R8
        MOV      R1,R9
        ADD      R0,SP,#+28
        SWI      +276
        LDR      R3,[SP, #+8]
        MOV      R2,#+59
        ADD      R1,SP,#+28
        MOV      R0,R7
        _BLF     ??getparam2,??getparam2??rA
        MOVS     R4,R0
        BEQ      ??lng_load_7
        LDR      R11,[R10, +R8, LSL #+2]
        CMP      R11,#+0
        BEQ      ??lng_load_6
        MOV      R0,R11
        BL       ??isNative
        CMP      R0,#+0
        BEQ      ??lng_load_5
        MOV      R0,#+1
        B        ??lng_load_5
//  146       }
//  147       x=0;
??lng_load_7:
        LDR      R10,??DataTable2  ;; items
        MOV      R8,#+0
        B        ??lng_load_8
//  148       while (1)
//  149       {
//  150         char pattern[128];
//  151         sprintf(pattern,"items_%d)",x);
//  152         if (param=getparam2(buf,pattern,endsymbol, fst.fsize))
//  153         {
//  154           if (items[x])
//  155           {
//  156             
//  157             if (!isNative(items[x]))
??lng_load_9:
        CMP      R0,#+0
        BNE      ??lng_load_10
//  158             {
//  159               delete(items[x]);
        MOV      R0,R11
        _BLF     `??operator delete`,`??operator delete??rA`
//  160             }
//  161           }
//  162           items[x]=new wchar_t[strlen(param)+1];
??lng_load_10:
        MOV      R0,R4
        SWI      +346
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R10, +R8, LSL #+2]
//  163           char2unicode(items[x],param,strlen(param));
        MOV      R0,R4
        SWI      +346
        MOV      R2,R0
        LDR      R0,[R10, +R8, LSL #+2]
        MOV      R1,R4
        BL       ??char2unicode
//  164           delete(param);
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
//  165         }
//  166         else 
//  167           goto L_away;
//  168         x++;
        ADD      R8,R8,#+1
??lng_load_8:
        MOV      R2,R8
        ADD      R1,R9,#+12
        ADD      R0,SP,#+28
        SWI      +276
        LDR      R3,[SP, #+8]
        MOV      R2,#+59
        ADD      R1,SP,#+28
        MOV      R0,R7
        _BLF     ??getparam2,??getparam2??rA
        MOVS     R4,R0
        BEQ      ??lng_load_2
        LDR      R11,[R10, +R8, LSL #+2]
        CMP      R11,#+0
        BEQ      ??lng_load_10
        MOV      R0,R11
        BL       ??isNative
        CMP      R0,#+0
        BEQ      ??lng_load_9
        MOV      R0,#+1
        B        ??lng_load_9
//  169       }
//  170     L_away:
//  171       ;
//  172     }
//  173     fclose(file);
??lng_load_2:
        MOV      R0,R6
        SWI      +279
//  174   }
//  175   return res;
??lng_load_1:
        MOV      R0,R5
        ADD      SP,SP,#+156
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??lng_load_3:
        DC32     `?<Constant "lnged_%d)">`
        CFI EndBlock cfiBlock5
//  176 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??destroy_innative_lng??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??destroy_innative_lng
//  177 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??destroy_innative_lng
        ARM
//  178 void destroy_innative_lng()
//  179 {
??destroy_innative_lng:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
//  180   Lang_Remove();
//  181   int x=0;
        LDR      R5,??DataTable2  ;; items
        MOV      R4,#+0
        BL       ??Lang_Remove
        LDR      R0,[R5, #+0]
        CMP      R0,#+0
        BNE      ??destroy_innative_lng_1
        B        ??destroy_innative_lng_2
//  182   while (1)
//  183   {
//  184     if (!items[x])break;
//  185     if (!isNative(items[x]))
??destroy_innative_lng_3:
        CMP      R0,#+0
        BNE      ??destroy_innative_lng_4
//  186     {
//  187       delete(items[x]);
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//  188     }
//  189     x++;
??destroy_innative_lng_4:
        ADD      R4,R4,#+1
??destroy_innative_lng_1:
        LDR      R6,[R5, +R4, LSL #+2]
        CMP      R6,#+0
        BNE      ??destroy_innative_lng_5
//  190   };
//  191   x=0;
??destroy_innative_lng_2:
        LDR      R5,??DataTable3  ;; lng
        MOV      R4,#+0
        LDR      R0,[R5, #+0]
        CMP      R0,#+0
        BNE      ??destroy_innative_lng_6
        POP      {R4-R6,PC}
??destroy_innative_lng_5:
        MOV      R0,R6
        BL       ??isNative
        CMP      R0,#+0
        BEQ      ??destroy_innative_lng_3
        MOV      R0,#+1
        B        ??destroy_innative_lng_3
//  192   while (1)
//  193   {
//  194     if (!lng[x])return;
//  195     if (!isNative(lng[x]))
??destroy_innative_lng_7:
        CMP      R0,#+0
        BNE      ??destroy_innative_lng_8
//  196     {
//  197       delete(lng[x]);
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//  198     }
//  199     x++;
??destroy_innative_lng_8:
        ADD      R4,R4,#+1
??destroy_innative_lng_6:
        LDR      R6,[R5, +R4, LSL #+2]
        CMP      R6,#+0
        POPEQ    {R4-R6,PC}
        MOV      R0,R6
        BL       ??isNative
        CMP      R0,#+0
        BEQ      ??destroy_innative_lng_7
        MOV      R0,#+1
        B        ??destroy_innative_lng_7
        CFI EndBlock cfiBlock7
//  200   };
//  201 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     items

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     lng

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??checkfile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??checkfile
//  202 extern wchar_t *extFolder;
//  203 extern wchar_t *intFolder;

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??checkfile
        ARM
//  204 wchar_t *checkfile(wchar_t *name)
//  205 {
??checkfile:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  206   FSTAT fst;
//  207   if (fstat(extFolder,name,&fst)==0)
        LDR      R5,??checkfile_1  ;; extFolder
        SUB      SP,SP,#+28
        CFI CFA R13+40
        MOV      R4,R0
        LDR      R0,[R5, #+0]
        MOV      R2,SP
        MOV      R1,R4
        SWI      +284
        CMP      R0,#+0
        BEQ      ??checkfile_2
//  208   {
//  209     return extFolder;
//  210   }
//  211   else if (fstat(intFolder,name,&fst)==0)
        LDR      R5,??checkfile_1+0x4  ;; intFolder
        MOV      R2,SP
        LDR      R0,[R5, #+0]
        MOV      R1,R4
        SWI      +284
??checkfile_2:
        LDR      R0,[R5, #+0]
//  212   {
//  213     return intFolder;
//  214   }
//  215   return intFolder;
        ADD      SP,SP,#+28
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??checkfile_1:
        DC32     extFolder
        DC32     intFolder
        CFI EndBlock cfiBlock9
//  216 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??char2unicode??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??char2unicode
//  217 
//  218 wchar_t *checkfile(wchar_t*);

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//  219 char *fbuf=0;
fbuf:
        DS8 4
//  220 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??char2unicode
        ARM
//  221 void char2unicode(wchar_t *ws, char const *s, int len) 
//  222 {
//  223   if (fbuf)
??char2unicode:
        LDR      R3,??DataTable6  ;; fbuf
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R3,[R3, #+0]
        CMP      R3,#+0
        BEQ      ??char2unicode_1
//  224   {
//  225     int c;
//  226     char * buf=fbuf;
        B        ??char2unicode_2
//  227     while((c = *s++) && ((len--) > 0))   
//  228     {
//  229       if (c == 0x7E) c = 0x0A;
??char2unicode_3:
        CMP      R12,#+126
        MOVEQ    R12,#+10
//  230       if (fbuf) c = (buf[2 * c] << 8)  | buf[2 * c + 1];
//  231       *ws++ = c;
        ADD      R12,R3,R12, LSL #+1
        LDRB     R4,[R12, #+0]
        LDRB     R12,[R12, #+1]
        ORR      R4,R12,R4, LSL #+8
        STRH     R4,[R0], #+2
//  232   
//  233     }
??char2unicode_2:
        LDRB     R12,[R1], #+1
        CMP      R12,#+0
        BEQ      ??char2unicode_4
        MOV      R4,R2
        SUB      R2,R4,#+1
        CMP      R4,#+1
        BGE      ??char2unicode_3
//  234     *ws=0;
??char2unicode_4:
        MOV      R1,#+0
        STRH     R1,[R0, #+0]
        POP      {R4,PC}
//  235   }
//  236   else
//  237   {
//  238     str2wstr(ws, s);
??char2unicode_1:
        SWI      +344
//  239   }
//  240 };
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??Lang_Initialize??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??Lang_Initialize
//  241 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??Lang_Initialize
        ARM
//  242 void Lang_Initialize()
//  243 {
??Lang_Initialize:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  244   // Открываем лэнг и читаем в FBUF
//  245   fbuf=0;
        LDR      R4,??DataTable6  ;; fbuf
//  246   int file;
//  247   FSTAT fst;
//  248   if(fstat(checkfile(L"encoding.bin"), L"encoding.bin", &fst) == 0)
        LDR      R5,??Lang_Initialize_1  ;; `?<Constant L"\\x65\\x6e\\x63\\x6f\\x64\\x69\\x6e\\x67\\`
        SUB      SP,SP,#+28
        CFI CFA R13+40
        MOV      R0,#+0
        STR      R0,[R4, #+0]
        MOV      R0,R5
        BL       ??checkfile
        MOV      R2,SP
        MOV      R1,R5
        SWI      +284
        CMP      R0,#+0
        BNE      ??Lang_Initialize_2
//  249   {
//  250     if( ((file = _fopen(checkfile(L"encoding.bin"), L"encoding.bin", FSX_O_RDONLY, FSX_S_IREAD|FSX_S_IWRITE, 0)) >= 0) && fst.fsize == 512 )
        MOV      R0,R5
        BL       ??checkfile
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+44
        MOV      R3,#+384
        MOV      R2,#+1
        MOV      R1,R5
        SWI      +278
        MOVS     R5,R0
        ADD      SP,SP,#+4
        CFI CFA R13+40
        BMI      ??Lang_Initialize_3
        LDR      R0,[SP, #+8]
        CMP      R0,#+512
        BNE      ??Lang_Initialize_3
//  251     {
//  252       fbuf = new char[512];
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R4, #+0]
//  253       fread(file, fbuf, 512);
        MOV      R2,#+512
        MOV      R1,R0
        MOV      R0,R5
        SWI      +280
//  254     }
//  255     fclose(file);
??Lang_Initialize_3:
        MOV      R0,R5
        SWI      +279
//  256   }
//  257 };
??Lang_Initialize_2:
        ADD      SP,SP,#+28       ;; stack cleaning
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??Lang_Initialize_1:
        DC32     `?<Constant L"\\x65\\x6e\\x63\\x6f\\x64\\x69\\x6e\\x67\\`
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??Lang_Remove??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??Lang_Remove
//  258 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??Lang_Remove
        ARM
//  259 void Lang_Remove()
//  260 {
??Lang_Remove:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  261   if (fbuf)
        LDR      R4,??DataTable6  ;; fbuf
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        POPEQ    {R4,PC}
//  262   {
//  263     delete(fbuf);
        _BLF     `??operator delete`,`??operator delete??rA`
//  264     fbuf=0;
        MOV      R0,#+0
        STR      R0,[R4, #+0]
//  265   }
//  266 };
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     fbuf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine8_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine8_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine9_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine9_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
??getparam2??rA:
        LDR      R12,??Subroutine10_0  ;; ??getparam2
        BX       R12
        DATA
??Subroutine10_0:
        DC32     ??getparam2
        CFI EndBlock cfiBlock18

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for lng>`:
        DATA
        DC32 `?<Constant L"\\x412\\x440\\x435\\x43c\\x44f\\x20\\x43`
        DC32 `?<Constant L"\\x412\\x440\\x435\\x43c\\x44f\\x20\\x43_1`
        DC32 `?<Constant L"\\x421\\x43e\\x431\\x44b\\x442\\x438\\x4`
        DC32 `?<Constant L"\\x414\\x43d\\x438">`
        DC32 `?<Constant L"\\x414\\x430\\x442\\x430\\x20\\x43d\\x43`
        DC32 `?<Constant L"\\x414\\x430\\x442\\x430\\x20\\x43a\\x43`
        DC32 `?<Constant L"\\x41d\\x430\\x437\\x432\\x430\\x43d\\x4`
        DC32 `?<Constant L"\\x41d\\x430\\x43f\\x43e\\x43c\\x438\\x4`
        DC32 `?<Constant L"\\x47\\x50\\x53">`
        DC32 `?<Constant L"\\x421\\x43e\\x437\\x434\\x430\\x442\\x4`
        DC32 `?<Constant L"\\x41f\\x43e\\x43d\\x435\\x434\\x435\\x4`
        DC32 `?<Constant L"\\x412\\x442\\x43e\\x440\\x43d\\x438\\x4`
        DC32 `?<Constant L"\\x421\\x440\\x435\\x434\\x430">`
        DC32 `?<Constant L"\\x427\\x435\\x442\\x432\\x435\\x440\\x4`
        DC32 `?<Constant L"\\x41f\\x44f\\x442\\x43d\\x438\\x446\\x4`
        DC32 `?<Constant L"\\x421\\x443\\x431\\x431\\x43e\\x442\\x4`
        DC32 `?<Constant L"\\x412\\x43e\\x441\\x43a\\x440\\x435\\x4`
        DC32 `?<Constant L"\\x420\\x430\\x431\\x43e\\x447\\x438\\x4`
        DC32 `?<Constant L"\\x412\\x44b\\x445\\x43e\\x434\\x43d\\x4`
        DC32 `?<Constant L"\\x412\\x441\\x435\\x20\\x434\\x43d\\x43`
        DC32 `?<Constant L"\\x414\\x43e\\x20\\x43d\\x430\\x447\\x43`
        DC32 `?<Constant L"\\x41f\\x43e\\x441\\x43b\\x435\\x20\\x43`
        DC32 `?<Constant L"\\x414\\x43e\\x20\\x43a\\x43e\\x43d\\x44`
        DC32 `?<Constant L"\\x41f\\x43e\\x441\\x43b\\x435\\x20\\x43_1`
        DC32 `?<Constant L"\\x41c\\x438\\x43d\\x443\\x442\\x44b">`
        DC32 `?<Constant L"\\x422\\x438\\x43f\\x20\\x43d\\x430\\x43`
        DC32 `?<Constant L"\\x41f\\x43e\\x20\\x434\\x43d\\x44f\\x43`
        DC32 `?<Constant L"\\x414\\x430\\x442\\x430">`
        DC32 `?<Constant L"\\x422\\x438\\x43f\\x20\\x432\\x440\\x43`
        DC32 `?<Constant L"\\x41e\\x43f\\x440\\x2e\\x20\\x432\\x440`
        DC32 `?<Constant L"\\x418\\x43d\\x442\\x435\\x440\\x432\\x4`
        DC32 `?<Constant L"\\x412\\x44b\\x43a\\x43b\\x2e">`
        DC32 `?<Constant L"\\x412\\x43a\\x43b\\x2e">`
        DC32 `?<Constant L"\\x412\\x43a\\x43b\\x2e\\x20\\x28\\x431\\`
        DC32 `?<Constant L"\\x41e\\x431\\x44b\\x447\\x43d\\x44b\\x4`
        DC32 `?<Constant L"\\x41b\\x44e\\x431\\x430\\x44f\\x20\\x43`
        DC32 `?<Constant L"\\x410\\x432\\x442\\x43e\\x43c\\x430\\x4`
        DC32 `?<Constant L"\\x41f\\x440\\x438\\x451\\x43c\\x20\\x43`
        DC32 `?<Constant L"\\x418\\x437\\x20\\x441\\x43f\\x438\\x44`
        DC32 `?<Constant L"\\x41d\\x435\\x442">`
        DC32 `?<Constant L"\\x412\\x44b\\x431\\x435\\x440\\x438\\x4`
        DC32 `?<Constant L"\\x412\\x440\\x435\\x43c\\x44f\\x20\\x43_2`
        DC32 `?<Constant L"\\x412\\x440\\x435\\x43c\\x44f\\x20\\x43_3`
        DC32 `?<Constant L"\\x414\\x435\\x439\\x441\\x442\\x432\\x4`
        DC32 `?<Constant L"\\x414\\x43d\\x438\\x20\\x432\\x44b\\x43`
        DC32 `?<Constant L"\\x414\\x430\\x442\\x430\\x20\\x43d\\x43_1`
        DC32 `?<Constant L"\\x414\\x430\\x442\\x430\\x20\\x43a\\x43_1`
        DC32 `?<Constant L"\\x41d\\x430\\x437\\x432\\x430\\x43d\\x4_1`
        DC32 `?<Constant L"\\x412\\x440\\x435\\x43c\\x44f\\x20\\x43_4`
        DC32 `?<Constant L"\\x47\\x50\\x53\\x2d\\x43c\\x435\\x442\\x`
        DC32 `?<Constant L"\\x41a\\x43b\\x43e\\x43d\\x43e\\x433\\x4`
        DC32 `?<Constant L"\\x414\\x430\\x43d\\x43d\\x430\\x44f\\x2`
        DC32 `?<Constant L"\\x418\\x43d\\x434\\x438\\x43a\\x430\\x4`
        DC32 `?<Constant L"\\x426\\x432\\x435\\x442\\x43d\\x44b\\x4`
        DC32 `?<Constant L"\\x41e\\x440\\x430\\x43d\\x436\\x2e\\x20`
        DC32 `?<Constant L"\\x41a\\x440\\x430\\x441\\x43d\\x44b\\x4`
        DC32 `?<Constant L"\\x412\\x438\\x431\\x440\\x430\\x446\\x4`
        DC32 `?<Constant L"\\x417\\x432\\x443\\x43a">`
        DC32 `?<Constant L"\\x421\\x435\\x43a\\x443\\x43d\\x434\\x4`
        DC32 `?<Constant L"\\x412\\x432\\x435\\x434\\x438\\x442\\x4`
        DC32 `?<Constant L"\\x412\\x432\\x435\\x434\\x438\\x442\\x4_1`
        DC32 `?<Constant L"\\x421\\x442\\x430\\x43d\\x434\\x430\\x4`
        DC32 `?<Constant L"\\x412\\x44b\\x431\\x43e\\x440">`
        DC32 `?<Constant L"\\x413\\x440\\x43e\\x43c\\x43a\\x43e\\x4`
        DC32 `?<Constant L"\\x414\\x43d\\x438">`
        DC32 `?<Constant L"\\x414\\x435\\x439\\x441\\x442\\x432\\x4_1`
        DC32 `?<Constant L"\\x41c\\x443\\x437\\x2e\\x444\\x430\\x43`
        DC32 `?<Constant L"\\x422\\x435\\x43a\\x443\\x449\\x438\\x4`
        DC32 `?<Constant L"\\x41c\\x443\\x437\\x2e\\x444\\x430\\x43_1`
        DC32 `?<Constant L"\\x414\\x430\\x442\\x430">`
        DC32 `?<Constant L"\\x412\\x440\\x435\\x43c\\x44f">`
        DC32 `?<Constant L"\\x421\\x43e\\x445\\x440\\x430\\x43d\\x4`
        DC32 `?<Constant L"\\x41d\\x430\\x20\\x43a\\x430\\x440\\x44`
        DC32 `?<Constant L"\\x41d\\x430\\x20\\x442\\x435\\x43b\\x43`, 0H, 0H
        DC32 0H

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41d\\x430\\x437\\x432\\x430\\x43d\\x4`:
        DATA
        DC8 1DH, 4, 30H, 4, 37H, 4, 32H, 4
        DC8 30H, 4, 3DH, 4, 38H, 4, 35H, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "lnged_%d)">`:
        DATA
        DC8 "lnged_%d)"
        DC8 0, 0
        DC8 "items_%d)"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x440\\x435\\x43c\\x44f\\x20\\x43`:
        DATA
        DC8 12H, 4, 40H, 4, 35H, 4, 3CH, 4
        DC8 4FH, 4, 20H, 0, 3DH, 4, 30H, 4
        DC8 47H, 4, 30H, 4, 3BH, 4, 30H, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x440\\x435\\x43c\\x44f\\x20\\x43_1`:
        DATA
        DC8 12H, 4, 40H, 4, 35H, 4, 3CH, 4
        DC8 4FH, 4, 20H, 0, 3AH, 4, 3EH, 4
        DC8 3DH, 4, 46H, 4, 30H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x421\\x43e\\x431\\x44b\\x442\\x438\\x4`:
        DATA
        DC8 21H, 4, 3EH, 4, 31H, 4, 4BH, 4
        DC8 42H, 4, 38H, 4, 35H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x414\\x43d\\x438">`:
        DATA
        DC8 14H, 4, 3DH, 4, 38H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x414\\x430\\x442\\x430\\x20\\x43d\\x43`:
        DATA
        DC8 14H, 4, 30H, 4, 42H, 4, 30H, 4
        DC8 20H, 0, 3DH, 4, 30H, 4, 47H, 4
        DC8 30H, 4, 3BH, 4, 30H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x414\\x430\\x442\\x430\\x20\\x43a\\x43`:
        DATA
        DC8 14H, 4, 30H, 4, 42H, 4, 30H, 4
        DC8 20H, 0, 3AH, 4, 3EH, 4, 3DH, 4
        DC8 46H, 4, 30H, 4, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x421\\x443\\x431\\x431\\x43e\\x442\\x4`:
        DATA
        DC8 21H, 4, 43H, 4, 31H, 4, 31H, 4
        DC8 3EH, 4, 42H, 4, 30H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41d\\x430\\x43f\\x43e\\x43c\\x438\\x4`:
        DATA
        DC8 1DH, 4, 30H, 4, 3FH, 4, 3EH, 4
        DC8 3CH, 4, 38H, 4, 3DH, 4, 30H, 4
        DC8 3DH, 4, 38H, 4, 4FH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x47\\x50\\x53">`:
        DATA
        DC8 47H, 0, 50H, 0, 53H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x421\\x43e\\x437\\x434\\x430\\x442\\x4`:
        DATA
        DC8 21H, 4, 3EH, 4, 37H, 4, 34H, 4
        DC8 30H, 4, 42H, 4, 4CH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41f\\x43e\\x43d\\x435\\x434\\x435\\x4`:
        DATA
        DC8 1FH, 4, 3EH, 4, 3DH, 4, 35H, 4
        DC8 34H, 4, 35H, 4, 3BH, 4, 4CH, 4
        DC8 3DH, 4, 38H, 4, 3AH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x442\\x43e\\x440\\x43d\\x438\\x4`:
        DATA
        DC8 12H, 4, 42H, 4, 3EH, 4, 40H, 4
        DC8 3DH, 4, 38H, 4, 3AH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x421\\x440\\x435\\x434\\x430">`:
        DATA
        DC8 21H, 4, 40H, 4, 35H, 4, 34H, 4
        DC8 30H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x427\\x435\\x442\\x432\\x435\\x440\\x4`:
        DATA
        DC8 27H, 4, 35H, 4, 42H, 4, 32H, 4
        DC8 35H, 4, 40H, 4, 33H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41f\\x44f\\x442\\x43d\\x438\\x446\\x4`:
        DATA
        DC8 1FH, 4, 4FH, 4, 42H, 4, 3DH, 4
        DC8 38H, 4, 46H, 4, 30H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x65\\x6e\\x63\\x6f\\x64\\x69\\x6e\\x67\\`:
        DATA
        DC8 65H, 0, 6EH, 0, 63H, 0, 6FH, 0
        DC8 64H, 0, 69H, 0, 6EH, 0, 67H, 0
        DC8 2EH, 0, 62H, 0, 69H, 0, 6EH, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x43e\\x441\\x43a\\x440\\x435\\x4`:
        DATA
        DC8 12H, 4, 3EH, 4, 41H, 4, 3AH, 4
        DC8 40H, 4, 35H, 4, 41H, 4, 35H, 4
        DC8 3DH, 4, 38H, 4, 35H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x420\\x430\\x431\\x43e\\x447\\x438\\x4`:
        DATA
        DC8 20H, 4, 30H, 4, 31H, 4, 3EH, 4
        DC8 47H, 4, 38H, 4, 35H, 4, 20H, 0
        DC8 34H, 4, 3DH, 4, 38H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x44b\\x445\\x43e\\x434\\x43d\\x4`:
        DATA
        DC8 12H, 4, 4BH, 4, 45H, 4, 3EH, 4
        DC8 34H, 4, 3DH, 4, 4BH, 4, 35H, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x441\\x435\\x20\\x434\\x43d\\x43`:
        DATA
        DC8 12H, 4, 41H, 4, 35H, 4, 20H, 0
        DC8 34H, 4, 3DH, 4, 38H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x414\\x43e\\x20\\x43d\\x430\\x447\\x43`:
        DATA
        DC8 14H, 4, 3EH, 4, 20H, 0, 3DH, 4
        DC8 30H, 4, 47H, 4, 30H, 4, 3BH, 4
        DC8 30H, 4, 3AH, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41f\\x43e\\x441\\x43b\\x435\\x20\\x43`:
        DATA
        DC8 1FH, 4, 3EH, 4, 41H, 4, 3BH, 4
        DC8 35H, 4, 20H, 0, 3DH, 4, 30H, 4
        DC8 47H, 4, 30H, 4, 3BH, 4, 30H, 4
        DC8 3AH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x414\\x43e\\x20\\x43a\\x43e\\x43d\\x44`:
        DATA
        DC8 14H, 4, 3EH, 4, 20H, 0, 3AH, 4
        DC8 3EH, 4, 3DH, 4, 46H, 4, 30H, 4
        DC8 3AH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41f\\x43e\\x441\\x43b\\x435\\x20\\x43_1`:
        DATA
        DC8 1FH, 4, 3EH, 4, 41H, 4, 3BH, 4
        DC8 35H, 4, 20H, 0, 3AH, 4, 3EH, 4
        DC8 3DH, 4, 46H, 4, 30H, 4, 3AH, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41c\\x438\\x43d\\x443\\x442\\x44b">`:
        DATA
        DC8 1CH, 4, 38H, 4, 3DH, 4, 43H, 4
        DC8 42H, 4, 4BH, 4, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x422\\x438\\x43f\\x20\\x43d\\x430\\x43`:
        DATA
        DC8 22H, 4, 38H, 4, 3FH, 4, 20H, 0
        DC8 3DH, 4, 30H, 4, 3FH, 4, 3EH, 4
        DC8 3CH, 4, 38H, 4, 3DH, 4, 30H, 4
        DC8 3DH, 4, 38H, 4, 4FH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41f\\x43e\\x20\\x434\\x43d\\x44f\\x43`:
        DATA
        DC8 1FH, 4, 3EH, 4, 20H, 0, 34H, 4
        DC8 3DH, 4, 4FH, 4, 3CH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x414\\x430\\x442\\x430">`:
        DATA
        DC8 14H, 4, 30H, 4, 42H, 4, 30H, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x422\\x438\\x43f\\x20\\x432\\x440\\x43`:
        DATA
        DC8 22H, 4, 38H, 4, 3FH, 4, 20H, 0
        DC8 32H, 4, 40H, 4, 35H, 4, 3CH, 4
        DC8 35H, 4, 3DH, 4, 38H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41e\\x43f\\x440\\x2e\\x20\\x432\\x440`:
        DATA
        DC8 1EH, 4, 3FH, 4, 40H, 4, 2EH, 0
        DC8 20H, 0, 32H, 4, 40H, 4, 35H, 4
        DC8 3CH, 4, 4FH, 4, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x418\\x43d\\x442\\x435\\x440\\x432\\x4`:
        DATA
        DC8 18H, 4, 3DH, 4, 42H, 4, 35H, 4
        DC8 40H, 4, 32H, 4, 30H, 4, 3BH, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x44b\\x43a\\x43b\\x2e">`:
        DATA
        DC8 12H, 4, 4BH, 4, 3AH, 4, 3BH, 4
        DC8 2EH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x43a\\x43b\\x2e">`:
        DATA
        DC8 12H, 4, 3AH, 4, 3BH, 4, 2EH, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x43a\\x43b\\x2e\\x20\\x28\\x431\\`:
        DATA
        DC8 12H, 4, 3AH, 4, 3BH, 4, 2EH, 0
        DC8 20H, 0, 28H, 0, 31H, 4, 35H, 4
        DC8 37H, 4, 20H, 0, 37H, 4, 32H, 4
        DC8 43H, 4, 3AH, 4, 30H, 4, 29H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41e\\x431\\x44b\\x447\\x43d\\x44b\\x4`:
        DATA
        DC8 1EH, 4, 31H, 4, 4BH, 4, 47H, 4
        DC8 3DH, 4, 4BH, 4, 39H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41b\\x44e\\x431\\x430\\x44f\\x20\\x43`:
        DATA
        DC8 1BH, 4, 4EH, 4, 31H, 4, 30H, 4
        DC8 4FH, 4, 20H, 0, 3AH, 4, 3BH, 4
        DC8 30H, 4, 32H, 4, 38H, 4, 48H, 4
        DC8 30H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x410\\x432\\x442\\x43e\\x43c\\x430\\x4`:
        DATA
        DC8 10H, 4, 32H, 4, 42H, 4, 3EH, 4
        DC8 3CH, 4, 30H, 4, 42H, 4, 38H, 4
        DC8 47H, 4, 35H, 4, 41H, 4, 3AH, 4
        DC8 38H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41f\\x440\\x438\\x451\\x43c\\x20\\x43`:
        DATA
        DC8 1FH, 4, 40H, 4, 38H, 4, 51H, 4
        DC8 3CH, 4, 20H, 0, 32H, 4, 41H, 4
        DC8 35H, 4, 45H, 4, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x418\\x437\\x20\\x441\\x43f\\x438\\x44`:
        DATA
        DC8 18H, 4, 37H, 4, 20H, 0, 41H, 4
        DC8 3FH, 4, 38H, 4, 41H, 4, 3AH, 4
        DC8 30H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41d\\x435\\x442">`:
        DATA
        DC8 1DH, 4, 35H, 4, 42H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x44b\\x431\\x435\\x440\\x438\\x4`:
        DATA
        DC8 12H, 4, 4BH, 4, 31H, 4, 35H, 4
        DC8 40H, 4, 38H, 4, 42H, 4, 35H, 4
        DC8 20H, 0, 3FH, 4, 40H, 4, 3EH, 4
        DC8 44H, 4, 38H, 4, 3BH, 4, 4CH, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x440\\x435\\x43c\\x44f\\x20\\x43_2`:
        DATA
        DC8 12H, 4, 40H, 4, 35H, 4, 3CH, 4
        DC8 4FH, 4, 20H, 0, 3DH, 4, 30H, 4
        DC8 47H, 4, 30H, 4, 3BH, 4, 30H, 4
        DC8 20H, 0, 41H, 4, 3EH, 4, 31H, 4
        DC8 4BH, 4, 42H, 4, 38H, 4, 4FH, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x440\\x435\\x43c\\x44f\\x20\\x43_3`:
        DATA
        DC8 12H, 4, 40H, 4, 35H, 4, 3CH, 4
        DC8 4FH, 4, 20H, 0, 3AH, 4, 3EH, 4
        DC8 3DH, 4, 46H, 4, 30H, 4, 20H, 0
        DC8 41H, 4, 3EH, 4, 31H, 4, 4BH, 4
        DC8 42H, 4, 38H, 4, 4FH, 4, 20H, 0
        DC8 28H, 0, 35H, 4, 41H, 4, 3BH, 4
        DC8 38H, 4, 20H, 0, 32H, 4, 4BH, 4
        DC8 31H, 4, 40H, 4, 30H, 4, 3DH, 4
        DC8 20H, 0, 40H, 4, 35H, 4, 36H, 4
        DC8 38H, 4, 3CH, 4, 20H, 0, 27H, 0
        DC8 38H, 4, 3DH, 4, 42H, 4, 35H, 4
        DC8 40H, 4, 32H, 4, 30H, 4, 3BH, 4
        DC8 27H, 0, 29H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x414\\x435\\x439\\x441\\x442\\x432\\x4`:
        DATA
        DC8 14H, 4, 35H, 4, 39H, 4, 41H, 4
        DC8 42H, 4, 32H, 4, 38H, 4, 35H, 4
        DC8 2CH, 0, 20H, 0, 43H, 4, 41H, 4
        DC8 42H, 4, 30H, 4, 3DH, 4, 3EH, 4
        DC8 32H, 4, 3BH, 4, 35H, 4, 3DH, 4
        DC8 3DH, 4, 3EH, 4, 35H, 4, 20H, 0
        DC8 3DH, 4, 30H, 4, 20H, 0, 34H, 4
        DC8 30H, 4, 3DH, 4, 3DH, 4, 3EH, 4
        DC8 35H, 4, 20H, 0, 32H, 4, 40H, 4
        DC8 35H, 4, 3CH, 4, 4FH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x414\\x43d\\x438\\x20\\x432\\x44b\\x43`:
        DATA
        DC8 14H, 4, 3DH, 4, 38H, 4, 20H, 0
        DC8 32H, 4, 4BH, 4, 3FH, 4, 3EH, 4
        DC8 3BH, 4, 3DH, 4, 35H, 4, 3DH, 4
        DC8 38H, 4, 4FH, 4, 20H, 0, 41H, 4
        DC8 3EH, 4, 31H, 4, 4BH, 4, 42H, 4
        DC8 38H, 4, 4FH, 4, 20H, 0, 28H, 0
        DC8 35H, 4, 41H, 4, 3BH, 4, 38H, 4
        DC8 20H, 0, 32H, 4, 4BH, 4, 31H, 4
        DC8 40H, 4, 30H, 4, 3DH, 4, 20H, 0
        DC8 40H, 4, 35H, 4, 36H, 4, 38H, 4
        DC8 3CH, 4, 20H, 0, 27H, 0, 3FH, 4
        DC8 3EH, 4, 20H, 0, 34H, 4, 3DH, 4
        DC8 4FH, 4, 3CH, 4, 27H, 0, 29H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x414\\x430\\x442\\x430\\x20\\x43d\\x43_1`:
        DATA
        DC8 14H, 4, 30H, 4, 42H, 4, 30H, 4
        DC8 20H, 0, 3DH, 4, 30H, 4, 47H, 4
        DC8 30H, 4, 3BH, 4, 30H, 4, 20H, 0
        DC8 28H, 0, 35H, 4, 41H, 4, 3BH, 4
        DC8 38H, 4, 20H, 0, 32H, 4, 4BH, 4
        DC8 31H, 4, 40H, 4, 30H, 4, 3DH, 4
        DC8 20H, 0, 40H, 4, 35H, 4, 36H, 4
        DC8 38H, 4, 3CH, 4, 20H, 0, 27H, 0
        DC8 34H, 4, 30H, 4, 42H, 4, 30H, 4
        DC8 27H, 0, 29H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x414\\x430\\x442\\x430\\x20\\x43a\\x43_1`:
        DATA
        DC8 14H, 4, 30H, 4, 42H, 4, 30H, 4
        DC8 20H, 0, 3AH, 4, 3EH, 4, 3DH, 4
        DC8 46H, 4, 30H, 4, 20H, 0, 28H, 0
        DC8 35H, 4, 41H, 4, 3BH, 4, 38H, 4
        DC8 20H, 0, 32H, 4, 4BH, 4, 31H, 4
        DC8 40H, 4, 30H, 4, 3DH, 4, 20H, 0
        DC8 40H, 4, 35H, 4, 36H, 4, 38H, 4
        DC8 3CH, 4, 20H, 0, 27H, 0, 34H, 4
        DC8 30H, 4, 42H, 4, 30H, 4, 27H, 0
        DC8 29H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41d\\x430\\x437\\x432\\x430\\x43d\\x4_1`:
        DATA
        DC8 1DH, 4, 30H, 4, 37H, 4, 32H, 4
        DC8 30H, 4, 3DH, 4, 38H, 4, 35H, 4
        DC8 20H, 0, 41H, 4, 3EH, 4, 31H, 4
        DC8 4BH, 4, 42H, 4, 38H, 4, 4FH, 4
        DC8 2CH, 0, 20H, 0, 3AH, 4, 3EH, 4
        DC8 42H, 4, 3EH, 4, 40H, 4, 3EH, 4
        DC8 35H, 4, 20H, 0, 31H, 4, 43H, 4
        DC8 34H, 4, 35H, 4, 42H, 4, 20H, 0
        DC8 38H, 4, 41H, 4, 3FH, 4, 3EH, 4
        DC8 3BH, 4, 4CH, 4, 37H, 4, 3EH, 4
        DC8 32H, 4, 30H, 4, 42H, 4, 4CH, 4
        DC8 41H, 4, 4FH, 4, 20H, 0, 32H, 4
        DC8 20H, 0, 3DH, 4, 30H, 4, 3FH, 4
        DC8 3EH, 4, 3CH, 4, 38H, 4, 3DH, 4
        DC8 30H, 4, 3DH, 4, 38H, 4, 4FH, 4
        DC8 45H, 4, 2CH, 0, 20H, 0, 30H, 4
        DC8 20H, 0, 42H, 4, 30H, 4, 3AH, 4
        DC8 36H, 4, 35H, 4, 20H, 0, 3DH, 4
        DC8 30H, 4, 20H, 0, 40H, 4, 30H, 4
        DC8 31H, 4, 3EH, 4, 47H, 4, 35H, 4
        DC8 3CH, 4, 20H, 0, 41H, 4, 42H, 4
        DC8 3EH, 4, 3BH, 4, 35H, 4, 20H, 0
        DC8 4DH, 4, 3BH, 4, 4CH, 4, 44H, 4
        DC8 3EH, 4, 3CH, 4, 20H, 0, 45H, 0
        DC8 76H, 0, 74H, 0, 44H, 0, 65H, 0
        DC8 73H, 0, 6BH, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x440\\x435\\x43c\\x44f\\x20\\x43_4`:
        DATA
        DC8 12H, 4, 40H, 4, 35H, 4, 3CH, 4
        DC8 4FH, 4, 20H, 0, 3DH, 4, 30H, 4
        DC8 3FH, 4, 3EH, 4, 3CH, 4, 38H, 4
        DC8 3DH, 4, 30H, 4, 3DH, 4, 38H, 4
        DC8 39H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x47\\x50\\x53\\x2d\\x43c\\x435\\x442\\x`:
        DATA
        DC8 47H, 0, 50H, 0, 53H, 0, 2DH, 0
        DC8 3CH, 4, 35H, 4, 42H, 4, 3AH, 4
        DC8 30H, 4, 2EH, 0, 20H, 0, 18H, 4
        DC8 41H, 4, 3FH, 4, 3EH, 4, 3BH, 4
        DC8 4CH, 4, 37H, 4, 43H, 4, 35H, 4
        DC8 42H, 4, 41H, 4, 4FH, 4, 20H, 0
        DC8 37H, 4, 3DH, 4, 30H, 4, 47H, 4
        DC8 35H, 4, 3DH, 4, 38H, 4, 35H, 4
        DC8 20H, 0, 32H, 4, 38H, 4, 34H, 4
        DC8 30H, 4, 20H, 0, 43H, 0, 49H, 0
        DC8 44H, 0, 2DH, 0, 4CH, 0, 41H, 0
        DC8 43H, 0, 2EH, 0, 20H, 0, 1DH, 4
        DC8 30H, 4, 3FH, 4, 40H, 4, 38H, 4
        DC8 3CH, 4, 35H, 4, 40H, 4, 2CH, 0
        DC8 20H, 0, 27H, 0, 32H, 0, 30H, 0
        DC8 32H, 0, 38H, 0, 2DH, 0, 34H, 0
        DC8 41H, 0, 42H, 0, 43H, 0, 27H, 0
        DC8 2EH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41a\\x43b\\x43e\\x43d\\x43e\\x433\\x4`:
        DATA
        DC8 1AH, 4, 3BH, 4, 3EH, 4, 3DH, 4
        DC8 3EH, 4, 33H, 4, 35H, 4, 3DH, 4
        DC8 35H, 4, 40H, 4, 30H, 4, 42H, 4
        DC8 3EH, 4, 40H, 4, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x414\\x430\\x43d\\x43d\\x430\\x44f\\x2`:
        DATA
        DC8 14H, 4, 30H, 4, 3DH, 4, 3DH, 4
        DC8 30H, 4, 4FH, 4, 20H, 0, 44H, 4
        DC8 43H, 4, 3DH, 4, 3AH, 4, 46H, 4
        DC8 38H, 4, 4FH, 4, 20H, 0, 38H, 4
        DC8 41H, 4, 3FH, 4, 3EH, 4, 3BH, 4
        DC8 4CH, 4, 37H, 4, 43H, 4, 35H, 4
        DC8 42H, 4, 41H, 4, 4FH, 4, 20H, 0
        DC8 34H, 4, 3BH, 4, 4FH, 4, 20H, 0
        DC8 27H, 0, 3AH, 4, 3BH, 4, 3EH, 4
        DC8 3DH, 4, 38H, 4, 40H, 4, 3EH, 4
        DC8 32H, 4, 30H, 4, 3DH, 4, 38H, 4
        DC8 4FH, 4, 27H, 0, 20H, 0, 41H, 4
        DC8 3EH, 4, 31H, 4, 4BH, 4, 42H, 4
        DC8 38H, 4, 4FH, 4, 20H, 0, 47H, 4
        DC8 35H, 4, 40H, 4, 35H, 4, 37H, 4
        DC8 20H, 0, 3EH, 4, 3FH, 4, 40H, 4
        DC8 35H, 4, 34H, 4, 35H, 4, 3BH, 4
        DC8 51H, 4, 3DH, 4, 3DH, 4, 4BH, 4
        DC8 35H, 4, 20H, 0, 3FH, 4, 40H, 4
        DC8 3EH, 4, 3CH, 4, 35H, 4, 36H, 4
        DC8 43H, 4, 42H, 4, 3AH, 4, 38H, 4
        DC8 20H, 0, 32H, 4, 40H, 4, 35H, 4
        DC8 3CH, 4, 35H, 4, 3DH, 4, 38H, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x418\\x43d\\x434\\x438\\x43a\\x430\\x4`:
        DATA
        DC8 18H, 4, 3DH, 4, 34H, 4, 38H, 4
        DC8 3AH, 4, 30H, 4, 46H, 4, 38H, 4
        DC8 4FH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x426\\x432\\x435\\x442\\x43d\\x44b\\x4`:
        DATA
        DC8 26H, 4, 32H, 4, 35H, 4, 42H, 4
        DC8 3DH, 4, 4BH, 4, 35H, 4, 20H, 0
        DC8 34H, 4, 38H, 4, 3EH, 4, 34H, 4
        DC8 4BH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41e\\x440\\x430\\x43d\\x436\\x2e\\x20`:
        DATA
        DC8 1EH, 4, 40H, 4, 30H, 4, 3DH, 4
        DC8 36H, 4, 2EH, 0, 20H, 0, 34H, 4
        DC8 38H, 4, 3EH, 4, 34H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41a\\x440\\x430\\x441\\x43d\\x44b\\x4`:
        DATA
        DC8 1AH, 4, 40H, 4, 30H, 4, 41H, 4
        DC8 3DH, 4, 4BH, 4, 39H, 4, 20H, 0
        DC8 34H, 4, 38H, 4, 3EH, 4, 34H, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x438\\x431\\x440\\x430\\x446\\x4`:
        DATA
        DC8 12H, 4, 38H, 4, 31H, 4, 40H, 4
        DC8 30H, 4, 46H, 4, 38H, 4, 4FH, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x417\\x432\\x443\\x43a">`:
        DATA
        DC8 17H, 4, 32H, 4, 43H, 4, 3AH, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x421\\x435\\x43a\\x443\\x43d\\x434\\x4`:
        DATA
        DC8 21H, 4, 35H, 4, 3AH, 4, 43H, 4
        DC8 3DH, 4, 34H, 4, 4BH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x432\\x435\\x434\\x438\\x442\\x4`:
        DATA
        DC8 12H, 4, 32H, 4, 35H, 4, 34H, 4
        DC8 38H, 4, 42H, 4, 35H, 4, 20H, 0
        DC8 38H, 4, 3DH, 4, 42H, 4, 35H, 4
        DC8 40H, 4, 32H, 4, 30H, 4, 3BH, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x432\\x435\\x434\\x438\\x442\\x4_1`:
        DATA
        DC8 12H, 4, 32H, 4, 35H, 4, 34H, 4
        DC8 38H, 4, 42H, 4, 35H, 4, 20H, 0
        DC8 3CH, 4, 30H, 4, 3AH, 4, 41H, 4
        DC8 2EH, 0, 3AH, 4, 3EH, 4, 3BH, 4
        DC8 2DH, 0, 32H, 4, 3EH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x421\\x442\\x430\\x43d\\x434\\x430\\x4`:
        DATA
        DC8 21H, 4, 42H, 4, 30H, 4, 3DH, 4
        DC8 34H, 4, 30H, 4, 40H, 4, 42H, 4
        DC8 3DH, 4, 4BH, 4, 35H, 4, 20H, 0
        DC8 3DH, 4, 30H, 4, 41H, 4, 42H, 4
        DC8 40H, 4, 3EH, 4, 39H, 4, 3AH, 4
        DC8 38H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x44b\\x431\\x43e\\x440">`:
        DATA
        DC8 12H, 4, 4BH, 4, 31H, 4, 3EH, 4
        DC8 40H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x413\\x440\\x43e\\x43c\\x43a\\x43e\\x4`:
        DATA
        DC8 13H, 4, 40H, 4, 3EH, 4, 3CH, 4
        DC8 3AH, 4, 3EH, 4, 41H, 4, 42H, 4
        DC8 4CH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x414\\x435\\x439\\x441\\x442\\x432\\x4_1`:
        DATA
        DC8 14H, 4, 35H, 4, 39H, 4, 41H, 4
        DC8 42H, 4, 32H, 4, 38H, 4, 4FH, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41c\\x443\\x437\\x2e\\x444\\x430\\x43`:
        DATA
        DC8 1CH, 4, 43H, 4, 37H, 4, 2EH, 0
        DC8 44H, 4, 30H, 4, 39H, 4, 3BH, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x422\\x435\\x43a\\x443\\x449\\x438\\x4`:
        DATA
        DC8 22H, 4, 35H, 4, 3AH, 4, 43H, 4
        DC8 49H, 4, 38H, 4, 39H, 4, 20H, 0
        DC8 41H, 4, 42H, 4, 30H, 4, 42H, 4
        DC8 43H, 4, 41H, 4, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41c\\x443\\x437\\x2e\\x444\\x430\\x43_1`:
        DATA
        DC8 1CH, 4, 43H, 4, 37H, 4, 2EH, 0
        DC8 44H, 4, 30H, 4, 39H, 4, 3BH, 4
        DC8 20H, 0, 3DH, 4, 35H, 4, 20H, 0
        DC8 43H, 4, 41H, 4, 42H, 4, 30H, 4
        DC8 3DH, 4, 3EH, 4, 32H, 4, 3BH, 4
        DC8 35H, 4, 3DH, 4, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x440\\x435\\x43c\\x44f">`:
        DATA
        DC8 12H, 4, 40H, 4, 35H, 4, 3CH, 4
        DC8 4FH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x421\\x43e\\x445\\x440\\x430\\x43d\\x4`:
        DATA
        DC8 21H, 4, 3EH, 4, 45H, 4, 40H, 4
        DC8 30H, 4, 3DH, 4, 38H, 4, 42H, 4
        DC8 4CH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41d\\x430\\x20\\x43a\\x430\\x440\\x44`:
        DATA
        DC8 1DH, 4, 30H, 4, 20H, 0, 3AH, 4
        DC8 30H, 4, 40H, 4, 42H, 4, 43H, 4
        DC8 20H, 0, 3FH, 4, 30H, 4, 3CH, 4
        DC8 4FH, 4, 42H, 4, 38H, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41d\\x430\\x20\\x442\\x435\\x43b\\x43`:
        DATA
        DC8 1DH, 4, 30H, 4, 20H, 0, 42H, 4
        DC8 35H, 4, 3BH, 4, 35H, 4, 44H, 4
        DC8 3EH, 4, 3DH, 4, 0, 0
        DC8 0, 0

        END
// 
// 1 184 bytes in segment CODE
// 2 496 bytes in segment DATA_C
//   308 bytes in segment DATA_I
//   308 bytes in segment DATA_ID
//     8 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 1 116 bytes of CODE  memory (+ 92 bytes shared)
// 2 804 bytes of CONST memory
//   316 bytes of DATA  memory
//
//Errors: none
//Warnings: none
