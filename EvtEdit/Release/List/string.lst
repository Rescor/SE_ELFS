##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:56:15 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\string #
#                       .cpp                                                 #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\string #
#                       .cpp -D NDEBUG -D OLDFUNCTIONS -lC                   #
#                       Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Releas #
#                       e\List\ -lA Z:\home\perk11\www\perk11.info\svn\SE\Ev #
#                       tEdit\Release\List\ -o Z:\home\perk11\www\perk11.inf #
#                       o\svn\SE\EvtEdit\Release\Obj\ -s9 --cpu_mode arm     #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --enable_multibytes --fpu None        #
#                       --eec++ --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl #
#                       5tpainl8n.h -I Z:\home\perk11\IAR2\arm\INC\          #
#                       --inline_threshold=2                                 #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Releas #
#                       e\List\string.lst                                    #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\Releas #
#                       e\Obj\string.r79                                     #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\EvtEdit\string.cpp
      1          #include "..\deleaker\mem2.h"
      2          #include "..\include\Lib_Clara.h" 
      3          #include "..\include\Dir.h" 
      4          void *memmem(const unsigned char *haystack, size_t haystacklen, const void *needle, size_t needlelen);
      5          

   \                                 In segment CODE, align 4, keep-with-next
      6          int getint(char *line, int *pos,char end)
      7          {
   \                     ??getint:
   \   00000000   70002DE9           PUSH     {R4-R6}
      8            bool minus=false;
      9            if (line[pos[0]]=='-')
   \   00000004   003091E5           LDR      R3,[R1, #+0]
   \   00000008   00C0A0E3           MOV      R12,#+0
   \   0000000C   0040D3E7           LDRB     R4,[R3, +R0]
     10            {
     11              minus=true;
     12              pos[0]++;
     13            }
     14            int ret=0;
   \   00000010   0A60A0E3           MOV      R6,#+10
   \   00000014   2D0054E3           CMP      R4,#+45
   \   00000018   01308302           ADDEQ    R3,R3,#+1
   \   0000001C   00308105           STREQ    R3,[R1, #+0]
   \   00000020   004091E5           LDR      R4,[R1, #+0]
   \   00000024   01C0A003           MOVEQ    R12,#+1
   \   00000028   0040D4E7           LDRB     R4,[R4, +R0]
   \   0000002C   0030A0E3           MOV      R3,#+0
   \   00000030   020054E1           CMP      R4,R2
   \   00000034   0800000A           BEQ      ??getint_1
     15            while (line[pos[0]]!=end)
     16            {
     17              ret=(ret*10)+(line[pos[0]]-0x30);
   \                     ??getint_2:
   \   00000038   004091E5           LDR      R4,[R1, #+0]
   \   0000003C   0050D4E7           LDRB     R5,[R4, +R0]
     18              pos[0]++;
   \   00000040   014084E2           ADD      R4,R4,#+1
   \   00000044   004081E5           STR      R4,[R1, #+0]
     19            }
   \   00000048   0040D4E7           LDRB     R4,[R4, +R0]
   \   0000004C   965323E0           MLA      R3,R6,R3,R5
   \   00000050   020054E1           CMP      R4,R2
   \   00000054   303043E2           SUB      R3,R3,#+48
   \   00000058   F6FFFF1A           BNE      ??getint_2
     20            pos[0]++;
   \                     ??getint_1:
   \   0000005C   000091E5           LDR      R0,[R1, #+0]
     21            if (minus)ret=-ret;
   \   00000060   00005CE3           CMP      R12,#+0
   \   00000064   010080E2           ADD      R0,R0,#+1
   \   00000068   000081E5           STR      R0,[R1, #+0]
     22            return ret;
   \   0000006C   7000BDE8           POP      {R4-R6}
   \   00000070   00306312           RSBNE    R3,R3,#+0
   \   00000074   0300A0E1           MOV      R0,R3
   \   00000078   1EFF2FE1           BX       LR               ;; return
     23          };
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          char *getchr(char *line, int *pos, char end)
     26          {
   \                     ??getchr:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     27            char *ret;
     28            int start,en;
     29            start=pos[0];
   \   00000004   005091E5           LDR      R5,[R1, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000000EA           B        ??getchr_1
     30            while (line[pos[0]]!=end && line[pos[0]]!=0)
     31            {
     32              pos[0]++;
   \                     ??getchr_2:
   \   00000010   000081E5           STR      R0,[R1, #+0]
     33            }
   \                     ??getchr_1:
   \   00000014   003091E5           LDR      R3,[R1, #+0]
   \   00000018   010083E2           ADD      R0,R3,#+1
   \   0000001C   04C083E0           ADD      R12,R3,R4
   \   00000020   0060DCE5           LDRB     R6,[R12, #+0]
   \   00000024   020056E1           CMP      R6,R2
   \   00000028   00005613           CMPNE    R6,#+0
   \   0000002C   F7FFFF1A           BNE      ??getchr_2
     34            en=pos[0];
     35            pos[0]++;
   \   00000030   000081E5           STR      R0,[R1, #+0]
     36            int len=en-start;
   \   00000034   056043E0           SUB      R6,R3,R5
     37            if (len>0)
   \   00000038   010056E3           CMP      R6,#+1
   \   0000003C   090000BA           BLT      ??getchr_3
     38            {  
     39              ret = new char[len+1];
   \   00000040   010086E2           ADD      R0,R6,#+1
   \   00000044   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000048   0070A0E1           MOV      R7,R0
     40              memcpy(ret, &line[start], len);
   \   0000004C   0620A0E1           MOV      R2,R6
   \   00000050   041085E0           ADD      R1,R5,R4
   \   00000054   130100EF           SWI      +275
     41              ret[len]='\0';
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   0700C6E7           STRB     R0,[R6, +R7]
     42              return ret;
   \   00000060   0700A0E1           MOV      R0,R7
   \   00000064   F080BDE8           POP      {R4-R7,PC}
     43            }
     44            return 0;
   \                     ??getchr_3:
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   F080BDE8           POP      {R4-R7,PC}       ;; return
     45          };
     46          

   \                                 In segment CODE, align 4, keep-with-next
     47          wchar_t *getwchr(char *line, int *pos, char end)
     48          {
   \                     ??getwchr:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     49            int start,en;
     50            start=pos[0];
   \   00000004   005091E5           LDR      R5,[R1, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0400D5E7           LDRB     R0,[R5, +R4]
   \   00000010   020050E1           CMP      R0,R2
   \   00000014   0500000A           BEQ      ??getwchr_1
     51            while (line[pos[0]]!=end)
     52            {
     53              pos[0]++;
   \                     ??getwchr_2:
   \   00000018   000091E5           LDR      R0,[R1, #+0]
   \   0000001C   010080E2           ADD      R0,R0,#+1
   \   00000020   000081E5           STR      R0,[R1, #+0]
     54            }
   \   00000024   0400D0E7           LDRB     R0,[R0, +R4]
   \   00000028   020050E1           CMP      R0,R2
   \   0000002C   F9FFFF1A           BNE      ??getwchr_2
     55            en=pos[0];
   \                     ??getwchr_1:
   \   00000030   000091E5           LDR      R0,[R1, #+0]
     56            pos[0]++;
   \   00000034   012080E2           ADD      R2,R0,#+1
   \   00000038   002081E5           STR      R2,[R1, #+0]
     57            int len=en-start;
   \   0000003C   056040E0           SUB      R6,R0,R5
     58            if (len>0)
   \   00000040   010056E3           CMP      R6,#+1
   \   00000044   0D0000BA           BLT      ??getwchr_3
     59            {
     60              wchar_t *wret=new wchar_t[len/2+1];
   \   00000048   A60F86E0           ADD      R0,R6,R6, LSR #+31
   \   0000004C   C070A0E1           ASR      R7,R0,#+1
   \   00000050   010087E2           ADD      R0,R7,#+1
   \   00000054   8000A0E1           LSL      R0,R0,#+1
   \   00000058   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   0000005C   0080A0E1           MOV      R8,R0
     61              memcpy(wret,&line[start], len);
   \   00000060   0620A0E1           MOV      R2,R6
   \   00000064   041085E0           ADD      R1,R5,R4
   \   00000068   130100EF           SWI      +275
     62              wret[len/2]=L'\0';
   \   0000006C   870088E0           ADD      R0,R8,R7, LSL #+1
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   B010C0E1           STRH     R1,[R0, #+0]
     63              return wret;
   \   00000078   0800A0E1           MOV      R0,R8
   \   0000007C   F081BDE8           POP      {R4-R8,PC}
     64            }
     65            return 0;
   \                     ??getwchr_3:
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   F081BDE8           POP      {R4-R8,PC}       ;; return
     66          };
     67          

   \                                 In segment CODE, align 4, keep-with-next
     68          char *getparam2(char *buf, char *mask, char end, int fsize)
     69          {
   \                     ??getparam2:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0240A0E1           MOV      R4,R2
   \   00000010   0370A0E1           MOV      R7,R3
     70            char *str=0;
     71            if (str=(char*)memmem((unsigned char const*)buf,fsize,mask,strlen(mask)))
   \   00000014   0600A0E1           MOV      R0,R6
   \   00000018   5A0100EF           SWI      +346
   \   0000001C   0030A0E1           MOV      R3,R0
   \   00000020   0620A0E1           MOV      R2,R6
   \   00000024   0710A0E1           MOV      R1,R7
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   ........           _BLF     ??memmem,??memmem??rA
   \   00000030   0050B0E1           MOVS     R5,R0
   \   00000034   1A00000A           BEQ      ??getparam2_1
     72            {
     73              char *ret=0;;
     74              int addr=(int)str;
     75              str=(char*)(addr+strlen(mask)+2);
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   5A0100EF           SWI      +346
   \   00000040   050080E0           ADD      R0,R0,R5
   \   00000044   025080E2           ADD      R5,R0,#+2
     76              int x=0;
     77              int len=0;
   \   00000048   0010D5E5           LDRB     R1,[R5, #+0]
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   040051E1           CMP      R1,R4
   \   00000054   0100001A           BNE      ??getparam2_2
   \   00000058   030000EA           B        ??getparam2_3
     78              while (str[x]!=end)
     79              {
     80                x++;
   \                     ??getparam2_4:
   \   0000005C   010080E2           ADD      R0,R0,#+1
     81              }
   \                     ??getparam2_2:
   \   00000060   0510D0E7           LDRB     R1,[R0, +R5]
   \   00000064   040051E1           CMP      R1,R4
   \   00000068   FBFFFF1A           BNE      ??getparam2_4
     82              len=x+1;
   \                     ??getparam2_3:
   \   0000006C   014080E2           ADD      R4,R0,#+1
     83              if (len>1)
   \   00000070   020054E3           CMP      R4,#+2
   \   00000074   0A0000BA           BLT      ??getparam2_1
     84              {
     85                ret=new char[len+1];
   \   00000078   010084E2           ADD      R0,R4,#+1
   \   0000007C   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000080   0060A0E1           MOV      R6,R0
     86                memcpy(ret,str,len);
   \   00000084   0420A0E1           MOV      R2,R4
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   130100EF           SWI      +275
     87                ret[len-1]='\0';
   \   00000090   060084E0           ADD      R0,R4,R6
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   011040E5           STRB     R1,[R0, #-1]
     88                return ret;
   \   0000009C   0600A0E1           MOV      R0,R6
   \   000000A0   F080BDE8           POP      {R4-R7,PC}
     89              }
     90              return 0;
     91            }
     92            return 0;
   \                     ??getparam2_1:
   \   000000A4   0000A0E3           MOV      R0,#+0
   \   000000A8   F080BDE8           POP      {R4-R7,PC}       ;; return
     93          };

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     getchr(char *, int *, char)       20
     getint(char *, int *, char)       12
     getparam2(char *, char *, char, int)
                                       20
     getwchr(char *, int *, char)      24


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     getint(char *, int *, char)     124
     getchr(char *, int *, char)     112
     getwchr(char *, int *, char)    136
     getparam2(char *, char *, char, int)
                                     172
      Others                          40

 
 584 bytes in segment CODE
 
 544 bytes of CODE memory (+ 40 bytes shared)

Errors: none
Warnings: none
