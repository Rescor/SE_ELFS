//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  23:04:43 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\RedLED_Blink\ /
//                       main.c                                              /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\RedLED_Blink\ /
//                       main.c -D NDEBUG -D OLDFUNCTIONS -lC                /
//                       Z:\home\perk11\www\perk11.info\svn\SE\RedLED_Blink\ /
//                       Release\List\ -lA Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\RedLED_Blink\Release\List\ -o                  /
//                       Z:\home\perk11\www\perk11.info\svn\SE\RedLED_Blink\ /
//                       Release\Obj\ -s9 --no_unroll --no_inline            /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --fpu None --eec++   /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h -I Z:\home\perk11\IAR2\arm\INC\                /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\RedLED_Blink\ /
//                       Release\List\main.s79                               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
        PUBLIC ??BeginTimer
        FUNCTION ??BeginTimer,0603H
        LOCFRAME CSTACK, 64, STACK
        MULTWEAK ??BeginTimer??rT
        PUBLIC ??BeginTimer_event
        FUNCTION ??BeginTimer_event,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??BeginTimer_event??rT
        PUBLIC ??CreateRLBook
        FUNCTION ??CreateRLBook,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??CreateRLBook??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
        MULTWEAK ??InitConfig??rA
        PUBLIC ??KillTimer_event
        FUNCTION ??KillTimer_event,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??KillTimer_event??rT
        PUBWEAK ??LPARAM
        FUNCTION ??LPARAM,0203H
        MULTWEAK ??LPARAM??rA
        PUBWEAK ??MKTIMERPROC
        FUNCTION ??MKTIMERPROC,0203H
        MULTWEAK ??MKTIMERPROC??rA
        FUNCTION ??ReconfigElf,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC ??ShowAuthorInfo
        FUNCTION ??ShowAuthorInfo,0603H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??ShowAuthorInfo??rT
        PUBLIC ??TerminateElf
        FUNCTION ??TerminateElf,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??TerminateElf??rT
        PUBLIC ??elf_exit
        FUNCTION ??elf_exit,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??elf_exit??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        PUBLIC ??myFind
        FUNCTION ??myFind,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??myFind??rT
        PUBLIC ??onCloseRLBook
        FUNCTION ??onCloseRLBook,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??onCloseRLBook??rT
        PUBLIC ??onTimer
        FUNCTION ??onTimer,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??onTimer??rT
        PUBWEAK ?init?tab?DATA_I
        PUBLIC base_page
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 16, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        

kill_data           SYMBOL "kill_data"

??BeginTimer??rT    SYMBOL "??rT", ??BeginTimer

??BeginTimer_event??rT SYMBOL "??rT", ??BeginTimer_event

??CreateRLBook??rT  SYMBOL "??rT", ??CreateRLBook
??InitConfig??rA    SYMBOL "??rA", ??InitConfig

??KillTimer_event??rT SYMBOL "??rT", ??KillTimer_event

??LPARAM??rA        SYMBOL "??rA", ??LPARAM

??MKTIMERPROC??rA   SYMBOL "??rA", ??MKTIMERPROC

??ShowAuthorInfo??rT SYMBOL "??rT", ??ShowAuthorInfo

??TerminateElf??rT  SYMBOL "??rT", ??TerminateElf

??elf_exit??rT      SYMBOL "??rT", ??elf_exit
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main

??myFind??rT        SYMBOL "??rT", ??myFind

??onCloseRLBook??rT SYMBOL "??rT", ??onCloseRLBook

??onTimer??rT       SYMBOL "??rT", ??onTimer

        EXTERN ??InitConfig
        FUNCTION ??InitConfig,0202H
        EXTERN ELF_BEGIN
        EXTERN OffTime
        EXTERN OnTime
        EXTERN SYNC
        EXTERN kill_data
        FUNCTION kill_data,0202H
        EXTERN successed_config_name
        EXTERN successed_config_path

// Z:\home\perk11\www\perk11.info\svn\SE\RedLED_Blink\main.c
//    1 #include "..\\include\Lib_Clara.h"

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ??LPARAM
        ARM
// __??Code32?? __code __interwork __atpcs LPARAM::LPARAM(void *)
??LPARAM:
        STR      R1,[R0, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock0

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function ??MKTIMERPROC
        ARM
// __??Code32?? __code __interwork __atpcs TIMERPROC MKTIMERPROC(void (*)(u16, RL_Book *))
??MKTIMERPROC:
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon1
        CFI NoFunction
        THUMB
??TerminateElf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??TerminateElf
//    2 #include "..\\include\Dir.h"
//    3 #include "..\\include\cfg_items.h"
//    4 #include "conf_loader.h"
//    5 #include "config_data.h"
//    6 
//    7 
//    8 typedef enum
//    9 {
//   10   Start=0,
//   11   SafeCharge,
//   12   Charge,
//   13   Await,
//   14   AwaitExtTemp,
//   15   AwaiSafeTime,
//   16   SOSCharg,
//   17   Handheld,
//   18   Completed,
//   19   ConstCurrent,
//   20   ConstVoltage,
//   21   CompSafeTime,
//   22   CompLowCurr,
//   23   CompDVDT,
//   24   CompDTDT,
//   25   CompD2VDT2,
//   26   CompFlatV
//   27 }ChargingState;
//   28 
//   29 
//   30 typedef struct _MYBOOK : BOOK
//   31 {
//   32   u16 timer;
//   33 }RL_Book;
//   34 
//   35 
//   36 void onTimer(u16 unk,RL_Book * RLBook);
//   37 void BeginTimer(u16 unk,RL_Book * RLBook);
//   38 
//   39 
//   40 typedef struct
//   41 {
//   42   BOOK * book;
//   43 }MSG;
//   44 
//   45 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function ??TerminateElf
        ARM
//   46 int TerminateElf(void * ,BOOK * book)
//   47 {
??TerminateElf:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,R1
//   48   FreeBook(book);
        SWI      +303
//   49   return(1);
        MOV      R0,#+1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock3
//   50 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon1
        CFI NoFunction
        THUMB
??ShowAuthorInfo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??ShowAuthorInfo
//   51 
//   52 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function ??ShowAuthorInfo
        ARM
//   53 int ShowAuthorInfo(void *mess ,BOOK* book)
//   54 {
??ShowAuthorInfo:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   55   MSG * msg = (MSG*)mess;
//   56   MessageBox(EMPTY_TEXTID,STR("RedLED Blinked v1.2\n(c) IronMaster"), NOIMAGE, 1, 5000,msg->book);
        MOV      R1,#+0
        MOV      R4,R0
        LDR      R0,??ShowAuthorInfo_1  ;; `?<Constant L"\\x52\\x65\\x64\\x4c\\x45\\x44\\x20\\x42\\`
        MOV      R5,#+255
        ORR      R5,R5,#0xFF00
        MOV      R2,R5
        SWI      +349
        LDR      R1,[R4, #+0]
        MOV      R3,#+1
        PUSH     {R1}
        CFI CFA R13+16
        MOV      R2,R5
        MOV      R1,#+136
        ORR      R1,R1,#0x1300
        PUSH     {R1}
        CFI CFA R13+20
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
//   57   return(1);
        MOV      R0,#+1
        POP      {R1,R2,R4,R5,PC}  ;; return
        DATA
??ShowAuthorInfo_1:
        DC32     `?<Constant L"\\x52\\x65\\x64\\x4c\\x45\\x44\\x20\\x42\\`
        CFI EndBlock cfiBlock5
//   58 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        THUMB
??BeginTimer_event??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??BeginTimer_event
//   59 
//   60 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function ??BeginTimer_event
        ARM
//   61 int BeginTimer_event(void *,BOOK * book)
//   62 {
??BeginTimer_event:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   63   RL_Book * RLBook = (RL_Book*)book;
//   64   
//   65   BeginTimer(RLBook->timer, RLBook);
        LDRH     R0,[R1, #+24]
        BL       ??BeginTimer
//   66   return(1);
        MOV      R0,#+1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock7
//   67 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI NoFunction
        THUMB
??KillTimer_event??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??KillTimer_event
//   68 
//   69 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function ??KillTimer_event
        ARM
//   70 int KillTimer_event(void *,BOOK * book)
//   71 {
??KillTimer_event:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
//   72   RL_Book * RLBook = (RL_Book*)book;
//   73   
//   74   if (RLBook->timer)
        LDRH     R0,[R4, #+24]
        CMP      R0,#+0
        BEQ      ??KillTimer_event_1
//   75   {
//   76     Timer_Kill(&RLBook->timer);
        ADD      R0,R4,#+24
        SWI      +298
//   77     RLBook->timer=0;
        MOV      R0,#+0
        STRH     R0,[R4, #+24]
//   78     RedLED_Off(0);
        SWI      +776
//   79   }
//   80   return(1);
??KillTimer_event_1:
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock9
//   81 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI NoFunction
        THUMB
??BeginTimer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??BeginTimer
//   82 
//   83 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function ??BeginTimer
        ARM
//   84 void BeginTimer(u16 timerID, RL_Book * RLBook)
//   85 {
//   86   BATT bat_struct;
//   87   GetBatteryState(SYNC,&bat_struct);
??BeginTimer:
        LDR      R0,??BeginTimer_1  ;; SYNC
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+56
        CFI CFA R13+64
        LDR      R0,[R0, #+0]
        MOV      R4,R1
        ADD      R1,SP,#+4
        SWI      +484
//   88   
//   89   if ((bat_struct.ChargingState!=Handheld)&&(bat_struct.ChargingState!=Completed))
        LDRB     R0,[SP, #+4]
        CMP      R0,#+7
        CMPNE    R0,#+8
        BEQ      ??BeginTimer_2
//   90   {
//   91     RedLED_On(0);
        MOV      R0,#+0
        SWI      +775
//   92     Timer_ReSet(&RLBook->timer,OnTime,MKTIMERPROC(onTimer),RLBook);
        MOV      R1,R4
        MOV      R0,SP
        _BLF     ??LPARAM,??LPARAM??rA
        LDR      R0,??BeginTimer_1+0x4  ;; ??onTimer
        _BLF     ??MKTIMERPROC,??MKTIMERPROC??rA
        LDR      R3,[SP, #+0]
        MOV      R2,R0
        LDR      R0,??BeginTimer_1+0x8  ;; OnTime
        LDR      R1,[R0, #+0]
        ADD      R0,R4,#+24
        SWI      +296
        ADD      SP,SP,#+56
        CFI CFA R13+8
        POP      {R4,PC}
        CFI CFA R13+64
//   93   }
//   94   else
//   95   {
//   96     RLBook->timer=0;
??BeginTimer_2:
        MOV      R0,#+0
        STRH     R0,[R4, #+24]
//   97   }
//   98 }
        ADD      SP,SP,#+56
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        DATA
??BeginTimer_1:
        DC32     SYNC
        DC32     ??onTimer
        DC32     OnTime
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI NoFunction
        THUMB
??onTimer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??onTimer
//   99 
//  100 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function ??onTimer
        ARM
//  101 void onTimer (u16 unk, RL_Book * RLBook)
//  102 { 
??onTimer:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+4
        CFI CFA R13+12
//  103   RedLED_Off(0);
        MOV      R0,#+0
        MOV      R4,R1
        SWI      +776
//  104   Timer_ReSet(&RLBook->timer,OffTime,MKTIMERPROC(BeginTimer),RLBook);
        MOV      R1,R4
        MOV      R0,SP
        _BLF     ??LPARAM,??LPARAM??rA
        LDR      R0,??onTimer_1   ;; ??BeginTimer
        _BLF     ??MKTIMERPROC,??MKTIMERPROC??rA
        LDR      R3,[SP, #+0]
        MOV      R2,R0
        LDR      R0,??onTimer_1+0x4  ;; OffTime
        LDR      R1,[R0, #+0]
        ADD      R0,R4,#+24
        SWI      +296
//  105 }
        POP      {R0,R4,PC}       ;; return
        DATA
??onTimer_1:
        DC32     ??BeginTimer
        DC32     OffTime
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        THUMB
??ReconfigElf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??ReconfigElf
//  106 
//  107 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function ??ReconfigElf
        ARM
//  108 static int ReconfigElf(void *mess ,BOOK *book)
//  109 {
??ReconfigElf:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//  110   RECONFIG_EVENT_DATA *reconf=(RECONFIG_EVENT_DATA *)mess;
//  111   int result=0;
//  112   if (wstrcmpi(reconf->path,successed_config_path)==0 && wstrcmpi(reconf->name,successed_config_name)==0)
        LDR      R0,??ReconfigElf_1  ;; successed_config_path
        MOV      R5,#+0
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        SWI      +671
        CMP      R0,#+0
        BNE      ??ReconfigElf_2
        LDR      R0,??ReconfigElf_1+0x4  ;; successed_config_name
        LDR      R1,[R0, #+0]
        ADD      R0,R4,#+128
        SWI      +671
        CMP      R0,#+0
        BNE      ??ReconfigElf_2
//  113   {
//  114     InitConfig();
        _BLF     ??InitConfig,??InitConfig??rA
//  115     result=1;
        MOV      R5,#+1
//  116   }
//  117   return(result);
??ReconfigElf_2:
        MOV      R0,R5
        POP      {R4,R5,PC}       ;; return
        DATA
??ReconfigElf_1:
        DC32     successed_config_path
        DC32     successed_config_name
        CFI EndBlock cfiBlock15
//  118 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        THUMB
??elf_exit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??elf_exit
//  119 
//  120 

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
//  121 const PAGE_MSG RL_PageEvents[]@ "DYN_PAGE" ={
RL_PageEvents:
        DATA
        DC32 997, ??TerminateElf, 998, ??ShowAuthorInfo, 179
        DC32 ??BeginTimer_event, 180, ??KillTimer_event, 996, ??ReconfigElf, 64
        DC32 0H
//  122   ELF_TERMINATE_EVENT , TerminateElf,
//  123   ELF_SHOW_INFO_EVENT  , ShowAuthorInfo,
//  124   BATTERY_CHARGER_CONNECTED_EVENT_TAG, BeginTimer_event,
//  125   BATTERY_CHARGER_DISCONNECTED_EVENT_TAG, KillTimer_event,
//  126   ELF_RECONFIG_EVENT,ReconfigElf,
//  127   NIL_EVENT_TAG,0
//  128 };
//  129 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//  130 PAGE_DESC base_page ={"RL_BasePage",0,RL_PageEvents};
base_page:
        DS8 12
        REQUIRE `?<Initializer for base_page>`
//  131 
//  132 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function ??elf_exit
        ARM
//  133 void elf_exit(void)
//  134 
//  135 {
??elf_exit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  136   kill_data(&ELF_BEGIN, (void(*)(void*))mfree_adr());
        SWI      +33028
        MOV      R1,R0
        LDR      R0,??elf_exit_1  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??elf_exit_1:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock17
//  137 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        THUMB
??onCloseRLBook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??onCloseRLBook
//  138 
//  139 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function ??onCloseRLBook
        ARM
//  140 void onCloseRLBook(BOOK * book)
//  141 {
??onCloseRLBook:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  142   RL_Book * RLBook = (RL_Book*)book;
//  143   
//  144   if (RLBook->timer)
        LDRH     R0,[R4, #+24]
        CMP      R0,#+0
        BEQ      ??onCloseRLBook_1
//  145   {
//  146     Timer_Kill(&RLBook->timer);
        ADD      R0,R4,#+24
        SWI      +298
//  147     RLBook->timer=0;
        MOV      R0,#+0
        STRH     R0,[R4, #+24]
//  148     RedLED_Off(0);
        SWI      +776
//  149   }
//  150   SUBPROC(elf_exit);
??onCloseRLBook_1:
        LDR      R0,??DataTable3  ;; ??elf_exit
        SWI      +264
//  151 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI NoFunction
        THUMB
??CreateRLBook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ??CreateRLBook
//  152 
//  153 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function ??CreateRLBook
        ARM
//  154 void CreateRLBook()
//  155 {
??CreateRLBook:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  156   RL_Book * RLBook = (RL_Book*)malloc(sizeof(RL_Book));
        MOV      R0,#+28
        SWI      +259
//  157   CreateBook(RLBook,onCloseRLBook,&base_page,"Blinked Red LED",-1,0);
        LDR      R3,??DataTable2  ;; `?<Constant "Blinked Red LED">`
        LDR      R2,??CreateRLBook_1  ;; base_page
        LDR      R1,??CreateRLBook_1+0x4  ;; ??onCloseRLBook
        MOV      R4,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+12
        MVN      R0,R0
        PUSH     {R0}
        CFI CFA R13+16
        MOV      R0,R4
        SWI      +299
//  158   RLBook->timer=0;
        MOV      R0,#+0
        STRH     R0,[R4, #+24]
//  159   BeginTimer(RLBook->timer,RLBook);
        MOV      R1,R4
        BL       ??BeginTimer
//  160 }
        POP      {R0,R1,R4,PC}    ;; return
        DATA
??CreateRLBook_1:
        DC32     base_page
        DC32     ??onCloseRLBook
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        THUMB
??myFind??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE ??myFind
//  161 
//  162 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function ??myFind
        ARM
//  163 int myFind(BOOK* book)
//  164 {
//  165    if(!strcmp(book->xbook->name,"Blinked Red LED")) return(1);
??myFind:
        LDR      R1,??DataTable2  ;; `?<Constant "Blinked Red LED">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R0, #+0]
        LDR      R0,[R0, #+4]
        SWI      +345
        CMP      R0,#+0
        MOVEQ    R0,#+1
        POPEQ    {PC}
//  166    return(0);
        MOV      R0,#+0
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock23
//  167 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     `?<Constant "Blinked Red LED">`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE main
//  168 
//  169 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function main
        ARM
//  170 int main (void)
//  171 {
//  172   if (FindBook(myFind))
main:
        LDR      R0,??main_0      ;; ??myFind
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SWI      +304
        CMP      R0,#+0
        BEQ      ??main_1
//  173   {
//  174     MessageBox(EMPTY_TEXTID,STR("Already runed"), NOIMAGE, 1, 5000,0);
        LDR      R0,??main_0+0x4  ;; `?<Constant L"\\x41\\x6c\\x72\\x65\\x61\\x64\\x79\\x20\\`
        MOV      R4,#+255
        ORR      R4,R4,#0xFF00
        MOV      R2,R4
        MOV      R1,#+0
        SWI      +349
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+12
        MOV      R3,#+1
        MOV      R2,R4
        MOV      R1,#+136
        ORR      R1,R1,#0x1300
        PUSH     {R1}
        CFI CFA R13+16
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
//  175     SUBPROC(elf_exit);
        LDR      R0,??DataTable3  ;; ??elf_exit
        SWI      +264
//  176   }
//  177   else
//  178   {
//  179     InitConfig();
//  180     CreateRLBook();
//  181     return(0);
//  182   }
//  183 }
        MOV      R0,#+0
        ADD      SP,SP,#+8
        CFI CFA R13+8
        POP      {R4,PC}
??main_1:
        _BLF     ??InitConfig,??InitConfig??rA
        BL       ??CreateRLBook
        MOV      R0,#+0
        POP      {R4,PC}          ;; return
        DATA
??main_0:
        DC32     ??myFind
        DC32     `?<Constant L"\\x41\\x6c\\x72\\x65\\x61\\x64\\x79\\x20\\`
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     ??elf_exit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        ARM
??LPARAM??rA:
        LDR      R12,??Subroutine12_0  ;; ??LPARAM
        BX       R12
        DATA
??Subroutine12_0:
        DC32     ??LPARAM
        CFI EndBlock cfiBlock26

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon0
        CFI NoFunction
        ARM
??MKTIMERPROC??rA:
        LDR      R12,??Subroutine13_0  ;; ??MKTIMERPROC
        BX       R12
        DATA
??Subroutine13_0:
        DC32     ??MKTIMERPROC
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        ARM
??InitConfig??rA:
        LDR      R12,??Subroutine14_0  ;; ??InitConfig
        BX       R12
        DATA
??Subroutine14_0:
        DC32     ??InitConfig
        CFI EndBlock cfiBlock28

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon0
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine15_0  ;; kill_data
        BX       R12
        DATA
??Subroutine15_0:
        DC32     kill_data
        CFI EndBlock cfiBlock29

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for base_page>`:
        DATA
        DC32 `?<Constant "RL_BasePage">`, 0H, RL_PageEvents

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "RL_BasePage">`:
        DATA
        DC8 "RL_BasePage"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x52\\x65\\x64\\x4c\\x45\\x44\\x20\\x42\\`:
        DATA
        DC8 52H, 0, 65H, 0, 64H, 0, 4CH, 0
        DC8 45H, 0, 44H, 0, 20H, 0, 42H, 0
        DC8 6CH, 0, 69H, 0, 6EH, 0, 6BH, 0
        DC8 65H, 0, 64H, 0, 20H, 0, 76H, 0
        DC8 31H, 0, 2EH, 0, 32H, 0, 0AH, 0
        DC8 28H, 0, 63H, 0, 29H, 0, 20H, 0
        DC8 49H, 0, 72H, 0, 6FH, 0, 6EH, 0
        DC8 4DH, 0, 61H, 0, 73H, 0, 74H, 0
        DC8 65H, 0, 72H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Blinked Red LED">`:
        DATA
        DC8 "Blinked Red LED"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41\\x6c\\x72\\x65\\x61\\x64\\x79\\x20\\`:
        DATA
        DC8 41H, 0, 6CH, 0, 72H, 0, 65H, 0
        DC8 61H, 0, 64H, 0, 79H, 0, 20H, 0
        DC8 72H, 0, 75H, 0, 6EH, 0, 65H, 0
        DC8 64H, 0, 0, 0

        END
// 
// 908 bytes in segment CODE
// 128 bytes in segment DATA_C
//  12 bytes in segment DATA_I
//  12 bytes in segment DATA_ID
//  48 bytes in segment DYN_PAGE
//  12 bytes in segment INITTAB
// 
// 800 bytes of CODE  memory (+ 120 bytes shared)
// 188 bytes of CONST memory
//  12 bytes of DATA  memory
//
//Errors: none
//Warnings: none
