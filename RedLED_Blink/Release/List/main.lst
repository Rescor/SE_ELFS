##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  23:04:44 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\RedLED_Blink\m #
#                       ain.c                                                #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\RedLED_Blink\m #
#                       ain.c -D NDEBUG -D OLDFUNCTIONS -lC                  #
#                       Z:\home\perk11\www\perk11.info\svn\SE\RedLED_Blink\R #
#                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn\ #
#                       SE\RedLED_Blink\Release\List\ -o                     #
#                       Z:\home\perk11\www\perk11.info\svn\SE\RedLED_Blink\R #
#                       elease\Obj\ -s9 --no_unroll --no_inline --cpu_mode   #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 --interwork -e --fpu None --eec++ --dlib_config    #
#                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I         #
#                       Z:\home\perk11\IAR2\arm\INC\                         #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\RedLED_Blink\R #
#                       elease\List\main.lst                                 #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\RedLED_Blink\R #
#                       elease\Obj\main.r79                                  #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\RedLED_Blink\main.c
      1          #include "..\\include\Lib_Clara.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs LPARAM::LPARAM(void *)
   \                     ??LPARAM:
   \   00000000   001080E5           STR      R1,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TIMERPROC MKTIMERPROC(void (*)(u16, RL_Book *))
   \                     ??MKTIMERPROC:
   \   00000000   1EFF2FE1           BX       LR               ;; return
      2          #include "..\\include\Dir.h"
      3          #include "..\\include\cfg_items.h"
      4          #include "conf_loader.h"
      5          #include "config_data.h"
      6          
      7          
      8          typedef enum
      9          {
     10            Start=0,
     11            SafeCharge,
     12            Charge,
     13            Await,
     14            AwaitExtTemp,
     15            AwaiSafeTime,
     16            SOSCharg,
     17            Handheld,
     18            Completed,
     19            ConstCurrent,
     20            ConstVoltage,
     21            CompSafeTime,
     22            CompLowCurr,
     23            CompDVDT,
     24            CompDTDT,
     25            CompD2VDT2,
     26            CompFlatV
     27          }ChargingState;
     28          
     29          
     30          typedef struct _MYBOOK : BOOK
     31          {
     32            u16 timer;
     33          }RL_Book;
     34          
     35          
     36          void onTimer(u16 unk,RL_Book * RLBook);
     37          void BeginTimer(u16 unk,RL_Book * RLBook);
     38          
     39          
     40          typedef struct
     41          {
     42            BOOK * book;
     43          }MSG;
     44          
     45          

   \                                 In segment CODE, align 4, keep-with-next
     46          int TerminateElf(void * ,BOOK * book)
     47          {
   \                     ??TerminateElf:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0100A0E1           MOV      R0,R1
     48            FreeBook(book);
   \   00000008   2F0100EF           SWI      +303
     49            return(1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   0080BDE8           POP      {PC}             ;; return
     50          }
     51          
     52          

   \                                 In segment CODE, align 4, keep-with-next
     53          int ShowAuthorInfo(void *mess ,BOOK* book)
     54          {
   \                     ??ShowAuthorInfo:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     55            MSG * msg = (MSG*)mess;
     56            MessageBox(EMPTY_TEXTID,STR("RedLED Blinked v1.2\n(c) IronMaster"), NOIMAGE, 1, 5000,msg->book);
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   3C009FE5           LDR      R0,??ShowAuthorInfo_1  ;; `?<Constant L"\\x52\\x65\\x64\\x4c\\x45\\x44\\x20\\x42\\`
   \   00000010   FF50A0E3           MOV      R5,#+255
   \   00000014   FF5C85E3           ORR      R5,R5,#0xFF00
   \   00000018   0520A0E1           MOV      R2,R5
   \   0000001C   5D0100EF           SWI      +349
   \   00000020   001094E5           LDR      R1,[R4, #+0]
   \   00000024   0130A0E3           MOV      R3,#+1
   \   00000028   02002DE9           PUSH     {R1}
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   8810A0E3           MOV      R1,#+136
   \   00000034   4C1D81E3           ORR      R1,R1,#0x1300
   \   00000038   02002DE9           PUSH     {R1}
   \   0000003C   0010A0E1           MOV      R1,R0
   \   00000040   9004E0E3           MVN      R0,#-1879048192
   \   00000044   570200EF           SWI      +599
     57            return(1);
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   3680BDE8           POP      {R1,R2,R4,R5,PC}  ;; return
   \                     ??ShowAuthorInfo_1:
   \   00000050   ........           DC32     `?<Constant L"\\x52\\x65\\x64\\x4c\\x45\\x44\\x20\\x42\\`
     58          }
     59          
     60          

   \                                 In segment CODE, align 4, keep-with-next
     61          int BeginTimer_event(void *,BOOK * book)
     62          {
   \                     ??BeginTimer_event:
   \   00000000   00402DE9           PUSH     {LR}
     63            RL_Book * RLBook = (RL_Book*)book;
     64            
     65            BeginTimer(RLBook->timer, RLBook);
   \   00000004   B801D1E1           LDRH     R0,[R1, #+24]
   \   00000008   ........           BL       ??BeginTimer
     66            return(1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   0080BDE8           POP      {PC}             ;; return
     67          }
     68          
     69          

   \                                 In segment CODE, align 4, keep-with-next
     70          int KillTimer_event(void *,BOOK * book)
     71          {
   \                     ??KillTimer_event:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
     72            RL_Book * RLBook = (RL_Book*)book;
     73            
     74            if (RLBook->timer)
   \   00000008   B801D4E1           LDRH     R0,[R4, #+24]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0400000A           BEQ      ??KillTimer_event_1
     75            {
     76              Timer_Kill(&RLBook->timer);
   \   00000014   180084E2           ADD      R0,R4,#+24
   \   00000018   2A0100EF           SWI      +298
     77              RLBook->timer=0;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   B801C4E1           STRH     R0,[R4, #+24]
     78              RedLED_Off(0);
   \   00000024   080300EF           SWI      +776
     79            }
     80            return(1);
   \                     ??KillTimer_event_1:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
     81          }
     82          
     83          

   \                                 In segment CODE, align 4, keep-with-next
     84          void BeginTimer(u16 timerID, RL_Book * RLBook)
     85          {
     86            BATT bat_struct;
     87            GetBatteryState(SYNC,&bat_struct);
   \                     ??BeginTimer:
   \   00000000   70009FE5           LDR      R0,??BeginTimer_1  ;; SYNC
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   38D04DE2           SUB      SP,SP,#+56
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   04108DE2           ADD      R1,SP,#+4
   \   00000018   E40100EF           SWI      +484
     88            
     89            if ((bat_struct.ChargingState!=Handheld)&&(bat_struct.ChargingState!=Completed))
   \   0000001C   0400DDE5           LDRB     R0,[SP, #+4]
   \   00000020   070050E3           CMP      R0,#+7
   \   00000024   08005013           CMPNE    R0,#+8
   \   00000028   0E00000A           BEQ      ??BeginTimer_2
     90            {
     91              RedLED_On(0);
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   070300EF           SWI      +775
     92              Timer_ReSet(&RLBook->timer,OnTime,MKTIMERPROC(onTimer),RLBook);
   \   00000034   0410A0E1           MOV      R1,R4
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??LPARAM,??LPARAM??rA
   \   00000040   34009FE5           LDR      R0,??BeginTimer_1+0x4  ;; ??onTimer
   \   00000044   ........           _BLF     ??MKTIMERPROC,??MKTIMERPROC??rA
   \   00000048   00309DE5           LDR      R3,[SP, #+0]
   \   0000004C   0020A0E1           MOV      R2,R0
   \   00000050   28009FE5           LDR      R0,??BeginTimer_1+0x8  ;; OnTime
   \   00000054   001090E5           LDR      R1,[R0, #+0]
   \   00000058   180084E2           ADD      R0,R4,#+24
   \   0000005C   280100EF           SWI      +296
   \   00000060   38D08DE2           ADD      SP,SP,#+56
   \   00000064   1080BDE8           POP      {R4,PC}
     93            }
     94            else
     95            {
     96              RLBook->timer=0;
   \                     ??BeginTimer_2:
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   B801C4E1           STRH     R0,[R4, #+24]
     97            }
     98          }
   \   00000070   38D08DE2           ADD      SP,SP,#+56
   \   00000074   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??BeginTimer_1:
   \   00000078   ........           DC32     SYNC
   \   0000007C   ........           DC32     ??onTimer
   \   00000080   ........           DC32     OnTime
     99          
    100          

   \                                 In segment CODE, align 4, keep-with-next
    101          void onTimer (u16 unk, RL_Book * RLBook)
    102          { 
   \                     ??onTimer:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    103            RedLED_Off(0);
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   080300EF           SWI      +776
    104            Timer_ReSet(&RLBook->timer,OffTime,MKTIMERPROC(BeginTimer),RLBook);
   \   00000014   0410A0E1           MOV      R1,R4
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           _BLF     ??LPARAM,??LPARAM??rA
   \   00000020   1C009FE5           LDR      R0,??onTimer_1   ;; ??BeginTimer
   \   00000024   ........           _BLF     ??MKTIMERPROC,??MKTIMERPROC??rA
   \   00000028   00309DE5           LDR      R3,[SP, #+0]
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   10009FE5           LDR      R0,??onTimer_1+0x4  ;; OffTime
   \   00000034   001090E5           LDR      R1,[R0, #+0]
   \   00000038   180084E2           ADD      R0,R4,#+24
   \   0000003C   280100EF           SWI      +296
    105          }
   \   00000040   1180BDE8           POP      {R0,R4,PC}       ;; return
   \                     ??onTimer_1:
   \   00000044   ........           DC32     ??BeginTimer
   \   00000048   ........           DC32     OffTime
    106          
    107          

   \                                 In segment CODE, align 4, keep-with-next
    108          static int ReconfigElf(void *mess ,BOOK *book)
    109          {
   \                     ??ReconfigElf:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    110            RECONFIG_EVENT_DATA *reconf=(RECONFIG_EVENT_DATA *)mess;
    111            int result=0;
    112            if (wstrcmpi(reconf->path,successed_config_path)==0 && wstrcmpi(reconf->name,successed_config_name)==0)
   \   00000008   3C009FE5           LDR      R0,??ReconfigElf_1  ;; successed_config_path
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   9F0200EF           SWI      +671
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0700001A           BNE      ??ReconfigElf_2
   \   00000024   24009FE5           LDR      R0,??ReconfigElf_1+0x4  ;; successed_config_name
   \   00000028   001090E5           LDR      R1,[R0, #+0]
   \   0000002C   800084E2           ADD      R0,R4,#+128
   \   00000030   9F0200EF           SWI      +671
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0100001A           BNE      ??ReconfigElf_2
    113            {
    114              InitConfig();
   \   0000003C   ........           _BLF     ??InitConfig,??InitConfig??rA
    115              result=1;
   \   00000040   0150A0E3           MOV      R5,#+1
    116            }
    117            return(result);
   \                     ??ReconfigElf_2:
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??ReconfigElf_1:
   \   0000004C   ........           DC32     successed_config_path
   \   00000050   ........           DC32     successed_config_name
    118          }
    119          
    120          

   \                                 In segment DYN_PAGE, align 4, align-sorted
    121          const PAGE_MSG RL_PageEvents[]@ "DYN_PAGE" ={
   \                     RL_PageEvents:
   \   00000000   E5030000....       DC32 997, ??TerminateElf, 998, ??ShowAuthorInfo, 179
   \              ....E6030000
   \              ........B300
   \              0000        
   \   00000014   ........B400       DC32 ??BeginTimer_event, 180, ??KillTimer_event, 996, ??ReconfigElf, 64
   \              0000........
   \              E4030000....
   \              ....40000000
   \   0000002C   00000000           DC32 0H
    122            ELF_TERMINATE_EVENT , TerminateElf,
    123            ELF_SHOW_INFO_EVENT  , ShowAuthorInfo,
    124            BATTERY_CHARGER_CONNECTED_EVENT_TAG, BeginTimer_event,
    125            BATTERY_CHARGER_DISCONNECTED_EVENT_TAG, KillTimer_event,
    126            ELF_RECONFIG_EVENT,ReconfigElf,
    127            NIL_EVENT_TAG,0
    128          };
    129          

   \                                 In segment DATA_I, align 4, align-sorted
    130          PAGE_DESC base_page ={"RL_BasePage",0,RL_PageEvents};
   \                     base_page:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for base_page>`
    131          
    132          

   \                                 In segment CODE, align 4, keep-with-next
    133          void elf_exit(void)
    134          
    135          {
   \                     ??elf_exit:
   \   00000000   00402DE9           PUSH     {LR}
    136            kill_data(&ELF_BEGIN, (void(*)(void*))mfree_adr());
   \   00000004   048100EF           SWI      +33028
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??elf_exit_1  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??elf_exit_1:
   \   00000018   ........           DC32     ELF_BEGIN
    137          }
    138          
    139          

   \                                 In segment CODE, align 4, keep-with-next
    140          void onCloseRLBook(BOOK * book)
    141          {
   \                     ??onCloseRLBook:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    142            RL_Book * RLBook = (RL_Book*)book;
    143            
    144            if (RLBook->timer)
   \   00000008   B801D4E1           LDRH     R0,[R4, #+24]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0400000A           BEQ      ??onCloseRLBook_1
    145            {
    146              Timer_Kill(&RLBook->timer);
   \   00000014   180084E2           ADD      R0,R4,#+24
   \   00000018   2A0100EF           SWI      +298
    147              RLBook->timer=0;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   B801C4E1           STRH     R0,[R4, #+24]
    148              RedLED_Off(0);
   \   00000024   080300EF           SWI      +776
    149            }
    150            SUBPROC(elf_exit);
   \                     ??onCloseRLBook_1:
   \   00000028   ........           LDR      R0,??DataTable3  ;; ??elf_exit
   \   0000002C   080100EF           SWI      +264
    151          }
   \   00000030   1080BDE8           POP      {R4,PC}          ;; return
    152          
    153          

   \                                 In segment CODE, align 4, keep-with-next
    154          void CreateRLBook()
    155          {
   \                     ??CreateRLBook:
   \   00000000   10402DE9           PUSH     {R4,LR}
    156            RL_Book * RLBook = (RL_Book*)malloc(sizeof(RL_Book));
   \   00000004   1C00A0E3           MOV      R0,#+28
   \   00000008   030100EF           SWI      +259
    157            CreateBook(RLBook,onCloseRLBook,&base_page,"Blinked Red LED",-1,0);
   \   0000000C   ........           LDR      R3,??DataTable2  ;; `?<Constant "Blinked Red LED">`
   \   00000010   30209FE5           LDR      R2,??CreateRLBook_1  ;; base_page
   \   00000014   30109FE5           LDR      R1,??CreateRLBook_1+0x4  ;; ??onCloseRLBook
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   0000E0E1           MVN      R0,R0
   \   00000028   01002DE9           PUSH     {R0}
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   2B0100EF           SWI      +299
    158            RLBook->timer=0;
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   B801C4E1           STRH     R0,[R4, #+24]
    159            BeginTimer(RLBook->timer,RLBook);
   \   0000003C   0410A0E1           MOV      R1,R4
   \   00000040   ........           BL       ??BeginTimer
    160          }
   \   00000044   1380BDE8           POP      {R0,R1,R4,PC}    ;; return
   \                     ??CreateRLBook_1:
   \   00000048   ........           DC32     base_page
   \   0000004C   ........           DC32     ??onCloseRLBook
    161          
    162          

   \                                 In segment CODE, align 4, keep-with-next
    163          int myFind(BOOK* book)
    164          {
    165             if(!strcmp(book->xbook->name,"Blinked Red LED")) return(1);
   \                     ??myFind:
   \   00000000   ........           LDR      R1,??DataTable2  ;; `?<Constant "Blinked Red LED">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   040090E5           LDR      R0,[R0, #+4]
   \   00000010   590100EF           SWI      +345
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0100A003           MOVEQ    R0,#+1
   \   0000001C   0080BD08           POPEQ    {PC}
    166             return(0);
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   0080BDE8           POP      {PC}             ;; return
    167          }
    168          
    169          

   \                                 In segment CODE, align 4, keep-with-next
    170          int main (void)
    171          {
    172            if (FindBook(myFind))
   \                     main:
   \   00000000   70009FE5           LDR      R0,??main_0      ;; ??myFind
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   300100EF           SWI      +304
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1400000A           BEQ      ??main_1
    173            {
    174              MessageBox(EMPTY_TEXTID,STR("Already runed"), NOIMAGE, 1, 5000,0);
   \   00000014   60009FE5           LDR      R0,??main_0+0x4  ;; `?<Constant L"\\x41\\x6c\\x72\\x65\\x61\\x64\\x79\\x20\\`
   \   00000018   FF40A0E3           MOV      R4,#+255
   \   0000001C   FF4C84E3           ORR      R4,R4,#0xFF00
   \   00000020   0420A0E1           MOV      R2,R4
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   5D0100EF           SWI      +349
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   02002DE9           PUSH     {R1}
   \   00000034   0130A0E3           MOV      R3,#+1
   \   00000038   0420A0E1           MOV      R2,R4
   \   0000003C   8810A0E3           MOV      R1,#+136
   \   00000040   4C1D81E3           ORR      R1,R1,#0x1300
   \   00000044   02002DE9           PUSH     {R1}
   \   00000048   0010A0E1           MOV      R1,R0
   \   0000004C   9004E0E3           MVN      R0,#-1879048192
   \   00000050   570200EF           SWI      +599
    175              SUBPROC(elf_exit);
   \   00000054   ........           LDR      R0,??DataTable3  ;; ??elf_exit
   \   00000058   080100EF           SWI      +264
    176            }
    177            else
    178            {
    179              InitConfig();
    180              CreateRLBook();
    181              return(0);
    182            }
    183          }
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   08D08DE2           ADD      SP,SP,#+8
   \   00000064   1080BDE8           POP      {R4,PC}
   \                     ??main_1:
   \   00000068   ........           _BLF     ??InitConfig,??InitConfig??rA
   \   0000006C   ........           BL       ??CreateRLBook
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??main_0:
   \   00000078   ........           DC32     ??myFind
   \   0000007C   ........           DC32     `?<Constant L"\\x41\\x6c\\x72\\x65\\x61\\x64\\x79\\x20\\`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     `?<Constant "Blinked Red LED">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??elf_exit

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for base_page>`:
   \   00000000   ........0000       DC32 `?<Constant "RL_BasePage">`, 0H, RL_PageEvents
   \              0000........

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "RL_BasePage">`:
   \   00000000   524C5F426173       DC8 "RL_BasePage"
   \              655061676500

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x52\\x65\\x64\\x4c\\x45\\x44\\x20\\x42\\`:
   \   00000000   520065006400       DC8 52H, 0, 65H, 0, 64H, 0, 4CH, 0
   \              4C00        
   \   00000008   450044002000       DC8 45H, 0, 44H, 0, 20H, 0, 42H, 0
   \              4200        
   \   00000010   6C0069006E00       DC8 6CH, 0, 69H, 0, 6EH, 0, 6BH, 0
   \              6B00        
   \   00000018   650064002000       DC8 65H, 0, 64H, 0, 20H, 0, 76H, 0
   \              7600        
   \   00000020   31002E003200       DC8 31H, 0, 2EH, 0, 32H, 0, 0AH, 0
   \              0A00        
   \   00000028   280063002900       DC8 28H, 0, 63H, 0, 29H, 0, 20H, 0
   \              2000        
   \   00000030   490072006F00       DC8 49H, 0, 72H, 0, 6FH, 0, 6EH, 0
   \              6E00        
   \   00000038   4D0061007300       DC8 4DH, 0, 61H, 0, 73H, 0, 74H, 0
   \              7400        
   \   00000040   650072000000       DC8 65H, 0, 72H, 0, 0, 0
   \   00000046   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Blinked Red LED">`:
   \   00000000   426C696E6B65       DC8 "Blinked Red LED"
   \              642052656420
   \              4C454400    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x41\\x6c\\x72\\x65\\x61\\x64\\x79\\x20\\`:
   \   00000000   41006C007200       DC8 41H, 0, 6CH, 0, 72H, 0, 65H, 0
   \              6500        
   \   00000008   610064007900       DC8 61H, 0, 64H, 0, 79H, 0, 20H, 0
   \              2000        
   \   00000010   720075006E00       DC8 72H, 0, 75H, 0, 6EH, 0, 65H, 0
   \              6500        
   \   00000018   64000000           DC8 64H, 0, 0, 0

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     BeginTimer(u16, RL_Book *)        64
     BeginTimer_event(void *, BOOK *)
                                        4
     CreateRLBook()                    16
     KillTimer_event(void *, BOOK *)
                                        8
     LPARAM::LPARAM(void *)             0
     MKTIMERPROC(void (*)(u16, RL_Book *))
                                        0
     ReconfigElf(void *, BOOK *)       12
     ShowAuthorInfo(void *, BOOK *)    20
     TerminateElf(void *, BOOK *)       4
     elf_exit()                         4
     main()                            16
     myFind(BOOK *)                     4
     onCloseRLBook(BOOK *)              8
     onTimer(u16, RL_Book *)           12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     LPARAM::LPARAM(void *)            8
     MKTIMERPROC(void (*)(u16, RL_Book *))
                                       4
     TerminateElf(void *, BOOK *)     20
     ShowAuthorInfo(void *, BOOK *)   84
     BeginTimer_event(void *, BOOK *)
                                      20
     KillTimer_event(void *, BOOK *)
                                      48
     BeginTimer(u16, RL_Book *)      132
     onTimer(u16, RL_Book *)          76
     ReconfigElf(void *, BOOK *)      84
     RL_PageEvents                    48
     base_page                        12
     elf_exit()                       28
     onCloseRLBook(BOOK *)            52
     CreateRLBook()                   80
     myFind(BOOK *)                   40
     main()                          128
     ??DataTable2                      4
     ??DataTable3                      4
     ?<Initializer for base_page>     12
     ?<Constant "RL_BasePage">        12
     ?<Constant L"\x52\x65\x64\x4c\x45\x44\x20\x42\
                                      72
     ?<Constant "Blinked Red LED">    16
     ?<Constant L"\x41\x6c\x72\x65\x61\x64\x79\x20\
                                      28
      Others                         108

 
 908 bytes in segment CODE
 128 bytes in segment DATA_C
  12 bytes in segment DATA_I
  12 bytes in segment DATA_ID
  48 bytes in segment DYN_PAGE
  12 bytes in segment INITTAB
 
 800 bytes of CODE  memory (+ 120 bytes shared)
 188 bytes of CONST memory
  12 bytes of DATA  memory

Errors: none
Warnings: none
