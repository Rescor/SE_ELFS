//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:53:19 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       lng.cpp                                             /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       lng.cpp -D NDEBUG -D OLDFUNCTIONS -lC               /
//                       Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       Release\List\ -lA Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\EventControl\Release\List\ -o                  /
//                       Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       Release\Obj\ -s9 --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h -I Z:\home\perk11\IAR2\arm\INC\                /
//                       --inline_threshold=2                                /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       Release\List\lng.s79                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME lng

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
        PUBLIC ??Lang_Initialize
        FUNCTION ??Lang_Initialize,0203H
        LOCFRAME CSTACK, 44, STACK
        MULTWEAK ??Lang_Initialize??rT
        PUBLIC ??Lang_Remove
        FUNCTION ??Lang_Remove,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??Lang_Remove??rT
        PUBLIC ??char2unicode
        FUNCTION ??char2unicode,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??char2unicode??rT
        MULTWEAK ??checkfile??rA
        PUBLIC ??destroy_innative_lng
        FUNCTION ??destroy_innative_lng,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??destroy_innative_lng??rT
        MULTWEAK ??getparam??rA
        PUBLIC ??isNative
        FUNCTION ??isNative,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??isNative??rT
        PUBLIC ??isbetween
        FUNCTION ??isbetween,0203H
        MULTWEAK ??isbetween??rT
        PUBLIC ??lng_load
        FUNCTION ??lng_load,0203H
        LOCFRAME CSTACK, 196, STACK
        MULTWEAK ??lng_load??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new[]??rA`
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC fbuf
        PUBLIC fsize
        PUBLIC lng
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        





??Lang_Initialize??rT SYMBOL "??rT", ??Lang_Initialize

??Lang_Remove??rT   SYMBOL "??rT", ??Lang_Remove

??char2unicode??rT  SYMBOL "??rT", ??char2unicode
??checkfile??rA     SYMBOL "??rA", ??checkfile

??destroy_innative_lng??rT SYMBOL "??rT", ??destroy_innative_lng
??getparam??rA      SYMBOL "??rA", ??getparam

??isNative??rT      SYMBOL "??rT", ??isNative

??isbetween??rT     SYMBOL "??rT", ??isbetween

??lng_load??rT      SYMBOL "??rT", ??lng_load
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

        EXTERN ??checkfile
        FUNCTION ??checkfile,0202H
        EXTERN ??getparam
        FUNCTION ??getparam,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN ELF_BEGIN
        EXTERN items

// Z:\home\perk11\www\perk11.info\svn\SE\EventControl\lng.cpp
//    1 /*
//    2 *===========================================================================
//    3 *                       Модуль поддержки разных языков
//    4 *===========================================================================
//    5 */
//    6 #include "..\deleaker\mem2.h"
//    7 #include "..\include\Lib_Clara.h" 
//    8 #include "..\include\Dir.h" 
//    9 #include "header\structs.h"
//   10 #include "header\lng.h"
//   11 #include "header\string.h"
//   12 extern wchar_t *items[];
//   13 
//   14 char *getparam2(char *buf, char *mask, char end, int fsize);
//   15 void char2unicode(wchar_t *ws, char const *s, int len);
//   16 void Lang_Initialize();
//   17 void Lang_Remove();
//   18 
//   19 #define DEFAULT_RU
//   20 #ifdef DEFAULT_RU

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   21 wchar_t *lng[]={
lng:
        DS8 60
        REQUIRE `?<Initializer for lng>`
//   22   L"Приложение уже запущено",
//   23   L"Тест событий",
//   24   L"Информ.",
//   25   L"Не удалось прочитать файл событий.",
//   26   L" минут осталось",
//   27   L" минут назад",
//   28   L"%d минут осталось",
//   29   L"%d минут назад",
//   30   L"Важное событие",
//   31   L"Все важные события и напоминания появляются в данном окне. Чтобы пометить напоминание как прочитанное, нажмите 'C'. Если вы закроете окно, не отметив все напоминания, то будет отображаться иконка в статусной строке. Для повторного открытия окна нажмите 'About' в BookManager",
//   32   L"ОК",
//   33   L"Отмет.",
//   34   0,0,0
//   35 };
//   36 #else
//   37 wchar_t *lng[]={
//   38   L"EventControl is already runned",
//   39   L"Events test",
//   40   L"Info",
//   41   L"Can't read any Events file!",
//   42   L" minutes remain",
//   43   L" minutes ago",
//   44   L"%d minutes remain",
//   45   L"%d minutes ago",
//   46   L"Important event",
//   47   L"All important events and reminds are showing in this window. To mark event as 'readed' press 'C'. If you close window with not marked events, you will see icon in status bar. To open this window again press 'About' in BookManager",
//   48   L"OK",
//   49   L"Mark",
//   50   0,0,0
//   51 };
//   52 #endif

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   53 int fsize=0;
fsize:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??isbetween??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??isbetween
//   54 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??isbetween
        ARM
//   55 bool isbetween(int f, int f1, int f2)
//   56 {
//   57   if (f>=f1 && f<=f2)return true;
??isbetween:
        CMP      R0,R1
        CMPGE    R2,R0
        MOVGE    R0,#+1
        BXGE     LR
//   58   return false;
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//   59 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??isNative??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??isNative
//   60 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??isNative
        ARM
//   61 bool isNative(void *f)
//   62 {
//   63   return isbetween((int)f, (int)&ELF_BEGIN, ((int)&ELF_BEGIN)+fsize);
??isNative:
        LDR      R1,??isNative_1  ;; ELF_BEGIN
        SUB      SP,SP,#+4
        CFI CFA R13+4
        CMP      R0,R1
        BLT      ??isNative_2
        LDR      R2,??isNative_1+0x4  ;; fsize
        LDR      R2,[R2, #+0]
        ADD      R1,R2,R1
        CMP      R1,R0
        MOVGE    R0,#+1
        BGE      ??isNative_3
??isNative_2:
        MOV      R0,#+0
??isNative_3:
        POP      {R1}
        CFI CFA R13+0
        BX       LR               ;; return
        DATA
??isNative_1:
        DC32     ELF_BEGIN
        DC32     fsize
        CFI EndBlock cfiBlock3
//   64 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??lng_load??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??lng_load
//   65 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??lng_load
        ARM
//   66 int lng_load(wchar_t *path, wchar_t *name)
//   67 {
??lng_load:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+156
        CFI CFA R13+192
        MOV      R4,R0
        MOV      R6,R1
//   68   Lang_Initialize();
        BL       ??Lang_Initialize
//   69   int res=1;
        MOV      R5,#+1
//   70   int file;
//   71   FSTAT fst;
//   72   if (fstat(path,name,&fst)==0)
        MOV      R2,SP
        MOV      R1,R6
        MOV      R0,R4
        SWI      +284
        CMP      R0,#+0
        BNE      ??lng_load_1
//   73   {
//   74     res=0;
//   75     if ((file=_fopen(path,name,FSX_O_RDONLY,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
        PUSH     {R0}
        CFI CFA R13+196
        MOV      R5,#+0
        MOV      R3,#+384
        MOV      R2,#+1
        MOV      R1,R6
        MOV      R0,R4
        SWI      +278
        MOVS     R6,R0
        ADD      SP,SP,#+4
        CFI CFA R13+192
        BMI      ??lng_load_1
//   76     {
//   77       char * buf;
//   78       char * param;
//   79       buf=new char[fst.fsize+1];
        LDR      R0,[SP, #+8]
//   80       fread(file,buf,fst.fsize);
//   81       int x=0;
//   82       char endsymbol=';';
        LDR      R9,??lng_load_2  ;; `?<Constant "lng_%d)">`
        LDR      R10,??DataTable3  ;; lng
        ADD      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        LDR      R2,[SP, #+8]
        MOV      R7,R0
        MOV      R1,R7
        MOV      R0,R6
        SWI      +280
        MOV      R8,#+0
        B        ??lng_load_3
//   83       
//   84       while (1)
//   85       {
//   86         char pattern[128];
//   87         sprintf(pattern,"lng_%d)",x);
//   88         if (param=getparam(buf,pattern,endsymbol, fst.fsize))
//   89         {
//   90           
//   91           if (lng[x])
//   92           {
//   93             if (!isNative(lng[x]))
??lng_load_4:
        CMP      R0,#+0
        BNE      ??lng_load_5
//   94             {
//   95               delete(lng[x]);
        MOV      R0,R11
        _BLF     `??operator delete`,`??operator delete??rA`
//   96             }
//   97           }
//   98           
//   99           lng[x]=new wchar_t[strlen(param)+1];
??lng_load_5:
        MOV      R0,R4
        SWI      +346
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R10, +R8, LSL #+2]
//  100           char2unicode(lng[x], param, strlen(param));
        MOV      R0,R4
        SWI      +346
        MOV      R2,R0
        LDR      R0,[R10, +R8, LSL #+2]
        MOV      R1,R4
        BL       ??char2unicode
//  101           delete(param);
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
//  102         }
//  103         else break;
//  104         x++;
        ADD      R8,R8,#+1
??lng_load_3:
        MOV      R2,R8
        MOV      R1,R9
        ADD      R0,SP,#+28
        SWI      +276
        LDR      R3,[SP, #+8]
        MOV      R2,#+59
        ADD      R1,SP,#+28
        MOV      R0,R7
        _BLF     ??getparam,??getparam??rA
        MOVS     R4,R0
        BEQ      ??lng_load_6
        LDR      R11,[R10, +R8, LSL #+2]
        CMP      R11,#+0
        BEQ      ??lng_load_5
        MOV      R0,R11
        BL       ??isNative
        CMP      R0,#+0
        BEQ      ??lng_load_4
        MOV      R0,#+1
        B        ??lng_load_4
//  105       }
//  106       x=0;
??lng_load_6:
        LDR      R10,??DataTable2  ;; items
        MOV      R8,#+0
        B        ??lng_load_7
//  107       while (1)
//  108       {
//  109         char pattern[128];
//  110         sprintf(pattern,"items_%d)",x);
//  111         if (param=getparam(buf,pattern,endsymbol, fst.fsize))
//  112         {
//  113           if (items[x])
//  114           {      
//  115             if (!isNative(items[x]))
??lng_load_8:
        CMP      R0,#+0
        BNE      ??lng_load_9
//  116             {
//  117               delete(items[x]);
        MOV      R0,R11
        _BLF     `??operator delete`,`??operator delete??rA`
//  118             }
//  119           }
//  120           items[x]=new wchar_t[strlen(param)+1];
??lng_load_9:
        MOV      R0,R4
        SWI      +346
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R10, +R8, LSL #+2]
//  121           char2unicode(items[x], param, strlen(param));
        MOV      R0,R4
        SWI      +346
        MOV      R2,R0
        LDR      R0,[R10, +R8, LSL #+2]
        MOV      R1,R4
        BL       ??char2unicode
//  122           delete(param);
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
//  123         }
//  124         else 
//  125           goto L_away;
//  126         x++;
        ADD      R8,R8,#+1
??lng_load_7:
        MOV      R2,R8
        ADD      R1,R9,#+8
        ADD      R0,SP,#+28
        SWI      +276
        LDR      R3,[SP, #+8]
        MOV      R2,#+59
        ADD      R1,SP,#+28
        MOV      R0,R7
        _BLF     ??getparam,??getparam??rA
        MOVS     R4,R0
        BEQ      ??lng_load_10
        LDR      R11,[R10, +R8, LSL #+2]
        CMP      R11,#+0
        BEQ      ??lng_load_9
        MOV      R0,R11
        BL       ??isNative
        CMP      R0,#+0
        BEQ      ??lng_load_8
        MOV      R0,#+1
        B        ??lng_load_8
//  127       }
//  128     L_away:
//  129       ;
//  130       fclose(file);
??lng_load_10:
        MOV      R0,R6
        SWI      +279
//  131     }
//  132   }
//  133   return res;
??lng_load_1:
        MOV      R0,R5
        ADD      SP,SP,#+156
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??lng_load_2:
        DC32     `?<Constant "lng_%d)">`
        CFI EndBlock cfiBlock5
//  134 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??destroy_innative_lng??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??destroy_innative_lng
//  135 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??destroy_innative_lng
        ARM
//  136 void destroy_innative_lng()
//  137 {
??destroy_innative_lng:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
//  138   Lang_Remove();
//  139   int x=0;
        LDR      R5,??DataTable2  ;; items
        MOV      R4,#+0
        BL       ??Lang_Remove
        LDR      R0,[R5, #+0]
        CMP      R0,#+0
        BNE      ??destroy_innative_lng_1
        B        ??destroy_innative_lng_2
//  140   while (1)
//  141   {
//  142     if (!items[x])break;
//  143     if (!isNative(items[x]))
??destroy_innative_lng_3:
        CMP      R0,#+0
        BNE      ??destroy_innative_lng_4
//  144     {
//  145       delete(items[x]);
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//  146     }
//  147     x++;
??destroy_innative_lng_4:
        ADD      R4,R4,#+1
??destroy_innative_lng_1:
        LDR      R6,[R5, +R4, LSL #+2]
        CMP      R6,#+0
        BNE      ??destroy_innative_lng_5
//  148   };
//  149   x=0;
??destroy_innative_lng_2:
        LDR      R5,??DataTable3  ;; lng
        MOV      R4,#+0
        LDR      R0,[R5, #+0]
        CMP      R0,#+0
        BNE      ??destroy_innative_lng_6
        POP      {R4-R6,PC}
??destroy_innative_lng_5:
        MOV      R0,R6
        BL       ??isNative
        CMP      R0,#+0
        BEQ      ??destroy_innative_lng_3
        MOV      R0,#+1
        B        ??destroy_innative_lng_3
//  150   while (1)
//  151   {
//  152     if (!lng[x])return;
//  153     if (!isNative(lng[x]))
??destroy_innative_lng_7:
        CMP      R0,#+0
        BNE      ??destroy_innative_lng_8
//  154     {
//  155       delete(lng[x]);
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
//  156     }
//  157     x++;
??destroy_innative_lng_8:
        ADD      R4,R4,#+1
??destroy_innative_lng_6:
        LDR      R6,[R5, +R4, LSL #+2]
        CMP      R6,#+0
        POPEQ    {R4-R6,PC}
        MOV      R0,R6
        BL       ??isNative
        CMP      R0,#+0
        BEQ      ??destroy_innative_lng_7
        MOV      R0,#+1
        B        ??destroy_innative_lng_7
        CFI EndBlock cfiBlock7
//  158   };
//  159 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     items

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     lng

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??char2unicode??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??char2unicode
//  160 
//  161 wchar_t *checkfile(wchar_t*);

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//  162 char *fbuf=0;
fbuf:
        DS8 4
//  163 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??char2unicode
        ARM
//  164 void char2unicode(wchar_t *ws, char const *s, int len) 
//  165 {
//  166   if (fbuf)
??char2unicode:
        LDR      R3,??DataTable6  ;; fbuf
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R3,[R3, #+0]
        CMP      R3,#+0
        BEQ      ??char2unicode_1
//  167   {
//  168     int c;
//  169     char * buf=fbuf;
        B        ??char2unicode_2
//  170     while((c = *s++) && ((len--) > 0))   
//  171     {
//  172       if (c == 0x7E) c = 0x0A;
??char2unicode_3:
        CMP      R12,#+126
        MOVEQ    R12,#+10
//  173       if (fbuf) c = (buf[2 * c] << 8)  | buf[2 * c + 1];
//  174       *ws++ = c;
        ADD      R12,R3,R12, LSL #+1
        LDRB     R4,[R12, #+0]
        LDRB     R12,[R12, #+1]
        ORR      R4,R12,R4, LSL #+8
        STRH     R4,[R0], #+2
//  175   
//  176     }
??char2unicode_2:
        LDRB     R12,[R1], #+1
        CMP      R12,#+0
        BEQ      ??char2unicode_4
        MOV      R4,R2
        SUB      R2,R4,#+1
        CMP      R4,#+1
        BGE      ??char2unicode_3
//  177     *ws=0;
??char2unicode_4:
        MOV      R1,#+0
        STRH     R1,[R0, #+0]
        POP      {R4,PC}
//  178   }
//  179   else
//  180   {
//  181     str2wstr(ws, s);
??char2unicode_1:
        SWI      +344
//  182   }
//  183 };
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??Lang_Initialize??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??Lang_Initialize
//  184 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??Lang_Initialize
        ARM
//  185 void Lang_Initialize()
//  186 {
??Lang_Initialize:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  187   fbuf=0;
        LDR      R4,??DataTable6  ;; fbuf
//  188   int file;
//  189   FSTAT fst;
//  190   if(fstat(checkfile(L"encoding.bin"), L"encoding.bin", &fst) == 0)
        LDR      R5,??Lang_Initialize_1  ;; `?<Constant L"\\x65\\x6e\\x63\\x6f\\x64\\x69\\x6e\\x67\\`
        SUB      SP,SP,#+28
        CFI CFA R13+40
        MOV      R0,#+0
        STR      R0,[R4, #+0]
        MOV      R0,R5
        _BLF     ??checkfile,??checkfile??rA
        MOV      R2,SP
        MOV      R1,R5
        SWI      +284
        CMP      R0,#+0
        BNE      ??Lang_Initialize_2
//  191   {
//  192     if( ((file = _fopen(checkfile(L"encoding.bin"), L"encoding.bin", FSX_O_RDONLY, FSX_S_IREAD|FSX_S_IWRITE, 0)) >= 0) && fst.fsize == 512 )
        MOV      R0,R5
        _BLF     ??checkfile,??checkfile??rA
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+44
        MOV      R3,#+384
        MOV      R2,#+1
        MOV      R1,R5
        SWI      +278
        MOVS     R5,R0
        ADD      SP,SP,#+4
        CFI CFA R13+40
        BMI      ??Lang_Initialize_2
        LDR      R0,[SP, #+8]
        CMP      R0,#+512
        BNE      ??Lang_Initialize_2
//  193     {
//  194       fbuf = new char[512];
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R4, #+0]
//  195       fread(file, fbuf, 512);
        MOV      R2,#+512
        MOV      R1,R0
        MOV      R0,R5
        SWI      +280
//  196       fclose(file);
        MOV      R0,R5
        SWI      +279
//  197     }
//  198   }
//  199 };
??Lang_Initialize_2:
        ADD      SP,SP,#+28       ;; stack cleaning
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??Lang_Initialize_1:
        DC32     `?<Constant L"\\x65\\x6e\\x63\\x6f\\x64\\x69\\x6e\\x67\\`
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??Lang_Remove??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??Lang_Remove
//  200 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??Lang_Remove
        ARM
//  201 void Lang_Remove()
//  202 {
??Lang_Remove:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  203   if (fbuf)
        LDR      R4,??DataTable6  ;; fbuf
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        POPEQ    {R4,PC}
//  204   {
//  205     delete(fbuf);
        _BLF     `??operator delete`,`??operator delete??rA`
//  206     fbuf=0;
        MOV      R0,#+0
        STR      R0,[R4, #+0]
//  207   }
//  208 };
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     fbuf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine7_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine7_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine8_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine8_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
??getparam??rA:
        LDR      R12,??Subroutine9_0  ;; ??getparam
        BX       R12
        DATA
??Subroutine9_0:
        DC32     ??getparam
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
??checkfile??rA:
        LDR      R12,??Subroutine10_0  ;; ??checkfile
        BX       R12
        DATA
??Subroutine10_0:
        DC32     ??checkfile
        CFI EndBlock cfiBlock17

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for lng>`:
        DATA
        DC32 `?<Constant L"\\x41f\\x440\\x438\\x43b\\x43e\\x436\\x4`
        DC32 `?<Constant L"\\x422\\x435\\x441\\x442\\x20\\x441\\x43`
        DC32 `?<Constant L"\\x418\\x43d\\x444\\x43e\\x440\\x43c\\x2`
        DC32 `?<Constant L"\\x41d\\x435\\x20\\x443\\x434\\x430\\x43`
        DC32 `?<Constant L"\\x20\\x43c\\x438\\x43d\\x443\\x442\\x20`
        DC32 `?<Constant L"\\x20\\x43c\\x438\\x43d\\x443\\x442\\x20_1`
        DC32 `?<Constant L"\\x25\\x64\\x20\\x43c\\x438\\x43d\\x443\\`
        DC32 `?<Constant L"\\x25\\x64\\x20\\x43c\\x438\\x43d\\x443\\_1`
        DC32 `?<Constant L"\\x412\\x430\\x436\\x43d\\x43e\\x435\\x2`
        DC32 `?<Constant L"\\x412\\x441\\x435\\x20\\x432\\x430\\x43`
        DC32 `?<Constant L"\\x41e\\x41a">`
        DC32 `?<Constant L"\\x41e\\x442\\x43c\\x435\\x442\\x2e">`, 0H, 0H, 0H

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41f\\x440\\x438\\x43b\\x43e\\x436\\x4`:
        DATA
        DC8 1FH, 4, 40H, 4, 38H, 4, 3BH, 4
        DC8 3EH, 4, 36H, 4, 35H, 4, 3DH, 4
        DC8 38H, 4, 35H, 4, 20H, 0, 43H, 4
        DC8 36H, 4, 35H, 4, 20H, 0, 37H, 4
        DC8 30H, 4, 3FH, 4, 43H, 4, 49H, 4
        DC8 35H, 4, 3DH, 4, 3EH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x422\\x435\\x441\\x442\\x20\\x441\\x43`:
        DATA
        DC8 22H, 4, 35H, 4, 41H, 4, 42H, 4
        DC8 20H, 0, 41H, 4, 3EH, 4, 31H, 4
        DC8 4BH, 4, 42H, 4, 38H, 4, 39H, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x418\\x43d\\x444\\x43e\\x440\\x43c\\x2`:
        DATA
        DC8 18H, 4, 3DH, 4, 44H, 4, 3EH, 4
        DC8 40H, 4, 3CH, 4, 2EH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41d\\x435\\x20\\x443\\x434\\x430\\x43`:
        DATA
        DC8 1DH, 4, 35H, 4, 20H, 0, 43H, 4
        DC8 34H, 4, 30H, 4, 3BH, 4, 3EH, 4
        DC8 41H, 4, 4CH, 4, 20H, 0, 3FH, 4
        DC8 40H, 4, 3EH, 4, 47H, 4, 38H, 4
        DC8 42H, 4, 30H, 4, 42H, 4, 4CH, 4
        DC8 20H, 0, 44H, 4, 30H, 4, 39H, 4
        DC8 3BH, 4, 20H, 0, 41H, 4, 3EH, 4
        DC8 31H, 4, 4BH, 4, 42H, 4, 38H, 4
        DC8 39H, 4, 2EH, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x20\\x43c\\x438\\x43d\\x443\\x442\\x20`:
        DATA
        DC8 20H, 0, 3CH, 4, 38H, 4, 3DH, 4
        DC8 43H, 4, 42H, 4, 20H, 0, 3EH, 4
        DC8 41H, 4, 42H, 4, 30H, 4, 3BH, 4
        DC8 3EH, 4, 41H, 4, 4CH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x20\\x43c\\x438\\x43d\\x443\\x442\\x20_1`:
        DATA
        DC8 20H, 0, 3CH, 4, 38H, 4, 3DH, 4
        DC8 43H, 4, 42H, 4, 20H, 0, 3DH, 4
        DC8 30H, 4, 37H, 4, 30H, 4, 34H, 4
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x25\\x64\\x20\\x43c\\x438\\x43d\\x443\\`:
        DATA
        DC8 25H, 0, 64H, 0, 20H, 0, 3CH, 4
        DC8 38H, 4, 3DH, 4, 43H, 4, 42H, 4
        DC8 20H, 0, 3EH, 4, 41H, 4, 42H, 4
        DC8 30H, 4, 3BH, 4, 3EH, 4, 41H, 4
        DC8 4CH, 4, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x25\\x64\\x20\\x43c\\x438\\x43d\\x443\\_1`:
        DATA
        DC8 25H, 0, 64H, 0, 20H, 0, 3CH, 4
        DC8 38H, 4, 3DH, 4, 43H, 4, 42H, 4
        DC8 20H, 0, 3DH, 4, 30H, 4, 37H, 4
        DC8 30H, 4, 34H, 4, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x430\\x436\\x43d\\x43e\\x435\\x2`:
        DATA
        DC8 12H, 4, 30H, 4, 36H, 4, 3DH, 4
        DC8 3EH, 4, 35H, 4, 20H, 0, 41H, 4
        DC8 3EH, 4, 31H, 4, 4BH, 4, 42H, 4
        DC8 38H, 4, 35H, 4, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x412\\x441\\x435\\x20\\x432\\x430\\x43`:
        DATA
        DC8 12H, 4, 41H, 4, 35H, 4, 20H, 0
        DC8 32H, 4, 30H, 4, 36H, 4, 3DH, 4
        DC8 4BH, 4, 35H, 4, 20H, 0, 41H, 4
        DC8 3EH, 4, 31H, 4, 4BH, 4, 42H, 4
        DC8 38H, 4, 4FH, 4, 20H, 0, 38H, 4
        DC8 20H, 0, 3DH, 4, 30H, 4, 3FH, 4
        DC8 3EH, 4, 3CH, 4, 38H, 4, 3DH, 4
        DC8 30H, 4, 3DH, 4, 38H, 4, 4FH, 4
        DC8 20H, 0, 3FH, 4, 3EH, 4, 4FH, 4
        DC8 32H, 4, 3BH, 4, 4FH, 4, 4EH, 4
        DC8 42H, 4, 41H, 4, 4FH, 4, 20H, 0
        DC8 32H, 4, 20H, 0, 34H, 4, 30H, 4
        DC8 3DH, 4, 3DH, 4, 3EH, 4, 3CH, 4
        DC8 20H, 0, 3EH, 4, 3AH, 4, 3DH, 4
        DC8 35H, 4, 2EH, 0, 20H, 0, 27H, 4
        DC8 42H, 4, 3EH, 4, 31H, 4, 4BH, 4
        DC8 20H, 0, 3FH, 4, 3EH, 4, 3CH, 4
        DC8 35H, 4, 42H, 4, 38H, 4, 42H, 4
        DC8 4CH, 4, 20H, 0, 3DH, 4, 30H, 4
        DC8 3FH, 4, 3EH, 4, 3CH, 4, 38H, 4
        DC8 3DH, 4, 30H, 4, 3DH, 4, 38H, 4
        DC8 35H, 4, 20H, 0, 3AH, 4, 30H, 4
        DC8 3AH, 4, 20H, 0, 3FH, 4, 40H, 4
        DC8 3EH, 4, 47H, 4, 38H, 4, 42H, 4
        DC8 30H, 4, 3DH, 4, 3DH, 4, 3EH, 4
        DC8 35H, 4, 2CH, 0, 20H, 0, 3DH, 4
        DC8 30H, 4, 36H, 4, 3CH, 4, 38H, 4
        DC8 42H, 4, 35H, 4, 20H, 0, 27H, 0
        DC8 43H, 0, 27H, 0, 2EH, 0, 20H, 0
        DC8 15H, 4, 41H, 4, 3BH, 4, 38H, 4
        DC8 20H, 0, 32H, 4, 4BH, 4, 20H, 0
        DC8 37H, 4, 30H, 4, 3AH, 4, 40H, 4
        DC8 3EH, 4, 35H, 4, 42H, 4, 35H, 4
        DC8 20H, 0, 3EH, 4, 3AH, 4, 3DH, 4
        DC8 3EH, 4, 2CH, 0, 20H, 0, 3DH, 4
        DC8 35H, 4, 20H, 0, 3EH, 4, 42H, 4
        DC8 3CH, 4, 35H, 4, 42H, 4, 38H, 4
        DC8 32H, 4, 20H, 0, 32H, 4, 41H, 4
        DC8 35H, 4, 20H, 0, 3DH, 4, 30H, 4
        DC8 3FH, 4, 3EH, 4, 3CH, 4, 38H, 4
        DC8 3DH, 4, 30H, 4, 3DH, 4, 38H, 4
        DC8 4FH, 4, 2CH, 0, 20H, 0, 42H, 4
        DC8 3EH, 4, 20H, 0, 31H, 4, 43H, 4
        DC8 34H, 4, 35H, 4, 42H, 4, 20H, 0
        DC8 3EH, 4, 42H, 4, 3EH, 4, 31H, 4
        DC8 40H, 4, 30H, 4, 36H, 4, 30H, 4
        DC8 42H, 4, 4CH, 4, 41H, 4, 4FH, 4
        DC8 20H, 0, 38H, 4, 3AH, 4, 3EH, 4
        DC8 3DH, 4, 3AH, 4, 30H, 4, 20H, 0
        DC8 32H, 4, 20H, 0, 41H, 4, 42H, 4
        DC8 30H, 4, 42H, 4, 43H, 4, 41H, 4
        DC8 3DH, 4, 3EH, 4, 39H, 4, 20H, 0
        DC8 41H, 4, 42H, 4, 40H, 4, 3EH, 4
        DC8 3AH, 4, 35H, 4, 2EH, 0, 20H, 0
        DC8 14H, 4, 3BH, 4, 4FH, 4, 20H, 0
        DC8 3FH, 4, 3EH, 4, 32H, 4, 42H, 4
        DC8 3EH, 4, 40H, 4, 3DH, 4, 3EH, 4
        DC8 33H, 4, 3EH, 4, 20H, 0, 3EH, 4
        DC8 42H, 4, 3AH, 4, 40H, 4, 4BH, 4
        DC8 42H, 4, 38H, 4, 4FH, 4, 20H, 0
        DC8 3EH, 4, 3AH, 4, 3DH, 4, 30H, 4
        DC8 20H, 0, 3DH, 4, 30H, 4, 36H, 4
        DC8 3CH, 4, 38H, 4, 42H, 4, 35H, 4
        DC8 20H, 0, 27H, 0, 41H, 0, 62H, 0
        DC8 6FH, 0, 75H, 0, 74H, 0, 27H, 0
        DC8 20H, 0, 32H, 4, 20H, 0, 42H, 0
        DC8 6FH, 0, 6FH, 0, 6BH, 0, 4DH, 0
        DC8 61H, 0, 6EH, 0, 61H, 0, 67H, 0
        DC8 65H, 0, 72H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41e\\x41a">`:
        DATA
        DC8 1EH, 4, 1AH, 4, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41e\\x442\\x43c\\x435\\x442\\x2e">`:
        DATA
        DC8 1EH, 4, 42H, 4, 3CH, 4, 35H, 4
        DC8 42H, 4, 2EH, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "lng_%d)">`:
        DATA
        DC8 "lng_%d)"
        DC8 "items_%d)"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x65\\x6e\\x63\\x6f\\x64\\x69\\x6e\\x67\\`:
        DATA
        DC8 65H, 0, 6EH, 0, 63H, 0, 6FH, 0
        DC8 64H, 0, 69H, 0, 6EH, 0, 67H, 0
        DC8 2EH, 0, 62H, 0, 69H, 0, 6EH, 0
        DC8 0, 0
        DC8 0, 0

        END
//  209 
// 
// 1 112 bytes in segment CODE
//   948 bytes in segment DATA_C
//    60 bytes in segment DATA_I
//    60 bytes in segment DATA_ID
//     8 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 1 036 bytes of CODE  memory (+ 100 bytes shared)
// 1 008 bytes of CONST memory
//    68 bytes of DATA  memory
//
//Errors: none
//Warnings: none
