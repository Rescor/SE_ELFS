//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:53:44 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       rem_imp.cpp                                         /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       rem_imp.cpp -D NDEBUG -D OLDFUNCTIONS -lC           /
//                       Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       Release\List\ -lA Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\EventControl\Release\List\ -o                  /
//                       Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       Release\Obj\ -s9 --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h -I Z:\home\perk11\IAR2\arm\INC\                /
//                       --inline_threshold=2                                /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       Release\List\rem_imp.s79                            /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME rem_imp

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??CreateReminder
        FUNCTION ??CreateReminder,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??CreateReminder??rT
        MULTWEAK ??GUI_REMIND_Create??rA
        MULTWEAK ??GuiRemind_AddNote??rA
        MULTWEAK ??kill_rems??rA
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        







??CreateReminder??rT SYMBOL "??rT", ??CreateReminder
??GUI_REMIND_Create??rA SYMBOL "??rA", ??GUI_REMIND_Create
??GuiRemind_AddNote??rA SYMBOL "??rA", ??GuiRemind_AddNote
??kill_rems??rA     SYMBOL "??rA", ??kill_rems
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

        EXTERN ??GUI_REMIND_Create
        FUNCTION ??GUI_REMIND_Create,0202H
        EXTERN ??GuiRemind_AddNote
        FUNCTION ??GuiRemind_AddNote,0202H
        EXTERN ??kill_rems
        FUNCTION ??kill_rems,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateReminder??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??CreateReminder
// Z:\home\perk11\www\perk11.info\svn\SE\EventControl\rem_imp.cpp
//    1 /*
//    2 *===========================================================================
//    3 *                     Модуль напоминальщика
//    4 *===========================================================================
//    5 */
//    6 #include "..\deleaker\mem2.h"
//    7 #include "..\include\Lib_Clara.h" 
//    8 #include "..\include\Dir.h"
//    9 #include "header\structs.h"
//   10 #include "header\lng.h"
//   11 
//   12 #define MBK(a) MyBOOK *mbk=(MyBOOK*)a
//   13 
//   14 extern MyBOOK *ECBook;
//   15 
//   16 int isEvtBook(BOOK *bk);
//   17 
//   18 GUI_REMIND *GUI_REMIND_Create(BOOK *bk);
//   19 void GuiRemind_AddNote(GUI_REMIND *g, REMIND *rem);
//   20 void kill_rems(LIST *lst, MyBOOK *mbk, bool check);
//   21 //#define DELETE(x) if (x)delete x; x=0
//   22 
//   23 /*
//   24 *===========================================================================
//   25 *                     Создаём напоминальщика...
//   26 *===========================================================================
//   27 */

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??CreateReminder
        ARM
//   28 void CreateReminder(REMINDER_STRUCT * rem_str)
//   29 {
??CreateReminder:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R4,R0
//   30   MBK(rem_str->bk);
//   31   if (rem_str->vibra)
        LDRB     R0,[R4, #+16]
        LDR      R5,[R4, #+0]
        CMP      R0,#+0
        BEQ      ??CreateReminder_1
//   32   {
//   33     PAudioControl pAC = AudioControl_Init();
        SWI      +479
//   34     if(!pAC)pAC = *GetAudioControlPtr();
        CMP      R0,#+0
        BNE      ??CreateReminder_2
        SWI      +33233
        LDR      R0,[R0, #+0]
//   35     AudioControl_Vibrate(pAC, 500, 50, 3000);
??CreateReminder_2:
        MOV      R3,#+184
        ORR      R3,R3,#0xB00
        MOV      R2,#+50
        MOV      R1,#+500
        SWI      +466
//   36   }
//   37   bool created=false;
//   38   if (mbk->remind)
??CreateReminder_1:
        LDR      R0,[R5, #+36]
        MOV      R6,#+0
        CMP      R0,#+0
        BEQ      ??CreateReminder_3
//   39   {
//   40     if (rem_str->replace)
        LDRB     R0,[R4, #+17]
        CMP      R0,#+0
        BEQ      ??CreateReminder_4
//   41     {
//   42       kill_rems(mbk->remlst, mbk, 0);
        LDR      R0,[R5, #+44]
        MOV      R2,#+0
        MOV      R1,R5
        _BLF     ??kill_rems,??kill_rems??rA
//   43       GUIObject_Destroy(mbk->remind);
        LDR      R0,[R5, #+36]
//   44       mbk->remind=GUI_REMIND_Create(rem_str->bk);
//   45       created=true;
        MOV      R6,#+1
        SWI      +462
        LDR      R0,[R4, #+0]
        _BLF     ??GUI_REMIND_Create,??GUI_REMIND_Create??rA
        STR      R0,[R5, #+36]
//   46     }
//   47   }
//   48   if (!mbk->remind)
??CreateReminder_3:
        LDR      R0,[R5, #+36]
        CMP      R0,#+0
        BNE      ??CreateReminder_4
//   49   {
//   50     mbk->remind=GUI_REMIND_Create(rem_str->bk);
        LDR      R0,[R4, #+0]
//   51     created=true;
        MOV      R6,#+1
        _BLF     ??GUI_REMIND_Create,??GUI_REMIND_Create??rA
        STR      R0,[R5, #+36]
//   52   }
//   53   GUI *gRemind = mbk->remind;
//   54   if (rem_str->text && rem_str->utext && rem_str->time)
??CreateReminder_4:
        LDR      R0,[R4, #+4]
        LDR      R7,[R5, #+36]
        CMP      R0,#+0
        LDRNE    R0,[R4, #+8]
        CMPNE    R0,#+0
        LDRNE    R0,[R4, #+12]
        CMPNE    R0,#+0
        BEQ      ??CreateReminder_5
//   55   {
//   56     REMIND *rem=new REMIND;
        MOV      R0,#+16
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R8,R0
//   57     memset(rem,0,sizeof(REMIND));
        MOV      R2,#+16
        MOV      R1,#+0
        SWI      +274
//   58     rem->text=new wchar_t[wstrlen(rem_str->text)+1];
        LDR      R0,[R4, #+4]
        SWI      +343
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R8, #+0]
//   59     wstrcpy(rem->text, rem_str->text);
        LDR      R1,[R4, #+4]
        SWI      +338
//   60     rem->utext=new wchar_t[wstrlen(rem_str->utext)+1];
        LDR      R0,[R4, #+8]
        SWI      +343
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R8, #+4]
//   61     wstrcpy(rem->utext,rem_str->utext);
        LDR      R1,[R4, #+8]
        SWI      +338
//   62     rem->time=new wchar_t[wstrlen(rem_str->time)+1];
        LDR      R0,[R4, #+12]
        SWI      +343
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R8, #+8]
//   63     wstrcpy(rem->time,rem_str->time);
        LDR      R1,[R4, #+12]
        SWI      +338
//   64     GuiRemind_AddNote(mbk->remind, rem);
        LDR      R0,[R5, #+36]
        MOV      R1,R8
        _BLF     ??GuiRemind_AddNote,??GuiRemind_AddNote??rA
//   65   }
//   66   GUIObject_SetStyle(gRemind, 4);
??CreateReminder_5:
        MOV      R1,#+4
        MOV      R0,R7
        SWI      +310
//   67   GUIObject_SetTitleType(gRemind, 1);
        MOV      R1,#+1
        MOV      R0,R7
        SWI      +641
//   68   GUIObject_SoftKeys_Hide(gRemind);
        MOV      R0,R7
        SWI      +673
//   69   if (created)
        CMP      R6,#+0
        BEQ      ??CreateReminder_6
//   70   {
//   71     GUIObject_Show(gRemind);
        MOV      R0,R7
        SWI      +308
//   72     BookObj_Show(rem_str->bk, 0);
        LDR      R0,[R4, #+0]
        MOV      R1,#+0
        SWI      +370
//   73     BookObj_SetFocus(rem_str->bk, 0);
        LDR      R0,[R4, #+0]
        MOV      R1,#+0
        SWI      +306
//   74   }
//   75   if (rem_str->need_to_destroy==true) delete rem_str;
??CreateReminder_6:
        LDRB     R0,[R4, #+18]
        CMP      R0,#+0
        POPEQ    {R4-R8,PC}
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
//   76 };
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_rems??rA:
        LDR      R12,??Subroutine1_0  ;; ??kill_rems
        BX       R12
        DATA
??Subroutine1_0:
        DC32     ??kill_rems
        CFI EndBlock cfiBlock2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI NoFunction
        ARM
??GUI_REMIND_Create??rA:
        LDR      R12,??Subroutine2_0  ;; ??GUI_REMIND_Create
        BX       R12
        DATA
??Subroutine2_0:
        DC32     ??GUI_REMIND_Create
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine3_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine3_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine4_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine4_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        ARM
??GuiRemind_AddNote??rA:
        LDR      R12,??Subroutine5_0  ;; ??GuiRemind_AddNote
        BX       R12
        DATA
??Subroutine5_0:
        DC32     ??GuiRemind_AddNote
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine6_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine6_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock7

        END
//   77 
// 
// 496 bytes in segment CODE
// 
// 420 bytes of CODE memory (+ 76 bytes shared)
//
//Errors: none
//Warnings: none
