//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:52:59 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       book.c                                              /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       book.c -D NDEBUG -D OLDFUNCTIONS -lC                /
//                       Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       Release\List\ -lA Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\EventControl\Release\List\ -o                  /
//                       Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       Release\Obj\ -s9 --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h -I Z:\home\perk11\IAR2\arm\INC\                /
//                       --inline_threshold=2                                /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\EventControl\ /
//                       Release\List\book.s79                               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME book

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??CreateReminder??rA
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
        MULTWEAK ??DestroyEvents??rA
        PUBLIC ??ECBook_OnClose
        FUNCTION ??ECBook_OnClose,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??ECBook_OnClose??rT
        PUBLIC ??ECBook_ShowAuthorInfo
        FUNCTION ??ECBook_ShowAuthorInfo,0603H
        LOCFRAME CSTACK, 1112, STACK
        MULTWEAK ??ECBook_ShowAuthorInfo??rT
        PUBLIC ??ECBook_Terminate
        FUNCTION ??ECBook_Terminate,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??ECBook_Terminate??rT
        PUBLIC ??EC_Create
        FUNCTION ??EC_Create,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??EC_Create??rT
        MULTWEAK ??GetIconID??rA
        MULTWEAK ??InitializeEvents??rA
        MULTWEAK ??OnBackGui??rA
        MULTWEAK ??Reminder_onOK??rA
        PUBLIC ??Update
        FUNCTION ??Update,0603H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??Update??rT
        PUBLIC ??checkfile
        FUNCTION ??checkfile,0203H
        LOCFRAME CSTACK, 40, STACK
        MULTWEAK ??checkfile??rT
        MULTWEAK ??destroy_innative_lng??rA
        PUBLIC ??elf_exit
        FUNCTION ??elf_exit,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??elf_exit??rT
        PUBLIC ??isEvtBook
        FUNCTION ??isEvtBook,0203H
        MULTWEAK ??isEvtBook??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??kill_rems??rA
        MULTWEAK ??mbox_Create??rA
        PUBLIC ??onUserInactivity
        FUNCTION ??onUserInactivity,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??onUserInactivity??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK ??readConfig??rA
        PUBWEAK ?init?tab?DATA_I
        PUBLIC ECBook
        PUBLIC base_page
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        












kill_data           SYMBOL "kill_data"
??CreateReminder??rA SYMBOL "??rA", ??CreateReminder
??DestroyEvents??rA SYMBOL "??rA", ??DestroyEvents

??ECBook_OnClose??rT SYMBOL "??rT", ??ECBook_OnClose

??ECBook_ShowAuthorInfo??rT SYMBOL "??rT", ??ECBook_ShowAuthorInfo

??ECBook_Terminate??rT SYMBOL "??rT", ??ECBook_Terminate

??EC_Create??rT     SYMBOL "??rT", ??EC_Create
??GetIconID??rA     SYMBOL "??rA", ??GetIconID
??InitializeEvents??rA SYMBOL "??rA", ??InitializeEvents
??OnBackGui??rA     SYMBOL "??rA", ??OnBackGui
??Reminder_onOK??rA SYMBOL "??rA", ??Reminder_onOK

??Update??rT        SYMBOL "??rT", ??Update

??checkfile??rT     SYMBOL "??rT", ??checkfile
??destroy_innative_lng??rA SYMBOL "??rA", ??destroy_innative_lng

??elf_exit??rT      SYMBOL "??rT", ??elf_exit

??isEvtBook??rT     SYMBOL "??rT", ??isEvtBook
??kill_data??rA     SYMBOL "??rA", kill_data
??kill_rems??rA     SYMBOL "??rA", ??kill_rems
??mbox_Create??rA   SYMBOL "??rA", ??mbox_Create

??onUserInactivity??rT SYMBOL "??rT", ??onUserInactivity
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
??readConfig??rA    SYMBOL "??rA", ??readConfig

        EXTERN ??CreateReminder
        FUNCTION ??CreateReminder,0202H
        EXTERN ??DestroyEvents
        FUNCTION ??DestroyEvents,0202H
        EXTERN ??GetIconID
        FUNCTION ??GetIconID,0202H
        EXTERN ??InitializeEvents
        FUNCTION ??InitializeEvents,0202H
        EXTERN ??OnBackGui
        FUNCTION ??OnBackGui,0202H
        EXTERN ??Reminder_onOK
        FUNCTION ??Reminder_onOK,0202H
        EXTERN ??destroy_innative_lng
        FUNCTION ??destroy_innative_lng,0202H
        EXTERN ??kill_rems
        FUNCTION ??kill_rems,0202H
        EXTERN ??mbox_Create
        FUNCTION ??mbox_Create,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN ??readConfig
        FUNCTION ??readConfig,0202H
        EXTERN ELF_BEGIN
        EXTERN EventTimer
        EXTERN extFolder
        EXTERN intFolder
        EXTERN kill_data
        FUNCTION kill_data,0202H
        EXTERN proc_


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??elf_exit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??elf_exit
// Z:\home\perk11\www\perk11.info\svn\SE\EventControl\book.c
//    1 /*
//    2 *===========================================================================
//    3 *                      Модуль книги EventControl'а
//    4 *===========================================================================
//    5 */
//    6 #define __version__ L"EventControl v2.0\r\n\r\n© UltraShot, Slaventino\n\r\n%s\n\r\nIn a memory of PSIX\n"
//    7 #define BUILD "public version"
//    8 
//    9 #include "..\deleaker\mem2.h"
//   10 #include "..\include\Lib_Clara.h" 
//   11 #include "..\include\Dir.h" 
//   12 #include "header\structs.h"
//   13 
//   14 extern PROCESS proc_;
//   15 extern u16 EventTimer;
//   16 extern wchar_t *extFolder;
//   17 extern wchar_t *intFolder;
//   18 
//   19 int readConfig(MyBOOK *mbk, wchar_t *fpath, wchar_t *fname);
//   20 int InitializeEvents(MyBOOK *myBook);
//   21 void DestroyEvents(MyBOOK *myBook);
//   22 
//   23 void CreateReminder(REMINDER_STRUCT * rem_str);
//   24 GUI_LIST *create_ed(BOOK *book);
//   25 void mbox_Create(BOOK * bk, wchar_t *text, int minutes, bool vibra);
//   26 
//   27 void kill_rems(LIST *lst, MyBOOK *mbk, bool check);
//   28 int GetIconID(wchar_t*);
//   29 void Reminder_onOK(BOOK *bk, void *);
//   30 void OnBackGui(BOOK * bk, void *);
//   31 
//   32 MyBOOK * ECBook=0;
//   33 
//   34 typedef struct
//   35 {
//   36   BOOK * book;
//   37 }MSG;
//   38 
//   39 /*
//   40  *===========================================================================
//   41  *                         Очистка памяти, занятой эльфом
//   42  *===========================================================================
//   43  */

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??elf_exit
        ARM
//   44 void elf_exit(void)
//   45 {
??elf_exit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   46   trace_done();
//   47   kill_data(&ELF_BEGIN, (void(*)(void*))mfree_adr());
        SWI      +33028
        MOV      R1,R0
        LDR      R0,??elf_exit_1  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??elf_exit_1:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock1
//   48 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??ECBook_Terminate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??ECBook_Terminate
//   49 
//   50 /*
//   51  *===========================================================================
//   52  *                         Вызываем закрытие нашей книги из букмана
//   53  *===========================================================================
//   54  */

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??ECBook_Terminate
        ARM
//   55 int ECBook_Terminate(void * ,BOOK* book)
//   56 {
??ECBook_Terminate:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,R1
//   57   FreeBook(book);
        SWI      +303
//   58   return 1;
        MOV      R0,#+1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock3
//   59 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??checkfile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??checkfile
//   60 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??checkfile
        ARM
//   61 wchar_t *checkfile(wchar_t *name)
//   62 {
??checkfile:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   63   FSTAT fst;
//   64   if (fstat(extFolder,name,&fst)==0)
        LDR      R5,??DataTable3  ;; extFolder
        SUB      SP,SP,#+28
        CFI CFA R13+40
        MOV      R4,R0
        LDR      R0,[R5, #+0]
        MOV      R2,SP
        MOV      R1,R4
        SWI      +284
        CMP      R0,#+0
        BEQ      ??checkfile_1
//   65   {
//   66     return extFolder;
//   67   }
//   68   else if (fstat(intFolder,name,&fst)==0)
        LDR      R5,??DataTable4  ;; intFolder
        MOV      R2,SP
        LDR      R0,[R5, #+0]
        MOV      R1,R4
        SWI      +284
??checkfile_1:
        LDR      R0,[R5, #+0]
//   69   {
//   70     return intFolder;
//   71   }
//   72   return intFolder;
        ADD      SP,SP,#+28
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock5
//   73 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??ECBook_ShowAuthorInfo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??ECBook_ShowAuthorInfo
//   74 /*
//   75  *===========================================================================
//   76  *                         Показ информации об эльфе в окне букмана
//   77  *===========================================================================
//   78  */

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??ECBook_ShowAuthorInfo
        ARM
//   79 int ECBook_ShowAuthorInfo(void *mess ,BOOK* book)
//   80 {
??ECBook_ShowAuthorInfo:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//   81   MyBOOK *mbk=ECBook;
        LDR      R6,??DataTable7  ;; ECBook
//   82   PlayFile(checkfile(L"stop.mp3"),L"stop.mp3");
        LDR      R5,??ECBook_ShowAuthorInfo_1  ;; `?<Constant L"\\x73\\x74\\x6f\\x70\\x2e\\x6d\\x70\\x33"`
        SUB      SP,SP,#+60
        CFI CFA R13+80
        SUB      SP,SP,#+1024
        CFI CFA R13+1104
        LDR      R7,[R6, #+0]
        MOV      R4,R1
        MOV      R0,R5
        BL       ??checkfile
        MOV      R1,R5
        SWI      +434
//   83   if (mbk->remlst)
        LDR      R0,[R7, #+44]
        CMP      R0,#+0
//   84   {
//   85     if (mbk->remlst->FirstFree>0)
        LDRHNE   R0,[R0, #+2]
        CMPNE    R0,#+0
        BEQ      ??ECBook_ShowAuthorInfo_2
//   86     {
//   87       REMINDER_STRUCT rem_str;
//   88       rem_str.bk=&ECBook->bk;
        LDR      R1,[R6, #+0]
//   89       rem_str.text=0;
        MOV      R0,#+0
        STR      R1,[SP, #+4]
        STR      R0,[SP, #+8]
//   90       rem_str.utext=0;
        STR      R0,[SP, #+12]
//   91       rem_str.time=0;
        STR      R0,[SP, #+16]
//   92       rem_str.vibra=0;
        MOV      R2,#+0
        STRB     R2,[SP, #+20]
//   93       rem_str.replace=0;
        STRB     R2,[SP, #+21]
//   94       rem_str.need_to_destroy=false;
        STRB     R0,[SP, #+22]
//   95       CreateReminder(&rem_str);
        ADD      R0,SP,#+4
        _BLF     ??CreateReminder,??CreateReminder??rA
//   96       return 1;
        B        ??ECBook_ShowAuthorInfo_3
//   97     }
//   98   }
//   99   wchar_t text[512];
//  100   snwprintf(text,511, __version__ , BUILD);
??ECBook_ShowAuthorInfo_2:
        MOV      R6,#+255
        ORR      R6,R6,#0x100
        ADD      R3,R5,#+168
        ADD      R2,R5,#+20
        MOV      R1,R6
        ADD      R0,SP,#+60
        SWI      +277
//  101   PLMN_LAC_DESC plmn_lac;
//  102   RAT_CI_DESC rat_ci;
//  103   char CSReg;
//  104   if (get_CellData(&plmn_lac,&rat_ci,&CSReg))
        MOV      R2,SP
        ADD      R1,SP,#+36
        ADD      R0,SP,#+24
        SWI      +804
        CMP      R0,#+0
        BEQ      ??ECBook_ShowAuthorInfo_4
//  105   {
//  106     snwprintf(text,511,L"%ls \nCurrent LAC-CID: %04X-%04X", text, plmn_lac.LAC[0]<<8|plmn_lac.LAC[1], rat_ci.CI);
        LDR      R0,[SP, #+40]
        ADD      R2,R5,#+184
        PUSH     {R0}
        CFI CFA R13+1108
        LDRB     R1,[SP, #+37]
        LDRB     R0,[SP, #+36]
        ORR      R0,R1,R0, LSL #+8
        PUSH     {R0}
        CFI CFA R13+1112
        ADD      R3,SP,#+68
        MOV      R1,R6
        ADD      R0,SP,#+68
        SWI      +277
        ADD      SP,SP,#+8
        CFI CFA R13+1104
//  107   }
//  108   mbox_Create(book, text, 0, false);
??ECBook_ShowAuthorInfo_4:
        MOV      R3,#+0
        MOV      R2,#+0
        ADD      R1,SP,#+60
        MOV      R0,R4
        _BLF     ??mbox_Create,??mbox_Create??rA
//  109   return 1;
??ECBook_ShowAuthorInfo_3:
        MOV      R0,#+1
        ADD      SP,SP,#+60
        CFI CFA R13+1044
        ADD      SP,SP,#+1024
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??ECBook_ShowAuthorInfo_1:
        DC32     `?<Constant L"\\x73\\x74\\x6f\\x70\\x2e\\x6d\\x70\\x33"`
        CFI EndBlock cfiBlock7
//  110 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??ECBook_OnClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??ECBook_OnClose
//  111 void destroy_innative_lng();
//  112 /*
//  113  *===========================================================================
//  114  *                         Функция закрытия нашей книги
//  115  *===========================================================================
//  116  * 1) Уничтожаем таймер
//  117  * 2) Уничтожаем список событий
//  118  * 3) Убираем эльфа из памяти
//  119  */

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??ECBook_OnClose
        ARM
//  120 void ECBook_OnClose(BOOK * book)
//  121 {
??ECBook_OnClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
//  122   if (book)
        POPEQ    {R4,PC}
//  123   {
//  124     MyBOOK *mbk=(MyBOOK*)book;
//  125     Timer_Kill(&EventTimer);
        LDR      R0,??ECBook_OnClose_1  ;; EventTimer
        SWI      +298
//  126     kill_proc(proc_);
        LDR      R0,??ECBook_OnClose_1+0x4  ;; proc_
        LDR      R0,[R0, #+0]
        SWI      +391
//  127     if (extFolder)delete(extFolder);
        LDR      R0,??DataTable3  ;; extFolder
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??ECBook_OnClose_2
        _BLF     `??operator delete`,`??operator delete??rA`
//  128     if (intFolder)delete(intFolder);
??ECBook_OnClose_2:
        LDR      R0,??DataTable4  ;; intFolder
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??ECBook_OnClose_3
        _BLF     `??operator delete`,`??operator delete??rA`
//  129     wchar_t icon=GetIconID(L"CALE_RN_TASK_STATUS_ICN");
??ECBook_OnClose_3:
        LDR      R0,??ECBook_OnClose_1+0x8  ;; `?<Constant L"\\x43\\x41\\x4c\\x45\\x5f\\x52\\x4e\\x5f\\`
        _BLF     ??GetIconID,??GetIconID??rA
        MOV      R0,R0, LSL #+16
        MOV      R0,R0, LSR #+16
//  130     SetTrayIcon(icon, 0);
        MOV      R1,#+0
        SWI      +845
//  131     if (mbk->indpath)
        LDR      R0,[R4, #+60]
        CMP      R0,#+0
        BEQ      ??ECBook_OnClose_4
//  132       delete(mbk->indpath);
        _BLF     `??operator delete`,`??operator delete??rA`
//  133     if (mbk->indname)
??ECBook_OnClose_4:
        LDR      R0,[R4, #+64]
        CMP      R0,#+0
        BEQ      ??ECBook_OnClose_5
//  134       delete(mbk->indname);
        _BLF     `??operator delete`,`??operator delete??rA`
//  135     if (mbk->g_mbox)
??ECBook_OnClose_5:
        LDR      R0,[R4, #+52]
        CMP      R0,#+0
        BEQ      ??ECBook_OnClose_6
//  136       GUIObject_Destroy(mbk->g_mbox);
        SWI      +462
//  137     if (mbk->name)
??ECBook_OnClose_6:
        LDR      R0,[R4, #+32]
        CMP      R0,#+0
        BEQ      ??ECBook_OnClose_7
//  138       delete(mbk->name);
        _BLF     `??operator delete`,`??operator delete??rA`
//  139     if (mbk->path)
??ECBook_OnClose_7:
        LDR      R0,[R4, #+28]
        CMP      R0,#+0
        BEQ      ??ECBook_OnClose_8
//  140       delete(mbk->path);
        _BLF     `??operator delete`,`??operator delete??rA`
//  141     if (mbk->g_test)
??ECBook_OnClose_8:
        LDR      R0,[R4, #+48]
        CMP      R0,#+0
        BEQ      ??ECBook_OnClose_9
//  142       GUIObject_Destroy(mbk->g_test);
        SWI      +462
//  143     if (mbk->remind)
??ECBook_OnClose_9:
        LDR      R0,[R4, #+36]
        CMP      R0,#+0
        BEQ      ??ECBook_OnClose_10
//  144       GUIObject_Destroy(mbk->remind);
        SWI      +462
//  145     kill_rems(mbk->remlst, mbk, 0);
??ECBook_OnClose_10:
        LDR      R0,[R4, #+44]
        MOV      R2,#+0
        MOV      R1,R4
        _BLF     ??kill_rems,??kill_rems??rA
//  146     DestroyEvents((MyBOOK*)book);
        MOV      R0,R4
        _BLF     ??DestroyEvents,??DestroyEvents??rA
//  147     destroy_innative_lng();
        _BLF     ??destroy_innative_lng,??destroy_innative_lng??rA
//  148     
//  149     SUBPROC(elf_exit);
        LDR      R0,??ECBook_OnClose_1+0xC  ;; ??elf_exit
        SWI      +264
//  150     
//  151   }
//  152 };
        POP      {R4,PC}          ;; return
        DATA
??ECBook_OnClose_1:
        DC32     EventTimer
        DC32     proc_
        DC32     `?<Constant L"\\x43\\x41\\x4c\\x45\\x5f\\x52\\x4e\\x5f\\`
        DC32     ??elf_exit
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     extFolder

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     intFolder

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??isEvtBook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??isEvtBook
//  153 
//  154 /*
//  155  *===========================================================================
//  156  *                         Определение нашей книги для FindBook
//  157  *===========================================================================
//  158  */

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??isEvtBook
        ARM
//  159 int isEvtBook(BOOK *bk)
//  160 {
//  161   if (bk->onClose == ECBook_OnClose)return 1;
??isEvtBook:
        LDR      R0,[R0, #+4]
        LDR      R1,??DataTable8  ;; ??ECBook_OnClose
        CMP      R0,R1
        MOVEQ    R0,#+1
        BXEQ     LR
//  162   return 0;
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock11
//  163 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUserInactivity??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??onUserInactivity
//  164 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??onUserInactivity
        ARM
//  165 int onUserInactivity(void * r0, BOOK * bk)
//  166 {
??onUserInactivity:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
//  167   MyBOOK *mbk=(MyBOOK*)bk;
//  168   if (mbk->remind)
        LDR      R0,[R4, #+36]
        CMP      R0,#+0
        BEQ      ??onUserInactivity_1
//  169   {
//  170     Reminder_onOK(bk, 0);
        MOV      R1,#+0
        MOV      R0,R4
        _BLF     ??Reminder_onOK,??Reminder_onOK??rA
//  171   }
//  172   if (mbk->g_test)
??onUserInactivity_1:
        LDR      R0,[R4, #+48]
        CMP      R0,#+0
        POPEQ    {R4,PC}
//  173   {
//  174     OnBackGui(bk, 0);
        MOV      R1,#+0
        MOV      R0,R4
        _BLF     ??OnBackGui,??OnBackGui??rA
//  175   }
//  176   return(0);
        MOV      R0,#+0
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13
//  177 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??Update??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??Update
//  178 /*
//  179 *===========================================================================
//  180 *                         Список ивентов, обрабатываемых эльфом
//  181 *===========================================================================
//  182 */

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
//  183 const PAGE_MSG EC_BasePageEvents[]@ "DYN_PAGE" ={
EC_BasePageEvents:
        DATA
        DC32 997, ??ECBook_Terminate, 998, ??ECBook_ShowAuthorInfo, 64, 0H

        RSEG DATA_I:DATA:SORT:NOROOT(2)
ECBook:
        DS8 4
        REQUIRE `?<Initializer for ECBook>`
//  184   ELF_TERMINATE_EVENT , ECBook_Terminate,
//  185   ELF_SHOW_INFO_EVENT  , ECBook_ShowAuthorInfo,
//  186   NIL_EVENT_TAG,           NULL
//  187 };
//  188 PAGE_DESC base_page ={"EventControl_BasePage",0,EC_BasePageEvents};
base_page:
        DS8 12
        REQUIRE `?<Initializer for base_page>`
//  189 
//  190 /*
//  191  *===========================================================================
//  192  *                         Обновление расписания
//  193  *===========================================================================
//  194  * 1) Если путь/имя!=0, то читаем новый конфиг
//  195  * 2) Если путь/имя==0, то читаем дефолтный
//  196  */
//  197 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??Update
        ARM
//  198 void Update(wchar_t *fpath, wchar_t *fname)
//  199 {
??Update:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
//  200   DestroyEvents(ECBook);
        LDR      R6,??DataTable7  ;; ECBook
        MOV      R4,R0
        LDR      R0,[R6, #+0]
        MOV      R5,R1
        _BLF     ??DestroyEvents,??DestroyEvents??rA
//  201   if (fpath && fname)
        CMP      R4,#+0
        CMPNE    R5,#+0
//  202   {
//  203     if (fpath[0]!=0 && fname[0]!=0)
        LDRHNE   R0,[R4, #+0]
        CMPNE    R0,#+0
        LDRHNE   R0,[R5, #+0]
        CMPNE    R0,#+0
        BEQ      ??Update_1
//  204     {
//  205       readConfig(ECBook,fpath,fname);
        LDR      R0,[R6, #+0]
        MOV      R2,R5
        MOV      R1,R4
        POP      {R4-R6,LR}       ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF      ??readConfig,??readConfig??rA  ;; tailcall
        CFI R4 Frame(CFA, -16)
        CFI R5 Frame(CFA, -12)
        CFI R6 Frame(CFA, -8)
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+16
//  206       return;
//  207     }
//  208   }
//  209   InitializeEvents(ECBook);
??Update_1:
        LDR      R0,[R6, #+0]
        POP      {R4-R6,LR}       ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF      ??InitializeEvents,??InitializeEvents??rA  ;; tailcall
        CFI EndBlock cfiBlock15
//  210 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??EC_Create??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??EC_Create
//  211 
//  212 /*
//  213  *===========================================================================
//  214  *                         Создание нашей книги
//  215  *===========================================================================
//  216  * 1) Создаём нашу книгу с сопутствующим "хранилищем" переменных...
//  217  * 2) Устанавливаем update-функцию для обновления из редактора
//  218  */

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??EC_Create
        ARM
//  219 MyBOOK * EC_Create()
//  220 {
??EC_Create:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  221   ECBook = new MyBOOK;
        LDR      R4,??DataTable7  ;; ECBook
        MOV      R0,#+68
        _BLF     `??operator new`,`??operator new??rA`
        STR      R0,[R4, #+0]
//  222   memset(ECBook,0,sizeof(MyBOOK));
        MOV      R2,#+68
        MOV      R1,#+0
        SWI      +274
//  223   CreateBook(&ECBook->bk,ECBook_OnClose,&base_page,"EventControl",-1,0);
        LDR      R3,??EC_Create_1  ;; `?<Constant "EventControl">`
        LDR      R1,??DataTable8  ;; ??ECBook_OnClose
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+12
        ADD      R2,R4,#+4
        MVN      R0,R0
        PUSH     {R0}
        CFI CFA R13+16
        LDR      R0,[R4, #+0]
        SWI      +299
//  224   ECBook->update=Update;
        LDR      R0,[R4, #+0]
        LDR      R1,??EC_Create_1+0x4  ;; ??Update
        STR      R1,[R0, #+24]
//  225   return(ECBook);
        POP      {R1,R2,R4,PC}    ;; return
        DATA
??EC_Create_1:
        DC32     `?<Constant "EventControl">`
        DC32     ??Update
        CFI EndBlock cfiBlock17
//  226 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     ECBook

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     ??ECBook_OnClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine9_0  ;; kill_data
        BX       R12
        DATA
??Subroutine9_0:
        DC32     kill_data
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        ARM
??CreateReminder??rA:
        LDR      R12,??Subroutine10_0  ;; ??CreateReminder
        BX       R12
        DATA
??Subroutine10_0:
        DC32     ??CreateReminder
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI NoFunction
        ARM
??mbox_Create??rA:
        LDR      R12,??Subroutine11_0  ;; ??mbox_Create
        BX       R12
        DATA
??Subroutine11_0:
        DC32     ??mbox_Create
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine12_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine12_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
??GetIconID??rA:
        LDR      R12,??Subroutine13_0  ;; ??GetIconID
        BX       R12
        DATA
??Subroutine13_0:
        DC32     ??GetIconID
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_rems??rA:
        LDR      R12,??Subroutine14_0  ;; ??kill_rems
        BX       R12
        DATA
??Subroutine14_0:
        DC32     ??kill_rems
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI NoFunction
        ARM
??DestroyEvents??rA:
        LDR      R12,??Subroutine15_0  ;; ??DestroyEvents
        BX       R12
        DATA
??Subroutine15_0:
        DC32     ??DestroyEvents
        CFI EndBlock cfiBlock24

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI NoFunction
        ARM
??destroy_innative_lng??rA:
        LDR      R12,??Subroutine16_0  ;; ??destroy_innative_lng
        BX       R12
        DATA
??Subroutine16_0:
        DC32     ??destroy_innative_lng
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon1
        CFI NoFunction
        ARM
??Reminder_onOK??rA:
        LDR      R12,??Subroutine17_0  ;; ??Reminder_onOK
        BX       R12
        DATA
??Subroutine17_0:
        DC32     ??Reminder_onOK
        CFI EndBlock cfiBlock26

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI NoFunction
        ARM
??OnBackGui??rA:
        LDR      R12,??Subroutine18_0  ;; ??OnBackGui
        BX       R12
        DATA
??Subroutine18_0:
        DC32     ??OnBackGui
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon1
        CFI NoFunction
        ARM
??readConfig??rA:
        LDR      R12,??Subroutine19_0  ;; ??readConfig
        BX       R12
        DATA
??Subroutine19_0:
        DC32     ??readConfig
        CFI EndBlock cfiBlock28

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI NoFunction
        ARM
??InitializeEvents??rA:
        LDR      R12,??Subroutine20_0  ;; ??InitializeEvents
        BX       R12
        DATA
??Subroutine20_0:
        DC32     ??InitializeEvents
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine21_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine21_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock30

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for ECBook>`:
        DATA
        DC32 0H
`?<Initializer for base_page>`:
        DC32 `?<Constant "EventControl_BasePage">`, 0H, EC_BasePageEvents

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "EventControl_BasePage">`:
        DATA
        DC8 "EventControl_BasePage"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x73\\x74\\x6f\\x70\\x2e\\x6d\\x70\\x33"`:
        DATA
        DC8 73H, 0, 74H, 0, 6FH, 0, 70H, 0
        DC8 2EH, 0, 6DH, 0, 70H, 0, 33H, 0
        DC8 0, 0
        DC8 0, 0
        DC8 45H, 0, 76H, 0, 65H, 0, 6EH, 0
        DC8 74H, 0, 43H, 0, 6FH, 0, 6EH, 0
        DC8 74H, 0, 72H, 0, 6FH, 0, 6CH, 0
        DC8 20H, 0, 76H, 0, 32H, 0, 2EH, 0
        DC8 30H, 0, 0DH, 0, 0AH, 0, 0DH, 0
        DC8 0AH, 0, 0A9H, 0, 20H, 0, 55H, 0
        DC8 6CH, 0, 74H, 0, 72H, 0, 61H, 0
        DC8 53H, 0, 68H, 0, 6FH, 0, 74H, 0
        DC8 2CH, 0, 20H, 0, 53H, 0, 6CH, 0
        DC8 61H, 0, 76H, 0, 65H, 0, 6EH, 0
        DC8 74H, 0, 69H, 0, 6EH, 0, 6FH, 0
        DC8 0AH, 0, 0DH, 0, 0AH, 0, 25H, 0
        DC8 73H, 0, 0AH, 0, 0DH, 0, 0AH, 0
        DC8 49H, 0, 6EH, 0, 20H, 0, 61H, 0
        DC8 20H, 0, 6DH, 0, 65H, 0, 6DH, 0
        DC8 6FH, 0, 72H, 0, 79H, 0, 20H, 0
        DC8 6FH, 0, 66H, 0, 20H, 0, 50H, 0
        DC8 53H, 0, 49H, 0, 58H, 0, 0AH, 0
        DC8 0, 0
        DC8 0, 0
        DC8 "public version"
        DC8 0
        DC8 25H, 0, 6CH, 0, 73H, 0, 20H, 0
        DC8 0AH, 0, 43H, 0, 75H, 0, 72H, 0
        DC8 72H, 0, 65H, 0, 6EH, 0, 74H, 0
        DC8 20H, 0, 4CH, 0, 41H, 0, 43H, 0
        DC8 2DH, 0, 43H, 0, 49H, 0, 44H, 0
        DC8 3AH, 0, 20H, 0, 25H, 0, 30H, 0
        DC8 34H, 0, 58H, 0, 2DH, 0, 25H, 0
        DC8 30H, 0, 34H, 0, 58H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x43\\x41\\x4c\\x45\\x5f\\x52\\x4e\\x5f\\`:
        DATA
        DC8 43H, 0, 41H, 0, 4CH, 0, 45H, 0
        DC8 5FH, 0, 52H, 0, 4EH, 0, 5FH, 0
        DC8 54H, 0, 41H, 0, 53H, 0, 4BH, 0
        DC8 5FH, 0, 53H, 0, 54H, 0, 41H, 0
        DC8 54H, 0, 55H, 0, 53H, 0, 5FH, 0
        DC8 49H, 0, 43H, 0, 4EH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "EventControl">`:
        DATA
        DC8 "EventControl"
        DC8 0, 0, 0

        END
// 
// 1 116 bytes in segment CODE
//   336 bytes in segment DATA_C
//    16 bytes in segment DATA_I
//    16 bytes in segment DATA_ID
//    24 bytes in segment DYN_PAGE
//    12 bytes in segment INITTAB
// 
// 924 bytes of CODE  memory (+ 204 bytes shared)
// 376 bytes of CONST memory
//  16 bytes of DATA  memory
//
//Errors: none
//Warnings: none
