##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:53:58 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\EventControl\s #
#                       ort.cpp                                              #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\EventControl\s #
#                       ort.cpp -D NDEBUG -D OLDFUNCTIONS -lC                #
#                       Z:\home\perk11\www\perk11.info\svn\SE\EventControl\R #
#                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn\ #
#                       SE\EventControl\Release\List\ -o                     #
#                       Z:\home\perk11\www\perk11.info\svn\SE\EventControl\R #
#                       elease\Obj\ -s9 --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --enable_multibytes --fpu None --eec++               #
#                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8 #
#                       n.h -I Z:\home\perk11\IAR2\arm\INC\                  #
#                       --inline_threshold=2                                 #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\EventControl\R #
#                       elease\List\sort.lst                                 #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\EventControl\R #
#                       elease\Obj\sort.r79                                  #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\EventControl\sort.cpp
      1          /*
      2          *===========================================================================
      3          *                 Модуль сортировки списка событий
      4          *===========================================================================
      5          */
      6          #include "..\deleaker\mem2.h"
      7          #include "..\include\Lib_Clara.h" 
      8          #include "..\include\Dir.h"
      9          #include "header\structs.h"
     10          
     11          /*
     12          *===========================================================================
     13          *         Функция сравнения двух временных структур.
     14          *===========================================================================
     15          * 1) Если первая идёт раньше второй, то возвращается 1.
     16          * 2) Если вторая идёт раньше второй, то возвращается -1.
     17          * 3) Если структуры одинаковы, то возвращается 0.
     18          */

   \                                 In segment CODE, align 4, keep-with-next
     19          int time_cmp(TIME t1, TIME t2)
     20          {
   \                     ??time_cmp:
   \   00000000   03002DE9           PUSH     {R0,R1}
     21            int n1=(t1.hour*3600) + (t1.min*60) + t1.sec;
   \   00000004   0120DDE5           LDRB     R2,[SP, #+1]
   \   00000008   0000DDE5           LDRB     R0,[SP, #+0]
   \   0000000C   3C30A0E3           MOV      R3,#+60
   \   00000010   E11EA0E3           MOV      R1,#+3600
   \   00000014   930202E0           MUL      R2,R3,R2
     22            int n2=(t2.hour*3600) + (t2.min*60) + t2.sec;
   \   00000018   0530DDE5           LDRB     R3,[SP, #+5]
   \   0000001C   912020E0           MLA      R0,R1,R0,R2
   \   00000020   0210DDE5           LDRB     R1,[SP, #+2]
   \   00000024   E12EA0E3           MOV      R2,#+3600
   \   00000028   3CC0A0E3           MOV      R12,#+60
   \   0000002C   000081E0           ADD      R0,R1,R0
   \   00000030   0410DDE5           LDRB     R1,[SP, #+4]
   \   00000034   9C0303E0           MUL      R3,R12,R3
   \   00000038   923121E0           MLA      R1,R2,R1,R3
   \   0000003C   0620DDE5           LDRB     R2,[SP, #+6]
   \   00000040   011082E0           ADD      R1,R2,R1
     23            if (n1<n2)return 1;
   \   00000044   010050E1           CMP      R0,R1
   \   00000048   0100A0B3           MOVLT    R0,#+1
   \   0000004C   010000BA           BLT      ??time_cmp_1
     24            if (n1==n2)return 0;
   \   00000050   0000A003           MOVEQ    R0,#+0
     25            if (n1>n2)return -1;
   \   00000054   0000E013           MVNNE    R0,#+0
   \                     ??time_cmp_1:
   \   00000058   0600BDE8           POP      {R1,R2}
   \   0000005C   1EFF2FE1           BX       LR               ;; return
     26            return 0;
     27          };
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          int ev_cmp(EVENT *ev1, EVENT *ev2)
     30          {
   \                     ??ev_cmp:
   \   00000000   10402DE9           PUSH     {R4,LR}
     31            return time_cmp(ev1->time, ev2->time);
   \   00000004   903081E2           ADD      R3,R1,#+144
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   ........           _BLF     ??ldr32b_a,??rA??ldr32b_a
   \   00000010   0010A0E1           MOV      R1,R0
   \   00000014   903084E2           ADD      R3,R4,#+144
   \   00000018   ........           _BLF     ??ldr32b_a,??rA??ldr32b_a
   \   0000001C   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000020   ........           B        ??time_cmp       ;; tailcall
     32          };
     33          
     34          /*
     35          *===========================================================================
     36          *                Функция сортировки листа
     37          *===========================================================================
     38          */

   \                                 In segment CODE, align 4, keep-with-next
     39          void sort_array(void *arr[], int n)
     40          {
   \                     ??sort_array:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     41            int i;
     42            int j;
     43            void * tmp;
     44            
     45            for(i = 0; i <= n-1; i++)
   \   0000000C   0060A0E3           MOV      R6,#+0
   \   00000010   017055E2           SUBS     R7,R5,#+1
   \   00000014   F087BD48           POPMI    {R4-R10,PC}
     46            {
     47              for(j = 0; j <= n-2-i; j++)
   \                     ??sort_array_1:
   \   00000018   0080A0E3           MOV      R8,#+0
   \   0000001C   020045E2           SUB      R0,R5,#+2
   \   00000020   069050E0           SUBS     R9,R0,R6
   \   00000024   1100004A           BMI      ??sort_array_2
     48              {
     49                if (ev_cmp((EVENT*)arr[j],(EVENT*)arr[j+1])==-1)
   \                     ??sort_array_3:
   \   00000028   08A184E0           ADD      R10,R4,R8, LSL #+2
   \   0000002C   04009AE5           LDR      R0,[R10, #+4]
   \   00000030   903080E2           ADD      R3,R0,#+144
   \   00000034   ........           _BLF     ??ldr32b_a,??rA??ldr32b_a
   \   00000038   0010A0E1           MOV      R1,R0
   \   0000003C   080194E7           LDR      R0,[R4, +R8, LSL #+2]
   \   00000040   903080E2           ADD      R3,R0,#+144
   \   00000044   ........           _BLF     ??ldr32b_a,??rA??ldr32b_a
   \   00000048   ........           BL       ??time_cmp
   \   0000004C   010070E3           CMN      R0,#+1
   \   00000050   0300001A           BNE      ??sort_array_4
     50                {
     51                  tmp = arr[j];
   \   00000054   080194E7           LDR      R0,[R4, +R8, LSL #+2]
     52                  arr[j] = arr[j+1];
   \   00000058   04109AE5           LDR      R1,[R10, #+4]
   \   0000005C   081184E7           STR      R1,[R4, +R8, LSL #+2]
     53                  arr[j+1] = tmp;
   \   00000060   04008AE5           STR      R0,[R10, #+4]
     54                }
     55              }
   \                     ??sort_array_4:
   \   00000064   018088E2           ADD      R8,R8,#+1
   \   00000068   080059E1           CMP      R9,R8
   \   0000006C   EDFFFFAA           BGE      ??sort_array_3
     56            }
   \                     ??sort_array_2:
   \   00000070   016086E2           ADD      R6,R6,#+1
   \   00000074   060057E1           CMP      R7,R6
   \   00000078   E6FFFFAA           BGE      ??sort_array_1
     57          };
   \   0000007C   F087BDE8           POP      {R4-R10,PC}      ;; return
     58          

   \                                 In segment CODE, align 4, keep-with-next
     59          void SortList(LIST *lst)
     60          {
     61            sort_array(lst->listdata, lst->FirstFree);
   \                     ??SortList:
   \   00000000   B210D0E1           LDRH     R1,[R0, #+2]
   \   00000004   040090E5           LDR      R0,[R0, #+4]
   \   00000008   ........           B        ??sort_array     ;; tailcall
     62          };

   Maximum stack usage in bytes:

     Function                 CSTACK
     --------                 ------
     SortList(LIST *)             4
     ev_cmp(EVENT *, EVENT *)     8
     sort_array(void **, int)    32
     time_cmp(TIME, TIME)         8


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     time_cmp(TIME, TIME)       96
     ev_cmp(EVENT *, EVENT *)   36
     sort_array(void **, int)  128
     SortList(LIST *)           12
      Others                    28

 
 300 bytes in segment CODE
 
 272 bytes of CODE memory (+ 28 bytes shared)

Errors: none
Warnings: none
