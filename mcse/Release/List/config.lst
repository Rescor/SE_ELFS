##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:46:36 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\config.cp #
#                       p                                                    #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\config.cp #
#                       p -D NDEBUG -D USEZLIB -D OLDFUNCTIONS -lCN          #
#                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\L #
#                       ist\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcse\ #
#                       Release\List\ -o Z:\home\perk11\www\perk11.info\svn\ #
#                       SE\mcse\Release\Obj\ -s9 --no_unroll                 #
#                       --no_code_motion --cpu_mode arm --endian little      #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --enable_multibytes --fpu None --eec++               #
#                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8 #
#                       n.h --preinclude Z:\home\perk11\www\perk11.info\svn\ #
#                       SE\mcse\..\deleaker\mem2.h -I                        #
#                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2    #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\L #
#                       ist\config.lst                                       #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\O #
#                       bj\config.r79                                        #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\mcse\config.cpp
      1          #include "inc\mc.h"
      2          #include "inc\config.h"
      3          
      4          

   \                                 In segment DATA_C, align 4, align-sorted
      5          const wchar_t mccf_config[]=L"mcconfig.cfg";
   \                     mccf_config:
   \   00000000   6D0063006300       DC8 6DH, 0, 63H, 0, 63H, 0, 6FH, 0
   \              6F00        
   \   00000008   6E0066006900       DC8 6EH, 0, 66H, 0, 69H, 0, 67H, 0
   \              6700        
   \   00000010   2E0063006600       DC8 2EH, 0, 63H, 0, 66H, 0, 67H, 0
   \              6700        
   \   00000018   0000               DC8 0, 0
   \   0000001A   0000               DC8 0, 0

   \                                 In segment DATA_Z, align 4, align-sorted
      6          MC_CFG MCConfig;
   \                     MCConfig:
   \   00000000                      DS8 1052
      7          
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          wchar_t* GetCfgPath()
     10          {
     11            if (!CONFIG_MCCONFIG_PATH[0])
   \                     ??GetCfgPath:
   \   00000000   80009FE5           LDR      R0,??GetCfgPath_1  ;; CONFIG_MCCONFIG_PATH
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0200001A           BNE      ??GetCfgPath_2
     12              wstrcpy((wchar_t*)CONFIG_MCCONFIG_PATH, mcpath);
   \   00000014   70109FE5           LDR      R1,??GetCfgPath_1+0x4  ;; mcpath
   \   00000018   68009FE5           LDR      R0,??GetCfgPath_1  ;; CONFIG_MCCONFIG_PATH
   \   0000001C   520100EF           SWI      +338
     13            
     14            int pathLen = wstrlen(CONFIG_MCCONFIG_PATH);
   \                     ??GetCfgPath_2:
   \   00000020   60009FE5           LDR      R0,??GetCfgPath_1  ;; CONFIG_MCCONFIG_PATH
   \   00000024   570100EF           SWI      +343
     15            if (pathLen > 0)
   \   00000028   010050E3           CMP      R0,#+1
   \   0000002C   130000BA           BLT      ??GetCfgPath_3
     16            {
     17              if (((wchar_t*)CONFIG_MCCONFIG_PATH)[pathLen - 1] == '/')
   \   00000030   50109FE5           LDR      R1,??GetCfgPath_1  ;; CONFIG_MCCONFIG_PATH
   \   00000034   801081E0           ADD      R1,R1,R0, LSL #+1
   \   00000038   B21051E1           LDRH     R1,[R1, #-2]
   \   0000003C   2F0051E3           CMP      R1,#+47
   \   00000040   0300001A           BNE      ??GetCfgPath_4
     18                ((wchar_t*)CONFIG_MCCONFIG_PATH)[pathLen - 1] = 0;
   \   00000044   3C109FE5           LDR      R1,??GetCfgPath_1  ;; CONFIG_MCCONFIG_PATH
   \   00000048   800081E0           ADD      R0,R1,R0, LSL #+1
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   B21040E1           STRH     R1,[R0, #-2]
     19              snwprintf(pathbuf, MAXELEMS(pathbuf)-1,_ls_ls, CONFIG_MCCONFIG_PATH, mccf_config);
   \                     ??GetCfgPath_4:
   \   00000054   34009FE5           LDR      R0,??GetCfgPath_1+0x8  ;; mccf_config
   \   00000058   34409FE5           LDR      R4,??GetCfgPath_1+0xC  ;; pathbuf
   \   0000005C   24309FE5           LDR      R3,??GetCfgPath_1  ;; CONFIG_MCCONFIG_PATH
   \   00000060   30209FE5           LDR      R2,??GetCfgPath_1+0x10  ;; _ls_ls
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   FF10A0E3           MOV      R1,#+255
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   150100EF           SWI      +277
     20              return pathbuf;
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   04D08DE2           ADD      SP,SP,#+4
   \   0000007C   1080BDE8           POP      {R4,PC}
     21            }
     22            return NULL;
   \                     ??GetCfgPath_3:
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??GetCfgPath_1:
   \   00000088   ........           DC32     CONFIG_MCCONFIG_PATH
   \   0000008C   ........           DC32     mcpath
   \   00000090   ........           DC32     mccf_config
   \   00000094   ........           DC32     pathbuf
   \   00000098   ........           DC32     _ls_ls
     23          }
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          void InitCfg()
     26          {
     27            memset(&MCConfig, 0, sizeof(MCConfig));
   \                     ??InitCfg:
   \   00000000   ........           LDR      R0,??DataTable8  ;; MCConfig
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   1C20A0E3           MOV      R2,#+28
   \   0000000C   402E82E3           ORR      R2,R2,#0x400
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   120100EF           SWI      +274
     28            if (CONFIG_SAVE_PATH)
   \   00000018   A4009FE5           LDR      R0,??InitCfg_1   ;; CONFIG_SAVE_PATH
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   1080BD08           POPEQ    {R4,PC}
     29            {
     30              if (curtab >= MAX_TABS) 
   \   00000028   98009FE5           LDR      R0,??InitCfg_1+0x4  ;; curtab
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   020050E3           CMP      R0,#+2
   \   00000034   080000BA           BLT      ??InitCfg_2
     31                MCConfig.curtab = back_tab < MAX_TABS ? back_tab : 0;
   \   00000038   8C009FE5           LDR      R0,??InitCfg_1+0x8  ;; back_tab
   \   0000003C   ........           LDR      R1,??DataTable8  ;; MCConfig
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   020050E3           CMP      R0,#+2
   \   00000048   7C009FB5           LDRLT    R0,??InitCfg_1+0x8  ;; back_tab
   \   0000004C   000090B5           LDRLT    R0,[R0, #+0]
   \   00000050   0000A0A3           MOVGE    R0,#+0
   \   00000054   000081E5           STR      R0,[R1, #+0]
   \   00000058   030000EA           B        ??InitCfg_3
     32              else
     33                MCConfig.curtab = curtab;
   \                     ??InitCfg_2:
   \   0000005C   64109FE5           LDR      R1,??InitCfg_1+0x4  ;; curtab
   \   00000060   ........           LDR      R0,??DataTable8  ;; MCConfig
   \   00000064   001091E5           LDR      R1,[R1, #+0]
   \   00000068   001080E5           STR      R1,[R0, #+0]
     34              
     35              for(int ii=0; ii < MAX_TABS; ii++)
   \                     ??InitCfg_3:
   \   0000006C   0040A0E3           MOV      R4,#+0
   \                     ??InitCfg_4:
   \   00000070   58009FE5           LDR      R0,??InitCfg_1+0xC  ;; tabs
   \   00000074   ........           LDR      R2,??DataTable8  ;; MCConfig
   \   00000078   040190E7           LDR      R0,[R0, +R4, LSL #+2]
   \   0000007C   833FA0E3           MOV      R3,#+524
   \   00000080   F410D0E1           LDRSH    R1,[R0, #+4]
   \   00000084   932422E0           MLA      R2,R3,R4,R2
   \   00000088   F230D0E1           LDRSH    R3,[R0, #+2]
     36              {
     37                int dr = tabs[ii]->CurDrv;
     38                MCConfig.tabs[ii].sort = tabs[ii]->sort;
     39                MCConfig.tabs[ii].LastInd = tabs[ii]->iIndex[dr];
     40                MCConfig.tabs[ii].drv = tabs[ii]->CurDrv;
     41                wstrcpy(MCConfig.tabs[ii].LastPath, tabs[ii]->szDirs[dr]);
   \   0000008C   014084E2           ADD      R4,R4,#+1
   \   00000090   043082E5           STR      R3,[R2, #+4]
   \   00000094   813080E0           ADD      R3,R0,R1, LSL #+1
   \   00000098   F630D3E1           LDRSH    R3,[R3, #+6]
   \   0000009C   083082E5           STR      R3,[R2, #+8]
   \   000000A0   F430D0E1           LDRSH    R3,[R0, #+4]
   \   000000A4   810480E0           ADD      R0,R0,R1, LSL #+9
   \   000000A8   121080E2           ADD      R1,R0,#+18
   \   000000AC   0C3082E5           STR      R3,[R2, #+12]
   \   000000B0   100082E2           ADD      R0,R2,#+16
   \   000000B4   520100EF           SWI      +338
   \   000000B8   020054E3           CMP      R4,#+2
   \   000000BC   EBFFFFBA           BLT      ??InitCfg_4
     42              }
     43            }
     44          }
   \   000000C0   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??InitCfg_1:
   \   000000C4   ........           DC32     CONFIG_SAVE_PATH
   \   000000C8   ........           DC32     curtab
   \   000000CC   ........           DC32     back_tab
   \   000000D0   ........           DC32     tabs
     45          

   \                                 In segment CODE, align 4, keep-with-next
     46          void SaveCfg()
     47          {
   \                     ??SaveCfg:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
     48            int f;
     49            wchar_t* cfgPath = GetCfgPath();
   \   00000008   ........           BL       ??GetCfgPath
     50            if (cfgPath)
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   3F80BD08           POPEQ    {R0-R5,PC}
     51            {
     52              if ((f=w_fopen(cfgPath, WA_Read+WA_Write+WA_Create+WA_Truncate, 0x1FF, NULL))>=0)
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   FF20A0E3           MOV      R2,#+255
   \   0000001C   402F82E3           ORR      R2,R2,#0x100
   \   00000020   4B10A0E3           MOV      R1,#+75
   \   00000024   F80200EF           SWI      +760
   \   00000028   0040B0E1           MOVS     R4,R0
   \   0000002C   3F80BD48           POPMI    {R0-R5,PC}
     53              {
     54                MCCF_hdr hdr;
     55                hdr.sig=mccf_sig;
   \   00000030   ........           LDR      R1,??DataTable6  ;; `?<Constant "mccf">`
     56                hdr.ver=mccf_ver;
     57                hdr.size=mccf_size;
   \   00000034   1C50A0E3           MOV      R5,#+28
   \   00000038   001091E5           LDR      R1,[R1, #+0]
   \   0000003C   405E85E3           ORR      R5,R5,#0x400
   \   00000040   00108DE5           STR      R1,[SP, #+0]
   \   00000044   0210A0E3           MOV      R1,#+2
   \   00000048   04108DE5           STR      R1,[SP, #+4]
   \   0000004C   08508DE5           STR      R5,[SP, #+8]
     58                hdr.offset=mccf_offset;
   \   00000050   1010A0E3           MOV      R1,#+16
   \   00000054   0C108DE5           STR      R1,[SP, #+12]
     59                
     60                InitCfg();
   \   00000058   ........           BL       ??InitCfg
     61                w_fwrite(f,&hdr,sizeof(hdr));
   \   0000005C   1020A0E3           MOV      R2,#+16
   \   00000060   0D10A0E1           MOV      R1,SP
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   FA0200EF           SWI      +762
     62                w_fwrite(f,&MCConfig,sizeof(MCConfig));
   \   0000006C   ........           LDR      R1,??DataTable8  ;; MCConfig
   \   00000070   0520A0E1           MOV      R2,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   FA0200EF           SWI      +762
     63                w_fclose(f);
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   FD0200EF           SWI      +765
     64              }
     65            }
     66          }
   \   00000084   3F80BDE8           POP      {R0-R5,PC}       ;; return
     67          
     68          

   \                                 In segment CODE, align 4, keep-with-next
     69          int LoadCfg()
     70          {
   \                     ??LoadCfg:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
     71            int res = 0;
   \   00000008   0040A0E3           MOV      R4,#+0
     72            int f;
     73            wchar_t* cfgPath = GetCfgPath();
   \   0000000C   ........           BL       ??GetCfgPath
     74            if (cfgPath)
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   2500000A           BEQ      ??LoadCfg_1
     75            {
     76              if ((f=w_fopen(cfgPath, WA_Read, 0x1FF, NULL))>=0)
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   FF20A0E3           MOV      R2,#+255
   \   00000020   402F82E3           ORR      R2,R2,#0x100
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   F80200EF           SWI      +760
   \   0000002C   0050B0E1           MOVS     R5,R0
   \   00000030   1E00004A           BMI      ??LoadCfg_1
     77              {
     78                MCCF_hdr hdr;
     79                if (w_fread(f, &hdr, sizeof(hdr))==sizeof(hdr) &&
     80                    (hdr.sig==mccf_sig) && (hdr.size>=mccf_size))
   \   00000034   1020A0E3           MOV      R2,#+16
   \   00000038   0D10A0E1           MOV      R1,SP
   \   0000003C   FB0200EF           SWI      +763
   \   00000040   100050E3           CMP      R0,#+16
   \   00000044   1500001A           BNE      ??LoadCfg_2
   \   00000048   ........           LDR      R1,??DataTable6  ;; `?<Constant "mccf">`
   \   0000004C   00009DE5           LDR      R0,[SP, #+0]
   \   00000050   001091E5           LDR      R1,[R1, #+0]
   \   00000054   010050E1           CMP      R0,R1
   \   00000058   1000001A           BNE      ??LoadCfg_2
   \   0000005C   08009DE5           LDR      R0,[SP, #+8]
   \   00000060   1C10A0E3           MOV      R1,#+28
   \   00000064   401E81E3           ORR      R1,R1,#0x400
   \   00000068   010050E1           CMP      R0,R1
   \   0000006C   0B00003A           BCC      ??LoadCfg_2
     81                {
     82                  w_lseek(f,hdr.offset,WSEEK_SET);
   \   00000070   0C109DE5           LDR      R1,[SP, #+12]
   \   00000074   0220A0E3           MOV      R2,#+2
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   FC0200EF           SWI      +764
     83                  res = w_fread(f, &MCConfig, sizeof(MCConfig))==sizeof(MCConfig);
   \   00000080   ........           LDR      R1,??DataTable8  ;; MCConfig
   \   00000084   1C60A0E3           MOV      R6,#+28
   \   00000088   406E86E3           ORR      R6,R6,#0x400
   \   0000008C   0620A0E1           MOV      R2,R6
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   FB0200EF           SWI      +763
   \   00000098   060050E1           CMP      R0,R6
   \   0000009C   0140A003           MOVEQ    R4,#+1
     84                }
     85                w_fclose(f);
   \                     ??LoadCfg_2:
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   FD0200EF           SWI      +765
     86              }
     87            }
     88            if (!res)memset(&MCConfig, 0, sizeof(MCConfig));
   \   000000A8   000054E3           CMP      R4,#+0
   \   000000AC   0400001A           BNE      ??LoadCfg_3
   \                     ??LoadCfg_1:
   \   000000B0   ........           LDR      R0,??DataTable8  ;; MCConfig
   \   000000B4   1C20A0E3           MOV      R2,#+28
   \   000000B8   402E82E3           ORR      R2,R2,#0x400
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   120100EF           SWI      +274
     89            return res;
   \                     ??LoadCfg_3:
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   10D08DE2           ADD      SP,SP,#+16
   \   000000CC   7080BDE8           POP      {R4-R6,PC}       ;; return
     90          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     `?<Constant "mccf">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     MCConfig

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "mccf">`:
   \   00000000   6D63636600         DC8 "mccf"
   \   00000005   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function     CSTACK
     --------     ------
     GetCfgPath()    12
     InitCfg()        8
     LoadCfg()       32
     SaveCfg()       28


   Segment part sizes:

     Function/Label     Bytes
     --------------     -----
     mccf_config          28
     MCConfig           1052
     GetCfgPath()        156
     InitCfg()           212
     SaveCfg()           136
     LoadCfg()           208
     ??DataTable6          4
     ??DataTable8          4
     ?<Constant "mccf">    8
      Others              28

 
   736 bytes in segment CODE
    36 bytes in segment DATA_C
 1 052 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
   720 bytes of CODE  memory (+ 28 bytes shared)
    36 bytes of CONST memory
 1 052 bytes of DATA  memory

Errors: none
Warnings: none
