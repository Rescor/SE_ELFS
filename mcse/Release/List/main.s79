//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:47:42 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\main.cpp /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\main.cpp /
//                        -D NDEBUG -D USEZLIB -D OLDFUNCTIONS -lCN          /
//                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcs /
//                       e\Release\List\ -o Z:\home\perk11\www\perk11.info\s /
//                       vn\SE\mcse\Release\Obj\ -s9 --no_unroll             /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h --preinclude Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\mcse\..\deleaker\mem2.h -I                     /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\main.s79                                       /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)
        RSEG DYN_CONST:DATA:REORDER:NOROOT(0)
        RSEG DYN_CONST_DESC:DATA:REORDER:NOROOT(0)
        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
        FUNCTION ??CBBack,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION ??CBStop,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC ??CheckConst
        FUNCTION ??CheckConst,0203H
        MULTWEAK ??CheckConst??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable11 EQU 0
??DataTable12 EQU 0
??DataTable13 EQU 0
??DataTable14 EQU 0
??DataTable15 EQU 0
??DataTable16 EQU 0
??DataTable17 EQU 0
??DataTable18 EQU 0
??DataTable19 EQU 0
??DataTable2 EQU 0
??DataTable20 EQU 0
??DataTable21 EQU 0
??DataTable22 EQU 0
??DataTable26 EQU 0
??DataTable27 EQU 0
??DataTable28 EQU 0
??DataTable29 EQU 0
??DataTable3 EQU 0
??DataTable30 EQU 0
??DataTable31 EQU 0
??DataTable32 EQU 0
??DataTable33 EQU 0
??DataTable34 EQU 0
??DataTable36 EQU 0
??DataTable37 EQU 0
??DataTable4 EQU 0
??DataTable43 EQU 0
??DataTable44 EQU 0
??DataTable45 EQU 0
??DataTable46 EQU 0
??DataTable49 EQU 0
??DataTable5 EQU 0
??DataTable51 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??DelFiles??rA
        MULTWEAK ??DestroyPathBuf??rA
        MULTWEAK ??DestroySendList??rA
        MULTWEAK ??DisableScroll??rA
        MULTWEAK ??DoBackK??rA
        MULTWEAK ??DoKey??rA
        MULTWEAK ??DoMenu??rA
        MULTWEAK ??DoOpen??rA
        PUBLIC ??FreeData
        FUNCTION ??FreeData,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??FreeData??rT
        PUBLIC ??FreeDrvInfo
        FUNCTION ??FreeDrvInfo,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??FreeDrvInfo??rT
        MULTWEAK ??FreeMUI??rA
        MULTWEAK ??FreeTab??rA
        MULTWEAK ??GetCurTabFileIndex??rA
        MULTWEAK ??GetFileDir??rA
        MULTWEAK ??GetFileName??rA
        MULTWEAK ??GetKeyprocLongByKey??rA
        MULTWEAK ??InitCS??rA
        MULTWEAK ??InitConfig??rA
        PUBLIC ??InitDrvInfo
        FUNCTION ??InitDrvInfo,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??InitDrvInfo??rT
        MULTWEAK ??InitScr??rA
        MULTWEAK ??InitTab??rA
        MULTWEAK ??IsIt7ZipFile??rA
        MULTWEAK ??IsItZipFile??rA
        MULTWEAK ??LoadCfg??rA
        MULTWEAK ??LoadKeys??rA
        MULTWEAK ??LoadMUI??rA
        PUBLIC ??MainGuiOnClose
        FUNCTION ??MainGuiOnClose,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??MainGuiOnClose??rT
        PUBLIC ??MainGuiOnCreate
        FUNCTION ??MainGuiOnCreate,0603H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??MainGuiOnCreate??rT
        PUBLIC ??MainGuiOnKey
        FUNCTION ??MainGuiOnKey,0603H
        LOCFRAME CSTACK, 52, STACK
        MULTWEAK ??MainGuiOnKey??rT
        PUBLIC ??MainGuiOnRedraw
        FUNCTION ??MainGuiOnRedraw,0603H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??MainGuiOnRedraw??rT
        PUBLIC ??MainGuiOnRefresh
        FUNCTION ??MainGuiOnRefresh,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??MainGuiOnRefresh??rT
        PUBLIC ??MainGui_constr
        FUNCTION ??MainGui_constr,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??MainGui_constr??rT
        PUBLIC ??MainGui_destr
        FUNCTION ??MainGui_destr,0603H
        MULTWEAK ??MainGui_destr??rT
        FUNCTION ??MainPageOnEnter,0603H
        LOCFRAME CSTACK, 24, STACK
        FUNCTION ??MainPageOnExit,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC ??MsgBoxError
        FUNCTION ??MsgBoxError,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??MsgBoxError??rT
        MULTWEAK ??MsgBoxError??rT_1
        MULTWEAK ??MsgBoxError??rT_2
        MULTWEAK ??MsgBoxError??rT_3
        MULTWEAK ??MsgBoxError??rT_4
        PUBLIC ??MsgBoxError_1
        FUNCTION ??MsgBoxError_1,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC ??MsgBoxError_2
        FUNCTION ??MsgBoxError_2,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC ??MsgBoxError_3
        FUNCTION ??MsgBoxError_3,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC ??MsgBoxError_4
        FUNCTION ??MsgBoxError_4,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC ??MsgBoxYesNo
        FUNCTION ??MsgBoxYesNo,0203H
        LOCFRAME CSTACK, 44, STACK
        MULTWEAK ??MsgBoxYesNo??rT
        FUNCTION ??ReconfigElf,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC ??SK_DoBackK
        FUNCTION ??SK_DoBackK,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??SK_DoBackK??rT
        PUBLIC ??SK_DoMenu
        FUNCTION ??SK_DoMenu,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??SK_DoMenu??rT
        PUBLIC ??SK_DoOpen
        FUNCTION ??SK_DoOpen,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??SK_DoOpen??rT
        MULTWEAK ??SaveCS??rA
        MULTWEAK ??SaveCfg??rA
        MULTWEAK ??SaveMUI??rA
        MULTWEAK ??SetCurTabIndex??rA
        MULTWEAK ??SetTabIndex??rA
        MULTWEAK ??ShowFiles??rA
        PUBLIC ??TerminateElf
        FUNCTION ??TerminateElf,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??TerminateElf??rT
        MULTWEAK ??UpdateAll??rA
        FUNCTION ??YSNo,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION ??YSYes,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??ZeroArchiveBuffer??rA
        MULTWEAK ??cd??rA
        PUBLIC ??elf_exit
        FUNCTION ??elf_exit,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??elf_exit??rT
        MULTWEAK ??fn_free??rA
        MULTWEAK ??fn_zero??rA
        PUBLIC ??isMcBook
        FUNCTION ??isMcBook,0203H
        MULTWEAK ??isMcBook??rT
        MULTWEAK ??isdir??rA
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??muitxt??rA
        FUNCTION ??onMyBookClose,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        MULTWEAK ??win12512unicode??rA
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Busy
        PUBLIC MCBook
        PUBLIC RedrawGUI
        PUBLIC SA_ICONS
        PUBLIC STD_ICONS
        PUBLIC Terminate
        PUBLIC is_db2010
        PUBLIC lastIsLongPress
        PUBLIC lastKey
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 28, STACK
        PUBLIC main_obj
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        








































kill_data           SYMBOL "kill_data"

??CheckConst??rT    SYMBOL "??rT", ??CheckConst
??DelFiles??rA      SYMBOL "??rA", ??DelFiles
??DestroyPathBuf??rA SYMBOL "??rA", ??DestroyPathBuf
??DestroySendList??rA SYMBOL "??rA", ??DestroySendList
??DisableScroll??rA SYMBOL "??rA", ??DisableScroll
??DoBackK??rA       SYMBOL "??rA", ??DoBackK
??DoKey??rA         SYMBOL "??rA", ??DoKey
??DoMenu??rA        SYMBOL "??rA", ??DoMenu
??DoOpen??rA        SYMBOL "??rA", ??DoOpen

??FreeData??rT      SYMBOL "??rT", ??FreeData

??FreeDrvInfo??rT   SYMBOL "??rT", ??FreeDrvInfo
??FreeMUI??rA       SYMBOL "??rA", ??FreeMUI
??FreeTab??rA       SYMBOL "??rA", ??FreeTab
??GetCurTabFileIndex??rA SYMBOL "??rA", ??GetCurTabFileIndex
??GetFileDir??rA    SYMBOL "??rA", ??GetFileDir
??GetFileName??rA   SYMBOL "??rA", ??GetFileName
??GetKeyprocLongByKey??rA SYMBOL "??rA", ??GetKeyprocLongByKey
??InitCS??rA        SYMBOL "??rA", ??InitCS
??InitConfig??rA    SYMBOL "??rA", ??InitConfig

??InitDrvInfo??rT   SYMBOL "??rT", ??InitDrvInfo
??InitScr??rA       SYMBOL "??rA", ??InitScr
??InitTab??rA       SYMBOL "??rA", ??InitTab
??IsIt7ZipFile??rA  SYMBOL "??rA", ??IsIt7ZipFile
??IsItZipFile??rA   SYMBOL "??rA", ??IsItZipFile
??LoadCfg??rA       SYMBOL "??rA", ??LoadCfg
??LoadKeys??rA      SYMBOL "??rA", ??LoadKeys
??LoadMUI??rA       SYMBOL "??rA", ??LoadMUI

??MainGuiOnClose??rT SYMBOL "??rT", ??MainGuiOnClose

??MainGuiOnCreate??rT SYMBOL "??rT", ??MainGuiOnCreate

??MainGuiOnKey??rT  SYMBOL "??rT", ??MainGuiOnKey

??MainGuiOnRedraw??rT SYMBOL "??rT", ??MainGuiOnRedraw

??MainGuiOnRefresh??rT SYMBOL "??rT", ??MainGuiOnRefresh

??MainGui_constr??rT SYMBOL "??rT", ??MainGui_constr

??MainGui_destr??rT SYMBOL "??rT", ??MainGui_destr

??MsgBoxError??rT   SYMBOL "??rT", ??MsgBoxError

??MsgBoxError??rT_1 SYMBOL "??rT", ??MsgBoxError_1

??MsgBoxError??rT_2 SYMBOL "??rT", ??MsgBoxError_2

??MsgBoxError??rT_3 SYMBOL "??rT", ??MsgBoxError_3

??MsgBoxError??rT_4 SYMBOL "??rT", ??MsgBoxError_4

??MsgBoxYesNo??rT   SYMBOL "??rT", ??MsgBoxYesNo

??SK_DoBackK??rT    SYMBOL "??rT", ??SK_DoBackK

??SK_DoMenu??rT     SYMBOL "??rT", ??SK_DoMenu

??SK_DoOpen??rT     SYMBOL "??rT", ??SK_DoOpen
??SaveCS??rA        SYMBOL "??rA", ??SaveCS
??SaveCfg??rA       SYMBOL "??rA", ??SaveCfg
??SaveMUI??rA       SYMBOL "??rA", ??SaveMUI
??SetCurTabIndex??rA SYMBOL "??rA", ??SetCurTabIndex
??SetTabIndex??rA   SYMBOL "??rA", ??SetTabIndex
??ShowFiles??rA     SYMBOL "??rA", ??ShowFiles

??TerminateElf??rT  SYMBOL "??rT", ??TerminateElf
??UpdateAll??rA     SYMBOL "??rA", ??UpdateAll
??ZeroArchiveBuffer??rA SYMBOL "??rA", ??ZeroArchiveBuffer
??cd??rA            SYMBOL "??rA", ??cd

??elf_exit??rT      SYMBOL "??rT", ??elf_exit
??fn_free??rA       SYMBOL "??rA", ??fn_free
??fn_zero??rA       SYMBOL "??rA", ??fn_zero

??isMcBook??rT      SYMBOL "??rT", ??isMcBook
??isdir??rA         SYMBOL "??rA", ??isdir
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
??muitxt??rA        SYMBOL "??rA", ??muitxt
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`
??win12512unicode??rA SYMBOL "??rA", ??win12512unicode

        EXTERN ??DelFiles
        FUNCTION ??DelFiles,0202H
        EXTERN ??DestroyPathBuf
        FUNCTION ??DestroyPathBuf,0202H
        EXTERN ??DestroySendList
        FUNCTION ??DestroySendList,0202H
        EXTERN ??DisableScroll
        FUNCTION ??DisableScroll,0202H
        EXTERN ??DoBackK
        FUNCTION ??DoBackK,0202H
        EXTERN ??DoKey
        FUNCTION ??DoKey,0202H
        EXTERN ??DoMenu
        FUNCTION ??DoMenu,0202H
        EXTERN ??DoOpen
        FUNCTION ??DoOpen,0202H
        EXTERN ??FreeMUI
        FUNCTION ??FreeMUI,0202H
        EXTERN ??FreeTab
        FUNCTION ??FreeTab,0202H
        EXTERN ??GetCurTabFileIndex
        FUNCTION ??GetCurTabFileIndex,0202H
        EXTERN ??GetFileDir
        FUNCTION ??GetFileDir,0202H
        EXTERN ??GetFileName
        FUNCTION ??GetFileName,0202H
        EXTERN ??GetKeyprocLongByKey
        FUNCTION ??GetKeyprocLongByKey,0202H
        EXTERN ??InitCS
        FUNCTION ??InitCS,0202H
        EXTERN ??InitConfig
        FUNCTION ??InitConfig,0202H
        EXTERN ??InitScr
        FUNCTION ??InitScr,0202H
        EXTERN ??InitTab
        FUNCTION ??InitTab,0202H
        EXTERN ??IsIt7ZipFile
        FUNCTION ??IsIt7ZipFile,0202H
        EXTERN ??IsItZipFile
        FUNCTION ??IsItZipFile,0202H
        EXTERN ??LoadCfg
        FUNCTION ??LoadCfg,0202H
        EXTERN ??LoadKeys
        FUNCTION ??LoadKeys,0202H
        EXTERN ??LoadMUI
        FUNCTION ??LoadMUI,0202H
        EXTERN ??S_7ZOpen
        FUNCTION ??S_7ZOpen,0602H
        EXTERN ??S_ZipOpen
        FUNCTION ??S_ZipOpen,0602H
        EXTERN ??SaveCS
        FUNCTION ??SaveCS,0202H
        EXTERN ??SaveCfg
        FUNCTION ??SaveCfg,0202H
        EXTERN ??SaveMUI
        FUNCTION ??SaveMUI,0202H
        EXTERN ??SetCurTabIndex
        FUNCTION ??SetCurTabIndex,0202H
        EXTERN ??SetTabIndex
        FUNCTION ??SetTabIndex,0202H
        EXTERN ??ShowFiles
        FUNCTION ??ShowFiles,0202H
        EXTERN ??UpdateAll
        FUNCTION ??UpdateAll,0202H
        EXTERN ??ZeroArchiveBuffer
        FUNCTION ??ZeroArchiveBuffer,0202H
        EXTERN ??cd
        FUNCTION ??cd,0202H
        EXTERN ??fn_free
        FUNCTION ??fn_free,0202H
        EXTERN ??fn_zero
        FUNCTION ??fn_zero,0202H
        EXTERN ??isdir
        FUNCTION ??isdir,0202H
        EXTERN ??muitxt
        FUNCTION ??muitxt,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN ??win12512unicode
        FUNCTION ??win12512unicode,0202H
        EXTERN ACTION_BACK
        EXTERN ACTION_MORE
        EXTERN ACTION_OK
        EXTERN CONFIG_7Z_ENABLE
        EXTERN CONFIG_FONT_ATTR
        EXTERN CONFIG_LOAD_CS
        EXTERN CONFIG_LOAD_MUI
        EXTERN CONFIG_SAVE_PATH
        EXTERN CONFIG_ZIP_ENABLE
        EXTERN Drives
        EXTERN KBD_REPEAT
        EXTERN KBD_SHORT_PRESS
        EXTERN KBD_SHORT_RELEASE
        EXTERN KEY_LEFT_SOFT
        EXTERN KEY_RIGHT_SOFT
        EXTERN MCConfig
        EXTERN SHOW_ROOT_FOLDER
        EXTERN VAR_ARG_BOOK
        EXTERN VAR_ARG_CALL_BACK_PREV_ACT
        EXTERN VAR_ARG_YESNO_NO_ACTION
        EXTERN VAR_ARG_YESNO_QUESTION
        EXTERN VAR_ARG_YESNO_YES_ACTION
        EXTERN arcpathbuf
        EXTERN buffer
        EXTERN curtab
        EXTERN in_open_path
        EXTERN kill_data
        FUNCTION kill_data,0202H
        EXTERN mcpath
        EXTERN msgbuf
        EXTERN pathbuf
        EXTERN progr_start
        EXTERN progr_stop
        EXTERN successed_config_name
        EXTERN successed_config_path
        EXTERN tabs


        RSEG DATA_Z:DATA:SORT:NOROOT(2)
Terminate:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
RedrawGUI:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??elf_exit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??elf_exit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??elf_exit
        ARM
??elf_exit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +33028
        MOV      R1,R0
        LDR      R0,??elf_exit_1  ;; SFB(ELFBEGIN)
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??elf_exit_1:
        DC32     SFB(ELFBEGIN)
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??MsgBoxError??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??MsgBoxError

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??MsgBoxError
        ARM
??MsgBoxError:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R5,??DataTable6  ;; msgbuf
        MOV      R4,R1
        _BLF     ??muitxt,??muitxt??rA
        MOV      R2,R0
        MOV      R3,R4
        MOV      R1,#+256
        MOV      R0,R5
        SWI      +277
        MOV      R4,#+255
        ORR      R4,R4,#0xFF00
        MOV      R2,R4
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +349
        MOV      R1,R0
        LDR      R0,??DataTable35  ;; STD_ICONS + 12
        MOV      R3,#+1
        LDR      R0,[R0, #+0]
        MOV      R2,R4
        PUSH     {R0}
        CFI CFA R13+16
        MOV      R0,#+248
        ORR      R0,R0,#0x2A00
        PUSH     {R0}
        CFI CFA R13+20
        MVN      R0,#-1879048192
        SWI      +599
        POP      {R0,R1,R4,R5,PC}  ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??MsgBoxError??rT_1:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??MsgBoxError_1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??MsgBoxError_1
        ARM
??MsgBoxError_1:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R5,??DataTable6  ;; msgbuf
        MOV      R4,R1
        _BLF     ??muitxt,??muitxt??rA
        MOV      R2,R0
        MOV      R3,R4
        MOV      R1,#+256
        MOV      R0,R5
        SWI      +277
        MOV      R4,#+255
        ORR      R4,R4,#0xFF00
        MOV      R2,R4
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +349
        MOV      R1,R0
        LDR      R0,??DataTable35  ;; STD_ICONS + 12
        MOV      R3,#+1
        LDR      R0,[R0, #+0]
        MOV      R2,R4
        PUSH     {R0}
        CFI CFA R13+16
        MOV      R0,#+248
        ORR      R0,R0,#0x2A00
        PUSH     {R0}
        CFI CFA R13+20
        MVN      R0,#-1879048192
        SWI      +599
        POP      {R0,R1,R4,R5,PC}  ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??MsgBoxError??rT_2:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??MsgBoxError_2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??MsgBoxError_2
        ARM
??MsgBoxError_2:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R4,??DataTable6  ;; msgbuf
        MOV      R2,#+255
        MOV      R1,R0
        MOV      R0,R4
        _BLF     ??win12512unicode,??win12512unicode??rA
        MOV      R5,#+255
        ORR      R5,R5,#0xFF00
        MOV      R2,R5
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +349
        MOV      R1,R0
        LDR      R0,??DataTable35  ;; STD_ICONS + 12
        MOV      R3,#+1
        LDR      R0,[R0, #+0]
        MOV      R2,R5
        PUSH     {R0}
        CFI CFA R13+16
        MOV      R0,#+248
        ORR      R0,R0,#0x2A00
        PUSH     {R0}
        CFI CFA R13+20
        MVN      R0,#-1879048192
        SWI      +599
        POP      {R0,R1,R4,R5,PC}  ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??MsgBoxError??rT_3:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??MsgBoxError_3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??MsgBoxError_3
        ARM
??MsgBoxError_3:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R4,??DataTable6  ;; msgbuf
        MOV      R3,R1
        MOV      R2,R0
        MOV      R1,#+256
        MOV      R0,R4
        SWI      +277
        MOV      R5,#+255
        ORR      R5,R5,#0xFF00
        MOV      R2,R5
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +349
        LDR      R1,??DataTable35  ;; STD_ICONS + 12
        MOV      R3,#+1
        LDR      R1,[R1, #+0]
        MOV      R2,R5
        PUSH     {R1}
        CFI CFA R13+16
        MOV      R1,#+248
        ORR      R1,R1,#0x2A00
        PUSH     {R1}
        CFI CFA R13+20
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
        POP      {R0,R1,R4,R5,PC}  ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     msgbuf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??MsgBoxError??rT_4:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??MsgBoxError_4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??MsgBoxError_4
        ARM
??MsgBoxError_4:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R1,#+0
        MOV      R4,#+255
        ORR      R4,R4,#0xFF00
        MOV      R2,R4
        SWI      +349
        MOV      R1,R0
        LDR      R0,??DataTable35  ;; STD_ICONS + 12
        MOV      R3,#+1
        LDR      R0,[R0, #+0]
        MOV      R2,R4
        PUSH     {R0}
        CFI CFA R13+12
        MOV      R0,#+248
        ORR      R0,R0,#0x2A00
        PUSH     {R0}
        CFI CFA R13+16
        MVN      R0,#-1879048192
        SWI      +599
        POP      {R0,R1,R4,PC}    ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??YSYes??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??YSYes

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??YSYes
        ARM
??YSYes:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R1,[R4, #+48]
        MOV      R0,#+1
        BLX      R1
        LDR      R0,[R4, #+32]
        CMP      R0,#+0
        POPEQ    {R4,PC}
        SWI      +462
        STR      R0,[R4, #+32]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??YSNo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??YSNo

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??YSNo
        ARM
??YSNo:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R1,[R4, #+48]
        MOV      R0,#+0
        BLX      R1
        LDR      R0,[R4, #+32]
        CMP      R0,#+0
        POPEQ    {R4,PC}
        SWI      +462
        STR      R0,[R4, #+32]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??MsgBoxYesNo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??MsgBoxYesNo

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??MsgBoxYesNo
        ARM
??MsgBoxYesNo:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R4,??DataTable47  ;; STD_ICONS
        MOV      R2,#+255
        MOV      R5,R1
        ORR      R2,R2,#0xFF00
        MOV      R1,#+0
        SWI      +349
        LDR      R2,[R4, #+12]
        LDR      R1,??MsgBoxYesNo_1  ;; ??YSNo
        STR      R5,[R2, #+48]
        MOV      R3,#+0
        PUSH     {R3}
        CFI CFA R13+16
        MOV      R3,R1
        PUSH     {R3}
        CFI CFA R13+20
        LDR      R3,??DataTable39  ;; VAR_ARG_CALL_BACK_PREV_ACT
        PUSH     {R3}
        CFI CFA R13+24
        LDR      R3,??DataTable38  ;; VAR_ARG_YESNO_QUESTION
        PUSH     {R1}
        CFI CFA R13+28
        LDR      R1,??DataTable40  ;; VAR_ARG_YESNO_NO_ACTION
        PUSH     {R1}
        CFI CFA R13+32
        LDR      R1,??MsgBoxYesNo_1+0x4  ;; ??YSYes
        PUSH     {R1}
        CFI CFA R13+36
        LDR      R1,??DataTable41  ;; VAR_ARG_YESNO_YES_ACTION
        PUSH     {R1}
        CFI CFA R13+40
        LDR      R1,??DataTable42  ;; VAR_ARG_BOOK
        PUSH     {R0}
        CFI CFA R13+44
        MOV      R0,#+0
        SWI      +677
        LDR      R1,[R4, #+12]
        STR      R0,[R1, #+32]
        ADD      SP,SP,#+32
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??MsgBoxYesNo_1:
        DC32     ??YSNo
        DC32     ??YSYes
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??FreeData??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??FreeData

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??FreeData
        ARM
??FreeData:
        LDR      R0,??FreeData_1  ;; CONFIG_LOAD_CS
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??FreeData_2
        MOV      R0,#+0
        _BLF     ??SaveCS,??SaveCS??rA
??FreeData_2:
        LDR      R0,??DataTable25  ;; CONFIG_LOAD_MUI
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??FreeData_3
        MOV      R0,#+0
        _BLF     ??SaveMUI,??SaveMUI??rA
??FreeData_3:
        _BLF     ??SaveCfg,??SaveCfg??rA
        LDR      R0,??DataTable24  ;; buffer
        MOV      R4,#+0
        _BLF     ??fn_free,??fn_free??rA
        _BLF     ??FreeMUI,??FreeMUI??rA
??FreeData_4:
        MOV      R0,R4
        _BLF     ??DelFiles,??DelFiles??rA
        MOV      R0,R4
        _BLF     ??FreeTab,??FreeTab??rA
        ADD      R4,R4,#+1
        CMP      R4,#+3
        BLT      ??FreeData_4
        LDR      R4,??DataTable47  ;; STD_ICONS
        BL       ??FreeDrvInfo
        _BLF     ??DestroyPathBuf,??DestroyPathBuf??rA
        LDR      R0,[R4, #+12]
        LDR      R0,[R0, #+52]
        _BLF     ??DestroySendList,??DestroySendList??rA
        LDR      R0,[R4, #+12]
        LDR      R0,[R0, #+52]
        SWI      +362
        POP      {R4,PC}          ;; return
        DATA
??FreeData_1:
        DC32     CONFIG_LOAD_CS
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??InitDrvInfo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ??InitDrvInfo

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ??InitDrvInfo
        ARM
??InitDrvInfo:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R0,#+8
        SWI      +261
        MOV      R4,R0
        MOV      R0,#+9
        SWI      +261
        MOV      R1,R4
        SWI      +671
        CMP      R0,#+0
        MOVNE    R4,#+3
        MOVEQ    R4,#+2
        BL       ??FreeDrvInfo
        LDR      R0,??InitDrvInfo_1+0x4  ;; SHOW_ROOT_FOLDER
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??InitDrvInfo_2
        LDR      R5,??DataTable23  ;; Drives
        MOV      R0,#+24
        MLA      R5,R0,R4,R5
        MOV      R0,#+4
        SUB      R6,R5,#+52
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R6, #+28]
        ADR      R1,??InitDrvInfo_1  ;; 0x2F, 0x00, 0x00, 0x00
        SWI      +338
        LDR      R1,??InitDrvInfo_1+0x8  ;; `?<Constant L"\\x72\\x6f\\x6f\\x74">`
        SUB      R0,R5,#+20
        SWI      +338
        MOV      R0,#+1
        STR      R0,[R6, #+48]
        B        ??InitDrvInfo_3
??InitDrvInfo_2:
        LDR      R1,??DataTable23  ;; Drives
        MOV      R0,#+24
        MLA      R1,R0,R4,R1
        SUB      R0,R1,#+52
        MOV      R1,#+0
        STR      R1,[R0, #+48]
??InitDrvInfo_3:
        LDR      R5,??DataTable23  ;; Drives
        MOV      R0,#+9
        SWI      +261
        SWI      +343
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R7,R0
        MOV      R0,#+9
        SWI      +261
        MOV      R1,R0
        MOV      R0,R7
        SWI      +338
        MOV      R1,#+47
        MOV      R0,R7
        SWI      +430
        CMP      R0,#+0
        MOVNE    R1,#+0
        STRHNE   R1,[R0, #+0]
        LDR      R1,??InitDrvInfo_1+0xC  ;; `?<Constant L"\\x72\\x6f\\x6f\\x74">` + 12
        MOV      R0,#+24
        MLA      R5,R0,R4,R5
        SUB      R6,R5,#+52
        STR      R7,[R6, #+4]
        SUB      R0,R5,#+44
        SWI      +338
        MOV      R0,#+1
        STR      R0,[R6, #+24]
        CMP      R4,#+3
        BNE      ??InitDrvInfo_4
        LDR      R5,??DataTable23  ;; Drives
        MOV      R0,#+8
        SWI      +261
        SWI      +343
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R4,R0
        MOV      R0,#+8
        SWI      +261
        MOV      R1,R0
        MOV      R0,R4
        SWI      +338
        MOV      R1,#+47
        MOV      R0,R4
        SWI      +430
        CMP      R0,#+0
        MOVNE    R1,#+0
        STRHNE   R1,[R0, #+0]
        LDR      R1,??InitDrvInfo_1+0x10  ;; `?<Constant L"\\x72\\x6f\\x6f\\x74">` + 24
        STR      R4,[R5, #+0]
        ADD      R0,R5,#+4
        SWI      +338
        MOV      R0,#+1
        STR      R0,[R5, #+20]
        POP      {R4-R7,PC}
??InitDrvInfo_4:
        LDR      R1,??DataTable23  ;; Drives
        MOV      R0,#+24
        MLA      R1,R0,R4,R1
        MOV      R0,#+0
        STR      R0,[R1, #-52]
        POP      {R4-R7,PC}       ;; return
        DATA
??InitDrvInfo_1:
        DC8      0x2F, 0x00, 0x00, 0x00
        DC32     SHOW_ROOT_FOLDER
        DC32     `?<Constant L"\\x72\\x6f\\x6f\\x74">`
        DC32     `?<Constant L"\\x72\\x6f\\x6f\\x74">` + 12
        DC32     `?<Constant L"\\x72\\x6f\\x6f\\x74">` + 24
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??FreeDrvInfo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE ??FreeDrvInfo

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function ??FreeDrvInfo
        ARM
??FreeDrvInfo:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,#+0
??FreeDrvInfo_1:
        LDR      R1,??DataTable23  ;; Drives
        MOV      R0,#+24
        MLA      R5,R0,R4,R1
        ADD      R4,R4,#+1
        LDR      R0,[R5, #+0]
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R0,#+0
        STR      R0,[R5, #+0]
        STR      R0,[R5, #+20]
        CMP      R4,#+3
        BLT      ??FreeDrvInfo_1
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable23:
        DC32     Drives

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??MainGuiOnCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE ??MainGuiOnCreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function ??MainGuiOnCreate
        ARM
??MainGuiOnCreate:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        LDR      R0,??MainGuiOnCreate_1  ;; STD_ICONS + 16
        SUB      SP,SP,#+4
        CFI CFA R13+20
        STR      R4,[R0, #+0]
        MOV      R5,#+0
??MainGuiOnCreate_2:
        LDR      R0,??MainGuiOnCreate_1+0x4  ;; STD_ICONS
        MOV      R2,SP
        ADD      R0,R0,R5, LSL #+2
        LDR      R0,[R0, #+28]
        MVN      R1,#+0
        SWI      +646
        CMP      R0,#+0
        LDR      R0,??MainGuiOnCreate_1+0x4  ;; STD_ICONS
        LDRNE    R1,[SP, #+0]
        ADD      R0,R0,R5, LSL #+1
        MOVEQ    R1,#+255
        ORREQ    R1,R1,#0xFF00
        STRH     R1,[R0, #+0]
        ADD      R5,R5,#+1
        CMP      R5,#+6
        BLT      ??MainGuiOnCreate_2
        SWI      +590
        LDR      R1,??MainGuiOnCreate_1+0x8  ;; STD_ICONS + 24
        AND      R0,R0,#0xFE00
        CMP      R0,#+32768
        MOVEQ    R0,#+1
        MOVNE    R0,#+0
        STR      R0,[R1, #+0]
        BL       ??InitDrvInfo
        _BLF     ??LoadKeys,??LoadKeys??rA
        _BLF     ??LoadCfg,??LoadCfg??rA
        _BLF     ??ZeroArchiveBuffer,??ZeroArchiveBuffer??rA
        LDR      R0,??DataTable24  ;; buffer
        MOV      R5,#+0
        _BLF     ??fn_zero,??fn_zero??rA
??MainGuiOnCreate_3:
        MOV      R0,R5
        _BLF     ??InitTab,??InitTab??rA
        ADD      R5,R5,#+1
        CMP      R5,#+3
        BLT      ??MainGuiOnCreate_3
        LDR      R0,??MainGuiOnCreate_1+0xC  ;; CONFIG_SAVE_PATH
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??MainGuiOnCreate_4
        MOV      R5,#+0
??MainGuiOnCreate_5:
        LDR      R1,??MainGuiOnCreate_1+0x10  ;; MCConfig
        MOV      R0,#+524
        MLA      R1,R0,R5,R1
        LDR      R0,[R1, #+4]
        AND      R1,R0,#0xF
        CMP      R1,#+4
        MOVGE    R1,#+0
        AND      R0,R0,#0x100
        ORR      R0,R0,R1
        LDR      R1,??MainGuiOnCreate_1+0x14  ;; tabs
        LDR      R1,[R1, +R5, LSL #+2]
        STRH     R0,[R1, #+2]
        LDR      R1,??MainGuiOnCreate_1+0x10  ;; MCConfig
        MOV      R0,#+524
        MLA      R1,R0,R5,R1
        LDRH     R0,[R1, #+16]
        CMP      R0,#+0
        BEQ      ??MainGuiOnCreate_6
        LDR      R1,??MainGuiOnCreate_1+0x10  ;; MCConfig
        MOV      R0,#+524
        MLA      R6,R0,R5,R1
        MOV      R0,R5
        LDR      R2,[R6, #+12]
        ADD      R1,R6,#+16
        _BLF     ??cd,??cd??rA
        LDR      R1,[R6, #+8]
        MOV      R2,#+0
        MOV      R0,R5
        _BLF     ??SetTabIndex,??SetTabIndex??rA
??MainGuiOnCreate_6:
        ADD      R5,R5,#+1
        CMP      R5,#+2
        BLT      ??MainGuiOnCreate_5
        LDR      R1,??MainGuiOnCreate_1+0x10  ;; MCConfig
        LDR      R0,??MainGuiOnCreate_1+0x18  ;; curtab
        LDR      R1,[R1, #+0]
        STR      R1,[R0, #+0]
??MainGuiOnCreate_4:
        _BLF     ??InitScr,??InitScr??rA
        _BLF     ??InitCS,??InitCS??rA
        LDR      R0,??DataTable25  ;; CONFIG_LOAD_MUI
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??MainGuiOnCreate_7
        MOV      R0,#+0
        _BLF     ??LoadMUI,??LoadMUI??rA
??MainGuiOnCreate_7:
        SWI      +361
        LDR      R1,??MainGuiOnCreate_1+0x1C  ;; STD_ICONS + 12
        LDR      R1,[R1, #+0]
        STR      R0,[R1, #+52]
        MOV      R1,#+100
        MOV      R0,R4
        SWI      +733
        LDR      R0,??DataTable52  ;; in_open_path
        LDRH     R0,[R0, #+0]
        CMP      R0,#+47
        BNE      ??MainGuiOnCreate_8
        LDR      R0,??DataTable52  ;; in_open_path
        _BLF     ??isdir,??isdir??rA
        CMP      R0,#+0
        BEQ      ??MainGuiOnCreate_9
        LDR      R0,??MainGuiOnCreate_1+0x18  ;; curtab
        MOV      R1,#+0
        STR      R1,[R0, #+0]
        MVN      R2,R1
        LDR      R1,??DataTable52  ;; in_open_path
        MOV      R0,#+0
        _BLF     ??cd,??cd??rA
        MOV      R0,#+1
        POP      {R1,R4-R6,PC}
??MainGuiOnCreate_9:
        LDR      R0,??MainGuiOnCreate_1+0x20  ;; CONFIG_ZIP_ENABLE
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??MainGuiOnCreate_10
        LDR      R0,??DataTable52  ;; in_open_path
        _BLF     ??IsItZipFile,??IsItZipFile??rA
        CMP      R0,#+0
        BEQ      ??MainGuiOnCreate_10
        LDR      R4,??DataTable52  ;; in_open_path
        LDR      R1,??MainGuiOnCreate_1+0x24  ;; pathbuf
        MOV      R2,#+0
        MOV      R0,R4
        _BLF     ??GetFileDir,??GetFileDir??rA
        MOV      R1,R0
        LDR      R0,??MainGuiOnCreate_1+0x18  ;; curtab
        MOV      R2,#+0
        STR      R2,[R0, #+0]
        MVN      R2,R2
        MOV      R0,#+0
        _BLF     ??cd,??cd??rA
        MOV      R0,R4
        _BLF     ??GetFileName,??GetFileName??rA
        _BLF     ??GetCurTabFileIndex,??GetCurTabFileIndex??rA
        MOV      R1,#+0
        _BLF     ??SetCurTabIndex,??SetCurTabIndex??rA
        LDR      R0,??MainGuiOnCreate_1+0x28  ;; arcpathbuf
        MOV      R1,R4
        SWI      +338
        LDR      R0,??MainGuiOnCreate_1+0x2C  ;; ??S_ZipOpen
        B        ??MainGuiOnCreate_11
??MainGuiOnCreate_10:
        LDR      R0,??MainGuiOnCreate_1+0x30  ;; CONFIG_7Z_ENABLE
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??MainGuiOnCreate_8
        LDR      R0,??DataTable52  ;; in_open_path
        _BLF     ??IsIt7ZipFile,??IsIt7ZipFile??rA
        CMP      R0,#+0
        BEQ      ??MainGuiOnCreate_8
        LDR      R4,??DataTable52  ;; in_open_path
        LDR      R1,??MainGuiOnCreate_1+0x24  ;; pathbuf
        MOV      R2,#+0
        MOV      R0,R4
        _BLF     ??GetFileDir,??GetFileDir??rA
        LDR      R1,??MainGuiOnCreate_1+0x18  ;; curtab
        MOV      R2,#+0
        STR      R2,[R1, #+0]
        MVN      R2,R2
        MOV      R1,R0
        MOV      R0,#+0
        _BLF     ??cd,??cd??rA
        MOV      R0,R4
        _BLF     ??GetFileName,??GetFileName??rA
        _BLF     ??GetCurTabFileIndex,??GetCurTabFileIndex??rA
        MOV      R1,#+0
        _BLF     ??SetCurTabIndex,??SetCurTabIndex??rA
        LDR      R0,??MainGuiOnCreate_1+0x28  ;; arcpathbuf
        MOV      R1,R4
        SWI      +338
        LDR      R0,??MainGuiOnCreate_1+0x34  ;; ??S_7ZOpen
??MainGuiOnCreate_11:
        SWI      +264
??MainGuiOnCreate_8:
        MOV      R0,#+1
        POP      {R1,R4-R6,PC}    ;; return
        DATA
??MainGuiOnCreate_1:
        DC32     STD_ICONS + 16
        DC32     STD_ICONS
        DC32     STD_ICONS + 24
        DC32     CONFIG_SAVE_PATH
        DC32     MCConfig
        DC32     tabs
        DC32     curtab
        DC32     STD_ICONS + 12
        DC32     CONFIG_ZIP_ENABLE
        DC32     pathbuf
        DC32     arcpathbuf
        DC32     ??S_ZipOpen
        DC32     CONFIG_7Z_ENABLE
        DC32     ??S_7ZOpen
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable24:
        DC32     buffer

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable25:
        DC32     CONFIG_LOAD_MUI

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??MainGuiOnClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE ??MainGuiOnClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function ??MainGuiOnClose
        ARM
??MainGuiOnClose:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +734
        _BLF     ??DisableScroll,??DisableScroll??rA
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        B        ??FreeData       ;; tailcall
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??MainGuiOnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE ??MainGuiOnRedraw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function ??MainGuiOnRedraw
        ARM
??MainGuiOnRedraw:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R2
        SWI      +485
        MOV      R5,R0
        SWI      +488
        MOV      R6,R0
        MOV      R1,#+1
        MOV      R0,R5
        SWI      +489
        LDR      R0,??MainGuiOnRedraw_1  ;; CONFIG_FONT_ATTR
        LDR      R0,[R0, #+0]
        SWI      +497
        MOV      R7,R0
        MOV      R1,R4
        MOV      R0,R5
        _BLF     ??ShowFiles,??ShowFiles??rA
        MOV      R0,R7
        SWI      +497
        MOV      R1,R6
        MOV      R0,R5
        SWI      +489
        POP      {R4-R7,PC}       ;; return
        DATA
??MainGuiOnRedraw_1:
        DC32     CONFIG_FONT_ATTR
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??CBStop??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE ??CBStop

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function ??CBStop
        ARM
??CBStop:
        LDR      R0,??CBStop_1    ;; progr_stop
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R1,#+1
        STR      R1,[R0, #+0]
        LDR      R0,??DataTable35  ;; STD_ICONS + 12
        LDR      R0,[R0, #+0]
        LDR      R0,[R0, #+28]
        CMP      R0,#+0
        POPEQ    {R4,PC}
        LDR      R4,??DataTable47  ;; STD_ICONS
        LDR      R0,[R4, #+12]
        LDR      R0,[R0, #+28]
        SWI      +462
        LDR      R1,[R4, #+12]
        STR      R0,[R1, #+28]
        POP      {R4,PC}          ;; return
        DATA
??CBStop_1:
        DC32     progr_stop
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??CBBack??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE ??CBBack

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function ??CBBack
        ARM
??CBBack:
        LDR      R0,??DataTable35  ;; STD_ICONS + 12
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R0,[R0, #+0]
        LDR      R0,[R0, #+28]
        CMP      R0,#+0
        POPEQ    {R4,PC}
        LDR      R4,??DataTable47  ;; STD_ICONS
        LDR      R0,[R4, #+12]
        LDR      R0,[R0, #+28]
        SWI      +462
        LDR      R1,[R4, #+12]
        STR      R0,[R1, #+28]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable35:
        DC32     STD_ICONS + 12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??MainGuiOnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE ??MainGuiOnKey

        RSEG DATA_I:DATA:SORT:NOROOT(2)
STD_ICONS:
        DS8 12
        REQUIRE `?<Initializer for STD_ICONS>`
MCBook:
        DS8 4
        REQUIRE `?<Initializer for MCBook>`
main_obj:
        DS8 4
        REQUIRE `?<Initializer for main_obj>`
Busy:
        DS8 4
        REQUIRE `?<Initializer for Busy>`
is_db2010:
        DS8 4
        REQUIRE `?<Initializer for is_db2010>`
SA_ICONS:
        DS8 24
        REQUIRE `?<Initializer for SA_ICONS>`
lastKey:
        DS8 4
        REQUIRE `?<Initializer for lastKey>`
lastIsLongPress:
        DS8 4
        REQUIRE `?<Initializer for lastIsLongPress>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function ??MainGuiOnKey
        ARM
??MainGuiOnKey:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        LDR      R7,[SP, #+20]
        MOV      R6,R0
        LDR      R0,??MainGuiOnKey_1  ;; progr_start
        MOV      R4,R1
        LDR      R0,[R0, #+0]
        MOV      R5,#+0
        CMP      R0,#+0
        BEQ      ??MainGuiOnKey_2
        LDR      R0,??MainGuiOnKey_1+0x4  ;; KEY_LEFT_SOFT
        LDR      R0,[R0, #+0]
        CMP      R4,R0
        BEQ      ??MainGuiOnKey_3
        LDR      R0,??MainGuiOnKey_1+0x8  ;; KEY_RIGHT_SOFT
        LDR      R0,[R0, #+0]
        CMP      R4,R0
        BNE      ??MainGuiOnKey_4
??MainGuiOnKey_3:
        LDR      R6,??DataTable47  ;; STD_ICONS
        MOV      R0,#+69
        _BLF     ??muitxt,??muitxt??rA
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        MOV      R1,#+0
        SWI      +349
        LDR      R1,??MainGuiOnKey_1+0xC  ;; ??CBBack
        LDR      R3,??DataTable38  ;; VAR_ARG_YESNO_QUESTION
        MOV      R2,R5
        PUSH     {R2}
        CFI CFA R13+24
        MOV      R2,R1
        PUSH     {R2}
        CFI CFA R13+28
        LDR      R2,??DataTable39  ;; VAR_ARG_CALL_BACK_PREV_ACT
        PUSH     {R2}
        CFI CFA R13+32
        PUSH     {R1}
        CFI CFA R13+36
        LDR      R1,??DataTable40  ;; VAR_ARG_YESNO_NO_ACTION
        PUSH     {R1}
        CFI CFA R13+40
        LDR      R1,??MainGuiOnKey_1+0x10  ;; ??CBStop
        PUSH     {R1}
        CFI CFA R13+44
        LDR      R1,??DataTable41  ;; VAR_ARG_YESNO_YES_ACTION
        PUSH     {R1}
        CFI CFA R13+48
        LDR      R1,??DataTable42  ;; VAR_ARG_BOOK
        PUSH     {R0}
        CFI CFA R13+52
        LDR      R2,[R6, #+12]
        MOV      R0,R5
        SWI      +677
        LDR      R1,[R6, #+12]
        STR      R0,[R1, #+28]
        ADD      SP,SP,#+32
        CFI CFA R13+20
??MainGuiOnKey_4:
        LDR      R6,??DataTable47  ;; STD_ICONS
        STR      R4,[R6, #+52]
        STR      R5,[R6, #+56]
        POP      {R4-R7,PC}       ;; return
??MainGuiOnKey_2:
        LDR      R0,??MainGuiOnKey_1+0x14  ;; STD_ICONS + 20
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??MainGuiOnKey_4
        AND      R0,R4,#0xFF
        _BLF     ??GetKeyprocLongByKey,??GetKeyprocLongByKey??rA
        CMP      R0,#+0
        BNE      ??MainGuiOnKey_5
        LDR      R0,??MainGuiOnKey_1+0x18  ;; KBD_SHORT_PRESS
        LDR      R0,[R0, #+0]
        CMP      R7,R0
        BEQ      ??MainGuiOnKey_6
??MainGuiOnKey_7:
        LDR      R0,??MainGuiOnKey_1+0x1C  ;; KBD_REPEAT
        LDR      R0,[R0, #+0]
        CMP      R7,R0
        BNE      ??MainGuiOnKey_4
??MainGuiOnKey_6:
        MOV      R1,R4
        MOV      R0,R5
        _BLF     ??DoKey,??DoKey??rA
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +495
        B        ??MainGuiOnKey_4
??MainGuiOnKey_5:
        LDR      R0,??MainGuiOnKey_1+0x1C  ;; KBD_REPEAT
        LDR      R0,[R0, #+0]
        CMP      R7,R0
        LDR      R0,??MainGuiOnKey_1+0x20  ;; STD_ICONS + 52
        MOVEQ    R5,#+1
        LDR      R0,[R0, #+0]
        CMP      R0,R4
        BNE      ??MainGuiOnKey_8
        LDR      R0,??MainGuiOnKey_1+0x24  ;; STD_ICONS + 56
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??MainGuiOnKey_8
        LDR      R0,??MainGuiOnKey_1+0x28  ;; KBD_SHORT_RELEASE
        LDR      R0,[R0, #+0]
        CMP      R7,R0
        BEQ      ??MainGuiOnKey_4
??MainGuiOnKey_8:
        LDR      R0,??MainGuiOnKey_1+0x28  ;; KBD_SHORT_RELEASE
        LDR      R0,[R0, #+0]
        CMP      R7,R0
        BEQ      ??MainGuiOnKey_6
        B        ??MainGuiOnKey_7
        DATA
??MainGuiOnKey_1:
        DC32     progr_start
        DC32     KEY_LEFT_SOFT
        DC32     KEY_RIGHT_SOFT
        DC32     ??CBBack
        DC32     ??CBStop
        DC32     STD_ICONS + 20
        DC32     KBD_SHORT_PRESS
        DC32     KBD_REPEAT
        DC32     STD_ICONS + 52
        DC32     STD_ICONS + 56
        DC32     KBD_SHORT_RELEASE
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable38:
        DC32     VAR_ARG_YESNO_QUESTION

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable39:
        DC32     VAR_ARG_CALL_BACK_PREV_ACT

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable40:
        DC32     VAR_ARG_YESNO_NO_ACTION

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable41:
        DC32     VAR_ARG_YESNO_YES_ACTION

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable42:
        DC32     VAR_ARG_BOOK

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??MainGuiOnRefresh??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE ??MainGuiOnRefresh

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function ??MainGuiOnRefresh
        ARM
??MainGuiOnRefresh:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,??MainGuiOnRefresh_1  ;; RedrawGUI
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??MainGuiOnRefresh_2
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +495
        LDR      R0,??MainGuiOnRefresh_1  ;; RedrawGUI
        MOV      R1,#+0
        STR      R1,[R0, #+0]
??MainGuiOnRefresh_2:
        MOV      R1,#+150
        MOV      R0,R4
        SWI      +733
        POP      {R4,PC}          ;; return
        DATA
??MainGuiOnRefresh_1:
        DC32     RedrawGUI
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        THUMB
??MainGui_constr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock38
        REQUIRE ??MainGui_constr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI Function ??MainGui_constr
        ARM
??MainGui_constr:
        LDR      R1,??MainGui_constr_1  ;; MainGuiName
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        SWI      +544
        MOV      R1,#+364
        MOV      R0,R4
        SWI      +546
        LDR      R1,??MainGui_constr_1+0x4  ;; ??MainGuiOnCreate
        MOV      R0,R4
        SWI      +548
        LDR      R1,??MainGui_constr_1+0x8  ;; ??MainGuiOnClose
        MOV      R0,R4
        SWI      +550
        LDR      R1,??MainGui_constr_1+0xC  ;; ??MainGuiOnRedraw
        MOV      R0,R4
        SWI      +552
        LDR      R1,??MainGui_constr_1+0x10  ;; ??MainGuiOnKey
        MOV      R0,R4
        SWI      +554
        LDR      R1,??MainGui_constr_1+0x14  ;; ??MainGuiOnRefresh
        MOV      R0,R4
        SWI      +556
        POP      {R4,PC}          ;; return
        DATA
??MainGui_constr_1:
        DC32     MainGuiName
        DC32     ??MainGuiOnCreate
        DC32     ??MainGuiOnClose
        DC32     ??MainGuiOnRedraw
        DC32     ??MainGuiOnKey
        DC32     ??MainGuiOnRefresh
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        THUMB
??MainGui_destr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock40
        REQUIRE ??MainGui_destr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI Function ??MainGui_destr
        ARM
??MainGui_destr:
        BX       LR               ;; return
        CFI EndBlock cfiBlock41

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        THUMB
??SK_DoMenu??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock42
        REQUIRE ??SK_DoMenu

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI Function ??SK_DoMenu
        ARM
??SK_DoMenu:
        _BF      ??DoMenu,??DoMenu??rA  ;; tailcall
        CFI EndBlock cfiBlock43

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon0
        CFI NoFunction
        THUMB
??SK_DoOpen??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock44
        REQUIRE ??SK_DoOpen

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI Function ??SK_DoOpen
        ARM
??SK_DoOpen:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
        _BLF     ??DoOpen,??DoOpen??rA
        MOV      R0,R4
        SWI      +360
        MOV      R1,#+0
        SWI      +495
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock45

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock46 Using cfiCommon0
        CFI NoFunction
        THUMB
??SK_DoBackK??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock46
        REQUIRE ??SK_DoBackK

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock47 Using cfiCommon1
        CFI Function ??SK_DoBackK
        ARM
??SK_DoBackK:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
        _BLF     ??DoBackK,??DoBackK??rA
        MOV      R0,R4
        SWI      +360
        MOV      R1,#+0
        SWI      +495
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock48 Using cfiCommon0
        CFI NoFunction
        THUMB
??MainPageOnEnter??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock48
        REQUIRE ??MainPageOnEnter

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock49 Using cfiCommon1
        CFI Function ??MainPageOnEnter
        ARM
??MainPageOnEnter:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R0,#+144
        MOV      R4,R1
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R2,??MainPageOnEnter_1  ;; ??MainGui_constr
        LDR      R1,??MainPageOnEnter_1+0x4  ;; ??MainGui_destr
        MOV      R5,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+16
        PUSH     {R0}
        CFI CFA R13+20
        PUSH     {R0}
        CFI CFA R13+24
        MOV      R3,R4
        MOV      R0,R5
        SWI      +496
        CMP      R0,#+0
        ADD      SP,SP,#+12
        CFI CFA R13+12
        BNE      ??MainPageOnEnter_2
        MOV      R0,R5
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R5,#+0
        STR      R5,[R4, #+24]
        MOV      R0,#+1
        POP      {R4,R5,PC}
??MainPageOnEnter_2:
        CMP      R4,#+0
        BEQ      ??MainPageOnEnter_3
        MOV      R1,R5
        MOV      R0,R4
        SWI      +491
??MainPageOnEnter_3:
        MOV      R1,#+4
        MOV      R0,R5
        SWI      +310
        MOV      R1,#+1
        MOV      R0,R5
        SWI      +641
        MOV      R0,R5
        SWI      +673
        LDR      R0,??MainPageOnEnter_1+0x8  ;; ACTION_OK
        LDR      R2,??MainPageOnEnter_1+0xC  ;; ??SK_DoOpen
        LDR      R1,[R0, #+0]
        MOV      R0,R5
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
        LDR      R0,??MainPageOnEnter_1+0x10  ;; ACTION_MORE
        LDR      R2,??MainPageOnEnter_1+0x14  ;; ??SK_DoMenu
        LDR      R1,[R0, #+0]
        MOV      R0,R5
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
        LDR      R0,??MainPageOnEnter_1+0x18  ;; ACTION_BACK
        LDR      R2,??MainPageOnEnter_1+0x1C  ;; ??SK_DoBackK
        LDR      R1,[R0, #+0]
        MOV      R0,R5
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
        MOV      R0,R5
        SWI      +308
        STR      R5,[R4, #+24]
        MOV      R0,#+1
        POP      {R4,R5,PC}       ;; return
        DATA
??MainPageOnEnter_1:
        DC32     ??MainGui_constr
        DC32     ??MainGui_destr
        DC32     ACTION_OK
        DC32     ??SK_DoOpen
        DC32     ACTION_MORE
        DC32     ??SK_DoMenu
        DC32     ACTION_BACK
        DC32     ??SK_DoBackK
        CFI EndBlock cfiBlock49

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock50 Using cfiCommon0
        CFI NoFunction
        THUMB
??MainPageOnExit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock50
        REQUIRE ??MainPageOnExit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock51 Using cfiCommon1
        CFI Function ??MainPageOnExit
        ARM
??MainPageOnExit:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
        LDR      R0,[R4, #+24]
        CMP      R0,#+0
        BEQ      ??MainPageOnExit_1
        SWI      +462
        STR      R0,[R4, #+24]
??MainPageOnExit_1:
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock51

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock52 Using cfiCommon0
        CFI NoFunction
        THUMB
??TerminateElf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock52
        REQUIRE ??TerminateElf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock53 Using cfiCommon1
        CFI Function ??TerminateElf
        ARM
??TerminateElf:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,R1
        SWI      +303
        MOV      R0,#+1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock53

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock54 Using cfiCommon0
        CFI NoFunction
        THUMB
??ReconfigElf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock54
        REQUIRE ??ReconfigElf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock55 Using cfiCommon1
        CFI Function ??ReconfigElf
        ARM
??ReconfigElf:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        LDR      R0,??ReconfigElf_1  ;; successed_config_path
        MOV      R5,#+0
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        SWI      +671
        CMP      R0,#+0
        BNE      ??ReconfigElf_2
        LDR      R0,??ReconfigElf_1+0x4  ;; successed_config_name
        LDR      R1,[R0, #+0]
        ADD      R0,R4,#+128
        SWI      +671
        CMP      R0,#+0
        BNE      ??ReconfigElf_2
        _BLF     ??InitConfig,??InitConfig??rA
        BL       ??InitDrvInfo
        _BLF     ??InitScr,??InitScr??rA
        _BLF     ??UpdateAll,??UpdateAll??rA
        MOV      R5,#+1
??ReconfigElf_2:
        MOV      R0,R5
        POP      {R4,R5,PC}       ;; return
        DATA
??ReconfigElf_1:
        DC32     successed_config_path
        DC32     successed_config_name
        CFI EndBlock cfiBlock55

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock56 Using cfiCommon0
        CFI NoFunction
        THUMB
??onMyBookClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock56
        REQUIRE ??onMyBookClose

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
bk_msglst_base:
        DATA
        DC32 997, ??TerminateElf, 996, ??ReconfigElf, 64, 0H

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
bk_msglst_main:
        DATA
        DC32 66, ??MainPageOnEnter, 67, ??MainPageOnExit, 64, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x44\\x42\\x5f\\x4c\\x49\\x53\\x54\\x5f\\`:
        DATA
        DC8 44H, 0, 42H, 0, 5FH, 0, 4CH, 0
        DC8 49H, 0, 53H, 0, 54H, 0, 5FH, 0
        DC8 46H, 0, 4FH, 0, 4CH, 0, 44H, 0
        DC8 45H, 0, 52H, 0, 5FH, 0, 49H, 0
        DC8 43H, 0, 4EH, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x43\\x48\\x45\\x43\\x4b\\x4d\\x41\\x52\\`:
        DATA
        DC8 43H, 0, 48H, 0, 45H, 0, 43H, 0
        DC8 4BH, 0, 4DH, 0, 41H, 0, 52H, 0
        DC8 4BH, 0, 5FH, 0, 49H, 0, 43H, 0
        DC8 4EH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x43\\x48\\x45\\x43\\x4b\\x45\\x44\\x5f\\`:
        DATA
        DC8 43H, 0, 48H, 0, 45H, 0, 43H, 0
        DC8 4BH, 0, 45H, 0, 44H, 0, 5FH, 0
        DC8 52H, 0, 41H, 0, 44H, 0, 49H, 0
        DC8 4FH, 0, 42H, 0, 55H, 0, 54H, 0
        DC8 54H, 0, 4FH, 0, 4EH, 0, 5FH, 0
        DC8 49H, 0, 43H, 0, 4EH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x52\\x41\\x44\\x49\\x4f\\x42\\x55\\x54\\`:
        DATA
        DC8 52H, 0, 41H, 0, 44H, 0, 49H, 0
        DC8 4FH, 0, 42H, 0, 55H, 0, 54H, 0
        DC8 54H, 0, 4FH, 0, 4EH, 0, 5FH, 0
        DC8 49H, 0, 43H, 0, 4EH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x43\\x48\\x45\\x43\\x4b\\x4d\\x41\\x52\\_1`:
        DATA
        DC8 43H, 0, 48H, 0, 45H, 0, 43H, 0
        DC8 4BH, 0, 4DH, 0, 41H, 0, 52H, 0
        DC8 4BH, 0, 5FH, 0, 49H, 0, 4EH, 0
        DC8 5FH, 0, 42H, 0, 4FH, 0, 58H, 0
        DC8 5FH, 0, 49H, 0, 43H, 0, 4EH, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x43\\x48\\x45\\x43\\x4b\\x42\\x4f\\x58\\`:
        DATA
        DC8 43H, 0, 48H, 0, 45H, 0, 43H, 0
        DC8 4BH, 0, 42H, 0, 4FH, 0, 58H, 0
        DC8 5FH, 0, 49H, 0, 43H, 0, 4EH, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "MC_Base_Page">`:
        DATA
        DC8 "MC_Base_Page"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "MC_Main_Page">`:
        DATA
        DC8 "MC_Main_Page"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 2FH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x72\\x6f\\x6f\\x74">`:
        DATA
        DC8 72H, 0, 6FH, 0, 6FH, 0, 74H, 0
        DC8 0, 0
        DC8 0, 0
        DC8 70H, 0, 68H, 0, 6FH, 0, 6EH, 0
        DC8 65H, 0, 0, 0
        DC8 63H, 0, 61H, 0, 72H, 0, 64H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x47\\x6f\\x20\\x73\\x6d\\x6f\\x6b\\x65\\`:
        DATA
        DC8 47H, 0, 6FH, 0, 20H, 0, 73H, 0
        DC8 6DH, 0, 6FH, 0, 6BH, 0, 65H, 0
        DC8 20H, 0, 62H, 0, 61H, 0, 6DH, 0
        DC8 62H, 0, 6FH, 0, 6FH, 0, 20H, 0
        DC8 6FH, 0, 72H, 0, 20H, 0, 75H, 0
        DC8 70H, 0, 64H, 0, 61H, 0, 74H, 0
        DC8 65H, 0, 20H, 0, 64H, 0, 79H, 0
        DC8 6EH, 0, 63H, 0, 6FH, 0, 6EH, 0
        DC8 73H, 0, 74H, 0, 0, 0
        DC8 0, 0
        DC32 `?<Constant "MC_Base_Page">`, 0H, bk_msglst_base
        DC32 `?<Constant "MC_Main_Page">`, 0H, bk_msglst_main

        RSEG DATA_C:CONST:SORT:NOROOT(0)
        DATA
        DC8 "mc"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
MainGuiName:
        DATA
        DC8 "Gui_MainMC"
        DC8 0

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock57 Using cfiCommon1
        CFI Function ??onMyBookClose
        ARM
??onMyBookClose:
        LDR      R0,??DataTable50  ;; ??elf_exit
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +264
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock57

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock58 Using cfiCommon0
        CFI NoFunction
        THUMB
??isMcBook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock58
        REQUIRE ??isMcBook

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock59 Using cfiCommon1
        CFI Function ??isMcBook
        ARM
??isMcBook:
        LDR      R0,[R0, #+4]
        LDR      R1,??DataTable48  ;; ??onMyBookClose
        CMP      R0,R1
        MOVEQ    R0,#+1
        BXEQ     LR
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock59

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock60 Using cfiCommon0
        CFI NoFunction
        THUMB
??CheckConst??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock60
        REQUIRE ??CheckConst

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock61 Using cfiCommon1
        CFI Function ??CheckConst
        ARM
??CheckConst:
        LDR      R1,??CheckConst_1  ;; SFB(DYN_CONST_DESC)
        MOV      R0,#+1
        LDR      R1,[R1, #+0]
        MOV      R2,#+0
        B        ??CheckConst_2
??CheckConst_3:
        ADD      R2,R2,#+1
??CheckConst_2:
        CMP      R2,R1
        BXGE     LR
        LDR      R3,??CheckConst_1+0x4  ;; SFB(DYN_CONST)
        LDR      R3,[R3, +R2, LSL #+2]
        CMN      R3,#+1
        BNE      ??CheckConst_3
        MOV      R0,#+0
        BX       LR               ;; return
        DATA
??CheckConst_1:
        DC32     SFB(DYN_CONST_DESC)
        DC32     SFB(DYN_CONST)
        CFI EndBlock cfiBlock61

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock62 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock62
        REQUIRE main

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock63 Using cfiCommon1
        CFI Function main
        ARM
main:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R5,R0
        MOV      R6,R1
        MOV      R4,R2
        BL       ??CheckConst
        CMP      R0,#+0
        BNE      ??main_0
        LDR      R0,??main_1+0x4  ;; `?<Constant L"\\x47\\x6f\\x20\\x73\\x6d\\x6f\\x6b\\x65\\`
        MOV      R4,#+255
        ORR      R4,R4,#0xFF00
        MOV      R2,R4
        MOV      R1,#+0
        SWI      +349
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+24
        MOV      R3,#+1
        MOV      R2,R4
        MOV      R1,#+248
        ORR      R1,R1,#0x2A00
        PUSH     {R1}
        CFI CFA R13+28
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
        LDR      R0,??DataTable50  ;; ??elf_exit
        SWI      +264
        MOV      R0,#+0
        ADD      SP,SP,#+8
        CFI CFA R13+20
        POP      {R4-R7,PC}
??main_0:
        LDR      R7,??DataTable47  ;; STD_ICONS
        MOV      R0,#+64
        _BLF     `??operator new`,`??operator new??rA`
        STR      R0,[R7, #+12]
        MOV      R2,#+64
        MOV      R1,#+0
        SWI      +274
        LDR      R1,??main_1+0x8  ;; mcpath
        MOV      R2,#+0
        MOV      R0,R5
        _BLF     ??GetFileDir,??GetFileDir??rA
        _BLF     ??InitConfig,??InitConfig??rA
        LDR      R2,??main_1+0xC  ;; `?<Constant L"\\x47\\x6f\\x20\\x73\\x6d\\x6f\\x6b\\x65\\` + 72
        LDR      R1,??DataTable48  ;; ??onMyBookClose
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+24
        ADR      R3,??main_1      ;; "mc"
        MVN      R0,R0
        PUSH     {R0}
        CFI CFA R13+28
        LDR      R0,[R7, #+12]
        SWI      +299
        CMP      R0,#+0
        ADD      SP,SP,#+8
        CFI CFA R13+20
        BNE      ??main_2
        LDR      R0,??DataTable53  ;; STD_ICONS + 12
        LDR      R0,[R0, #+0]
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R0,??DataTable50  ;; ??elf_exit
        SWI      +264
        MOV      R0,#+0
        POP      {R4-R7,PC}
??main_2:
        CMP      R6,#+0
        CMPNE    R4,#+0
        BEQ      ??main_3
        LDR      R5,??DataTable52  ;; in_open_path
        MOV      R1,R6
        MOV      R0,R5
        SWI      +338
        MOV      R0,R6
        SWI      +343
        ADD      R0,R5,R0, LSL #+1
        MOV      R1,#+47
        STRH     R1,[R0], #+2
        MOV      R1,R4
        SWI      +338
        B        ??main_4
??main_3:
        LDR      R0,??DataTable52  ;; in_open_path
        MOV      R1,#+0
        STRH     R1,[R0, #+0]
??main_4:
        LDR      R0,??DataTable53  ;; STD_ICONS + 12
        LDR      R1,??main_1+0x10  ;; `?<Constant L"\\x47\\x6f\\x20\\x73\\x6d\\x6f\\x6b\\x65\\` + 84
        LDR      R0,[R0, #+0]
        SWI      +301
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
        DATA
??main_1:
        DC8      "mc",+0
        DC32     `?<Constant L"\\x47\\x6f\\x20\\x73\\x6d\\x6f\\x6b\\x65\\`
        DC32     mcpath
        DC32     `?<Constant L"\\x47\\x6f\\x20\\x73\\x6d\\x6f\\x6b\\x65\\` + 72
        DC32     `?<Constant L"\\x47\\x6f\\x20\\x73\\x6d\\x6f\\x6b\\x65\\` + 84
        CFI EndBlock cfiBlock63

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable47:
        DC32     STD_ICONS

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable48:
        DC32     ??onMyBookClose

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable50:
        DC32     ??elf_exit

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable52:
        DC32     in_open_path

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable53:
        DC32     STD_ICONS + 12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock64 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine32_0  ;; kill_data
        BX       R12
        DATA
??Subroutine32_0:
        DC32     kill_data
        CFI EndBlock cfiBlock64

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock65 Using cfiCommon1
        CFI NoFunction
        ARM
??muitxt??rA:
        LDR      R12,??Subroutine33_0  ;; ??muitxt
        BX       R12
        DATA
??Subroutine33_0:
        DC32     ??muitxt
        CFI EndBlock cfiBlock65

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock66 Using cfiCommon1
        CFI NoFunction
        ARM
??win12512unicode??rA:
        LDR      R12,??Subroutine34_0  ;; ??win12512unicode
        BX       R12
        DATA
??Subroutine34_0:
        DC32     ??win12512unicode
        CFI EndBlock cfiBlock66

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock67 Using cfiCommon1
        CFI NoFunction
        ARM
??SaveCS??rA:
        LDR      R12,??Subroutine35_0  ;; ??SaveCS
        BX       R12
        DATA
??Subroutine35_0:
        DC32     ??SaveCS
        CFI EndBlock cfiBlock67

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock68 Using cfiCommon1
        CFI NoFunction
        ARM
??SaveMUI??rA:
        LDR      R12,??Subroutine36_0  ;; ??SaveMUI
        BX       R12
        DATA
??Subroutine36_0:
        DC32     ??SaveMUI
        CFI EndBlock cfiBlock68

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock69 Using cfiCommon1
        CFI NoFunction
        ARM
??SaveCfg??rA:
        LDR      R12,??Subroutine37_0  ;; ??SaveCfg
        BX       R12
        DATA
??Subroutine37_0:
        DC32     ??SaveCfg
        CFI EndBlock cfiBlock69

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock70 Using cfiCommon1
        CFI NoFunction
        ARM
??fn_free??rA:
        LDR      R12,??Subroutine38_0  ;; ??fn_free
        BX       R12
        DATA
??Subroutine38_0:
        DC32     ??fn_free
        CFI EndBlock cfiBlock70

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock71 Using cfiCommon1
        CFI NoFunction
        ARM
??FreeMUI??rA:
        LDR      R12,??Subroutine39_0  ;; ??FreeMUI
        BX       R12
        DATA
??Subroutine39_0:
        DC32     ??FreeMUI
        CFI EndBlock cfiBlock71

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock72 Using cfiCommon1
        CFI NoFunction
        ARM
??DelFiles??rA:
        LDR      R12,??Subroutine40_0  ;; ??DelFiles
        BX       R12
        DATA
??Subroutine40_0:
        DC32     ??DelFiles
        CFI EndBlock cfiBlock72

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock73 Using cfiCommon1
        CFI NoFunction
        ARM
??FreeTab??rA:
        LDR      R12,??Subroutine41_0  ;; ??FreeTab
        BX       R12
        DATA
??Subroutine41_0:
        DC32     ??FreeTab
        CFI EndBlock cfiBlock73

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock74 Using cfiCommon1
        CFI NoFunction
        ARM
??DestroyPathBuf??rA:
        LDR      R12,??Subroutine42_0  ;; ??DestroyPathBuf
        BX       R12
        DATA
??Subroutine42_0:
        DC32     ??DestroyPathBuf
        CFI EndBlock cfiBlock74

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock75 Using cfiCommon1
        CFI NoFunction
        ARM
??DestroySendList??rA:
        LDR      R12,??Subroutine43_0  ;; ??DestroySendList
        BX       R12
        DATA
??Subroutine43_0:
        DC32     ??DestroySendList
        CFI EndBlock cfiBlock75

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock76 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine44_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine44_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock76

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock77 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine45_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine45_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock77

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock78 Using cfiCommon1
        CFI NoFunction
        ARM
??LoadKeys??rA:
        LDR      R12,??Subroutine46_0  ;; ??LoadKeys
        BX       R12
        DATA
??Subroutine46_0:
        DC32     ??LoadKeys
        CFI EndBlock cfiBlock78

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock79 Using cfiCommon1
        CFI NoFunction
        ARM
??LoadCfg??rA:
        LDR      R12,??Subroutine47_0  ;; ??LoadCfg
        BX       R12
        DATA
??Subroutine47_0:
        DC32     ??LoadCfg
        CFI EndBlock cfiBlock79

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock80 Using cfiCommon1
        CFI NoFunction
        ARM
??ZeroArchiveBuffer??rA:
        LDR      R12,??Subroutine48_0  ;; ??ZeroArchiveBuffer
        BX       R12
        DATA
??Subroutine48_0:
        DC32     ??ZeroArchiveBuffer
        CFI EndBlock cfiBlock80

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock81 Using cfiCommon1
        CFI NoFunction
        ARM
??fn_zero??rA:
        LDR      R12,??Subroutine49_0  ;; ??fn_zero
        BX       R12
        DATA
??Subroutine49_0:
        DC32     ??fn_zero
        CFI EndBlock cfiBlock81

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock82 Using cfiCommon1
        CFI NoFunction
        ARM
??InitTab??rA:
        LDR      R12,??Subroutine50_0  ;; ??InitTab
        BX       R12
        DATA
??Subroutine50_0:
        DC32     ??InitTab
        CFI EndBlock cfiBlock82

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock83 Using cfiCommon1
        CFI NoFunction
        ARM
??cd??rA:
        LDR      R12,??Subroutine51_0  ;; ??cd
        BX       R12
        DATA
??Subroutine51_0:
        DC32     ??cd
        CFI EndBlock cfiBlock83

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock84 Using cfiCommon1
        CFI NoFunction
        ARM
??SetTabIndex??rA:
        LDR      R12,??Subroutine52_0  ;; ??SetTabIndex
        BX       R12
        DATA
??Subroutine52_0:
        DC32     ??SetTabIndex
        CFI EndBlock cfiBlock84

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock85 Using cfiCommon1
        CFI NoFunction
        ARM
??InitScr??rA:
        LDR      R12,??Subroutine53_0  ;; ??InitScr
        BX       R12
        DATA
??Subroutine53_0:
        DC32     ??InitScr
        CFI EndBlock cfiBlock85

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock86 Using cfiCommon1
        CFI NoFunction
        ARM
??InitCS??rA:
        LDR      R12,??Subroutine54_0  ;; ??InitCS
        BX       R12
        DATA
??Subroutine54_0:
        DC32     ??InitCS
        CFI EndBlock cfiBlock86

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock87 Using cfiCommon1
        CFI NoFunction
        ARM
??LoadMUI??rA:
        LDR      R12,??Subroutine55_0  ;; ??LoadMUI
        BX       R12
        DATA
??Subroutine55_0:
        DC32     ??LoadMUI
        CFI EndBlock cfiBlock87

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock88 Using cfiCommon1
        CFI NoFunction
        ARM
??isdir??rA:
        LDR      R12,??Subroutine56_0  ;; ??isdir
        BX       R12
        DATA
??Subroutine56_0:
        DC32     ??isdir
        CFI EndBlock cfiBlock88

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock89 Using cfiCommon1
        CFI NoFunction
        ARM
??IsItZipFile??rA:
        LDR      R12,??Subroutine57_0  ;; ??IsItZipFile
        BX       R12
        DATA
??Subroutine57_0:
        DC32     ??IsItZipFile
        CFI EndBlock cfiBlock89

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock90 Using cfiCommon1
        CFI NoFunction
        ARM
??GetFileDir??rA:
        LDR      R12,??Subroutine58_0  ;; ??GetFileDir
        BX       R12
        DATA
??Subroutine58_0:
        DC32     ??GetFileDir
        CFI EndBlock cfiBlock90

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock91 Using cfiCommon1
        CFI NoFunction
        ARM
??GetFileName??rA:
        LDR      R12,??Subroutine59_0  ;; ??GetFileName
        BX       R12
        DATA
??Subroutine59_0:
        DC32     ??GetFileName
        CFI EndBlock cfiBlock91

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock92 Using cfiCommon1
        CFI NoFunction
        ARM
??GetCurTabFileIndex??rA:
        LDR      R12,??Subroutine60_0  ;; ??GetCurTabFileIndex
        BX       R12
        DATA
??Subroutine60_0:
        DC32     ??GetCurTabFileIndex
        CFI EndBlock cfiBlock92

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock93 Using cfiCommon1
        CFI NoFunction
        ARM
??SetCurTabIndex??rA:
        LDR      R12,??Subroutine61_0  ;; ??SetCurTabIndex
        BX       R12
        DATA
??Subroutine61_0:
        DC32     ??SetCurTabIndex
        CFI EndBlock cfiBlock93

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock94 Using cfiCommon1
        CFI NoFunction
        ARM
??IsIt7ZipFile??rA:
        LDR      R12,??Subroutine62_0  ;; ??IsIt7ZipFile
        BX       R12
        DATA
??Subroutine62_0:
        DC32     ??IsIt7ZipFile
        CFI EndBlock cfiBlock94

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock95 Using cfiCommon1
        CFI NoFunction
        ARM
??DisableScroll??rA:
        LDR      R12,??Subroutine63_0  ;; ??DisableScroll
        BX       R12
        DATA
??Subroutine63_0:
        DC32     ??DisableScroll
        CFI EndBlock cfiBlock95

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock96 Using cfiCommon1
        CFI NoFunction
        ARM
??ShowFiles??rA:
        LDR      R12,??Subroutine64_0  ;; ??ShowFiles
        BX       R12
        DATA
??Subroutine64_0:
        DC32     ??ShowFiles
        CFI EndBlock cfiBlock96

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock97 Using cfiCommon1
        CFI NoFunction
        ARM
??GetKeyprocLongByKey??rA:
        LDR      R12,??Subroutine65_0  ;; ??GetKeyprocLongByKey
        BX       R12
        DATA
??Subroutine65_0:
        DC32     ??GetKeyprocLongByKey
        CFI EndBlock cfiBlock97

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock98 Using cfiCommon1
        CFI NoFunction
        ARM
??DoKey??rA:
        LDR      R12,??Subroutine66_0  ;; ??DoKey
        BX       R12
        DATA
??Subroutine66_0:
        DC32     ??DoKey
        CFI EndBlock cfiBlock98

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock99 Using cfiCommon1
        CFI NoFunction
        ARM
??DoMenu??rA:
        LDR      R12,??Subroutine67_0  ;; ??DoMenu
        BX       R12
        DATA
??Subroutine67_0:
        DC32     ??DoMenu
        CFI EndBlock cfiBlock99

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock100 Using cfiCommon1
        CFI NoFunction
        ARM
??DoOpen??rA:
        LDR      R12,??Subroutine68_0  ;; ??DoOpen
        BX       R12
        DATA
??Subroutine68_0:
        DC32     ??DoOpen
        CFI EndBlock cfiBlock100

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock101 Using cfiCommon1
        CFI NoFunction
        ARM
??DoBackK??rA:
        LDR      R12,??Subroutine69_0  ;; ??DoBackK
        BX       R12
        DATA
??Subroutine69_0:
        DC32     ??DoBackK
        CFI EndBlock cfiBlock101

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock102 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine70_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine70_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock102

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock103 Using cfiCommon1
        CFI NoFunction
        ARM
??InitConfig??rA:
        LDR      R12,??Subroutine71_0  ;; ??InitConfig
        BX       R12
        DATA
??Subroutine71_0:
        DC32     ??InitConfig
        CFI EndBlock cfiBlock103

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock104 Using cfiCommon1
        CFI NoFunction
        ARM
??UpdateAll??rA:
        LDR      R12,??Subroutine72_0  ;; ??UpdateAll
        BX       R12
        DATA
??Subroutine72_0:
        DC32     ??UpdateAll
        CFI EndBlock cfiBlock104

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for STD_ICONS>`:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for MCBook>`:
        DC8 0, 0, 0, 0
`?<Initializer for main_obj>`:
        DC32 0H
`?<Initializer for Busy>`:
        DC32 0
`?<Initializer for is_db2010>`:
        DC32 0
`?<Initializer for SA_ICONS>`:
        DC32 `?<Constant L"\\x44\\x42\\x5f\\x4c\\x49\\x53\\x54\\x5f\\`
        DC32 `?<Constant L"\\x43\\x48\\x45\\x43\\x4b\\x4d\\x41\\x52\\`
        DC32 `?<Constant L"\\x43\\x48\\x45\\x43\\x4b\\x45\\x44\\x5f\\`
        DC32 `?<Constant L"\\x52\\x41\\x44\\x49\\x4f\\x42\\x55\\x54\\`
        DC32 `?<Constant L"\\x43\\x48\\x45\\x43\\x4b\\x4d\\x41\\x52\\_1`
        DC32 `?<Constant L"\\x43\\x48\\x45\\x43\\x4b\\x42\\x4f\\x58\\`
`?<Initializer for lastKey>`:
        DC32 -1
`?<Initializer for lastIsLongPress>`:
        DC32 0

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DYN_CONST:DATA:REORDER:NOROOT(0)

        RSEG DYN_CONST_DESC:DATA:REORDER:NOROOT(0)

        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        END
// 
// 4 596 bytes in segment CODE
//   403 bytes in segment DATA_C
//    60 bytes in segment DATA_I
//    60 bytes in segment DATA_ID
//     8 bytes in segment DATA_Z
//    48 bytes in segment DYN_PAGE
//    24 bytes in segment INITTAB
// 
// 3 976 bytes of CODE  memory (+ 644 bytes shared)
//   511 bytes of CONST memory
//    68 bytes of DATA  memory
//
//Errors: none
//Warnings: none
