//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:47:03 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\fslib.cp /
//                       p                                                   /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\fslib.cp /
//                       p -D NDEBUG -D USEZLIB -D OLDFUNCTIONS -lCN         /
//                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcs /
//                       e\Release\List\ -o Z:\home\perk11\www\perk11.info\s /
//                       vn\SE\mcse\Release\Obj\ -s9 --no_unroll             /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h --preinclude Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\mcse\..\deleaker\mem2.h -I                     /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\fslib.s79                                      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME fslib

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??CorFileName
        FUNCTION ??CorFileName,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??CorFileName??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
        PUBLIC ??EnumFiles
        FUNCTION ??EnumFiles,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??EnumFiles??rT
        PUBLIC ??EnumFilesInDir
        FUNCTION ??EnumFilesInDir,0203H
        LOCFRAME CSTACK, 148, STACK
        MULTWEAK ??EnumFilesInDir??rT
        PUBLIC ??GetFileDir
        FUNCTION ??GetFileDir,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??GetFileDir??rT
        PUBLIC ??GetFileExt
        FUNCTION ??GetFileExt,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??GetFileExt??rT
        PUBLIC ??GetFileName
        FUNCTION ??GetFileName,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??GetFileName??rT
        PUBLIC ??GetFilesCnt
        FUNCTION ??GetFilesCnt,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??GetFilesCnt??rT
        PUBLIC ??TestFileName
        FUNCTION ??TestFileName,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??TestFileName??rT
        PUBLIC ??_IsBadChar
        FUNCTION ??_IsBadChar,0203H
        MULTWEAK ??_IsBadChar??rT
        PUBLIC ??cptree
        FUNCTION ??cptree,0203H
        LOCFRAME CSTACK, 48, STACK
        MULTWEAK ??cptree??rT
        MULTWEAK ??endprogrsp??rA
        PUBLIC ??fcopy
        FUNCTION ??fcopy,0203H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??fcopy??rT
        PUBLIC ??fexists
        FUNCTION ??fexists,0203H
        LOCFRAME CSTACK, 44, STACK
        MULTWEAK ??fexists??rT
        PUBLIC ??find_next_name
        FUNCTION ??find_next_name,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??find_next_name??rT
        MULTWEAK ??fn_fill??rA
        MULTWEAK ??fn_free??rA
        MULTWEAK ??fn_rev??rA
        MULTWEAK ??fn_zero??rA
        PUBLIC ??fscp
        FUNCTION ??fscp,0203H
        LOCFRAME CSTACK, 1052, STACK
        MULTWEAK ??fscp??rT
        PUBLIC ??fsmv
        FUNCTION ??fsmv,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??fsmv??rT
        PUBLIC ??fsrm
        FUNCTION ??fsrm,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??fsrm??rT
        MULTWEAK ??incprogr??rA
        MULTWEAK ??incprogrsp??rA
        MULTWEAK ??isdir??rA
        PUBLIC ??mktree
        FUNCTION ??mktree,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??mktree??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        PUBLIC ??parse_name
        FUNCTION ??parse_name,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??parse_name??rT
        PUBLIC ??rmtree
        FUNCTION ??rmtree,0203H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??rmtree??rT
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        












??CorFileName??rT   SYMBOL "??rT", ??CorFileName

??EnumFiles??rT     SYMBOL "??rT", ??EnumFiles

??EnumFilesInDir??rT SYMBOL "??rT", ??EnumFilesInDir

??GetFileDir??rT    SYMBOL "??rT", ??GetFileDir

??GetFileExt??rT    SYMBOL "??rT", ??GetFileExt

??GetFileName??rT   SYMBOL "??rT", ??GetFileName

??GetFilesCnt??rT   SYMBOL "??rT", ??GetFilesCnt

??TestFileName??rT  SYMBOL "??rT", ??TestFileName

??_IsBadChar??rT    SYMBOL "??rT", ??_IsBadChar

??cptree??rT        SYMBOL "??rT", ??cptree
??endprogrsp??rA    SYMBOL "??rA", ??endprogrsp

??fcopy??rT         SYMBOL "??rT", ??fcopy

??fexists??rT       SYMBOL "??rT", ??fexists

??find_next_name??rT SYMBOL "??rT", ??find_next_name
??fn_fill??rA       SYMBOL "??rA", ??fn_fill
??fn_free??rA       SYMBOL "??rA", ??fn_free
??fn_rev??rA        SYMBOL "??rA", ??fn_rev
??fn_zero??rA       SYMBOL "??rA", ??fn_zero

??fscp??rT          SYMBOL "??rT", ??fscp

??fsmv??rT          SYMBOL "??rT", ??fsmv

??fsrm??rT          SYMBOL "??rT", ??fsrm
??incprogr??rA      SYMBOL "??rA", ??incprogr
??incprogrsp??rA    SYMBOL "??rA", ??incprogrsp
??isdir??rA         SYMBOL "??rA", ??isdir

??mktree??rT        SYMBOL "??rT", ??mktree
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

??parse_name??rT    SYMBOL "??rT", ??parse_name

??rmtree??rT        SYMBOL "??rT", ??rmtree

        EXTERN ??endprogrsp
        FUNCTION ??endprogrsp,0202H
        EXTERN ??fn_fill
        FUNCTION ??fn_fill,0202H
        EXTERN ??fn_free
        FUNCTION ??fn_free,0202H
        EXTERN ??fn_rev
        FUNCTION ??fn_rev,0202H
        EXTERN ??fn_zero
        FUNCTION ??fn_zero,0202H
        EXTERN ??incprogr
        FUNCTION ??incprogr,0202H
        EXTERN ??incprogrsp
        FUNCTION ??incprogrsp,0202H
        EXTERN ??isdir
        FUNCTION ??isdir,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN _ls_i_ls
        EXTERN _ls_ls
        EXTERN progr_act
        EXTERN progr_stop
        EXTERN progrsp_max
        EXTERN progrsp_start
        EXTERN str_empty


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetFileExt??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??GetFileExt

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??GetFileExt
        ARM
??GetFileExt:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,#+46
        SWI      +430
        CMP      R0,#+0
        POPEQ    {PC}
        MOV      R1,#+0
        ADD      R0,R0,#+2
        MOV      R2,R0
        B        ??GetFileExt_1
??GetFileExt_2:
        ADD      R1,R1,#+1
??GetFileExt_1:
        LDRH     R3,[R2], #+2
        CMP      R3,#+0
        BNE      ??GetFileExt_2
        CMP      R1,#+9
        MOVGE    R0,#+0
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetFileName??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??GetFileName

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??GetFileName
        ARM
??GetFileName:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        SWI      +343
        B        ??GetFileName_1
??GetFileName_2:
        ADD      R1,R4,R0, LSL #+1
        LDRH     R1,[R1, #+0]
        CMP      R1,#+92
        BEQ      ??GetFileName_3
        ADD      R1,R4,R0, LSL #+1
        LDRH     R1,[R1, #+0]
        CMP      R1,#+47
        BEQ      ??GetFileName_3
??GetFileName_1:
        SUB      R0,R0,#+1
        CMP      R0,#+0
        BPL      ??GetFileName_2
        MOV      R0,R4
        POP      {R4,PC}
??GetFileName_3:
        ADD      R0,R4,R0, LSL #+1
        ADD      R0,R0,#+2
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetFileDir??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??GetFileDir

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??GetFileDir
        ARM
??GetFileDir:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R3,#+0
        MOV      R4,R1
        MOV      R1,R0
        MOV      R5,#+0
        B        ??GetFileDir_1
??GetFileDir_2:
        CMP      R12,#+92
        CMPNE    R12,#+47
        BNE      ??GetFileDir_3
        LDRH     R12,[R1, #+0]
        CMP      R12,#+0
        MOVNE    R5,R3
??GetFileDir_3:
        ADD      R3,R3,#+1
??GetFileDir_1:
        LDRH     R12,[R1], #+2
        CMP      R12,#+0
        BNE      ??GetFileDir_2
        CMP      R4,#+0
        BEQ      ??GetFileDir_4
        CMP      R5,#+0
        BNE      ??GetFileDir_5
        CMP      R2,#+0
        BNE      ??GetFileDir_6
        MOV      R5,#+1
??GetFileDir_5:
        MOV      R2,R5
        MOV      R1,R0
        MOV      R0,R4
        SWI      +339
??GetFileDir_6:
        ADD      R0,R4,R5, LSL #+1
        MOV      R1,#+0
        STRH     R1,[R0, #+0]
??GetFileDir_4:
        MOV      R0,R4
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??fexists??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??fexists

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??fexists
        ARM
??fexists:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+40
        CFI CFA R13+44
        MOV      R1,SP
        SWI      +761
        CMN      R0,#+1
        MOVNE    R0,#+1
        MOVEQ    R0,#+0
        ADD      SP,SP,#+40
        CFI CFA R13+4
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??rmtree??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??rmtree

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??rmtree
        ARM
??rmtree:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+12
        CFI CFA R13+28
        MOV      R5,R0
        MOV      R4,R1
        MOV      R0,SP
        _BLF     ??fn_zero,??fn_zero??rA
        MOV      R1,R5
        MOV      R0,SP
        _BLF     ??fn_fill,??fn_fill??rA
        MOV      R0,SP
        _BLF     ??fn_rev,??fn_rev??rA
        LDR      R6,[SP, #+8]
        MOV      R5,#+1
        B        ??rmtree_1
??rmtree_2:
        AND      R5,R0,R5
??rmtree_3:
        LDR      R6,[R6, #+12]
        CMP      R4,#+0
        BEQ      ??rmtree_1
        MOV      R0,#+1
        _BLF     ??incprogr,??incprogr??rA
??rmtree_1:
        CMP      R6,#+0
        BEQ      ??rmtree_4
        LDR      R0,??DataTable5  ;; progr_stop
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??rmtree_4
        LDR      R0,[R6, #+0]
        CMP      R0,#+0
        BEQ      ??rmtree_5
        SUBS     R0,R0,#+1
        BNE      ??rmtree_3
??rmtree_5:
        LDR      R0,[R6, #+8]
        SWI      +816
        CMP      R0,#+0
        MOVNE    R0,#+0
        MOVEQ    R0,#+1
        B        ??rmtree_2
??rmtree_4:
        MOV      R0,SP
        _BLF     ??fn_free,??fn_free??rA
        MOV      R0,R5
        POP      {R1-R6,PC}       ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??fsrm??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??fsrm

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??fsrm
        ARM
??fsrm:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        MOV      R5,R1
        _BLF     ??isdir,??isdir??rA
        CMP      R0,#+0
        BEQ      ??fsrm_1
        MOV      R1,R5
        MOV      R0,R4
        BL       ??rmtree
        MOV      R4,R0
        MOV      R0,R4
        POP      {R4,R5,PC}
??fsrm_1:
        MOV      R0,R4
        SWI      +816
        CMP      R0,#+0
        MOVEQ    R4,#+1
        MOVNE    R4,#+0
        CMP      R5,#+0
        BEQ      ??fsrm_2
        MOV      R0,#+1
        _BLF     ??incprogr,??incprogr??rA
??fsrm_2:
        MOV      R0,R4
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??fcopy??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??fcopy

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??fcopy
        ARM
??fcopy:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R4,R1
        MOV      R5,#+0
        MOV      R6,#+0
        MOV      R3,R5
        MOV      R2,#+255
        ORR      R2,R2,#0x100
        MOV      R1,#+1
        SWI      +760
        MOVS     R7,R0
        BMI      ??fcopy_1
        MOV      R3,#+0
        MOV      R2,#+255
        ORR      R2,R2,#0x100
        MOV      R1,#+75
        MOV      R0,R4
        SWI      +760
        MOVS     R4,R0
        BMI      ??fcopy_2
        MOV      R2,#+1
        MOV      R1,#+0
        MOV      R0,R7
        SWI      +764
        MOV      R8,R0
        MOV      R2,#+2
        MOV      R1,R5
        MOV      R0,R7
        SWI      +764
        CMP      R8,#+0
        BEQ      ??fcopy_3
        MOV      R0,#+16384
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOVS     R5,R0
        BEQ      ??fcopy_4
        LDR      R0,??fcopy_5     ;; progrsp_max
        STR      R8,[R0, #+0]
        MOV      R0,#+0
        _BLF     ??incprogrsp,??incprogrsp??rA
??fcopy_6:
        CMP      R8,#+16384
        MOVLT    R9,R8
        MOVGE    R9,#+16384
        SUB      R8,R8,R9
        MOV      R0,R9
        _BLF     ??incprogrsp,??incprogrsp??rA
        MOV      R2,R9
        MOV      R1,R5
        MOV      R0,R7
        SWI      +763
        CMP      R0,R9
        BNE      ??fcopy_4
        MOV      R2,R9
        MOV      R1,R5
        MOV      R0,R4
        SWI      +762
        CMP      R0,R9
        BNE      ??fcopy_4
??fcopy_3:
        CMP      R8,#+0
        BNE      ??fcopy_6
        _BLF     ??endprogrsp,??endprogrsp??rA
        MOV      R6,#+1
??fcopy_4:
        CMP      R5,#+0
        BEQ      ??fcopy_7
        MOV      R0,R5
        _BLF     `??operator delete`,`??operator delete??rA`
??fcopy_7:
        MOV      R0,R4
        SWI      +765
??fcopy_2:
        MOV      R0,R7
        SWI      +765
??fcopy_1:
        MOV      R0,R6
        POP      {R4-R9,PC}       ;; return
        DATA
??fcopy_5:
        DC32     progrsp_max
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??_IsBadChar??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??_IsBadChar

        RSEG DATA_C:CONST:SORT:NOROOT(2)
badchars:
        DATA
        DC16 63, 42, 34, 58, 60, 62, 47, 92, 124, 10, 13
        DC8 0, 0

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??_IsBadChar
        ARM
??_IsBadChar:
        MOV      R1,#+0
        B        ??_IsBadChar_1
??_IsBadChar_2:
        ADD      R1,R1,#+1
??_IsBadChar_1:
        CMP      R1,#+11
        BCS      ??_IsBadChar_3
        LDR      R2,??_IsBadChar_4  ;; badchars
        ADD      R2,R2,R1, LSL #+1
        LDRH     R2,[R2, #+0]
        CMP      R2,R0
        BNE      ??_IsBadChar_2
        MOV      R0,#+1
        BX       LR
??_IsBadChar_3:
        MOV      R0,#+0
        BX       LR               ;; return
        DATA
??_IsBadChar_4:
        DC32     badchars
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??TestFileName??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??TestFileName

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??TestFileName
        ARM
??TestFileName:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
??TestFileName_1:
        LDRH     R1,[R4], #+2
        MOVS     R0,R1
        BEQ      ??TestFileName_2
        BL       ??_IsBadChar
        CMP      R0,#+0
        BEQ      ??TestFileName_1
        MOV      R0,#+0
        POP      {R4,PC}
??TestFileName_2:
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??CorFileName??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??CorFileName

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??CorFileName
        ARM
??CorFileName:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,#+0
        B        ??CorFileName_1
??CorFileName_2:
        BL       ??_IsBadChar
        CMP      R0,#+0
        ADDEQ    R0,R4,R5, LSL #+1
        STRHEQ   R6,[R0, #+0]
        ADDEQ    R5,R5,#+1
??CorFileName_1:
        LDRH     R0,[R4], #+2
        MOVS     R6,R0
        BNE      ??CorFileName_2
        ADD      R0,R4,R5, LSL #+1
        MOV      R1,#+0
        STRH     R1,[R0, #+0]
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??EnumFilesInDir??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ??EnumFilesInDir

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ??EnumFilesInDir
        ARM
??EnumFilesInDir:
        PUSH     {R1-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+48
        SUB      SP,SP,#+96
        CFI CFA R13+144
        MOV      R4,R0
        MOV      R0,#+0
        STR      R0,[SP, #+0]
        STR      R0,[SP, #+4]
        SWI      +361
        MOVS     R5,R0
        BEQ      ??EnumFilesInDir_1
        MOV      R1,#+1
        STR      R1,[SP, #+52]
        STR      R4,[SP, #+8]
        ADD      R1,SP,#+8
        SWI      +363
        LDRH     R0,[R5, #+2]
        MOV      R7,#+0
        CMP      R0,#+0
        BNE      ??EnumFilesInDir_2
??EnumFilesInDir_3:
        LDRH     R0,[R5, #+2]
        MOV      R4,#+0
        CMP      R0,#+0
        BEQ      ??EnumFilesInDir_1
??EnumFilesInDir_4:
        LDRH     R0,[R5, #+2]
        SUB      R1,R0,#+1
        MOV      R0,R5
        SWI      +377
        MOV      R6,R0
        LDR      R0,[R6, #+44]
        CMP      R0,#+0
        BNE      ??EnumFilesInDir_5
        CMP      R4,#+0
        BNE      ??EnumFilesInDir_6
        LDR      R0,[R6, #+4]
        TST      R0,#0x4000
        BEQ      ??EnumFilesInDir_7
        LDR      R0,[SP, #+144]
        CMP      R0,#+0
        BEQ      ??EnumFilesInDir_6
??EnumFilesInDir_7:
        LDR      R0,[R6, #+0]
        MOV      R1,#+47
        SWI      +430
        CMP      R0,#+0
        BEQ      ??EnumFilesInDir_6
        LDR      R1,[R6, #+4]
        TST      R1,#0x4000
        BEQ      ??EnumFilesInDir_8
        LDR      R2,[SP, #+4]
        ADD      R2,R2,#+1
        STR      R2,[SP, #+4]
        B        ??EnumFilesInDir_9
??EnumFilesInDir_10:
        MOV      R0,R9
        SWI      +814
??EnumFilesInDir_11:
        ADD      R7,R7,#+1
??EnumFilesInDir_2:
        LDRH     R0,[R5, #+2]
        CMP      R7,R0
        BGE      ??EnumFilesInDir_3
        MOV      R1,R7
        MOV      R0,R5
        SWI      +429
        LDR      R1,[R0, #+44]
        CMP      R1,#+0
        BNE      ??EnumFilesInDir_12
        LDR      R1,[R0, #+4]
        TST      R1,#0x4000
        LDRNE    R1,[SP, #+104]
        CMPNE    R1,#+0
        BEQ      ??EnumFilesInDir_11
??EnumFilesInDir_12:
        LDR      R8,[R0, #+0]
        MOV      R0,R8
        SWI      +812
        MOVS     R9,R0
        BEQ      ??EnumFilesInDir_11
        MOV      R0,R8
        SWI      +759
        B        ??EnumFilesInDir_13
??EnumFilesInDir_14:
        CMP      R10,#+0
        BEQ      ??EnumFilesInDir_13
??EnumFilesInDir_15:
        MOV      R0,#+48
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R6,R0
        MOV      R0,R8
        SWI      +343
        MOV      R11,R0
        MOV      R0,R4
        SWI      +343
        ADD      R0,R0,R11
        ADD      R11,R0,#+1
        MOV      R0,#+0
        STR      R0,[R6, #+44]
        ADD      R0,R11,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        LDR      R2,??DataTable4  ;; _ls_ls
        STR      R0,[R6, #+0]
        PUSH     {R4}
        CFI CFA R13+148
        LDR      R0,[R6, #+0]
        MOV      R3,R8
        MOV      R1,R11
        SWI      +277
        MOV      R2,#+40
        ADD      R1,SP,#+60
        ADD      R0,R6,#+4
        SWI      +275
        MOV      R1,R6
        MOV      R0,R5
        SWI      +432
        ADD      SP,SP,#+4
        CFI CFA R13+144
??EnumFilesInDir_13:
        MOV      R0,R9
        SWI      +813
        MOVS     R4,R0
        BEQ      ??EnumFilesInDir_10
        ADD      R1,SP,#+56
        SWI      +761
        LDR      R0,[SP, #+56]
        TST      R0,#0x4000
        BEQ      ??EnumFilesInDir_16
        LDR      R0,[SP, #+144]
        CMP      R0,#+0
        BEQ      ??EnumFilesInDir_14
??EnumFilesInDir_16:
        MOV      R10,#+1
        B        ??EnumFilesInDir_15
??EnumFilesInDir_8:
        LDR      R2,[SP, #+0]
        ADD      R2,R2,#+1
        STR      R2,[SP, #+0]
??EnumFilesInDir_9:
        MOV      R1,#+0
        STRH     R1,[R0, #+0]
        LDR      R1,[SP, #+96]
        CMP      R1,#+0
        BEQ      ??EnumFilesInDir_6
        LDR      R3,[SP, #+100]
        LDR      R7,[SP, #+96]
        ADD      R1,R0,#+2
        LDR      R0,[R6, #+0]
        ADD      R2,R6,#+4
        BLX      R7
        CMP      R0,#+0
        MOVEQ    R4,#+1
??EnumFilesInDir_6:
        LDR      R0,[R6, #+0]
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
??EnumFilesInDir_5:
        LDRH     R0,[R5, #+2]
        CMP      R0,#+0
        BNE      ??EnumFilesInDir_4
??EnumFilesInDir_1:
        MOV      R0,R5
        SWI      +362
        LDR      R0,[SP, #+4]
        CMP      R0,#+65536
        MOVCS    R1,#+255
        ORRCS    R1,R1,#0xFF00
        STRCS    R1,[SP, #+4]
        LDR      R0,[SP, #+0]
        CMP      R0,#+65536
        MOVCS    R1,#+255
        ORRCS    R1,R1,#0xFF00
        STRCS    R1,[SP, #+0]
        LDR      R0,[SP, #+4]
        LDR      R1,[SP, #+0]
        ADD      SP,SP,#+108
        CFI CFA R13+36
        ORR      R0,R1,R0, LSL #+16
        POP      {R4-R11,PC}      ;; return
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??EnumFiles??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE ??EnumFiles

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function ??EnumFiles
        ARM
??EnumFiles:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R3,#+1
        PUSH     {R3}
        CFI CFA R13+8
        BL       ??EnumFilesInDir
        POP      {R1,PC}          ;; return
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetFilesCnt??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE ??GetFilesCnt

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function ??GetFilesCnt
        ARM
??GetFilesCnt:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        MOV      R5,#+1
        _BLF     ??isdir,??isdir??rA
        CMP      R0,#+0
        BEQ      ??GetFilesCnt_1
        MOV      R0,#+1
        PUSH     {R0}
        CFI CFA R13+16
        MOV      R3,R0
        MOV      R2,#+0
        MOV      R1,R2
        MOV      R0,R4
        BL       ??EnumFilesInDir
        LSL      R1,R0,#+16
        LSR      R1,R1,#+16
        ADD      R0,R1,R0, ASR #+16
        ADD      R5,R0,#+1
        ADD      SP,SP,#+4
        CFI CFA R13+12
??GetFilesCnt_1:
        MOV      R0,R5
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??mktree??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE ??mktree

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function ??mktree
        ARM
??mktree:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R4,R0
        _BLF     ??isdir,??isdir??rA
        CMP      R0,#+0
        BNE      ??mktree_1
        MOV      R0,R4
        SWI      +343
        MOV      R5,R0
        ADD      R0,R5,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R6,R0
        MOV      R7,#+0
        CMP      R5,#+1
        BGE      ??mktree_2
        B        ??mktree_3
??mktree_4:
        ADD      R0,R4,R7, LSL #+1
        LDRH     R8,[R0, #+0]
        CMP      R8,#+47
        BNE      ??mktree_5
        ADD      R0,R6,R7, LSL #+1
        MOV      R1,#+0
        STRH     R1,[R0, #+0]
        MOV      R1,#+255
        ORR      R1,R1,#0x100
        MOV      R0,R6
        SWI      +766
??mktree_5:
        ADD      R0,R6,R7, LSL #+1
        STRH     R8,[R0, #+0]
        ADD      R7,R7,#+1
??mktree_2:
        CMP      R7,R5
        BLT      ??mktree_4
??mktree_3:
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R1,#+255
        ORR      R1,R1,#0x100
        MOV      R0,R4
        SWI      +766
        CMP      R0,#+0
        BNE      ??mktree_6
??mktree_1:
        MOV      R0,#+1
        POP      {R4-R8,PC}
??mktree_6:
        MOV      R0,#+0
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??cptree??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE ??cptree

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function ??cptree
        ARM
??cptree:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        SUB      SP,SP,#+12
        CFI CFA R13+44
        MOV      R7,R0
        MOV      R4,R1
        MOV      R5,R2
        MOV      R0,SP
        _BLF     ??fn_zero,??fn_zero??rA
        MOV      R1,R7
        MOV      R0,SP
        _BLF     ??fn_fill,??fn_fill??rA
        MOV      R0,SP
        _BLF     ??fn_rev,??fn_rev??rA
        MOV      R0,#+512
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R6,R0
        MOV      R0,R7
        SWI      +343
        ADD      R7,R0,#+1
        LDR      R0,??cptree_1    ;; progr_act
        MOV      R8,#+1
        LDR      R9,[R0, #+0]
        MOV      R1,#+8
        STR      R1,[R0, #+0]
        RSB      R0,R8,#+0
        _BLF     ??incprogr,??incprogr??rA
        LDR      R10,[SP, #+8]
        B        ??cptree_2
??cptree_3:
        MOV      R0,R4
??cptree_4:
        BL       ??mktree
        AND      R8,R0,R8
??cptree_5:
        LDR      R10,[R10, #+12]
??cptree_2:
        CMP      R10,#+0
        BEQ      ??cptree_6
        LDR      R0,??DataTable5  ;; progr_stop
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??cptree_6
        LDR      R0,[R10, #+0]
        CMP      R0,#+1
        BNE      ??cptree_5
        LDR      R0,[R10, #+8]
        ADD      R0,R0,R7, LSL #+1
        LDRH     R0,[R0, #-2]
        CMP      R0,#+0
        BEQ      ??cptree_3
        LDR      R0,[R10, #+8]
        LDR      R2,??DataTable4  ;; _ls_ls
        ADD      R0,R0,R7, LSL #+1
        PUSH     {R0}
        CFI CFA R13+48
        MOV      R3,R4
        MOV      R1,#+255
        MOV      R0,R6
        SWI      +277
        MOV      R0,R6
        ADD      SP,SP,#+4
        CFI CFA R13+44
        B        ??cptree_4
??cptree_6:
        LDR      R0,??cptree_1    ;; progr_act
        STR      R9,[R0, #+0]
        LDR      R9,[SP, #+8]
        B        ??cptree_7
??cptree_8:
        LDR      R0,[R9, #+0]
        CMP      R0,#+0
        BNE      ??cptree_9
        LDR      R0,[R9, #+8]
        LDR      R2,??DataTable4  ;; _ls_ls
        ADD      R0,R0,R7, LSL #+1
        PUSH     {R0}
        CFI CFA R13+48
        MOV      R3,R4
        MOV      R1,#+255
        MOV      R0,R6
        SWI      +277
        LDR      R0,[R9, #+8]
        MOV      R1,R6
        BL       ??fcopy
        AND      R8,R0,R8
        ADD      SP,SP,#+4
        CFI CFA R13+44
??cptree_9:
        LDR      R9,[R9, #+12]
        CMP      R5,#+0
        BEQ      ??cptree_7
        MOV      R0,#+1
        _BLF     ??incprogr,??incprogr??rA
??cptree_7:
        CMP      R9,#+0
        BEQ      ??cptree_10
        LDR      R0,??DataTable5  ;; progr_stop
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??cptree_8
??cptree_10:
        MOV      R0,SP
        _BLF     ??fn_free,??fn_free??rA
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R0,R8
        POP      {R1-R10,PC}      ;; return
        DATA
??cptree_1:
        DC32     progr_act
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     _ls_ls

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable5:
        DC32     progr_stop

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??parse_name??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE ??parse_name

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function ??parse_name
        ARM
??parse_name:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,#+0
        STR      R0,[R5, #+0]
        MOV      R1,R4
        ADD      R0,R5,#+4
        SWI      +338
        MOV      R0,R4
        SWI      +343
        MOV      R6,R0
        ADD      R0,R5,#+4
        BL       ??GetFileExt
        CMP      R0,#+0
        BEQ      ??parse_name_1
        STR      R0,[R5, #+516]
        MOV      R1,#+0
        STRH     R1,[R0, #-2]!
        B        ??parse_name_2
??parse_name_1:
        LDR      R0,??parse_name_3  ;; str_empty
        STR      R0,[R5, #+516]
        ADD      R0,R5,R6, LSL #+1
        ADD      R0,R0,#+4
??parse_name_2:
        LSR      R1,R0,#+1
        ADD      R2,R5,#+4
        SUB      R1,R1,R2, LSR #+1
        CMP      R1,#+3
        POPLT    {R4-R6,PC}
        LDRH     R1,[R0, #-2]!
        CMP      R1,#+41
        POPNE    {R4-R6,PC}
        MOV      R1,#+0
        MOV      R2,#+1
        B        ??parse_name_4
??parse_name_5:
        CMP      R3,#+58
        POPCS    {R4-R6,PC}
        MOV      R3,#+98304
        ORR      R3,R3,#0x6A0
        CMP      R2,R3
        POPGE    {R4-R6,PC}
        LDRH     R3,[R0, #+0]
        SUB      R3,R3,#+48
        MLA      R1,R2,R3,R1
        MOV      R3,#+10
        MUL      R2,R3,R2
??parse_name_4:
        SUB      R0,R0,#+2
        CMP      R0,R4
        POPCC    {R4-R6,PC}
        LDRH     R3,[R0, #+0]
        CMP      R3,#+48
        BCS      ??parse_name_5
        CMP      R3,#+40
        POPNE    {R4-R6,PC}
        CMP      R1,#+0
        STRNE    R1,[R5, #+0]
        MOVNE    R1,#+0
        STRHNE   R1,[R0, #+0]
        POP      {R4-R6,PC}       ;; return
        DATA
??parse_name_3:
        DC32     str_empty
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??find_next_name??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE ??find_next_name

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function ??find_next_name
        ARM
??find_next_name:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        MOV      R5,R1
??find_next_name_1:
        LDR      R0,[R4, #+0]
        ADD      R0,R0,#+1
        STR      R0,[R4, #+0]
        LDR      R0,[R4, #+0]
        CMP      R0,#+100
        BGE      ??find_next_name_2
        LDR      R0,[R4, #+516]
        LDR      R2,??find_next_name_3  ;; _ls_i_ls
        PUSH     {R0}
        CFI CFA R13+16
        LDR      R0,[R4, #+0]
        ADD      R3,R4,#+4
        PUSH     {R0}
        CFI CFA R13+20
        MOV      R1,#+255
        MOV      R0,R5
        SWI      +277
        MOV      R0,R5
        BL       ??fexists
        CMP      R0,#+0
        ADD      SP,SP,#+8
        CFI CFA R13+12
        BNE      ??find_next_name_1
        MOV      R0,#+1
        POP      {R4,R5,PC}
??find_next_name_2:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        DATA
??find_next_name_3:
        DC32     _ls_i_ls
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??fscp??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE ??fscp

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function ??fscp
        ARM
??fscp:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        LDR      R0,??fscp_1      ;; progrsp_start
        SUB      SP,SP,#+8
        CFI CFA R13+28
        SUB      SP,SP,#+1024
        CFI CFA R13+1052
        MOV      R5,R1
        MOV      R6,R2
        MOV      R1,#+1
        STR      R1,[R0, #+0]
        MOV      R1,R5
        MOV      R0,R4
        SWI      +671
        CMP      R0,#+0
        MOVEQ    R7,#+1
        MOVNE    R7,#+0
        MOV      R0,R4
        _BLF     ??isdir,??isdir??rA
        CMP      R0,#+0
        BEQ      ??fscp_2
        MOV      R2,R6
        MOV      R1,R5
        MOV      R0,R4
        BL       ??cptree
        MOV      R4,R0
        B        ??fscp_3
??fscp_2:
        CMP      R7,#+0
        BEQ      ??fscp_4
        MOV      R1,SP
        MOV      R0,R4
        BL       ??parse_name
        ADD      R1,SP,#+520
        MOV      R0,SP
        BL       ??find_next_name
        CMP      R0,#+0
        MOVEQ    R1,R5
        ADDNE    R1,SP,#+520
        B        ??fscp_5
??fscp_4:
        MOV      R1,R5
??fscp_5:
        MOV      R0,R4
        BL       ??fcopy
        MOV      R4,R0
        CMP      R6,#+0
        BEQ      ??fscp_3
        MOV      R0,#+1
        _BLF     ??incprogr,??incprogr??rA
??fscp_3:
        LDR      R0,??fscp_1      ;; progrsp_start
        MOV      R1,#+0
        STR      R1,[R0, #+0]
        MOV      R0,R4
        ADD      SP,SP,#+8
        CFI CFA R13+1044
        ADD      SP,SP,#+1024
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??fscp_1:
        DC32     progrsp_start
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??fsmv??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE ??fsmv

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function ??fsmv
        ARM
??fsmv:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R2,#+1
        MOV      R4,R0
        MOV      R5,#+0
        BL       ??fscp
        CMP      R0,#+0
        BEQ      ??fsmv_1
        MOV      R1,#+0
        MOV      R0,R4
        BL       ??fsrm
        MOV      R5,R0
??fsmv_1:
        MOV      R0,R5
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon1
        CFI NoFunction
        ARM
??fn_zero??rA:
        LDR      R12,??Subroutine19_0  ;; ??fn_zero
        BX       R12
        DATA
??Subroutine19_0:
        DC32     ??fn_zero
        CFI EndBlock cfiBlock38

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI NoFunction
        ARM
??fn_fill??rA:
        LDR      R12,??Subroutine20_0  ;; ??fn_fill
        BX       R12
        DATA
??Subroutine20_0:
        DC32     ??fn_fill
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon1
        CFI NoFunction
        ARM
??fn_rev??rA:
        LDR      R12,??Subroutine21_0  ;; ??fn_rev
        BX       R12
        DATA
??Subroutine21_0:
        DC32     ??fn_rev
        CFI EndBlock cfiBlock40

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI NoFunction
        ARM
??incprogr??rA:
        LDR      R12,??Subroutine22_0  ;; ??incprogr
        BX       R12
        DATA
??Subroutine22_0:
        DC32     ??incprogr
        CFI EndBlock cfiBlock41

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon1
        CFI NoFunction
        ARM
??fn_free??rA:
        LDR      R12,??Subroutine23_0  ;; ??fn_free
        BX       R12
        DATA
??Subroutine23_0:
        DC32     ??fn_free
        CFI EndBlock cfiBlock42

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI NoFunction
        ARM
??isdir??rA:
        LDR      R12,??Subroutine24_0  ;; ??isdir
        BX       R12
        DATA
??Subroutine24_0:
        DC32     ??isdir
        CFI EndBlock cfiBlock43

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine25_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine25_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock44

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI NoFunction
        ARM
??incprogrsp??rA:
        LDR      R12,??Subroutine26_0  ;; ??incprogrsp
        BX       R12
        DATA
??Subroutine26_0:
        DC32     ??incprogrsp
        CFI EndBlock cfiBlock45

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock46 Using cfiCommon1
        CFI NoFunction
        ARM
??endprogrsp??rA:
        LDR      R12,??Subroutine27_0  ;; ??endprogrsp
        BX       R12
        DATA
??Subroutine27_0:
        DC32     ??endprogrsp
        CFI EndBlock cfiBlock46

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock47 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine28_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine28_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock48 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine29_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine29_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock48

        END
// 
// 3 144 bytes in segment CODE
//    24 bytes in segment DATA_C
// 
// 2 936 bytes of CODE  memory (+ 208 bytes shared)
//    24 bytes of CONST memory
//
//Errors: none
//Warnings: none
