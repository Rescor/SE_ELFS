//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:45:53 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ZLib\CRC /
//                       32.C                                                /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ZLib\CRC /
//                       32.C -D LOG -D USEZLIB -lCN                         /
//                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcs /
//                       e\Release\List\ -o Z:\home\perk11\www\perk11.info\s /
//                       vn\SE\mcse\Release\Obj\ -s9 --no_unroll             /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --dlib_config                            /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\CRC32.s79                                      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME CRC32

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

??DataTable0 EQU 0
??DataTable1 EQU 0
        MULTWEAK ??crc32??rT
        MULTWEAK ??crc32_combine??rT
        MULTWEAK ??get_crc_table??rT
        PUBLIC crc32
        FUNCTION crc32,0203H
        PUBLIC crc32_combine
        FUNCTION crc32_combine,0203H
        LOCFRAME CSTACK, 272, STACK
        PUBLIC get_crc_table
        FUNCTION get_crc_table,0203H
        FUNCTION gf2_matrix_square,0203H
        LOCFRAME CSTACK, 8, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
crc32               SYMBOL "crc32"
??crc32??rT         SYMBOL "??rT", crc32
crc32_combine       SYMBOL "crc32_combine"
??crc32_combine??rT SYMBOL "??rT", crc32_combine
get_crc_table       SYMBOL "get_crc_table"
??get_crc_table??rT SYMBOL "??rT", get_crc_table


        RSEG DATA_C:CONST:SORT:NOROOT(2)
// static unsigned long const __data crc_table[1][256]
crc_table:
        DATA
        DC32 0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615
        DC32 3915621685, 2657392035, 249268274, 2044508324, 3772115230
        DC32 2547177864, 162941995, 2125561021, 3887607047, 2428444049
        DC32 498536548, 1789927666, 4089016648, 2227061214, 450548861
        DC32 1843258603, 4107580753, 2211677639, 325883990, 1684777152
        DC32 4251122042, 2321926636, 335633487, 1661365465, 4195302755
        DC32 2366115317, 997073096, 1281953886, 3579855332, 2724688242
        DC32 1006888145, 1258607687, 3524101629, 2768942443, 901097722
        DC32 1119000684, 3686517206, 2898065728, 853044451, 1172266101
        DC32 3705015759, 2882616665, 651767980, 1373503546, 3369554304
        DC32 3218104598, 565507253, 1454621731, 3485111705, 3099436303
        DC32 671266974, 1594198024, 3322730930, 2970347812, 795835527
        DC32 1483230225, 3244367275, 3060149565, 1994146192, 31158534
        DC32 2563907772, 4023717930, 1907459465, 112637215, 2680153253
        DC32 3904427059, 2013776290, 251722036, 2517215374, 3775830040
        DC32 2137656763, 141376813, 2439277719, 3865271297, 1802195444
        DC32 476864866, 2238001368, 4066508878, 1812370925, 453092731
        DC32 2181625025, 4111451223, 1706088902, 314042704, 2344532202
        DC32 4240017532, 1658658271, 366619977, 2362670323, 4224994405
        DC32 1303535960, 984961486, 2747007092, 3569037538, 1256170817
        DC32 1037604311, 2765210733, 3554079995, 1131014506, 879679996
        DC32 2909243462, 3663771856, 1141124467, 855842277, 2852801631
        DC32 3708648649, 1342533948, 654459306, 3188396048, 3373015174
        DC32 1466479909, 544179635, 3110523913, 3462522015, 1591671054
        DC32 702138776, 2966460450, 3352799412, 1504918807, 783551873
        DC32 3082640443, 3233442989, 3988292384, 2596254646, 62317068
        DC32 1957810842, 3939845945, 2647816111, 81470997, 1943803523
        DC32 3814918930, 2489596804, 225274430, 2053790376, 3826175755
        DC32 2466906013, 167816743, 2097651377, 4027552580, 2265490386
        DC32 503444072, 1762050814, 4150417245, 2154129355, 426522225
        DC32 1852507879, 4275313526, 2312317920, 282753626, 1742555852
        DC32 4189708143, 2394877945, 397917763, 1622183637, 3604390888
        DC32 2714866558, 953729732, 1340076626, 3518719985, 2797360999
        DC32 1068828381, 1219638859, 3624741850, 2936675148, 906185462
        DC32 1090812512, 3747672003, 2825379669, 829329135, 1181335161
        DC32 3412177804, 3160834842, 628085408, 1382605366, 3423369109
        DC32 3138078467, 570562233, 1426400815, 3317316542, 2998733608
        DC32 733239954, 1555261956, 3268935591, 3050360625, 752459403
        DC32 1541320221, 2607071920, 3965973030, 1969922972, 40735498
        DC32 2617837225, 3943577151, 1913087877, 83908371, 2512341634
        DC32 3803740692, 2075208622, 213261112, 2463272603, 3855990285
        DC32 2094854071, 198958881, 2262029012, 4057260610, 1759359992
        DC32 534414190, 2176718541, 4139329115, 1873836001, 414664567
        DC32 2282248934, 4279200368, 1711684554, 285281116, 2405801727
        DC32 4167216745, 1634467795, 376229701, 2685067896, 3608007406
        DC32 1308918612, 956543938, 2808555105, 3495958263, 1231636301
        DC32 1047427035, 2932959818, 3654703836, 1088359270, 936918000
        DC32 2847714899, 3736837829, 1202900863, 817233897, 3183342108
        DC32 3401237130, 1404277552, 615818150, 3134207493, 3453421203
        DC32 1423857449, 601450431, 3009837614, 3294710456, 1567103746
        DC32 711928724, 3020668471, 3272380065, 1510334235, 755167117

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??get_crc_table??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE get_crc_table

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function get_crc_table
        ARM
get_crc_table:
        LDR      R0,??DataTable2  ;; crc_table
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??crc32??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE crc32

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function crc32
        ARM
crc32:
        CMP      R1,#+0
        MOVEQ    R0,#+0
        BXEQ     LR
        MVN      R3,#+0
        EOR      R0,R3,R0
        CMP      R2,#+8
        BCC      ??crc32_0
??crc32_1:
        LDRB     R12,[R1], #+1
        LDR      R3,??DataTable2  ;; crc_table
        SUB      R2,R2,#+8
        EOR      R12,R12,R0
        AND      R12,R12,#0xFF
        LDR      R12,[R3, +R12, LSL #+2]
        CMP      R2,#+8
        EOR      R0,R12,R0, LSR #+8
        LDRB     R12,[R1], #+1
        EOR      R12,R12,R0
        AND      R12,R12,#0xFF
        LDR      R12,[R3, +R12, LSL #+2]
        EOR      R0,R12,R0, LSR #+8
        LDRB     R12,[R1], #+1
        EOR      R12,R12,R0
        AND      R12,R12,#0xFF
        LDR      R12,[R3, +R12, LSL #+2]
        EOR      R0,R12,R0, LSR #+8
        LDRB     R12,[R1], #+1
        EOR      R12,R12,R0
        AND      R12,R12,#0xFF
        LDR      R12,[R3, +R12, LSL #+2]
        EOR      R0,R12,R0, LSR #+8
        LDRB     R12,[R1], #+1
        EOR      R12,R12,R0
        AND      R12,R12,#0xFF
        LDR      R12,[R3, +R12, LSL #+2]
        EOR      R0,R12,R0, LSR #+8
        LDRB     R12,[R1], #+1
        EOR      R12,R12,R0
        AND      R12,R12,#0xFF
        LDR      R12,[R3, +R12, LSL #+2]
        EOR      R0,R12,R0, LSR #+8
        LDRB     R12,[R1], #+1
        EOR      R12,R12,R0
        AND      R12,R12,#0xFF
        LDR      R12,[R3, +R12, LSL #+2]
        EOR      R0,R12,R0, LSR #+8
        LDRB     R12,[R1], #+1
        EOR      R12,R12,R0
        AND      R12,R12,#0xFF
        LDR      R3,[R3, +R12, LSL #+2]
        EOR      R0,R3,R0, LSR #+8
        BCS      ??crc32_1
??crc32_0:
        LDR      R12,??DataTable2  ;; crc_table
        CMP      R2,#+0
        BEQ      ??crc32_2
??crc32_3:
        LDRB     R3,[R1], #+1
        SUBS     R2,R2,#+1
        EOR      R3,R3,R0
        AND      R3,R3,#0xFF
        LDR      R3,[R12, +R3, LSL #+2]
        EOR      R0,R3,R0, LSR #+8
        BNE      ??crc32_3
??crc32_2:
        MVN      R1,#+0
        EOR      R0,R1,R0
        BX       LR               ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     crc_table

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??gf2_matrix_square??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE gf2_matrix_square

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function gf2_matrix_square
        ARM
gf2_matrix_square:
        PUSH     {R4,R5}
        CFI R5 Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R2,#+0
??gf2_matrix_square_0:
        LDR      R3,[R1, +R2, LSL #+2]
        MOV      R12,R1
        MOV      R4,#+0
        CMP      R3,#+0
        BEQ      ??gf2_matrix_square_1
??gf2_matrix_square_2:
        TST      R3,#0x1
        LDRNE    R5,[R12, #+0]
        LSR      R3,R3,#+1
        EORNE    R4,R5,R4
        ADD      R12,R12,#+4
        CMP      R3,#+0
        BNE      ??gf2_matrix_square_2
??gf2_matrix_square_1:
        STR      R4,[R0, +R2, LSL #+2]
        ADD      R2,R2,#+1
        CMP      R2,#+32
        BLT      ??gf2_matrix_square_0
        POP      {R4,R5}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI CFA R13+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??crc32_combine??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE crc32_combine

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function crc32_combine
        ARM
crc32_combine:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+256
        CFI CFA R13+272
        MOV      R4,R1
        MOV      R6,R0
        MOVS     R5,R2
        BEQ      ??crc32_combine_0
        LDR      R1,??crc32_combine_1  ;; 0xffffffffedb88320
        MOV      R0,#+1
        STR      R1,[SP, #+128]
        MOV      R1,#+1
        ADD      R2,SP,#+128
??crc32_combine_2:
        STR      R0,[R2, +R1, LSL #+2]
        LSL      R0,R0,#+1
        ADD      R1,R1,#+1
        CMP      R1,#+32
        BLT      ??crc32_combine_2
        ADD      R1,SP,#+128
        MOV      R0,SP
        BL       gf2_matrix_square
        MOV      R1,SP
        ADD      R0,SP,#+128
        BL       gf2_matrix_square
??crc32_combine_3:
        ADD      R1,SP,#+128
        MOV      R0,SP
        BL       gf2_matrix_square
        TST      R5,#0x1
        BEQ      ??crc32_combine_4
        MOV      R0,R6
        MOV      R1,SP
        MOV      R6,#+0
        CMP      R0,#+0
        BEQ      ??crc32_combine_4
??crc32_combine_5:
        TST      R0,#0x1
        LDRNE    R2,[R1, #+0]
        LSR      R0,R0,#+1
        EORNE    R6,R2,R6
        ADD      R1,R1,#+4
        CMP      R0,#+0
        BNE      ??crc32_combine_5
??crc32_combine_4:
        ASRS     R5,R5,#+1
        BEQ      ??crc32_combine_6
        MOV      R1,SP
        ADD      R0,SP,#+128
        BL       gf2_matrix_square
        TST      R5,#0x1
        BEQ      ??crc32_combine_7
        MOVS     R0,R6
        ADD      R1,SP,#+128
        MOV      R6,#+0
        BEQ      ??crc32_combine_7
??crc32_combine_8:
        TST      R0,#0x1
        LDRNE    R2,[R1, #+0]
        LSR      R0,R0,#+1
        EORNE    R6,R2,R6
        ADD      R1,R1,#+4
        CMP      R0,#+0
        BNE      ??crc32_combine_8
??crc32_combine_7:
        ASRS     R5,R5,#+1
        BNE      ??crc32_combine_3
??crc32_combine_6:
        EOR      R0,R4,R6
??crc32_combine_0:
        ADD      SP,SP,#+256      ;; stack cleaning
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        DATA
??crc32_combine_1:
        DC32     0xffffffffedb88320
        CFI EndBlock cfiBlock7

        END
// 
//   616 bytes in segment CODE
// 1 024 bytes in segment DATA_C
// 
//   600 bytes of CODE  memory (+ 16 bytes shared)
// 1 024 bytes of CONST memory
//
//Errors: none
//Warnings: none
