//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:46:25 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\bookmark /
//                       s.cpp                                               /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\bookmark /
//                       s.cpp -D NDEBUG -D USEZLIB -D OLDFUNCTIONS -lCN     /
//                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcs /
//                       e\Release\List\ -o Z:\home\perk11\www\perk11.info\s /
//                       vn\SE\mcse\Release\Obj\ -s9 --no_unroll             /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h --preinclude Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\mcse\..\deleaker\mem2.h -I                     /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\bookmarks.s79                                  /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME bookmarks

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        MULTWEAK ??CurFullPathBM??rA
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
        PUBLIC ??DoBMAdd
        FUNCTION ??DoBMAdd,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??DoBMAdd??rT
        PUBLIC ??DoBMList
        FUNCTION ??DoBMList,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??DoBMList??rT
        MULTWEAK ??MCFilePath??rA
        PUBLIC ??SaveBM
        FUNCTION ??SaveBM,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??SaveBM??rT
        MULTWEAK ??TextInput??rA
        PUBLIC ??UseBM
        FUNCTION ??UseBM,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??UseBM??rT
        PUBLIC ??_AddBM
        FUNCTION ??_AddBM,0603H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??_AddBM??rT
        MULTWEAK ??_CurFile??rA
        MULTWEAK ??cd??rA
        MULTWEAK ??cdsys??rA
        MULTWEAK ??isdir??rA
        MULTWEAK ??mktree??rA
        MULTWEAK ??muitxt??rA
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new[]??rA`
        PUBLIC mcbm_ext
        PUBLIC mcbm_path
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        











??CurFullPathBM??rA SYMBOL "??rA", ??CurFullPathBM

??DoBMAdd??rT       SYMBOL "??rT", ??DoBMAdd

??DoBMList??rT      SYMBOL "??rT", ??DoBMList
??MCFilePath??rA    SYMBOL "??rA", ??MCFilePath

??SaveBM??rT        SYMBOL "??rT", ??SaveBM
??TextInput??rA     SYMBOL "??rA", ??TextInput

??UseBM??rT         SYMBOL "??rT", ??UseBM

??_AddBM??rT        SYMBOL "??rT", ??_AddBM
??_CurFile??rA      SYMBOL "??rA", ??_CurFile
??cd??rA            SYMBOL "??rA", ??cd
??cdsys??rA         SYMBOL "??rA", ??cdsys
??isdir??rA         SYMBOL "??rA", ??isdir
??mktree??rA        SYMBOL "??rA", ??mktree
??muitxt??rA        SYMBOL "??rA", ??muitxt
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

        EXTERN ??CurFullPathBM
        FUNCTION ??CurFullPathBM,0202H
        EXTERN ??MCFilePath
        FUNCTION ??MCFilePath,0202H
        EXTERN ??TextInput
        FUNCTION ??TextInput,0202H
        EXTERN ??_CurFile
        FUNCTION ??_CurFile,0202H
        EXTERN ??cd
        FUNCTION ??cd,0202H
        EXTERN ??cdsys
        FUNCTION ??cdsys,0202H
        EXTERN ??isdir
        FUNCTION ??isdir,0202H
        EXTERN ??mktree
        FUNCTION ??mktree,0202H
        EXTERN ??muitxt
        FUNCTION ??muitxt,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN _ls_ls
        EXTERN back_tab
        EXTERN curtab
        EXTERN pathbuf


        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x25\\x6c\\x73\\x2e\\x25\\x6c\\x73">`:
        DATA
        DC8 25H, 0, 6CH, 0, 73H, 0, 2EH, 0
        DC8 25H, 0, 6CH, 0, 73H, 0, 0, 0
mcbm_ext:
        DC8 6DH, 0, 63H, 0, 62H, 0, 6DH, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
mcbm_path:
        DATA
        DC8 42H, 0, 6FH, 0, 6FH, 0, 6BH, 0
        DC8 6DH, 0, 61H, 0, 72H, 0, 6BH, 0
        DC8 73H, 0, 0, 0

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??SaveBM??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??SaveBM

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??SaveBM
        ARM
??SaveBM:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        CMP      R4,#+0
        CMPNE    R5,#+0
        POPEQ    {R4-R6,PC}
        LDR      R6,??DataTable6  ;; pathbuf
        LDR      R0,??DataTable5  ;; mcbm_path
        _BLF     ??MCFilePath,??MCFilePath??rA
        MOV      R0,R6
        _BLF     ??mktree,??mktree??rA
        LDR      R2,??SaveBM_1    ;; _ls_ls
        PUSH     {R4}
        CFI CFA R13+20
        MOV      R3,R6
        MOV      R1,#+255
        MOV      R0,R6
        SWI      +277
        MOV      R3,#+0
        MOV      R2,#+255
        ORR      R2,R2,#0x100
        MOV      R1,#+75
        MOV      R0,R6
        SWI      +760
        MOVS     R4,R0
        ADD      SP,SP,#+4
        CFI CFA R13+16
        POPMI    {R4-R6,PC}
        MOV      R0,R5
        SWI      +343
        MOV      R1,#+2
        ADD      R2,R1,R0, LSL #+1
        MOV      R1,R5
        MOV      R0,R4
        SWI      +762
        MOV      R0,R4
        SWI      +765
        POP      {R4-R6,PC}       ;; return
        DATA
??SaveBM_1:
        DC32     _ls_ls
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??UseBM??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??UseBM

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??UseBM
        ARM
??UseBM:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R3,#+0
        MOV      R2,#+255
        ORR      R2,R2,#0x100
        MOV      R1,#+1
        SWI      +760
        MOVS     R4,R0
        POPMI    {R4,PC}
        LDR      R1,??DataTable6  ;; pathbuf
        MOV      R2,#+512
        SWI      +763
        CMP      R0,#+0
        BEQ      ??UseBM_1
        LDR      R0,??UseBM_2     ;; curtab
        LDR      R0,[R0, #+0]
        CMP      R0,#+2
        BLT      ??UseBM_3
        LDR      R0,??UseBM_2+0x4  ;; back_tab
        LDR      R0,[R0, #+0]
        CMP      R0,#+2
        LDRLT    R1,??UseBM_2+0x4  ;; back_tab
        LDR      R0,??UseBM_2     ;; curtab
        LDRLT    R1,[R1, #+0]
        MOVGE    R1,#+0
        STR      R1,[R0, #+0]
??UseBM_3:
        LDR      R0,??DataTable6  ;; pathbuf
        _BLF     ??isdir,??isdir??rA
        CMP      R0,#+0
        BEQ      ??UseBM_1
        LDR      R0,??UseBM_2     ;; curtab
        LDR      R1,??DataTable6  ;; pathbuf
        LDR      R0,[R0, #+0]
        MVN      R2,#+0
        _BLF     ??cd,??cd??rA
??UseBM_1:
        MOV      R0,R4
        SWI      +765
        POP      {R4,PC}          ;; return
        DATA
??UseBM_2:
        DC32     curtab
        DC32     back_tab
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??_AddBM??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??_AddBM

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??_AddBM
        ARM
??_AddBM:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        _BLF     ??_CurFile,??_CurFile??rA
        MOVS     R5,R0
        POPEQ    {R4-R7,PC}
        MOV      R0,#+512
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R6,R0
        MOV      R0,#+512
        _BLF     `??operator new[]`,`??operator new[]??rA`
        LDR      R2,??_AddBM_1    ;; `?<Constant L"\\x25\\x6c\\x73\\x2e\\x25\\x6c\\x73">`
        MOV      R7,R0
        ADD      R0,R2,#+16
        PUSH     {R0}
        CFI CFA R13+24
        MOV      R3,R4
        MOV      R1,#+255
        MOV      R0,R6
        SWI      +277
        LDR      R1,[R5, #+32]
        MOV      R2,#+255
        MOV      R0,R7
        _BLF     ??CurFullPathBM,??CurFullPathBM??rA
        MOV      R1,R7
        MOV      R0,R6
        BL       ??SaveBM
        MOV      R0,R6
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R0,R7
        _BLF     `??operator delete`,`??operator delete??rA`
        ADD      SP,SP,#+4
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??_AddBM_1:
        DC32     `?<Constant L"\\x25\\x6c\\x73\\x2e\\x25\\x6c\\x73">`
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??DoBMAdd??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??DoBMAdd

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??DoBMAdd
        ARM
??DoBMAdd:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        _BLF     ??_CurFile,??_CurFile??rA
        MOVS     R4,R0
        POPEQ    {R4,PC}
        MOV      R0,#+50
        _BLF     ??muitxt,??muitxt??rA
        LDR      R3,??DoBMAdd_1   ;; ??_AddBM
        LDR      R2,[R4, #+32]
        MOV      R1,#+1
        _BLF     ??TextInput,??TextInput??rA
        POP      {R4,PC}          ;; return
        DATA
??DoBMAdd_1:
        DC32     ??_AddBM
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??DoBMList??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??DoBMList

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??DoBMList
        ARM
??DoBMList:
        LDR      R0,??DataTable5  ;; mcbm_path
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R4,??DataTable6  ;; pathbuf
        _BLF     ??MCFilePath,??MCFilePath??rA
        MOV      R0,R4
        _BLF     ??mktree,??mktree??rA
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF      ??cdsys,??cdsys??rA  ;; tailcall
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable5:
        DC32     mcbm_path

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     pathbuf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI NoFunction
        ARM
??MCFilePath??rA:
        LDR      R12,??Subroutine5_0  ;; ??MCFilePath
        BX       R12
        DATA
??Subroutine5_0:
        DC32     ??MCFilePath
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI NoFunction
        ARM
??mktree??rA:
        LDR      R12,??Subroutine6_0  ;; ??mktree
        BX       R12
        DATA
??Subroutine6_0:
        DC32     ??mktree
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI NoFunction
        ARM
??isdir??rA:
        LDR      R12,??Subroutine7_0  ;; ??isdir
        BX       R12
        DATA
??Subroutine7_0:
        DC32     ??isdir
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI NoFunction
        ARM
??cd??rA:
        LDR      R12,??Subroutine8_0  ;; ??cd
        BX       R12
        DATA
??Subroutine8_0:
        DC32     ??cd
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        ARM
??_CurFile??rA:
        LDR      R12,??Subroutine9_0  ;; ??_CurFile
        BX       R12
        DATA
??Subroutine9_0:
        DC32     ??_CurFile
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine10_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine10_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
??CurFullPathBM??rA:
        LDR      R12,??Subroutine11_0  ;; ??CurFullPathBM
        BX       R12
        DATA
??Subroutine11_0:
        DC32     ??CurFullPathBM
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine12_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine12_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
??muitxt??rA:
        LDR      R12,??Subroutine13_0  ;; ??muitxt
        BX       R12
        DATA
??Subroutine13_0:
        DC32     ??muitxt
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        ARM
??TextInput??rA:
        LDR      R12,??Subroutine14_0  ;; ??TextInput
        BX       R12
        DATA
??Subroutine14_0:
        DC32     ??TextInput
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI NoFunction
        ARM
??cdsys??rA:
        LDR      R12,??Subroutine15_0  ;; ??cdsys
        BX       R12
        DATA
??Subroutine15_0:
        DC32     ??cdsys
        CFI EndBlock cfiBlock20

        END
// 
// 676 bytes in segment CODE
//  48 bytes in segment DATA_C
// 
// 524 bytes of CODE  memory (+ 152 bytes shared)
//  48 bytes of CONST memory
//
//Errors: none
//Warnings: none
