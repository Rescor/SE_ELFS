//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:46:18 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\arch.cpp /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\arch.cpp /
//                        -D NDEBUG -D USEZLIB -D OLDFUNCTIONS -lCN          /
//                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcs /
//                       e\Release\List\ -o Z:\home\perk11\www\perk11.info\s /
//                       vn\SE\mcse\Release\Obj\ -s9 --no_unroll             /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h --preinclude Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\mcse\..\deleaker\mem2.h -I                     /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\arch.s79                                       /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME arch

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??ArchiveBufferExtract
        FUNCTION ??ArchiveBufferExtract,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??ArchiveBufferExtract??rT
        PUBLIC ??ArchiveBufferExtractBegin
        FUNCTION ??ArchiveBufferExtractBegin,0203H
        MULTWEAK ??ArchiveBufferExtractBegin??rT
        PUBLIC ??ArchiveBufferExtractEnd
        FUNCTION ??ArchiveBufferExtractEnd,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??ArchiveBufferExtractEnd??rT
        MULTWEAK ??Close7Z??rA
        MULTWEAK ??CloseZip??rA
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable11 EQU 0
??DataTable12 EQU 0
??DataTable13 EQU 0
??DataTable14 EQU 0
??DataTable15 EQU 0
??DataTable16 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??ExtractDir7Z??rA
        MULTWEAK ??ExtractDir??rA
        MULTWEAK ??ExtractFile7Z??rA
        MULTWEAK ??ExtractFile??rA
        PUBLIC ??FreeArchInfo
        FUNCTION ??FreeArchInfo,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??FreeArchInfo??rT
        PUBLIC ??IsArchiveOpened
        FUNCTION ??IsArchiveOpened,0203H
        MULTWEAK ??IsArchiveOpened??rT
        PUBLIC ??IsInArchive
        FUNCTION ??IsInArchive,0203H
        MULTWEAK ??IsInArchive??rT
        MULTWEAK ??Open7ZFile??rA
        MULTWEAK ??OpenZip??rA
        PUBLIC ??ZeroArchiveBuffer
        FUNCTION ??ZeroArchiveBuffer,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??ZeroArchiveBuffer??rT
        MULTWEAK `??operator delete??rA`
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC zi
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        










??ArchiveBufferExtract??rT SYMBOL "??rT", ??ArchiveBufferExtract

??ArchiveBufferExtractBegin??rT SYMBOL "??rT", ??ArchiveBufferExtractBegin

??ArchiveBufferExtractEnd??rT SYMBOL "??rT", ??ArchiveBufferExtractEnd
??Close7Z??rA       SYMBOL "??rA", ??Close7Z
??CloseZip??rA      SYMBOL "??rA", ??CloseZip
??ExtractDir7Z??rA  SYMBOL "??rA", ??ExtractDir7Z
??ExtractDir??rA    SYMBOL "??rA", ??ExtractDir
??ExtractFile7Z??rA SYMBOL "??rA", ??ExtractFile7Z
??ExtractFile??rA   SYMBOL "??rA", ??ExtractFile

??FreeArchInfo??rT  SYMBOL "??rT", ??FreeArchInfo

??IsArchiveOpened??rT SYMBOL "??rT", ??IsArchiveOpened

??IsInArchive??rT   SYMBOL "??rT", ??IsInArchive
??Open7ZFile??rA    SYMBOL "??rA", ??Open7ZFile
??OpenZip??rA       SYMBOL "??rA", ??OpenZip

??ZeroArchiveBuffer??rT SYMBOL "??rT", ??ZeroArchiveBuffer
`??operator delete??rA` SYMBOL "??rA", `??operator delete`

        EXTERN ??Close7Z
        FUNCTION ??Close7Z,0202H
        EXTERN ??CloseZip
        FUNCTION ??CloseZip,0202H
        EXTERN ??ExtractDir
        FUNCTION ??ExtractDir,0202H
        EXTERN ??ExtractDir7Z
        FUNCTION ??ExtractDir7Z,0202H
        EXTERN ??ExtractFile
        FUNCTION ??ExtractFile,0202H
        EXTERN ??ExtractFile7Z
        FUNCTION ??ExtractFile7Z,0202H
        EXTERN ??Open7ZFile
        FUNCTION ??Open7ZFile,0202H
        EXTERN ??OpenZip
        FUNCTION ??OpenZip,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN curtab
        EXTERN tabs


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??FreeArchInfo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??FreeArchInfo

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??FreeArchInfo
        ARM
??FreeArchInfo:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        LDR      R0,[R4, #+1028]
        CMP      R0,#+0
        BEQ      ??FreeArchInfo_1
        LDR      R0,[R4, #+1032]
        MOV      R5,#+0
        CMP      R0,#+1
        BGE      ??FreeArchInfo_2
        B        ??FreeArchInfo_3
??FreeArchInfo_4:
        LDR      R0,[R4, #+1028]
        LDR      R0,[R0, +R5, LSL #+2]
        CMP      R0,#+0
        BEQ      ??FreeArchInfo_5
        LDR      R0,[R4, #+1028]
        LDR      R0,[R0, +R5, LSL #+2]
        _BLF     `??operator delete`,`??operator delete??rA`
??FreeArchInfo_5:
        ADD      R5,R5,#+1
??FreeArchInfo_2:
        LDR      R0,[R4, #+1032]
        CMP      R5,R0
        BLT      ??FreeArchInfo_4
??FreeArchInfo_3:
        LDR      R0,[R4, #+1028]
        _BLF     `??operator delete`,`??operator delete??rA`
??FreeArchInfo_1:
        LDR      R0,[R4, #+1036]
        CMP      R0,#+0
        BEQ      ??FreeArchInfo_6
        _BLF     `??operator delete`,`??operator delete??rA`
??FreeArchInfo_6:
        MOV      R2,#+100
        ORR      R2,R2,#0x400
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +274
        MOV      R0,#+0
        STR      R0,[R4, #+0]
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??IsArchiveOpened??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??IsArchiveOpened

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??IsArchiveOpened
        ARM
??IsArchiveOpened:
        LDR      R1,??DataTable6  ;; tabs
        LDR      R0,[R1, +R0, LSL #+2]
        LDR      R0,[R0, #+2068]
        LDR      R0,[R0, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??IsInArchive??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??IsInArchive

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??IsInArchive
        ARM
??IsInArchive:
        LDR      R0,??IsInArchive_1  ;; curtab
        LDR      R1,??DataTable6  ;; tabs
        LDR      R0,[R0, #+0]
        LDR      R0,[R1, +R0, LSL #+2]
        LDR      R0,[R0, #+2068]
        LDR      R0,[R0, #+0]
        BX       LR               ;; return
        DATA
??IsInArchive_1:
        DC32     curtab
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??ZeroArchiveBuffer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??ZeroArchiveBuffer

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
zi:
        DS8 1124

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??ZeroArchiveBuffer
        ARM
??ZeroArchiveBuffer:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R4,??DataTable17  ;; zi
        MOV      R2,#+100
        ORR      R2,R2,#0x400
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +274
        MOV      R0,#+0
        STR      R0,[R4, #+0]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??ArchiveBufferExtractBegin??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??ArchiveBufferExtractBegin

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??ArchiveBufferExtractBegin
        ARM
??ArchiveBufferExtractBegin:
        BX       LR               ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??ArchiveBufferExtract??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??ArchiveBufferExtract

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??ArchiveBufferExtract
        ARM
??ArchiveBufferExtract:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R4,R0
        LDR      R7,??DataTable17  ;; zi
        MOV      R5,R1
        MOV      R6,R2
        CMP      R5,#+0
        BEQ      ??ArchiveBufferExtract_1
        LDR      R0,[R5, #+16]
        CMP      R0,#+0
        LDRNE    R0,[R5, #+8]
        CMPNE    R0,#+0
        POPEQ    {R4-R8,PC}
        MOV      R8,#+0
??ArchiveBufferExtract_2:
        LDR      R0,??DataTable6  ;; tabs
        LDR      R0,[R0, +R8, LSL #+2]
        LDR      R0,[R0, #+2068]
        LDR      R0,[R0, #+0]
        CMP      R0,R4
        BNE      ??ArchiveBufferExtract_3
        LDR      R0,??DataTable6  ;; tabs
        LDR      R1,[R5, #+16]
        LDR      R0,[R0, +R8, LSL #+2]
        LDR      R0,[R0, #+2068]
        ADD      R0,R0,#+4
        SWI      +671
        CMP      R0,#+0
        BNE      ??ArchiveBufferExtract_3
        LDR      R0,??DataTable6  ;; tabs
        LDR      R0,[R0, +R8, LSL #+2]
        LDR      R7,[R0, #+2068]
        B        ??ArchiveBufferExtract_4
??ArchiveBufferExtract_3:
        ADD      R8,R8,#+1
        CMP      R8,#+2
        BLT      ??ArchiveBufferExtract_2
        LDR      R0,??DataTable17  ;; zi
        LDR      R0,[R0, #+0]
        CMP      R0,#+1
        BNE      ??ArchiveBufferExtract_5
        LDR      R0,??ArchiveBufferExtract_6  ;; zi + 4
        LDR      R1,[R5, #+16]
        SWI      +671
        CMP      R0,#+0
        BEQ      ??ArchiveBufferExtract_5
        LDR      R0,??DataTable17  ;; zi
        _BLF     ??CloseZip,??CloseZip??rA
??ArchiveBufferExtract_5:
        LDR      R0,??DataTable17  ;; zi
        LDR      R0,[R0, #+0]
        CMP      R0,#+2
        BNE      ??ArchiveBufferExtract_7
        LDR      R0,??ArchiveBufferExtract_6  ;; zi + 4
        LDR      R1,[R5, #+16]
        SWI      +671
        CMP      R0,#+0
        BEQ      ??ArchiveBufferExtract_7
        LDR      R0,??DataTable17  ;; zi
        _BLF     ??Close7Z,??Close7Z??rA
??ArchiveBufferExtract_7:
        CMP      R4,#+1
        BNE      ??ArchiveBufferExtract_8
        LDR      R0,??DataTable17  ;; zi
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??ArchiveBufferExtract_4
        LDR      R0,??DataTable17  ;; zi
        LDR      R1,[R5, #+16]
        _BLF     ??OpenZip,??OpenZip??rA
        CMP      R0,#+0
        BEQ      ??ArchiveBufferExtract_4
??ArchiveBufferExtract_1:
        MOV      R0,#+0
        POP      {R4-R8,PC}
??ArchiveBufferExtract_8:
        CMP      R4,#+2
        BNE      ??ArchiveBufferExtract_4
        LDR      R0,??DataTable17  ;; zi
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??ArchiveBufferExtract_4
        LDR      R0,??DataTable17  ;; zi
        LDR      R1,[R5, #+16]
        _BLF     ??Open7ZFile,??Open7ZFile??rA
        CMP      R0,#+0
        BNE      ??ArchiveBufferExtract_1
??ArchiveBufferExtract_4:
        LDR      R0,[R5, #+0]
        CMP      R0,#+2
        BNE      ??ArchiveBufferExtract_9
        LDR      R1,[R5, #+8]
        MOV      R3,#+0
        MOV      R2,R6
        MOV      R0,R7
        _BLF     ??ExtractFile,??ExtractFile??rA
        POP      {R4-R8,PC}
??ArchiveBufferExtract_9:
        CMP      R0,#+3
        BNE      ??ArchiveBufferExtract_10
        LDR      R1,[R5, #+8]
        MOV      R3,#+1
        MOV      R2,R6
        MOV      R0,R7
        _BLF     ??ExtractDir,??ExtractDir??rA
        POP      {R4-R8,PC}
??ArchiveBufferExtract_10:
        CMP      R0,#+4
        BNE      ??ArchiveBufferExtract_11
        LDR      R1,[R5, #+8]
        MOV      R3,#+0
        MOV      R2,R6
        MOV      R0,R7
        _BLF     ??ExtractFile7Z,??ExtractFile7Z??rA
        POP      {R4-R8,PC}
??ArchiveBufferExtract_11:
        CMP      R0,#+5
        BNE      ??ArchiveBufferExtract_1
        LDR      R1,[R5, #+8]
        MOV      R3,#+1
        MOV      R2,R6
        MOV      R0,R7
        _BLF     ??ExtractDir7Z,??ExtractDir7Z??rA
        POP      {R4-R8,PC}       ;; return
        DATA
??ArchiveBufferExtract_6:
        DC32     zi + 4
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     tabs

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??ArchiveBufferExtractEnd??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??ArchiveBufferExtractEnd

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??ArchiveBufferExtractEnd
        ARM
??ArchiveBufferExtractEnd:
        LDR      R0,??DataTable17  ;; zi
        LDR      R0,[R0, #+0]
        CMP      R0,#+1
        LDR      R0,??DataTable17  ;; zi
        BNE      ??ArchiveBufferExtractEnd_1
        _BF      ??CloseZip,??CloseZip??rA  ;; tailcall
??ArchiveBufferExtractEnd_1:
        LDR      R0,[R0, #+0]
        CMP      R0,#+2
        BXNE     LR
        LDR      R0,??DataTable17  ;; zi
        _BF      ??Close7Z,??Close7Z??rA  ;; tailcall
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable17:
        DC32     zi

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine7_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine7_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        ARM
??CloseZip??rA:
        LDR      R12,??Subroutine8_0  ;; ??CloseZip
        BX       R12
        DATA
??Subroutine8_0:
        DC32     ??CloseZip
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
??Close7Z??rA:
        LDR      R12,??Subroutine9_0  ;; ??Close7Z
        BX       R12
        DATA
??Subroutine9_0:
        DC32     ??Close7Z
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
??OpenZip??rA:
        LDR      R12,??Subroutine10_0  ;; ??OpenZip
        BX       R12
        DATA
??Subroutine10_0:
        DC32     ??OpenZip
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
??Open7ZFile??rA:
        LDR      R12,??Subroutine11_0  ;; ??Open7ZFile
        BX       R12
        DATA
??Subroutine11_0:
        DC32     ??Open7ZFile
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        ARM
??ExtractFile??rA:
        LDR      R12,??Subroutine12_0  ;; ??ExtractFile
        BX       R12
        DATA
??Subroutine12_0:
        DC32     ??ExtractFile
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI NoFunction
        ARM
??ExtractDir??rA:
        LDR      R12,??Subroutine13_0  ;; ??ExtractDir
        BX       R12
        DATA
??Subroutine13_0:
        DC32     ??ExtractDir
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI NoFunction
        ARM
??ExtractFile7Z??rA:
        LDR      R12,??Subroutine14_0  ;; ??ExtractFile7Z
        BX       R12
        DATA
??Subroutine14_0:
        DC32     ??ExtractFile7Z
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
??ExtractDir7Z??rA:
        LDR      R12,??Subroutine15_0  ;; ??ExtractDir7Z
        BX       R12
        DATA
??Subroutine15_0:
        DC32     ??ExtractDir7Z
        CFI EndBlock cfiBlock22

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
//   880 bytes in segment CODE
// 1 124 bytes in segment DATA_Z
//    12 bytes in segment INITTAB
// 
//   744 bytes of CODE memory (+ 148 bytes shared)
// 1 124 bytes of DATA memory
//
//Errors: none
//Warnings: none
