//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:46:08 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\FileOP.c /
//                       pp                                                  /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\FileOP.c /
//                       pp -D NDEBUG -D USEZLIB -D OLDFUNCTIONS -lCN        /
//                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcs /
//                       e\Release\List\ -o Z:\home\perk11\www\perk11.info\s /
//                       vn\SE\mcse\Release\Obj\ -s9 --no_unroll             /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h --preinclude Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\mcse\..\deleaker\mem2.h -I                     /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\FileOP.s79                                     /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME FileOP

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        MULTWEAK ??ArchiveBufferExtract??rA
        MULTWEAK ??ArchiveBufferExtractBegin??rA
        MULTWEAK ??ArchiveBufferExtractEnd??rA
        MULTWEAK ??CurFullPath??rA
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable11 EQU 0
??DataTable12 EQU 0
??DataTable13 EQU 0
??DataTable14 EQU 0
??DataTable15 EQU 0
??DataTable16 EQU 0
??DataTable17 EQU 0
??DataTable18 EQU 0
??DataTable19 EQU 0
??DataTable2 EQU 0
??DataTable20 EQU 0
??DataTable21 EQU 0
??DataTable22 EQU 0
??DataTable23 EQU 0
??DataTable25 EQU 0
??DataTable26 EQU 0
??DataTable27 EQU 0
??DataTable28 EQU 0
??DataTable3 EQU 0
??DataTable30 EQU 0
??DataTable31 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??DoRefresh??rA
        MULTWEAK ??EnumSel??rA
        MULTWEAK ??GetCurTabFileIndex??rA
        MULTWEAK ??GetFileName??rA
        MULTWEAK ??GetFilesCnt??rA
        MULTWEAK ??IsArchiveOpened??rA
        MULTWEAK ??IsInArchive??rA
        PUBLIC ??M_Delit
        FUNCTION ??M_Delit,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??M_Delit??rT
        PUBLIC ??M_FileCnt
        FUNCTION ??M_FileCnt,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??M_FileCnt??rT
        PUBLIC ??M_MoveCopy
        FUNCTION ??M_MoveCopy,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??M_MoveCopy??rT
        MULTWEAK ??MsgBoxError??rA
        MULTWEAK ??MsgBoxError??rA_1
        PUBLIC ??MsgBoxErrorMmi
        FUNCTION ??MsgBoxErrorMmi,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??MsgBoxErrorMmi??rT
        PUBLIC ??S_Delit
        FUNCTION ??S_Delit,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??S_Delit??rT
        PUBLIC ??S_Paste
        FUNCTION ??S_Paste,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??S_Paste??rT
        MULTWEAK ??SetCurTabIndex??rA
        MULTWEAK ??SetTabDrv??rA
        MULTWEAK ??SetTabIndex??rA
        MULTWEAK ??UpdateAll??rA
        PUBLIC ??_NewDir
        FUNCTION ??_NewDir,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??_NewDir??rT
        MULTWEAK ??_cd_tab??rA
        PUBLIC ??cd
        FUNCTION ??cd,0203H
        LOCFRAME CSTACK, 572, STACK
        MULTWEAK ??cd??rT
        PUBLIC ??cdsys
        FUNCTION ??cdsys,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??cdsys??rT
        MULTWEAK ??endprogr??rA
        MULTWEAK ??fn_add??rA
        MULTWEAK ??fn_free??rA
        MULTWEAK ??fscp??rA
        MULTWEAK ??fsmv??rA
        MULTWEAK ??fsrm??rA
        MULTWEAK ??incprogr??rA
        MULTWEAK ??initprogr??rA
        PUBLIC ??isDir
        FUNCTION ??isDir,0203H
        LOCFRAME CSTACK, 48, STACK
        MULTWEAK ??isDir??rT
        PUBLIC ??isdir
        FUNCTION ??isdir,0203H
        LOCFRAME CSTACK, 44, STACK
        MULTWEAK ??isdir??rT
        MULTWEAK ??muitxt??rA
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC buffer
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        



























??ArchiveBufferExtract??rA SYMBOL "??rA", ??ArchiveBufferExtract
??ArchiveBufferExtractBegin??rA SYMBOL "??rA", ??ArchiveBufferExtractBegin
??ArchiveBufferExtractEnd??rA SYMBOL "??rA", ??ArchiveBufferExtractEnd
??CurFullPath??rA   SYMBOL "??rA", ??CurFullPath
??DoRefresh??rA     SYMBOL "??rA", ??DoRefresh
??EnumSel??rA       SYMBOL "??rA", ??EnumSel
??GetCurTabFileIndex??rA SYMBOL "??rA", ??GetCurTabFileIndex
??GetFileName??rA   SYMBOL "??rA", ??GetFileName
??GetFilesCnt??rA   SYMBOL "??rA", ??GetFilesCnt
??IsArchiveOpened??rA SYMBOL "??rA", ??IsArchiveOpened
??IsInArchive??rA   SYMBOL "??rA", ??IsInArchive

??M_Delit??rT       SYMBOL "??rT", ??M_Delit

??M_FileCnt??rT     SYMBOL "??rT", ??M_FileCnt

??M_MoveCopy??rT    SYMBOL "??rT", ??M_MoveCopy
??MsgBoxError??rA   SYMBOL "??rA", ??MsgBoxError
??MsgBoxError??rA_1 SYMBOL "??rA", ??MsgBoxError_1

??MsgBoxErrorMmi??rT SYMBOL "??rT", ??MsgBoxErrorMmi

??S_Delit??rT       SYMBOL "??rT", ??S_Delit

??S_Paste??rT       SYMBOL "??rT", ??S_Paste
??SetCurTabIndex??rA SYMBOL "??rA", ??SetCurTabIndex
??SetTabDrv??rA     SYMBOL "??rA", ??SetTabDrv
??SetTabIndex??rA   SYMBOL "??rA", ??SetTabIndex
??UpdateAll??rA     SYMBOL "??rA", ??UpdateAll

??_NewDir??rT       SYMBOL "??rT", ??_NewDir
??_cd_tab??rA       SYMBOL "??rA", ??_cd_tab

??cd??rT            SYMBOL "??rT", ??cd

??cdsys??rT         SYMBOL "??rT", ??cdsys
??endprogr??rA      SYMBOL "??rA", ??endprogr
??fn_add??rA        SYMBOL "??rA", ??fn_add
??fn_free??rA       SYMBOL "??rA", ??fn_free
??fscp??rA          SYMBOL "??rA", ??fscp
??fsmv??rA          SYMBOL "??rA", ??fsmv
??fsrm??rA          SYMBOL "??rA", ??fsrm
??incprogr??rA      SYMBOL "??rA", ??incprogr
??initprogr??rA     SYMBOL "??rA", ??initprogr

??isDir??rT         SYMBOL "??rT", ??isDir

??isdir??rT         SYMBOL "??rT", ??isdir
??muitxt??rA        SYMBOL "??rA", ??muitxt

        EXTERN ??ArchiveBufferExtract
        FUNCTION ??ArchiveBufferExtract,0202H
        EXTERN ??ArchiveBufferExtractBegin
        FUNCTION ??ArchiveBufferExtractBegin,0202H
        EXTERN ??ArchiveBufferExtractEnd
        FUNCTION ??ArchiveBufferExtractEnd,0202H
        EXTERN ??CurFullPath
        FUNCTION ??CurFullPath,0202H
        EXTERN ??DoRefresh
        FUNCTION ??DoRefresh,0202H
        EXTERN ??EnumSel
        FUNCTION ??EnumSel,0202H
        EXTERN ??GetCurTabFileIndex
        FUNCTION ??GetCurTabFileIndex,0202H
        EXTERN ??GetFileName
        FUNCTION ??GetFileName,0202H
        EXTERN ??GetFilesCnt
        FUNCTION ??GetFilesCnt,0202H
        EXTERN ??IsArchiveOpened
        FUNCTION ??IsArchiveOpened,0202H
        EXTERN ??IsInArchive
        FUNCTION ??IsInArchive,0202H
        EXTERN ??MsgBoxError
        FUNCTION ??MsgBoxError,0202H
        EXTERN ??MsgBoxError_1
        FUNCTION ??MsgBoxError_1,0202H
        EXTERN ??SetCurTabIndex
        FUNCTION ??SetCurTabIndex,0202H
        EXTERN ??SetTabDrv
        FUNCTION ??SetTabDrv,0202H
        EXTERN ??SetTabIndex
        FUNCTION ??SetTabIndex,0202H
        EXTERN ??UpdateAll
        FUNCTION ??UpdateAll,0202H
        EXTERN ??_cd_tab
        FUNCTION ??_cd_tab,0202H
        EXTERN ??endprogr
        FUNCTION ??endprogr,0202H
        EXTERN ??fn_add
        FUNCTION ??fn_add,0202H
        EXTERN ??fn_free
        FUNCTION ??fn_free,0202H
        EXTERN ??fscp
        FUNCTION ??fscp,0202H
        EXTERN ??fsmv
        FUNCTION ??fsmv,0202H
        EXTERN ??fsrm
        FUNCTION ??fsrm,0202H
        EXTERN ??incprogr
        FUNCTION ??incprogr,0202H
        EXTERN ??initprogr
        FUNCTION ??initprogr,0202H
        EXTERN ??muitxt
        FUNCTION ??muitxt,0202H
        EXTERN Busy
        EXTERN Drives
        EXTERN _ls_ls
        EXTERN back_tab
        EXTERN curtab
        EXTERN pathbuf
        EXTERN progr_act
        EXTERN progr_max
        EXTERN progr_stop
        EXTERN szLastNewDir
        EXTERN tabs


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??isdir??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??isdir

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??isdir
        ARM
??isdir:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+40
        CFI CFA R13+44
        MOV      R1,SP
        SWI      +761
        LDR      R0,[SP, #+0]
        ADD      SP,SP,#+40
        CFI CFA R13+4
        AND      R0,R0,#0x4000
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??isDir??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??isDir

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??isDir
        ARM
??isDir:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+40
        CFI CFA R13+48
        MOV      R4,R1
        _BLF     ??IsArchiveOpened,??IsArchiveOpened??rA
        CMP      R0,#+0
        MOVNE    R0,#+1
        BNE      ??isDir_1
        MOV      R1,SP
        MOV      R0,R4
        SWI      +761
        LDR      R0,[SP, #+0]
        AND      R0,R0,#0x4000
??isDir_1:
        ADD      SP,SP,#+40       ;; stack cleaning
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??MsgBoxErrorMmi??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??MsgBoxErrorMmi

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??MsgBoxErrorMmi
        ARM
??MsgBoxErrorMmi:
        _BF      ??MsgBoxError,??MsgBoxError??rA  ;; tailcall
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??cd??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??cd

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??cd
        ARM
??cd:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+552
        CFI CFA R13+572
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
        _BLF     ??IsArchiveOpened,??IsArchiveOpened??rA
        CMP      R0,#+0
        BEQ      ??cd_1
        LDR      R0,??DataTable32  ;; curtab
        LDR      R1,??DataTable33  ;; tabs
        LDR      R0,[R0, #+0]
        LDR      R0,[R1, +R0, LSL #+2]
        LDRSH    R6,[R0, #+4]
??cd_2:
        MOV      R2,R5
        MOV      R0,R4
        MOV      R1,R6
        _BLF     ??_cd_tab,??_cd_tab??rA
        MOV      R1,R6
        MOV      R0,R4
        _BLF     ??SetTabDrv,??SetTabDrv??rA
        MOVS     R5,R0
        BNE      ??cd_3
        MOV      R2,#+0
        MOV      R1,#+0
        MOV      R0,R4
        _BLF     ??SetTabIndex,??SetTabIndex??rA
??cd_3:
        MOV      R0,R5
        ADD      SP,SP,#+552
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        CFI CFA R13+572
??cd_1:
        MOV      R1,R5
        MOV      R0,R4
        BL       ??isDir
        CMP      R0,#+0
        BNE      ??cd_4
        LDR      R2,??cd_5        ;; `?<Constant L"\\x25\\x6c\\x73\\x5c">`
        MOV      R3,R5
        MOV      R1,#+255
        MOV      R0,SP
        SWI      +277
        ADD      R1,SP,#+512
        MOV      R0,SP
        SWI      +761
        LDR      R0,[SP, #+512]
        TST      R0,#0x4000
        BNE      ??cd_4
        MOV      R1,R5
        MOV      R0,#+80
??cd_6:
        _BLF     ??MsgBoxError_1,??MsgBoxError??rA_1
        MOV      R0,#+0
        ADD      SP,SP,#+552
        CFI CFA R13+20
        POP      {R4-R7,PC}
        CFI CFA R13+572
??cd_4:
        CMN      R6,#+1
        BNE      ??cd_7
        MOV      R6,#+0
        B        ??cd_8
??cd_9:
        ADD      R6,R6,#+1
        CMP      R6,#+3
        BGE      ??cd_10
??cd_8:
        LDR      R1,??cd_5+0x4    ;; Drives
        MOV      R0,#+24
        MLA      R7,R0,R6,R1
        LDR      R0,[R7, #+0]
        SWI      +343
        MOV      R2,R0
        LDR      R0,[R7, #+0]
        MOV      R1,R5
        SWI      +666
        CMP      R0,#+0
        BNE      ??cd_9
??cd_7:
        CMN      R6,#+1
        BNE      ??cd_2
??cd_10:
        MOV      R1,R5
        MOV      R0,#+81
        B        ??cd_6
        DATA
??cd_5:
        DC32     `?<Constant L"\\x25\\x6c\\x73\\x5c">`
        DC32     Drives
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??cdsys??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??cdsys

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??cdsys
        ARM
??cdsys:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MVN      R2,#+0
        MOV      R1,R0
        MOV      R0,#+2
        BL       ??cd
        CMP      R0,#+0
        POPEQ    {PC}
        LDR      R0,??DataTable32  ;; curtab
        LDR      R1,??cdsys_1     ;; back_tab
        LDR      R2,[R0, #+0]
        STR      R2,[R1, #+0]
        MOV      R1,#+2
        STR      R1,[R0, #+0]
        MOV      R0,#+1
        POP      {PC}             ;; return
        DATA
??cdsys_1:
        DC32     back_tab
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??_NewDir??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??_NewDir

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??_NewDir
        ARM
??_NewDir:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R2,#+256
        MOV      R4,R0
        LDR      R0,??_NewDir_1   ;; szLastNewDir
        MOV      R1,R4
        SWI      +339
        MOV      R0,R4
        _BLF     ??CurFullPath,??CurFullPath??rA
        LDR      R0,??DataTable29  ;; pathbuf
        MOV      R1,#+255
        ORR      R1,R1,#0x100
        SWI      +766
        CMP      R0,#+0
        BEQ      ??_NewDir_2
        MOV      R0,#+77
        _BLF     ??muitxt,??muitxt??rA
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF      ??MsgBoxError,??MsgBoxError??rA  ;; tailcall
        CFI R4 Frame(CFA, -8)
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+8
??_NewDir_2:
        _BLF     ??DoRefresh,??DoRefresh??rA
        MOV      R0,R4
        _BLF     ??GetCurTabFileIndex,??GetCurTabFileIndex??rA
        MOV      R1,#+0
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF      ??SetCurTabIndex,??SetCurTabIndex??rA  ;; tailcall
        DATA
??_NewDir_1:
        DC32     szLastNewDir
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??M_Delit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??M_Delit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??M_Delit
        ARM
??M_Delit:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        CMP      R4,#+0
        MOV      R5,R1
        BEQ      ??M_Delit_1
        LDR      R0,[R4, #+32]
        SWI      +343
        CMP      R0,#+0
        POPEQ    {R4,R5,PC}
        LDR      R0,[R4, #+32]
        _BLF     ??CurFullPath,??CurFullPath??rA
        LDR      R0,??DataTable29  ;; pathbuf
        MOV      R1,#+1
        _BLF     ??fsrm,??fsrm??rA
        CMP      R0,#+0
        STREQ    R0,[R5, #+0]
        MOV      R0,#+1
        POP      {R4,R5,PC}
??M_Delit_1:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??M_FileCnt??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??M_FileCnt

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??M_FileCnt
        ARM
??M_FileCnt:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        CMP      R0,#+0
        MOV      R4,R1
        POPEQ    {R4,R5,PC}
        LDR      R0,[R0, #+32]
        _BLF     ??CurFullPath,??CurFullPath??rA
        LDR      R5,[R4, #+0]
        LDR      R0,??DataTable29  ;; pathbuf
        _BLF     ??GetFilesCnt,??GetFilesCnt??rA
        ADD      R0,R0,R5
        STR      R0,[R4, #+0]
        MOV      R0,#+1
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??S_Delit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??S_Delit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??S_Delit
        ARM
??S_Delit:
        LDR      R0,??DataTable32  ;; curtab
        LDR      R1,??DataTable33  ;; tabs
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+4
        CFI CFA R13+12
        LDR      R0,[R0, #+0]
        LDR      R0,[R1, +R0, LSL #+2]
        LDRSH    R1,[R0, #+4]
        ADD      R0,R0,R1, LSL #+1
        LDRSH    R0,[R0, #+6]
        CMP      R0,#+0
        POPMI    {R0,R4,PC}
        LDR      R0,??DataTable35  ;; Busy
        MOV      R1,#+1
        STR      R1,[R0, #+0]
        STR      R1,[SP, #+0]
        MOV      R0,#+11
        _BLF     ??initprogr,??initprogr??rA
        LDR      R1,??DataTable24  ;; progr_max
        LDR      R0,??S_Delit_1   ;; ??M_FileCnt
        _BLF     ??EnumSel,??EnumSel??rA
        MOV      R0,#+0
        _BLF     ??incprogr,??incprogr??rA
        LDR      R0,??DataTable32  ;; curtab
        LDR      R1,??DataTable33  ;; tabs
        LDR      R0,[R0, #+0]
        LDR      R0,[R1, +R0, LSL #+2]
        LDRSH    R1,[R0, #+4]
        ADD      R0,R0,R1, LSL #+1
        LDRSH    R4,[R0, #+6]
        LDR      R0,??S_Delit_1+0x4  ;; ??M_Delit
        MOV      R1,SP
        _BLF     ??EnumSel,??EnumSel??rA
        LDR      R0,[SP, #+0]
        CMP      R0,#+0
        BNE      ??S_Delit_2
        MOV      R0,#+79
        _BLF     ??muitxt,??muitxt??rA
        _BLF     ??MsgBoxError,??MsgBoxError??rA
        B        ??S_Delit_3
??S_Delit_2:
        LDR      R0,??DataTable32  ;; curtab
        LDR      R1,??DataTable33  ;; tabs
        LDR      R0,[R0, #+0]
        LDR      R0,[R1, +R0, LSL #+2]
        LDRSH    R0,[R0, #+0]
        CMP      R4,R0
        BGE      ??S_Delit_3
        MOV      R1,#+0
        ADD      R0,R4,#+1
        _BLF     ??SetCurTabIndex,??SetCurTabIndex??rA
??S_Delit_3:
        _BLF     ??DoRefresh,??DoRefresh??rA
        _BLF     ??endprogr,??endprogr??rA
        LDR      R0,??DataTable35  ;; Busy
        MOV      R1,#+0
        STR      R1,[R0, #+0]
        POP      {R0,R4,PC}       ;; return
        DATA
??S_Delit_1:
        DC32     ??M_FileCnt
        DC32     ??M_Delit
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??M_MoveCopy??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??M_MoveCopy

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??M_MoveCopy
        ARM
??M_MoveCopy:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        CMP      R4,#+0
        BEQ      ??M_MoveCopy_1
        LDR      R0,[R4, #+32]
        SWI      +343
        CMP      R0,#+0
        POPEQ    {R4-R6,PC}
        LDR      R0,??DataTable32  ;; curtab
        LDR      R1,??DataTable33  ;; tabs
        LDR      R0,[R0, #+0]
        LDR      R0,[R1, +R0, LSL #+2]
        LDRSH    R1,[R0, #+4]
        ADD      R0,R0,R1, LSL #+9
        ADD      R0,R0,#+18
        SWI      +343
        ADD      R6,R0,#+1
        LDR      R0,[R4, #+32]
        _BLF     ??CurFullPath,??CurFullPath??rA
        _BLF     ??IsInArchive,??IsInArchive??rA
        CMP      R0,#+0
        BEQ      ??M_MoveCopy_2
        LDR      R0,??DataTable32  ;; curtab
        LDR      R1,??DataTable33  ;; tabs
        LDR      R0,[R0, #+0]
        LDR      R0,[R1, +R0, LSL #+2]
        LDR      R0,[R0, #+2068]
        ADD      R0,R0,#+4
??M_MoveCopy_2:
        PUSH     {R0}
        CFI CFA R13+20
        LDR      R0,??DataTable29  ;; pathbuf
        MOV      R3,R6
        PUSH     {R0}
        CFI CFA R13+24
        LDR      R2,[R4, #+4]
        LDR      R0,??DataTable34  ;; buffer
        MOV      R1,R5
        _BLF     ??fn_add,??fn_add??rA
        MOV      R0,#+1
        ADD      SP,SP,#+8
        CFI CFA R13+16
        POP      {R4-R6,PC}
??M_MoveCopy_1:
        MOV      R0,#+0
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??S_Paste??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ??S_Paste

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
buffer:
        DS8 12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ??S_Paste
        ARM
??S_Paste:
        LDR      R0,??DataTable34  ;; buffer
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??S_Paste_1
        LDR      R0,??DataTable35  ;; Busy
        MOV      R1,#+1
        STR      R1,[R0, #+0]
        LDR      R0,??S_Paste_2   ;; buffer + 4
        MOV      R4,#+1
        LDR      R0,[R0, #+0]
        CMP      R0,#+2
        LDREQ    R0,??S_Paste_2+0x4  ;; progr_act
        MOVEQ    R1,#+10
        BEQ      ??S_Paste_3
        LDR      R0,??S_Paste_2   ;; buffer + 4
        LDR      R0,[R0, #+0]
        CMP      R0,#+1
        BNE      ??S_Paste_4
        LDR      R0,??S_Paste_2+0x4  ;; progr_act
        MOV      R1,#+9
??S_Paste_3:
        STR      R1,[R0, #+0]
??S_Paste_4:
        LDR      R0,??S_Paste_2+0x4  ;; progr_act
        LDR      R0,[R0, #+0]
        _BLF     ??initprogr,??initprogr??rA
        LDR      R0,??S_Paste_2+0x8  ;; buffer + 8
        LDR      R6,[R0, #+0]
        MOVS     R5,R6
        BEQ      ??S_Paste_5
??S_Paste_6:
        LDR      R0,[R6, #+0]
        CMP      R0,#+1
        CMPNE    R0,#+0
        BNE      ??S_Paste_7
        LDR      R0,[R6, #+8]
        _BLF     ??GetFilesCnt,??GetFilesCnt??rA
        LDR      R1,??DataTable24  ;; progr_max
        LDR      R2,[R1, #+0]
        ADD      R0,R0,R2
        B        ??S_Paste_8
??S_Paste_7:
        LDR      R1,??DataTable24  ;; progr_max
        LDR      R0,[R1, #+0]
        ADD      R0,R0,#+1
??S_Paste_8:
        STR      R0,[R1, #+0]
        MOV      R5,R6
        LDR      R6,[R6, #+12]
        CMP      R6,#+0
        BNE      ??S_Paste_6
??S_Paste_5:
        MOV      R0,#+0
        _BLF     ??incprogr,??incprogr??rA
        LDR      R0,??S_Paste_2+0x8  ;; buffer + 8
        LDR      R6,[R0, #+0]
        _BLF     ??ArchiveBufferExtractBegin,??ArchiveBufferExtractBegin??rA
        B        ??S_Paste_9
??S_Paste_10:
        AND      R4,R0,R4
??S_Paste_11:
        LDR      R6,[R6, #+12]
??S_Paste_9:
        CMP      R6,#+0
        BEQ      ??S_Paste_12
        LDR      R0,??S_Paste_2+0xC  ;; progr_stop
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??S_Paste_12
        LDR      R0,[R6, #+0]
        CMP      R0,#+1
        CMPNE    R0,#+0
        BNE      ??S_Paste_13
        LDR      R0,??DataTable32  ;; curtab
        LDR      R1,??DataTable33  ;; tabs
        LDR      R0,[R0, #+0]
        LDR      R2,[R6, #+8]
        ADD      R0,R1,R0, LSL #+2
        LDR      R1,[R6, #+4]
        LDR      R0,[R0, #+0]
        ADD      R1,R2,R1, LSL #+1
        LDR      R2,??S_Paste_2+0x10  ;; _ls_ls
        PUSH     {R1}
        CFI CFA R13+20
        LDRSH    R1,[R0, #+4]
        ADD      R0,R0,R1, LSL #+9
        ADD      R3,R0,#+18
        LDR      R0,??DataTable29  ;; pathbuf
        MOV      R1,#+255
        SWI      +277
        LDR      R0,??S_Paste_2   ;; buffer + 4
        LDR      R0,[R0, #+0]
        ADD      SP,SP,#+4
        CFI CFA R13+16
        CMP      R0,#+2
        BNE      ??S_Paste_14
        LDR      R0,??S_Paste_2+0x4  ;; progr_act
        MOV      R1,#+10
        STR      R1,[R0, #+0]
        LDR      R1,??DataTable29  ;; pathbuf
        LDR      R0,[R6, #+8]
        _BLF     ??fsmv,??fsmv??rA
        B        ??S_Paste_10
??S_Paste_14:
        LDR      R0,??S_Paste_2   ;; buffer + 4
        LDR      R0,[R0, #+0]
        CMP      R0,#+1
        BNE      ??S_Paste_11
        LDR      R0,??S_Paste_2+0x4  ;; progr_act
        MOV      R1,#+9
        STR      R1,[R0, #+0]
        LDR      R1,??DataTable29  ;; pathbuf
        LDR      R0,[R6, #+8]
        MOV      R2,#+1
        _BLF     ??fscp,??fscp??rA
        B        ??S_Paste_10
??S_Paste_13:
        CMP      R0,#+2
        CMPNE    R0,#+3
        BNE      ??S_Paste_15
        LDR      R0,??S_Paste_2   ;; buffer + 4
        LDR      R0,[R0, #+0]
        CMP      R0,#+1
        BNE      ??S_Paste_11
        LDR      R0,??DataTable32  ;; curtab
        LDR      R1,??DataTable33  ;; tabs
        LDR      R0,[R0, #+0]
        ADD      R0,R1,R0, LSL #+2
        LDR      R0,[R0, #+0]
        LDRSH    R1,[R0, #+4]
        ADD      R0,R0,R1, LSL #+9
        ADD      R2,R0,#+18
        MOV      R1,R6
        MOV      R0,#+1
??S_Paste_16:
        _BLF     ??ArchiveBufferExtract,??ArchiveBufferExtract??rA
        CMP      R0,#+0
        MOVNE    R0,#+0
        MOVEQ    R0,#+1
        B        ??S_Paste_10
??S_Paste_15:
        CMP      R0,#+4
        CMPNE    R0,#+5
        BNE      ??S_Paste_11
        LDR      R0,??S_Paste_2   ;; buffer + 4
        LDR      R0,[R0, #+0]
        CMP      R0,#+1
        BNE      ??S_Paste_11
        LDR      R0,??DataTable32  ;; curtab
        LDR      R1,??DataTable33  ;; tabs
        LDR      R0,[R0, #+0]
        ADD      R0,R1,R0, LSL #+2
        LDR      R0,[R0, #+0]
        LDRSH    R1,[R0, #+4]
        ADD      R0,R0,R1, LSL #+9
        ADD      R2,R0,#+18
        MOV      R1,R6
        MOV      R0,#+2
        B        ??S_Paste_16
??S_Paste_12:
        _BLF     ??ArchiveBufferExtractEnd,??ArchiveBufferExtractEnd??rA
        CMP      R4,#+0
        BNE      ??S_Paste_17
        MOV      R0,#+82
        _BLF     ??muitxt,??muitxt??rA
        MOV      R1,R0
        LDR      R0,??S_Paste_2+0x14  ;; ??MsgBoxErrorMmi
        SWI      +265
??S_Paste_17:
        _BLF     ??UpdateAll,??UpdateAll??rA
        LDR      R0,[R5, #+8]
        _BLF     ??GetFileName,??GetFileName??rA
        _BLF     ??GetCurTabFileIndex,??GetCurTabFileIndex??rA
        MOV      R1,#+0
        _BLF     ??SetCurTabIndex,??SetCurTabIndex??rA
        LDR      R0,??DataTable34  ;; buffer
        _BLF     ??fn_free,??fn_free??rA
        _BLF     ??endprogr,??endprogr??rA
        LDR      R0,??DataTable35  ;; Busy
        MOV      R1,#+0
        STR      R1,[R0, #+0]
        POP      {R4-R6,PC}
??S_Paste_1:
        MOV      R0,#+83
        _BLF     ??muitxt,??muitxt??rA
        MOV      R1,R0
        LDR      R0,??S_Paste_2+0x14  ;; ??MsgBoxErrorMmi
        SWI      +265
        POP      {R4-R6,PC}       ;; return
        DATA
??S_Paste_2:
        DC32     buffer + 4
        DC32     progr_act
        DC32     buffer + 8
        DC32     progr_stop
        DC32     _ls_ls
        DC32     ??MsgBoxErrorMmi
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable24:
        DC32     progr_max

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable29:
        DC32     pathbuf

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable32:
        DC32     curtab

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable33:
        DC32     tabs

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable34:
        DC32     buffer

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable35:
        DC32     Busy

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
??IsArchiveOpened??rA:
        LDR      R12,??Subroutine11_0  ;; ??IsArchiveOpened
        BX       R12
        DATA
??Subroutine11_0:
        DC32     ??IsArchiveOpened
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI NoFunction
        ARM
??MsgBoxError??rA:
        LDR      R12,??Subroutine12_0  ;; ??MsgBoxError
        BX       R12
        DATA
??Subroutine12_0:
        DC32     ??MsgBoxError
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI NoFunction
        ARM
??_cd_tab??rA:
        LDR      R12,??Subroutine13_0  ;; ??_cd_tab
        BX       R12
        DATA
??Subroutine13_0:
        DC32     ??_cd_tab
        CFI EndBlock cfiBlock24

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI NoFunction
        ARM
??SetTabDrv??rA:
        LDR      R12,??Subroutine14_0  ;; ??SetTabDrv
        BX       R12
        DATA
??Subroutine14_0:
        DC32     ??SetTabDrv
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon1
        CFI NoFunction
        ARM
??SetTabIndex??rA:
        LDR      R12,??Subroutine15_0  ;; ??SetTabIndex
        BX       R12
        DATA
??Subroutine15_0:
        DC32     ??SetTabIndex
        CFI EndBlock cfiBlock26

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI NoFunction
        ARM
??MsgBoxError??rA_1:
        LDR      R12,??Subroutine16_0  ;; ??MsgBoxError_1
        BX       R12
        DATA
??Subroutine16_0:
        DC32     ??MsgBoxError_1
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon1
        CFI NoFunction
        ARM
??CurFullPath??rA:
        LDR      R12,??Subroutine17_0  ;; ??CurFullPath
        BX       R12
        DATA
??Subroutine17_0:
        DC32     ??CurFullPath
        CFI EndBlock cfiBlock28

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI NoFunction
        ARM
??muitxt??rA:
        LDR      R12,??Subroutine18_0  ;; ??muitxt
        BX       R12
        DATA
??Subroutine18_0:
        DC32     ??muitxt
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon1
        CFI NoFunction
        ARM
??DoRefresh??rA:
        LDR      R12,??Subroutine19_0  ;; ??DoRefresh
        BX       R12
        DATA
??Subroutine19_0:
        DC32     ??DoRefresh
        CFI EndBlock cfiBlock30

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI NoFunction
        ARM
??GetCurTabFileIndex??rA:
        LDR      R12,??Subroutine20_0  ;; ??GetCurTabFileIndex
        BX       R12
        DATA
??Subroutine20_0:
        DC32     ??GetCurTabFileIndex
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon1
        CFI NoFunction
        ARM
??SetCurTabIndex??rA:
        LDR      R12,??Subroutine21_0  ;; ??SetCurTabIndex
        BX       R12
        DATA
??Subroutine21_0:
        DC32     ??SetCurTabIndex
        CFI EndBlock cfiBlock32

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI NoFunction
        ARM
??fsrm??rA:
        LDR      R12,??Subroutine22_0  ;; ??fsrm
        BX       R12
        DATA
??Subroutine22_0:
        DC32     ??fsrm
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon1
        CFI NoFunction
        ARM
??GetFilesCnt??rA:
        LDR      R12,??Subroutine23_0  ;; ??GetFilesCnt
        BX       R12
        DATA
??Subroutine23_0:
        DC32     ??GetFilesCnt
        CFI EndBlock cfiBlock34

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI NoFunction
        ARM
??initprogr??rA:
        LDR      R12,??Subroutine24_0  ;; ??initprogr
        BX       R12
        DATA
??Subroutine24_0:
        DC32     ??initprogr
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon1
        CFI NoFunction
        ARM
??EnumSel??rA:
        LDR      R12,??Subroutine25_0  ;; ??EnumSel
        BX       R12
        DATA
??Subroutine25_0:
        DC32     ??EnumSel
        CFI EndBlock cfiBlock36

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI NoFunction
        ARM
??incprogr??rA:
        LDR      R12,??Subroutine26_0  ;; ??incprogr
        BX       R12
        DATA
??Subroutine26_0:
        DC32     ??incprogr
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon1
        CFI NoFunction
        ARM
??endprogr??rA:
        LDR      R12,??Subroutine27_0  ;; ??endprogr
        BX       R12
        DATA
??Subroutine27_0:
        DC32     ??endprogr
        CFI EndBlock cfiBlock38

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI NoFunction
        ARM
??IsInArchive??rA:
        LDR      R12,??Subroutine28_0  ;; ??IsInArchive
        BX       R12
        DATA
??Subroutine28_0:
        DC32     ??IsInArchive
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon1
        CFI NoFunction
        ARM
??fn_add??rA:
        LDR      R12,??Subroutine29_0  ;; ??fn_add
        BX       R12
        DATA
??Subroutine29_0:
        DC32     ??fn_add
        CFI EndBlock cfiBlock40

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI NoFunction
        ARM
??ArchiveBufferExtractBegin??rA:
        LDR      R12,??Subroutine30_0  ;; ??ArchiveBufferExtractBegin
        BX       R12
        DATA
??Subroutine30_0:
        DC32     ??ArchiveBufferExtractBegin
        CFI EndBlock cfiBlock41

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon1
        CFI NoFunction
        ARM
??fsmv??rA:
        LDR      R12,??Subroutine31_0  ;; ??fsmv
        BX       R12
        DATA
??Subroutine31_0:
        DC32     ??fsmv
        CFI EndBlock cfiBlock42

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI NoFunction
        ARM
??fscp??rA:
        LDR      R12,??Subroutine32_0  ;; ??fscp
        BX       R12
        DATA
??Subroutine32_0:
        DC32     ??fscp
        CFI EndBlock cfiBlock43

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon1
        CFI NoFunction
        ARM
??ArchiveBufferExtract??rA:
        LDR      R12,??Subroutine33_0  ;; ??ArchiveBufferExtract
        BX       R12
        DATA
??Subroutine33_0:
        DC32     ??ArchiveBufferExtract
        CFI EndBlock cfiBlock44

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI NoFunction
        ARM
??ArchiveBufferExtractEnd??rA:
        LDR      R12,??Subroutine34_0  ;; ??ArchiveBufferExtractEnd
        BX       R12
        DATA
??Subroutine34_0:
        DC32     ??ArchiveBufferExtractEnd
        CFI EndBlock cfiBlock45

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock46 Using cfiCommon1
        CFI NoFunction
        ARM
??UpdateAll??rA:
        LDR      R12,??Subroutine35_0  ;; ??UpdateAll
        BX       R12
        DATA
??Subroutine35_0:
        DC32     ??UpdateAll
        CFI EndBlock cfiBlock46

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock47 Using cfiCommon1
        CFI NoFunction
        ARM
??GetFileName??rA:
        LDR      R12,??Subroutine36_0  ;; ??GetFileName
        BX       R12
        DATA
??Subroutine36_0:
        DC32     ??GetFileName
        CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock48 Using cfiCommon1
        CFI NoFunction
        ARM
??fn_free??rA:
        LDR      R12,??Subroutine37_0  ;; ??fn_free
        BX       R12
        DATA
??Subroutine37_0:
        DC32     ??fn_free
        CFI EndBlock cfiBlock48

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x25\\x6c\\x73\\x5c">`:
        DATA
        DC8 25H, 0, 6CH, 0, 73H, 0, 5CH, 0
        DC8 0, 0
        DC8 0, 0

        END
// 
// 2 192 bytes in segment CODE
//    12 bytes in segment DATA_C
//    12 bytes in segment DATA_Z
//    12 bytes in segment INITTAB
// 
// 1 824 bytes of CODE  memory (+ 380 bytes shared)
//    12 bytes of CONST memory
//    12 bytes of DATA  memory
//
//Errors: none
//Warnings: none
