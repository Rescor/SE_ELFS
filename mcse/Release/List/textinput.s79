//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:48:15 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\textinpu /
//                       t.cpp                                               /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\textinpu /
//                       t.cpp -D NDEBUG -D USEZLIB -D OLDFUNCTIONS -lCN     /
//                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcs /
//                       e\Release\List\ -o Z:\home\perk11\www\perk11.info\s /
//                       vn\SE\mcse\Release\Obj\ -s9 --no_unroll             /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h --preinclude Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\mcse\..\deleaker\mem2.h -I                     /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\textinput.s79                                  /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME textinput

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        MULTWEAK ??CorFileName??rA
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
        PUBLIC ??KillTextInput
        FUNCTION ??KillTextInput,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??KillTextInput??rT
        MULTWEAK ??MsgBoxError??rA
        PUBLIC ??OkTextInput
        FUNCTION ??OkTextInput,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??OkTextInput??rT
        MULTWEAK ??TestFileName??rA
        PUBLIC ??TextInput
        FUNCTION ??TextInput,0203H
        LOCFRAME CSTACK, 80, STACK
        MULTWEAK ??TextInput??rT
        MULTWEAK ??muitxt??rA
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        




??CorFileName??rA   SYMBOL "??rA", ??CorFileName

??KillTextInput??rT SYMBOL "??rT", ??KillTextInput
??MsgBoxError??rA   SYMBOL "??rA", ??MsgBoxError

??OkTextInput??rT   SYMBOL "??rT", ??OkTextInput
??TestFileName??rA  SYMBOL "??rA", ??TestFileName

??TextInput??rT     SYMBOL "??rT", ??TextInput
??muitxt??rA        SYMBOL "??rA", ??muitxt

        EXTERN ??CorFileName
        FUNCTION ??CorFileName,0202H
        EXTERN ??MsgBoxError
        FUNCTION ??MsgBoxError,0202H
        EXTERN ??TestFileName
        FUNCTION ??TestFileName,0202H
        EXTERN ??muitxt
        FUNCTION ??muitxt,0202H
        EXTERN MCBook
        EXTERN VAR_ARG_BOOK
        EXTERN VAR_ARG_CALL_BACK_LONG_BACK
        EXTERN VAR_ARG_CALL_BACK_OK
        EXTERN VAR_ARG_CALL_BACK_PREV_ACT
        EXTERN VAR_ARG_STRINP_FIXED_TEXT
        EXTERN VAR_ARG_STRINP_MAX_LEN
        EXTERN VAR_ARG_STRINP_MIN_LEN
        EXTERN VAR_ARG_STRINP_TEXT
        EXTERN wsbuf


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??KillTextInput??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??KillTextInput

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??KillTextInput
        ARM
??KillTextInput:
        LDR      R0,??DataTable5  ;; MCBook
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R0,[R0, #+0]
        LDR      R0,[R0, #+36]
        CMP      R0,#+0
        POPEQ    {R4,PC}
        LDR      R4,??DataTable5  ;; MCBook
        LDR      R0,[R4, #+0]
        LDR      R0,[R0, #+36]
        SWI      +462
        LDR      R1,[R4, #+0]
        STR      R0,[R1, #+36]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??OkTextInput??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??OkTextInput

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??OkTextInput
        ARM
??OkTextInput:
        LDR      R0,??OkTextInput_1  ;; wsbuf
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R2,#+255
        ORR      R2,R2,#0x100
        SWI      +339
        LDR      R0,??DataTable5  ;; MCBook
        LDR      R0,[R0, #+0]
        LDR      R0,[R0, #+40]
        CMP      R0,#+0
        BEQ      ??OkTextInput_2
        LDR      R0,??OkTextInput_1  ;; wsbuf
        _BLF     ??TestFileName,??TestFileName??rA
        CMP      R0,#+0
        BEQ      ??OkTextInput_3
??OkTextInput_2:
        LDR      R4,??DataTable5  ;; MCBook
        LDR      R0,??OkTextInput_1  ;; wsbuf
        LDR      R1,[R4, #+0]
        LDR      R1,[R1, #+44]
        BLX      R1
        LDR      R0,[R4, #+0]
        LDR      R0,[R0, #+36]
        CMP      R0,#+0
        POPEQ    {R4,PC}
        LDR      R0,[R4, #+0]
        LDR      R0,[R0, #+36]
        SWI      +462
        LDR      R1,[R4, #+0]
        STR      R0,[R1, #+36]
        POP      {R4,PC}
??OkTextInput_3:
        LDR      R4,??OkTextInput_1  ;; wsbuf
        MOV      R0,#+84
        _BLF     ??muitxt,??muitxt??rA
        _BLF     ??MsgBoxError,??MsgBoxError??rA
        MOV      R0,R4
        _BLF     ??CorFileName,??CorFileName??rA
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +349
        MOV      R4,R0
        LDR      R0,??DataTable5  ;; MCBook
        LDR      R0,[R0, #+0]
        LDR      R0,[R0, #+36]
        SWI      +360
        MOV      R1,R4
        SWI      +786
        POP      {R4,PC}          ;; return
        DATA
??OkTextInput_1:
        DC32     wsbuf
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??TextInput??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??TextInput

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??TextInput
        ARM
??TextInput:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R6,R1
        MOV      R5,R2
        MOV      R7,R3
        MOV      R8,#+255
        ORR      R8,R8,#0xFF00
        MOV      R2,R8
        MOV      R1,#+0
        SWI      +349
        MOV      R4,R0
        MOV      R0,R5
        LDR      R5,??DataTable5  ;; MCBook
        MOV      R2,R8
        MOV      R1,#+0
        SWI      +349
        LDR      R1,[R5, #+0]
        LDR      R2,??TextInput_1  ;; ??KillTextInput
        STR      R6,[R1, #+40]
        STR      R7,[R1, #+44]
        MOV      R3,#+0
        PUSH     {R3}
        CFI CFA R13+28
        MOV      R3,#+256
        PUSH     {R3}
        CFI CFA R13+32
        LDR      R3,??TextInput_1+0x4  ;; VAR_ARG_STRINP_MAX_LEN
        PUSH     {R3}
        CFI CFA R13+36
        MOV      R3,#+0
        PUSH     {R3}
        CFI CFA R13+40
        LDR      R3,??TextInput_1+0x8  ;; VAR_ARG_STRINP_MIN_LEN
        PUSH     {R3}
        CFI CFA R13+44
        LDR      R3,??TextInput_1+0xC  ;; VAR_ARG_CALL_BACK_LONG_BACK
        PUSH     {R0}
        CFI CFA R13+48
        LDR      R0,??TextInput_1+0x10  ;; VAR_ARG_STRINP_TEXT
        PUSH     {R0}
        CFI CFA R13+52
        LDR      R0,??TextInput_1+0x14  ;; VAR_ARG_STRINP_FIXED_TEXT
        PUSH     {R4}
        CFI CFA R13+56
        PUSH     {R0}
        CFI CFA R13+60
        LDR      R0,??TextInput_1+0x18  ;; ??OkTextInput
        PUSH     {R0}
        CFI CFA R13+64
        LDR      R0,??TextInput_1+0x1C  ;; VAR_ARG_CALL_BACK_OK
        PUSH     {R0}
        CFI CFA R13+68
        LDR      R0,??TextInput_1+0x20  ;; VAR_ARG_BOOK
        PUSH     {R1}
        CFI CFA R13+72
        LDR      R1,??TextInput_1+0x24  ;; VAR_ARG_CALL_BACK_PREV_ACT
        PUSH     {R0}
        CFI CFA R13+76
        MOV      R0,R2
        PUSH     {R0}
        CFI CFA R13+80
        MOV      R0,#+0
        SWI      +324
        ADD      SP,SP,#+56
        CFI CFA R13+24
        LDR      R1,[R5, #+0]
        STR      R0,[R1, #+36]
        POP      {R4-R8,PC}       ;; return
        DATA
??TextInput_1:
        DC32     ??KillTextInput
        DC32     VAR_ARG_STRINP_MAX_LEN
        DC32     VAR_ARG_STRINP_MIN_LEN
        DC32     VAR_ARG_CALL_BACK_LONG_BACK
        DC32     VAR_ARG_STRINP_TEXT
        DC32     VAR_ARG_STRINP_FIXED_TEXT
        DC32     ??OkTextInput
        DC32     VAR_ARG_CALL_BACK_OK
        DC32     VAR_ARG_BOOK
        DC32     VAR_ARG_CALL_BACK_PREV_ACT
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable5:
        DC32     MCBook

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        ARM
??TestFileName??rA:
        LDR      R12,??Subroutine3_0  ;; ??TestFileName
        BX       R12
        DATA
??Subroutine3_0:
        DC32     ??TestFileName
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI NoFunction
        ARM
??muitxt??rA:
        LDR      R12,??Subroutine4_0  ;; ??muitxt
        BX       R12
        DATA
??Subroutine4_0:
        DC32     ??muitxt
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI NoFunction
        ARM
??MsgBoxError??rA:
        LDR      R12,??Subroutine5_0  ;; ??MsgBoxError
        BX       R12
        DATA
??Subroutine5_0:
        DC32     ??MsgBoxError
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI NoFunction
        ARM
??CorFileName??rA:
        LDR      R12,??Subroutine6_0  ;; ??CorFileName
        BX       R12
        DATA
??Subroutine6_0:
        DC32     ??CorFileName
        CFI EndBlock cfiBlock9

        END
// 
// 560 bytes in segment CODE
// 
// 500 bytes of CODE memory (+ 60 bytes shared)
//
//Errors: none
//Warnings: none
