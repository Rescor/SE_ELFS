//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:45:59 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ColorMap /
//                       .cpp                                                /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ColorMap /
//                       .cpp -D NDEBUG -D USEZLIB -D OLDFUNCTIONS -lCN      /
//                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcs /
//                       e\Release\List\ -o Z:\home\perk11\www\perk11.info\s /
//                       vn\SE\mcse\Release\Obj\ -s9 --no_unroll             /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h --preinclude Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\mcse\..\deleaker\mem2.h -I                     /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\ColorMap.s79                                   /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME ColorMap

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable8 EQU 0
        PUBLIC ??InitCS
        FUNCTION ??InitCS,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??InitCS??rT
        PUBLIC ??LoadCS
        FUNCTION ??LoadCS,0203H
        LOCFRAME CSTACK, 156, STACK
        MULTWEAK ??LoadCS??rT
        PUBLIC ??SaveCS
        FUNCTION ??SaveCS,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??SaveCS??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Colors
        PUBLIC mccs_deffile
        PUBLIC mccs_ext
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        

??InitCS??rT        SYMBOL "??rT", ??InitCS

??LoadCS??rT        SYMBOL "??rT", ??LoadCS

??SaveCS??rT        SYMBOL "??rT", ??SaveCS

        EXTERN CONFIG_LOAD_CS
        EXTERN mcpath


        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "mccs">`:
        DATA
        DC8 "mccs"
        DC8 0, 0, 0
mccs_deffile:
        DC8 64H, 0, 65H, 0, 66H, 0, 61H, 0
        DC8 75H, 0, 6CH, 0, 74H, 0, 2EH, 0
        DC8 6DH, 0, 63H, 0, 63H, 0, 73H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
mccs_ext:
        DATA
        DC8 6DH, 0, 63H, 0, 63H, 0, 73H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
Colors:
        DS8 120

        RSEG DATA_C:CONST:SORT:NOROOT(2)
ColorIndex:
        DATA
        DC32 -1, -16777216, -1, -16777088, -8355585, -1, -16777216, -16777216
        DC32 -8355700, -11908534, -8388608, -8388608, -1, -1, -16777088, -1
        DC32 -16777088, -8355585, -1, -16777088, -1, -1, -16777088, -16777088
        DC32 -1, -16777088, -1, -1, -4144960, -16777216

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??InitCS??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??InitCS

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??InitCS
        ARM
??InitCS:
        LDR      R1,??DataTable9  ;; Colors
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,#+0
??InitCS_1:
        LDR      R2,??InitCS_2    ;; ColorIndex
        LDR      R2,[R2, +R0, LSL #+2]
        STR      R2,[R1, +R0, LSL #+2]
        ADD      R0,R0,#+1
        CMP      R0,#+30
        BLT      ??InitCS_1
        LDR      R0,??InitCS_2+0x4  ;; CONFIG_LOAD_CS
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        POPEQ    {PC}
        MOV      R0,#+0
        BL       ??LoadCS
        POP      {PC}             ;; return
        DATA
??InitCS_2:
        DC32     ColorIndex
        DC32     CONFIG_LOAD_CS
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??SaveCS??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??SaveCS

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??SaveCS
        ARM
??SaveCS:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+16
        CFI CFA R13+24
        CMP      R0,#+0
        MOVNE    R4,R0
        BNE      ??SaveCS_1
        LDR      R0,??DataTable5  ;; mcpath
        SWI      +759
        CMP      R0,#+0
        LDREQ    R4,??DataTable6  ;; `?<Constant "mccs">` + 8
        CMP      R4,#+0
        POPEQ    {R0-R4,PC}
??SaveCS_1:
        MOV      R3,#+0
        MOV      R2,#+255
        ORR      R2,R2,#0x100
        MOV      R1,#+75
        MOV      R0,R4
        SWI      +760
        MOVS     R4,R0
        POPMI    {R0-R4,PC}
        LDR      R1,??DataTable7  ;; `?<Constant "mccs">`
        MOV      R2,#+16
        LDR      R1,[R1, #+0]
        STR      R1,[SP, #+0]
        MOV      R1,#+2
        STR      R1,[SP, #+4]
        MOV      R1,#+120
        STR      R1,[SP, #+8]
        MOV      R1,#+16
        STR      R1,[SP, #+12]
        MOV      R1,SP
        SWI      +762
        LDR      R1,??DataTable9  ;; Colors
        MOV      R2,#+120
        MOV      R0,R4
        SWI      +762
        MOV      R0,R4
        SWI      +765
        POP      {R0-R4,PC}       ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??LoadCS??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??LoadCS

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??LoadCS
        ARM
??LoadCS:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+136
        CFI CFA R13+156
        MOV      R4,#+0
        CMP      R0,#+0
        MOVNE    R5,R0
        BNE      ??LoadCS_1
        LDR      R0,??DataTable5  ;; mcpath
        SWI      +759
        CMP      R0,#+0
        LDREQ    R5,??DataTable6  ;; `?<Constant "mccs">` + 8
        CMP      R5,#+0
        BEQ      ??LoadCS_2
??LoadCS_1:
        MOV      R3,#+0
        MOV      R2,#+255
        ORR      R2,R2,#0x100
        MOV      R1,#+1
        MOV      R0,R5
        SWI      +760
        MOVS     R5,R0
        BMI      ??LoadCS_2
        MOV      R2,#+16
        MOV      R1,SP
        SWI      +763
        CMP      R0,#+16
        BNE      ??LoadCS_3
        LDR      R1,??DataTable7  ;; `?<Constant "mccs">`
        LDR      R0,[SP, #+0]
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        BNE      ??LoadCS_3
        LDR      R0,[SP, #+8]
        CMP      R0,#+120
        BLT      ??LoadCS_3
        LDR      R1,[SP, #+12]
        MOV      R2,#+2
        MOV      R0,R5
        SWI      +764
        LDR      R0,[SP, #+4]
        CMP      R0,#+2
        BNE      ??LoadCS_4
        LDR      R1,??DataTable9  ;; Colors
        MOV      R2,#+120
        MOV      R0,R5
        SWI      +763
        CMP      R0,#+120
        BNE      ??LoadCS_3
        MOV      R4,#+1
        B        ??LoadCS_3
??LoadCS_4:
        CMP      R0,#+1
        BNE      ??LoadCS_3
        ADD      R6,SP,#+16
        MOV      R2,#+120
        ADD      R1,SP,#+16
        MOV      R0,R5
        SWI      +763
        LDR      R1,??DataTable9  ;; Colors
        LDR      R12,??LoadCS_5   ;; 0x51eb851f
        CMP      R0,#+120
        MOVEQ    R4,#+1
        MOV      R0,#+0
??LoadCS_6:
        LDRB     R2,[R6, #+0]
        LDRB     R3,[R6, #+1]
        LSL      R3,R3,#+8
        ORR      R2,R3,R2, LSL #+16
        LDRB     R3,[R6, #+2]
        ORR      R2,R3,R2
        LDRB     R3,[R6, #+3]
        ADD      R6,R6,#+4
        RSB      R3,R3,R3, LSL #+8
        SMULL    LR,R7,R12,R3
        ASR      R7,R7,#+5
        ADD      R3,R7,R3, LSR #+31
        ORR      R2,R2,R3, LSL #+24
        STR      R2,[R1, +R0, LSL #+2]
        ADD      R0,R0,#+1
        CMP      R0,#+30
        BLT      ??LoadCS_6
??LoadCS_3:
        MOV      R0,R5
        SWI      +765
??LoadCS_2:
        MOV      R0,R4
        ADD      SP,SP,#+136
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??LoadCS_5:
        DC32     0x51eb851f
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable5:
        DC32     mcpath

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     `?<Constant "mccs">` + 8

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     `?<Constant "mccs">`

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     Colors

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
// 584 bytes in segment CODE
// 168 bytes in segment DATA_C
// 120 bytes in segment DATA_Z
//  12 bytes in segment INITTAB
// 
// 572 bytes of CODE  memory (+ 24 bytes shared)
// 168 bytes of CONST memory
// 120 bytes of DATA  memory
//
//Errors: none
//Warnings: none
