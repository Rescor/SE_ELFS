//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:47:16 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ZLib\min /
//                       izip\ioapi.c                                        /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ZLib\min /
//                       izip\ioapi.c -D LOG -D USEZLIB -lCN                 /
//                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcs /
//                       e\Release\List\ -o Z:\home\perk11\www\perk11.info\s /
//                       vn\SE\mcse\Release\Obj\ -s9 --no_unroll             /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --dlib_config                            /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\ioapi.s79                                      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME ioapi

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??clear_read_buf??rT
        MULTWEAK ??fclose_file_func??rT
        MULTWEAK ??ferror_file_func??rT
        MULTWEAK ??fill_fopen_filefunc??rT
        MULTWEAK ??fopen_file_func??rT
        MULTWEAK ??fread_file_func??rT
        MULTWEAK ??fseek_file_func??rT
        MULTWEAK ??ftell_file_func??rT
        MULTWEAK ??fwrite_file_func??rT
        PUBLIC clear_read_buf
        FUNCTION clear_read_buf,0203H
        PUBLIC fclose_file_func
        FUNCTION fclose_file_func,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC ferror_file_func
        FUNCTION ferror_file_func,0603H
        PUBLIC fill_fopen_filefunc
        FUNCTION fill_fopen_filefunc,0203H
        PUBLIC fopen_file_func
        FUNCTION fopen_file_func,0603H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC fread_file_func
        FUNCTION fread_file_func,0603H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC fseek_file_func
        FUNCTION fseek_file_func,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC ftell_file_func
        FUNCTION ftell_file_func,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC fwrite_file_func
        FUNCTION fwrite_file_func,0603H
        LOCFRAME CSTACK, 12, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
clear_read_buf      SYMBOL "clear_read_buf"
??clear_read_buf??rT SYMBOL "??rT", clear_read_buf
fclose_file_func    SYMBOL "fclose_file_func"
??fclose_file_func??rT SYMBOL "??rT", fclose_file_func
ferror_file_func    SYMBOL "ferror_file_func"
??ferror_file_func??rT SYMBOL "??rT", ferror_file_func
fill_fopen_filefunc SYMBOL "fill_fopen_filefunc"
??fill_fopen_filefunc??rT SYMBOL "??rT", fill_fopen_filefunc
fopen_file_func     SYMBOL "fopen_file_func"
??fopen_file_func??rT SYMBOL "??rT", fopen_file_func
fread_file_func     SYMBOL "fread_file_func"
??fread_file_func??rT SYMBOL "??rT", fread_file_func
fseek_file_func     SYMBOL "fseek_file_func"
??fseek_file_func??rT SYMBOL "??rT", fseek_file_func
ftell_file_func     SYMBOL "ftell_file_func"
??ftell_file_func??rT SYMBOL "??rT", ftell_file_func
fwrite_file_func    SYMBOL "fwrite_file_func"
??fwrite_file_func??rT SYMBOL "??rT", fwrite_file_func


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??clear_read_buf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE clear_read_buf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function clear_read_buf
        ARM
clear_read_buf:
        MOV      R1,#+0
        STR      R1,[R0, #+524]
        STR      R1,[R0, #+520]
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??fopen_file_func??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE fopen_file_func

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function fopen_file_func
        ARM
fopen_file_func:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R1
        MOV      R5,R2
        MOV      R0,#+528
        SWI      +259
        MOV      R6,R0
        MOV      R2,#+528
        MOV      R1,#+0
        SWI      +274
        MOV      R2,#+0
        MOV      R1,#+0
        AND      R0,R5,#0x3
        CMP      R0,#+1
        BNE      ??fopen_file_func_0
??fopen_file_func_1:
        MOV      R1,#+1
        B        ??fopen_file_func_2
??fopen_file_func_0:
        TST      R5,#0x4
        BNE      ??fopen_file_func_1
        TST      R5,#0x8
        BEQ      ??fopen_file_func_3
        MOV      R1,#+73
??fopen_file_func_2:
        MOV      R2,#+255
        ORR      R2,R2,#0x100
??fopen_file_func_3:
        CMP      R4,#+0
        CMPNE    R6,#+0
        BEQ      ??fopen_file_func_4
        MOV      R3,#+0
        MOV      R0,R4
        SWI      +760
        STR      R0,[R6, #+0]
        MOV      R0,R6
        BL       clear_read_buf
??fopen_file_func_4:
        LDR      R0,[R6, #+0]
        CMN      R0,#+1
        BNE      ??fopen_file_func_5
        MOV      R0,R6
        SWI      +260
        MOV      R6,#+0
??fopen_file_func_5:
        MOV      R0,R6
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??fread_file_func??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE fread_file_func

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function fread_file_func
        ARM
fread_file_func:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R1
        MOV      R5,R2
        MOV      R6,R3
        MOV      R7,#+0
        CMP      R4,#+0
        BEQ      ??fread_file_func_0
        LDR      R0,[R4, #+524]
        LDR      R1,[R4, #+520]
        SUBS     R0,R0,R1
        BEQ      ??fread_file_func_1
        CMP      R0,R6
        MOVCC    R7,R0
        MOVCS    R7,R6
        MOV      R2,R7
        ADD      R0,R1,R4
        ADD      R1,R0,#+8
        MOV      R0,R5
        SWI      +275
        LDR      R0,[R4, #+520]
        ADD      R5,R7,R5
        ADD      R0,R7,R0
        STR      R0,[R4, #+520]
        LDR      R1,[R4, #+524]
        SUB      R6,R6,R7
        CMP      R0,R1
        BCC      ??fread_file_func_1
        MOV      R0,R4
        BL       clear_read_buf
??fread_file_func_1:
        CMP      R6,#+0
        BEQ      ??fread_file_func_0
        CMP      R6,#+512
        BCS      ??fread_file_func_2
        LDR      R0,[R4, #+0]
        MOV      R2,#+512
        ADD      R1,R4,#+8
        SWI      +763
        STR      R0,[R4, #+524]
        MOV      R0,#+0
        STR      R0,[R4, #+520]
        LDR      R0,[R4, #+524]
        ADD      R1,R4,#+8
        CMP      R0,R6
        MOVCC    R6,R0
        MOV      R2,R6
        MOV      R0,R5
        SWI      +275
        LDR      R0,[R4, #+520]
        ADD      R7,R6,R7
        ADD      R0,R6,R0
        STR      R0,[R4, #+520]
        MOV      R0,R7
        POP      {R4-R7,PC}
??fread_file_func_2:
        LDR      R0,[R4, #+0]
        MOV      R2,R6
        MOV      R1,R5
        SWI      +763
        ADD      R7,R0,R7
??fread_file_func_0:
        MOV      R0,R7
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??fwrite_file_func??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE fwrite_file_func

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function fwrite_file_func
        ARM
fwrite_file_func:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R1
        MOV      R1,R2
        MOV      R2,R3
        MOV      R5,#+0
        CMP      R4,#+0
        BEQ      ??fwrite_file_func_0
        LDR      R0,[R4, #+0]
        SWI      +762
        MOV      R5,R0
        MOV      R0,R4
        BL       clear_read_buf
??fwrite_file_func_0:
        MOV      R0,R5
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??ftell_file_func??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ftell_file_func

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ftell_file_func
        ARM
ftell_file_func:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOVS     R4,R1
        MVN      R5,#+0
        BEQ      ??ftell_file_func_0
        LDR      R0,[R4, #+0]
        MOV      R2,#+0
        MOV      R1,#+0
        SWI      +764
        MOV      R5,R0
        MOV      R0,R4
        BL       clear_read_buf
??ftell_file_func_0:
        MOV      R0,R5
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??fseek_file_func??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE fseek_file_func

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function fseek_file_func
        ARM
fseek_file_func:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R1
        MOV      R1,R2
        MVN      R5,#+0
        CMP      R4,#+0
        BEQ      ??fseek_file_func_0
        CMP      R3,#+0
        BEQ      ??fseek_file_func_1
        SUBS     R3,R3,#+1
        BEQ      ??fseek_file_func_2
        SUBS     R3,R3,#+1
        BEQ      ??fseek_file_func_3
        B        ??fseek_file_func_4
??fseek_file_func_2:
        MOV      R2,#+0
??fseek_file_func_5:
        LDR      R0,[R4, #+0]
        MOV      R5,#+0
        SWI      +764
        MOV      R0,R4
        BL       clear_read_buf
??fseek_file_func_4:
        MOV      R0,R5
        POP      {R4,R5,PC}
??fseek_file_func_3:
        MOV      R2,#+1
        B        ??fseek_file_func_5
??fseek_file_func_1:
        MOV      R2,#+2
        B        ??fseek_file_func_5
??fseek_file_func_0:
        MOV      R0,R5
        POP      {R4,R5,PC}
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??fclose_file_func??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE fclose_file_func

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function fclose_file_func
        ARM
fclose_file_func:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R1
        BEQ      ??fclose_file_func_0
        LDR      R0,[R4, #+0]
        SWI      +765
        MOV      R0,R4
        SWI      +260
??fclose_file_func_0:
        MOV      R0,#+0
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??ferror_file_func??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ferror_file_func

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ferror_file_func
        ARM
ferror_file_func:
        MVN      R0,#+0
        CMP      R1,#+0
        LDRNE    R0,[R1, #+4]
        BX       LR               ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??fill_fopen_filefunc??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE fill_fopen_filefunc

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function fill_fopen_filefunc
        ARM
fill_fopen_filefunc:
        LDR      R1,??fill_fopen_filefunc_0  ;; fopen_file_func
        STR      R1,[R0, #+0]
        LDR      R1,??fill_fopen_filefunc_0+0x4  ;; fread_file_func
        STR      R1,[R0, #+4]
        LDR      R1,??fill_fopen_filefunc_0+0x8  ;; fwrite_file_func
        STR      R1,[R0, #+8]
        LDR      R1,??fill_fopen_filefunc_0+0xC  ;; ftell_file_func
        STR      R1,[R0, #+12]
        LDR      R1,??fill_fopen_filefunc_0+0x10  ;; fseek_file_func
        STR      R1,[R0, #+16]
        LDR      R1,??fill_fopen_filefunc_0+0x14  ;; fclose_file_func
        STR      R1,[R0, #+20]
        LDR      R1,??fill_fopen_filefunc_0+0x18  ;; ferror_file_func
        STR      R1,[R0, #+24]
        MOV      R1,#+0
        STR      R1,[R0, #+28]
        BX       LR               ;; return
        DATA
??fill_fopen_filefunc_0:
        DC32     fopen_file_func
        DC32     fread_file_func
        DC32     fwrite_file_func
        DC32     ftell_file_func
        DC32     fseek_file_func
        DC32     fclose_file_func
        DC32     ferror_file_func
        CFI EndBlock cfiBlock17

        END
// 
// 816 bytes in segment CODE
// 
// 780 bytes of CODE memory (+ 36 bytes shared)
//
//Errors: none
//Warnings: none
