##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:47:16 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ZLib\mini #
#                       zip\ioapi.c                                          #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ZLib\mini #
#                       zip\ioapi.c -D LOG -D USEZLIB -lCN                   #
#                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\L #
#                       ist\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcse\ #
#                       Release\List\ -o Z:\home\perk11\www\perk11.info\svn\ #
#                       SE\mcse\Release\Obj\ -s9 --no_unroll                 #
#                       --no_code_motion --cpu_mode arm --endian little      #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config Z:\home\perk11\IAR2\arm\LIB #
#                       \dl5tpainl8n.h -I Z:\home\perk11\IAR2\arm\INC\       #
#                       --inline_threshold=2                                 #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\L #
#                       ist\ioapi.lst                                        #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\O #
#                       bj\ioapi.r79                                         #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\mcse\ZLib\minizip\ioapi.c
      1          /* ioapi.c -- IO base function header for compress/uncompress .zip
      2             files using zlib + zip or unzip API
      3          
      4             Version 1.01e, February 12th, 2005
      5          
      6             Copyright (C) 1998-2005 Gilles Vollant
      7          */
      8          
      9          #include "..\..\..\include\types.h"
     10          #include "..\zlib.h"
     11          #include "ioapi.h"
     12          
     13          voidpf fopen_file_func (
     14             voidpf opaque,
     15             const wchar_t* name,
     16             int mode);
     17          
     18          uLong fread_file_func (
     19             voidpf opaque,
     20             voidpf stream,
     21             void* buf,
     22             uLong size);
     23          
     24          uLong fwrite_file_func (
     25             voidpf opaque,
     26             voidpf stream,
     27             const void* buf,
     28             uLong size);
     29          
     30          long ftell_file_func (
     31             voidpf opaque,
     32             voidpf stream);
     33          
     34          long fseek_file_func (
     35             voidpf opaque,
     36             voidpf stream,
     37             uLong offset,
     38             int origin);
     39          
     40          int fclose_file_func (
     41             voidpf opaque,
     42             voidpf stream);
     43          
     44          int ferror_file_func (
     45             voidpf opaque,
     46             voidpf stream);
     47          

   \                                 In segment CODE, align 4, keep-with-next
     48          void clear_read_buf(FILE* pFile)
     49          {
     50          	pFile->buflen = 0;
   \                     clear_read_buf:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   0C1280E5           STR      R1,[R0, #+524]
     51          	pFile->bufpos = 0;
   \   00000008   081280E5           STR      R1,[R0, #+520]
     52          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
     53          

   \                                 In segment CODE, align 4, keep-with-next
     54          voidpf fopen_file_func (
     55             voidpf opaque,
     56             const wchar_t* name,
     57             int mode)
     58          {
   \                     fopen_file_func:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0250A0E1           MOV      R5,R2
     59          	FILE* pFile = malloc(sizeof(FILE));
   \   0000000C   840FA0E3           MOV      R0,#+528
   \   00000010   030100EF           SWI      +259
   \   00000014   0060A0E1           MOV      R6,R0
     60          	memset(pFile,0, sizeof(FILE));
   \   00000018   842FA0E3           MOV      R2,#+528
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   120100EF           SWI      +274
     61          	unsigned int flags = 0;
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   0010A0E3           MOV      R1,#+0
     62          	unsigned int fmode = 0;
     63          	if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)
   \   0000002C   030005E2           AND      R0,R5,#0x3
   \   00000030   010050E3           CMP      R0,#+1
   \   00000034   0100001A           BNE      ??fopen_file_func_0
     64          	{
     65          		flags = WA_Read ;
   \                     ??fopen_file_func_1:
   \   00000038   0110A0E3           MOV      R1,#+1
     66          		fmode = 0x1FF;
   \   0000003C   040000EA           B        ??fopen_file_func_2
     67          	}
     68          	else if (mode & ZLIB_FILEFUNC_MODE_EXISTING)
   \                     ??fopen_file_func_0:
   \   00000040   040015E3           TST      R5,#0x4
   \   00000044   FBFFFF1A           BNE      ??fopen_file_func_1
     69          	{
     70          		flags = WA_Read | WA_Read ;
     71          		fmode = 0x1FF;
     72          	}
     73          	else if (mode & ZLIB_FILEFUNC_MODE_CREATE)
   \   00000048   080015E3           TST      R5,#0x8
   \   0000004C   0200000A           BEQ      ??fopen_file_func_3
     74          	{
     75          		flags = WA_Read | WA_Read| WA_Create | WA_Truncate;
   \   00000050   4910A0E3           MOV      R1,#+73
     76          		fmode = 0x1FF;
   \                     ??fopen_file_func_2:
   \   00000054   FF20A0E3           MOV      R2,#+255
   \   00000058   402F82E3           ORR      R2,R2,#0x100
     77          	}
     78          
     79          	if (name && pFile)
   \                     ??fopen_file_func_3:
   \   0000005C   000054E3           CMP      R4,#+0
   \   00000060   00005613           CMPNE    R6,#+0
   \   00000064   0500000A           BEQ      ??fopen_file_func_4
     80          	{
     81          		pFile->handle = w_fopen(name, flags, fmode, NULL);
   \   00000068   0030A0E3           MOV      R3,#+0
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   F80200EF           SWI      +760
   \   00000074   000086E5           STR      R0,[R6, #+0]
     82          		clear_read_buf(pFile);
   \   00000078   0600A0E1           MOV      R0,R6
   \   0000007C   ........           BL       clear_read_buf
     83          	}
     84          
     85          	if (pFile->handle == -1)
   \                     ??fopen_file_func_4:
   \   00000080   000096E5           LDR      R0,[R6, #+0]
   \   00000084   010070E3           CMN      R0,#+1
   \   00000088   0200001A           BNE      ??fopen_file_func_5
     86          	{
     87          		mfree(pFile);
   \   0000008C   0600A0E1           MOV      R0,R6
   \   00000090   040100EF           SWI      +260
     88          		pFile = NULL;
   \   00000094   0060A0E3           MOV      R6,#+0
     89          	}
     90          
     91          	return (voidpf)pFile;
   \                     ??fopen_file_func_5:
   \   00000098   0600A0E1           MOV      R0,R6
   \   0000009C   7080BDE8           POP      {R4-R6,PC}       ;; return
     92          }
     93          

   \                                 In segment CODE, align 4, keep-with-next
     94          uLong fread_file_func (
     95             voidpf opaque,
     96             voidpf stream,
     97             void* buf,
     98             uLong size)
     99          {
   \                     fread_file_func:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0250A0E1           MOV      R5,R2
   \   0000000C   0360A0E1           MOV      R6,R3
    100          	uLong ret = 0;
   \   00000010   0070A0E3           MOV      R7,#+0
    101          	FILE* pFile = (FILE*)stream;
    102          	
    103          	if (pFile)
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   3200000A           BEQ      ??fread_file_func_0
    104          	{
    105          		// 1. Выбираем сколько можно из буфера
    106          		uLong inbuf = pFile->buflen - pFile->bufpos;
   \   0000001C   0C0294E5           LDR      R0,[R4, #+524]
   \   00000020   081294E5           LDR      R1,[R4, #+520]
   \   00000024   010050E0           SUBS     R0,R0,R1
    107          		if (inbuf > 0)
   \   00000028   1100000A           BEQ      ??fread_file_func_1
    108          		{
    109          			uLong min = (inbuf < size) ? inbuf : size;
   \   0000002C   060050E1           CMP      R0,R6
   \   00000030   0070A031           MOVCC    R7,R0
   \   00000034   0670A021           MOVCS    R7,R6
    110          			memcpy(buf, &pFile->readbuf[pFile->bufpos], min);
   \   00000038   0720A0E1           MOV      R2,R7
   \   0000003C   040081E0           ADD      R0,R1,R4
   \   00000040   081080E2           ADD      R1,R0,#+8
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   130100EF           SWI      +275
    111          			pFile->bufpos += min;
   \   0000004C   080294E5           LDR      R0,[R4, #+520]
    112          			ret += min;
    113          			buf = (void*)((int)buf + min);
   \   00000050   055087E0           ADD      R5,R7,R5
   \   00000054   000087E0           ADD      R0,R7,R0
   \   00000058   080284E5           STR      R0,[R4, #+520]
    114          			size -= min;
    115          			
    116          			if (pFile->bufpos >= pFile->buflen)
   \   0000005C   0C1294E5           LDR      R1,[R4, #+524]
   \   00000060   076046E0           SUB      R6,R6,R7
   \   00000064   010050E1           CMP      R0,R1
   \   00000068   0100003A           BCC      ??fread_file_func_1
    117          				clear_read_buf(pFile);
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       clear_read_buf
    118          		}
    119          		
    120          		// 2. Если буфер пуст и не все еще считали, то считываем
    121          		if (size > 0)
   \                     ??fread_file_func_1:
   \   00000074   000056E3           CMP      R6,#+0
   \   00000078   1A00000A           BEQ      ??fread_file_func_0
    122          		{
    123          			if (size < IOAPI_READ_BUF_SIZE)
   \   0000007C   800F56E3           CMP      R6,#+512
   \   00000080   1300002A           BCS      ??fread_file_func_2
    124          			{
    125          				pFile->buflen = (uLong)w_fread(pFile->handle, pFile->readbuf,
    126          					(size_t)IOAPI_READ_BUF_SIZE);
   \   00000084   000094E5           LDR      R0,[R4, #+0]
   \   00000088   802FA0E3           MOV      R2,#+512
   \   0000008C   081084E2           ADD      R1,R4,#+8
   \   00000090   FB0200EF           SWI      +763
   \   00000094   0C0284E5           STR      R0,[R4, #+524]
    127          				pFile->bufpos = 0;
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   080284E5           STR      R0,[R4, #+520]
    128          
    129          				uLong min = (pFile->buflen < size) ? pFile->buflen : size;
   \   000000A0   0C0294E5           LDR      R0,[R4, #+524]
    130          				memcpy(buf, pFile->readbuf, min);
   \   000000A4   081084E2           ADD      R1,R4,#+8
   \   000000A8   060050E1           CMP      R0,R6
   \   000000AC   0060A031           MOVCC    R6,R0
   \   000000B0   0620A0E1           MOV      R2,R6
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   130100EF           SWI      +275
    131          				pFile->bufpos += min;
   \   000000BC   080294E5           LDR      R0,[R4, #+520]
    132          				ret += min;
   \   000000C0   077086E0           ADD      R7,R6,R7
   \   000000C4   000086E0           ADD      R0,R6,R0
   \   000000C8   080284E5           STR      R0,[R4, #+520]
    133          				buf = (void*)((int)buf + min);
    134          				size -= min;
   \   000000CC   0700A0E1           MOV      R0,R7
   \   000000D0   F080BDE8           POP      {R4-R7,PC}
    135          			}
    136          			else
    137          			{
    138          				ret += (uLong)w_fread(pFile->handle, buf, (size_t)size);
   \                     ??fread_file_func_2:
   \   000000D4   000094E5           LDR      R0,[R4, #+0]
   \   000000D8   0620A0E1           MOV      R2,R6
   \   000000DC   0510A0E1           MOV      R1,R5
   \   000000E0   FB0200EF           SWI      +763
   \   000000E4   077080E0           ADD      R7,R0,R7
    139          			}
    140          		}
    141          	}
    142          	return ret;
   \                     ??fread_file_func_0:
   \   000000E8   0700A0E1           MOV      R0,R7
   \   000000EC   F080BDE8           POP      {R4-R7,PC}       ;; return
    143          }
    144          

   \                                 In segment CODE, align 4, keep-with-next
    145          uLong fwrite_file_func (
    146             voidpf opaque,
    147             voidpf stream,
    148             const void* buf,
    149             uLong size)
    150          {
   \                     fwrite_file_func:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0210A0E1           MOV      R1,R2
   \   0000000C   0320A0E1           MOV      R2,R3
    151          	uLong ret = 0;
   \   00000010   0050A0E3           MOV      R5,#+0
    152          	FILE* pFile = (FILE*)stream;
    153          	if (pFile)
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   0400000A           BEQ      ??fwrite_file_func_0
    154          	{
    155          		ret = (uLong)w_fwrite(pFile->handle, (void *)buf, (size_t)size);
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   FA0200EF           SWI      +762
   \   00000024   0050A0E1           MOV      R5,R0
    156          		clear_read_buf(pFile);
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       clear_read_buf
    157          	}
    158          	return ret;
   \                     ??fwrite_file_func_0:
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
    159          }
    160          

   \                                 In segment CODE, align 4, keep-with-next
    161          long ftell_file_func (
    162             voidpf opaque,
    163             voidpf stream)
    164          {
   \                     ftell_file_func:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140B0E1           MOVS     R4,R1
    165          	long ret = -1;
   \   00000008   0050E0E3           MVN      R5,#+0
    166          	FILE* pFile = (FILE*)stream;
    167          	if (pFile)
   \   0000000C   0600000A           BEQ      ??ftell_file_func_0
    168          	{
    169          		ret = w_lseek(pFile->handle, 0, WSEEK_CUR);
   \   00000010   000094E5           LDR      R0,[R4, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   FC0200EF           SWI      +764
   \   00000020   0050A0E1           MOV      R5,R0
    170          		clear_read_buf(pFile);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       clear_read_buf
    171          	}
    172          
    173          	return ret;
   \                     ??ftell_file_func_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   3080BDE8           POP      {R4,R5,PC}       ;; return
    174          }
    175          

   \                                 In segment CODE, align 4, keep-with-next
    176          long fseek_file_func (
    177             voidpf opaque,
    178             voidpf stream,
    179             uLong offset,
    180             int origin)
    181          {
   \                     fseek_file_func:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0210A0E1           MOV      R1,R2
    182          	int fseek_origin = 0;
    183          	long ret = -1;
   \   0000000C   0050E0E3           MVN      R5,#+0
    184          	FILE* pFile = (FILE*)stream;
    185          	if (pFile)
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1200000A           BEQ      ??fseek_file_func_0
    186          	{
    187          		switch (origin)
   \   00000018   000053E3           CMP      R3,#+0
   \   0000001C   0E00000A           BEQ      ??fseek_file_func_1
   \   00000020   013053E2           SUBS     R3,R3,#+1
   \   00000024   0200000A           BEQ      ??fseek_file_func_2
   \   00000028   013053E2           SUBS     R3,R3,#+1
   \   0000002C   0800000A           BEQ      ??fseek_file_func_3
   \   00000030   050000EA           B        ??fseek_file_func_4
    188          		{
    189          		case ZLIB_FILEFUNC_SEEK_CUR :
    190          			fseek_origin = WSEEK_CUR;
   \                     ??fseek_file_func_2:
   \   00000034   0020A0E3           MOV      R2,#+0
    191          			break;
    192          		case ZLIB_FILEFUNC_SEEK_END :
    193          			fseek_origin = WSEEK_END;
    194          			break;
    195          		case ZLIB_FILEFUNC_SEEK_SET :
    196          			fseek_origin = WSEEK_SET;
    197          			break;
    198          		default:
    199          			return -1;
    200          		}
    201          		w_lseek(pFile->handle, offset, fseek_origin);
   \                     ??fseek_file_func_5:
   \   00000038   000094E5           LDR      R0,[R4, #+0]
    202          		ret = 0;
   \   0000003C   0050A0E3           MOV      R5,#+0
   \   00000040   FC0200EF           SWI      +764
    203          		clear_read_buf(pFile);
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       clear_read_buf
    204          	}
    205          	return ret;
   \                     ??fseek_file_func_4:
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   3080BDE8           POP      {R4,R5,PC}
   \                     ??fseek_file_func_3:
   \   00000054   0120A0E3           MOV      R2,#+1
   \   00000058   F6FFFFEA           B        ??fseek_file_func_5
   \                     ??fseek_file_func_1:
   \   0000005C   0220A0E3           MOV      R2,#+2
   \   00000060   F4FFFFEA           B        ??fseek_file_func_5
   \                     ??fseek_file_func_0:
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   3080BDE8           POP      {R4,R5,PC}
    206          }
    207          

   \                                 In segment CODE, align 4, keep-with-next
    208          int fclose_file_func (
    209             voidpf opaque,
    210             voidpf stream)
    211          {
   \                     fclose_file_func:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140B0E1           MOVS     R4,R1
    212          	FILE* pFile = (FILE*)stream;
    213          	if (pFile)
   \   00000008   0300000A           BEQ      ??fclose_file_func_0
    214          	{
    215          		w_fclose(pFile->handle);
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   FD0200EF           SWI      +765
    216          		mfree(pFile);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   040100EF           SWI      +260
    217          	}
    218          	return 0;
   \                     ??fclose_file_func_0:
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
    219          }
    220          

   \                                 In segment CODE, align 4, keep-with-next
    221          int ferror_file_func (
    222             voidpf opaque,
    223             voidpf stream)
    224          {
    225          	int ret = -1;
   \                     ferror_file_func:
   \   00000000   0000E0E3           MVN      R0,#+0
    226          	FILE* pFile = (FILE*)stream;
    227          	if (pFile)
   \   00000004   000051E3           CMP      R1,#+0
    228          		ret = pFile->err;
   \   00000008   04009115           LDRNE    R0,[R1, #+4]
    229          	return ret;
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    230          }
    231          

   \                                 In segment CODE, align 4, keep-with-next
    232          void fill_fopen_filefunc (
    233            zlib_filefunc_def* pzlib_filefunc_def)
    234          {
    235          	pzlib_filefunc_def->zopen_file = fopen_file_func;
   \                     fill_fopen_filefunc:
   \   00000000   3C109FE5           LDR      R1,??fill_fopen_filefunc_0  ;; fopen_file_func
   \   00000004   001080E5           STR      R1,[R0, #+0]
    236          	pzlib_filefunc_def->zread_file = fread_file_func;
   \   00000008   38109FE5           LDR      R1,??fill_fopen_filefunc_0+0x4  ;; fread_file_func
   \   0000000C   041080E5           STR      R1,[R0, #+4]
    237          	pzlib_filefunc_def->zwrite_file = fwrite_file_func;
   \   00000010   34109FE5           LDR      R1,??fill_fopen_filefunc_0+0x8  ;; fwrite_file_func
   \   00000014   081080E5           STR      R1,[R0, #+8]
    238          	pzlib_filefunc_def->ztell_file = ftell_file_func;
   \   00000018   30109FE5           LDR      R1,??fill_fopen_filefunc_0+0xC  ;; ftell_file_func
   \   0000001C   0C1080E5           STR      R1,[R0, #+12]
    239          	pzlib_filefunc_def->zseek_file = fseek_file_func;
   \   00000020   2C109FE5           LDR      R1,??fill_fopen_filefunc_0+0x10  ;; fseek_file_func
   \   00000024   101080E5           STR      R1,[R0, #+16]
    240          	pzlib_filefunc_def->zclose_file = fclose_file_func;
   \   00000028   28109FE5           LDR      R1,??fill_fopen_filefunc_0+0x14  ;; fclose_file_func
   \   0000002C   141080E5           STR      R1,[R0, #+20]
    241          	pzlib_filefunc_def->zerror_file = ferror_file_func;
   \   00000030   24109FE5           LDR      R1,??fill_fopen_filefunc_0+0x18  ;; ferror_file_func
   \   00000034   181080E5           STR      R1,[R0, #+24]
    242          	pzlib_filefunc_def->opaque = NULL;
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   1C1080E5           STR      R1,[R0, #+28]
    243          }
   \   00000040   1EFF2FE1           BX       LR               ;; return
   \                     ??fill_fopen_filefunc_0:
   \   00000044   ........           DC32     fopen_file_func
   \   00000048   ........           DC32     fread_file_func
   \   0000004C   ........           DC32     fwrite_file_func
   \   00000050   ........           DC32     ftell_file_func
   \   00000054   ........           DC32     fseek_file_func
   \   00000058   ........           DC32     fclose_file_func
   \   0000005C   ........           DC32     ferror_file_func

   Maximum stack usage in bytes:

     Function            CSTACK
     --------            ------
     clear_read_buf          0
     fclose_file_func        8
     ferror_file_func        0
     fill_fopen_filefunc     0
     fopen_file_func        16
     fread_file_func        20
     fseek_file_func        12
     ftell_file_func        12
     fwrite_file_func       12


   Segment part sizes:

     Function/Label      Bytes
     --------------      -----
     clear_read_buf        16
     fopen_file_func      160
     fread_file_func      240
     fwrite_file_func      56
     ftell_file_func       52
     fseek_file_func      108
     fclose_file_func      36
     ferror_file_func      16
     fill_fopen_filefunc   96
      Others               36

 
 816 bytes in segment CODE
 
 780 bytes of CODE memory (+ 36 bytes shared)

Errors: none
Warnings: none
