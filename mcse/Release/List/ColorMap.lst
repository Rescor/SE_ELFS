##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:45:59 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ColorMap. #
#                       cpp                                                  #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ColorMap. #
#                       cpp -D NDEBUG -D USEZLIB -D OLDFUNCTIONS -lCN        #
#                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\L #
#                       ist\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcse\ #
#                       Release\List\ -o Z:\home\perk11\www\perk11.info\svn\ #
#                       SE\mcse\Release\Obj\ -s9 --no_unroll                 #
#                       --no_code_motion --cpu_mode arm --endian little      #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --enable_multibytes --fpu None --eec++               #
#                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8 #
#                       n.h --preinclude Z:\home\perk11\www\perk11.info\svn\ #
#                       SE\mcse\..\deleaker\mem2.h -I                        #
#                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2    #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\L #
#                       ist\ColorMap.lst                                     #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\O #
#                       bj\ColorMap.r79                                      #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\mcse\ColorMap.cpp
      1          #include "inc\mc.h"
      2          #include "inc\ColorMap.h"
      3          

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "mccs">`:
   \   00000000   6D63637300         DC8 "mccs"
   \   00000005   000000             DC8 0, 0, 0
      4          const wchar_t mccs_deffile[]=L"default.mccs";
   \                     mccs_deffile:
   \   00000008   640065006600       DC8 64H, 0, 65H, 0, 66H, 0, 61H, 0
   \              6100        
   \   00000010   75006C007400       DC8 75H, 0, 6CH, 0, 74H, 0, 2EH, 0
   \              2E00        
   \   00000018   6D0063006300       DC8 6DH, 0, 63H, 0, 63H, 0, 73H, 0
   \              7300        
   \   00000020   0000               DC8 0, 0
   \   00000022   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
      5          const wchar_t mccs_ext[]=L"mccs";
   \                     mccs_ext:
   \   00000000   6D0063006300       DC8 6DH, 0, 63H, 0, 63H, 0, 73H, 0
   \              7300        
   \   00000008   0000               DC8 0, 0
   \   0000000A   0000               DC8 0, 0
      6          

   \                                 In segment DATA_Z, align 4, align-sorted
      7          int Colors[clMAX+1];
   \                     Colors:
   \   00000000                      DS8 120

   \                                 In segment DATA_C, align 4, align-sorted
      8          const int ColorIndex[clMAX+1] = {
   \                     ColorIndex:
   \   00000000   FFFFFFFF0000       DC32 -1, -16777216, -1, -16777088, -8355585, -1, -16777216, -16777216
   \              00FFFFFFFFFF
   \              800000FFFF80
   \              80FFFFFFFFFF
   \              000000FF0000
   \              00FF        
   \   00000020   8C8080FF4A4A       DC32 -8355700, -11908534, -8388608, -8388608, -1, -1, -16777088, -1
   \              4AFF000080FF
   \              000080FFFFFF
   \              FFFFFFFFFFFF
   \              800000FFFFFF
   \              FFFF        
   \   00000040   800000FFFF80       DC32 -16777088, -8355585, -1, -16777088, -1, -1, -16777088, -16777088
   \              80FFFFFFFFFF
   \              800000FFFFFF
   \              FFFFFFFFFFFF
   \              800000FF8000
   \              00FF        
   \   00000060   FFFFFFFF8000       DC32 -1, -16777088, -1, -1, -4144960, -16777216
   \              00FFFFFFFFFF
   \              FFFFFFFFC0C0
   \              C0FF000000FF
      9            COLOR_RGBA(0xFF,0xFF,0xFF,0xFF),
     10            COLOR_RGBA(0x00,0x00,0x00,0xFF),
     11            COLOR_RGBA(0xFF,0xFF,0xFF,0xFF),
     12            COLOR_RGBA(0x00,0x00,0x80,0xFF),
     13            COLOR_RGBA(0x80,0x80,0xFF,0xFF),
     14            COLOR_RGBA(0xFF,0xFF,0xFF,0xFF),
     15            
     16            COLOR_RGBA(0x00,0x00,0x00,0xFF),
     17            COLOR_RGBA(0x00,0x00,0x00,0xFF),
     18            COLOR_RGBA(0x80,0x80,0x8C,0xFF),
     19            COLOR_RGBA(0x4a,0x4A,0x4A,0xFF),
     20            COLOR_RGBA(0x80,0x00,0x00,0xFF),
     21            COLOR_RGBA(0x80,0x00,0x00,0xFF),
     22            COLOR_RGBA(0xFF,0xFF,0xFF,0xFF),
     23            
     24            COLOR_RGBA(0xFF,0xFF,0xFF,0xFF),
     25            COLOR_RGBA(0x00,0x00,0x80,0xFF),
     26            
     27            COLOR_RGBA(0xFF,0xFF,0xFF,0xFF),
     28            COLOR_RGBA(0x00,0x00,0x80,0xFF),
     29            COLOR_RGBA(0x80,0x80,0xFF,0xFF),
     30            COLOR_RGBA(0xFF,0xFF,0xFF,0xFF),
     31            COLOR_RGBA(0x00,0x00,0x80,0xFF),
     32            COLOR_RGBA(0xFF,0xFF,0xFF,0xFF),
     33            
     34            COLOR_RGBA(0xFF,0xFF,0xFF,0xFF),
     35            COLOR_RGBA(0x00,0x00,0x80,0xFF),
     36            COLOR_RGBA(0x00,0x00,0x80,0xFF),
     37            COLOR_RGBA(0xFF,0xFF,0xFF,0xFF),
     38            COLOR_RGBA(0x00,0x00,0x80,0xFF),
     39            COLOR_RGBA(0xFF,0xFF,0xFF,0xFF),
     40            COLOR_RGBA(0xFF,0xFF,0xFF,0xFF),
     41            
     42            COLOR_RGBA(0xC0,0xC0,0xC0,0xFF),
     43            COLOR_RGBA(0x00,0x00,0x00,0xFF)  
     44          };
     45          

   \                                 In segment CODE, align 4, keep-with-next
     46          void InitCS()
     47          {
     48            for(int ii=0;ii<=clMAX;ii++)
   \                     ??InitCS:
   \   00000000   ........           LDR      R1,??DataTable9  ;; Colors
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0000A0E3           MOV      R0,#+0
     49              Colors[ii]=ColorIndex[ii];
   \                     ??InitCS_1:
   \   0000000C   2C209FE5           LDR      R2,??InitCS_2    ;; ColorIndex
   \   00000010   002192E7           LDR      R2,[R2, +R0, LSL #+2]
   \   00000014   002181E7           STR      R2,[R1, +R0, LSL #+2]
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   1E0050E3           CMP      R0,#+30
   \   00000020   F9FFFFBA           BLT      ??InitCS_1
     50            if (CONFIG_LOAD_CS)LoadCS(NULL);
   \   00000024   18009FE5           LDR      R0,??InitCS_2+0x4  ;; CONFIG_LOAD_CS
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0080BD08           POPEQ    {PC}
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   ........           BL       ??LoadCS
     51          }
   \   0000003C   0080BDE8           POP      {PC}             ;; return
   \                     ??InitCS_2:
   \   00000040   ........           DC32     ColorIndex
   \   00000044   ........           DC32     CONFIG_LOAD_CS
     52          

   \                                 In segment CODE, align 4, keep-with-next
     53          void SaveCS(wchar_t* filename)
     54          {
   \                     ??SaveCS:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
     55            wchar_t *fn;
     56            if (filename)
   \   00000008   000050E3           CMP      R0,#+0
     57            {
     58              fn=filename;
   \   0000000C   0040A011           MOVNE    R4,R0
   \   00000010   0500001A           BNE      ??SaveCS_1
     59            }
     60            else
     61            {
     62              if (!w_chdir(mcpath))
   \   00000014   ........           LDR      R0,??DataTable5  ;; mcpath
   \   00000018   F70200EF           SWI      +759
   \   0000001C   000050E3           CMP      R0,#+0
     63                fn=(wchar_t *)mccs_deffile;
   \   00000020   ........           LDREQ    R4,??DataTable6  ;; `?<Constant "mccs">` + 8
     64            }
     65            int f;
     66            if (fn && (f = w_fopen(fn, WA_Read+WA_Write+WA_Create+WA_Truncate, 0x1FF, NULL)) >=0)
   \   00000024   000054E3           CMP      R4,#+0
   \   00000028   1F80BD08           POPEQ    {R0-R4,PC}
   \                     ??SaveCS_1:
   \   0000002C   0030A0E3           MOV      R3,#+0
   \   00000030   FF20A0E3           MOV      R2,#+255
   \   00000034   402F82E3           ORR      R2,R2,#0x100
   \   00000038   4B10A0E3           MOV      R1,#+75
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   F80200EF           SWI      +760
   \   00000044   0040B0E1           MOVS     R4,R0
   \   00000048   1F80BD48           POPMI    {R0-R4,PC}
     67            {
     68              MCCS_hdr hdr;
     69              hdr.sig=mccs_sig;
   \   0000004C   ........           LDR      R1,??DataTable7  ;; `?<Constant "mccs">`
     70              hdr.ver=2;
     71              hdr.size=mccs_size;
     72              hdr.offset=mccs_offset;
     73              
     74              w_fwrite(f,&hdr,sizeof(hdr));
   \   00000050   1020A0E3           MOV      R2,#+16
   \   00000054   001091E5           LDR      R1,[R1, #+0]
   \   00000058   00108DE5           STR      R1,[SP, #+0]
   \   0000005C   0210A0E3           MOV      R1,#+2
   \   00000060   04108DE5           STR      R1,[SP, #+4]
   \   00000064   7810A0E3           MOV      R1,#+120
   \   00000068   08108DE5           STR      R1,[SP, #+8]
   \   0000006C   1010A0E3           MOV      R1,#+16
   \   00000070   0C108DE5           STR      R1,[SP, #+12]
   \   00000074   0D10A0E1           MOV      R1,SP
   \   00000078   FA0200EF           SWI      +762
     75              w_fwrite(f,&Colors,sizeof(Colors));
   \   0000007C   ........           LDR      R1,??DataTable9  ;; Colors
   \   00000080   7820A0E3           MOV      R2,#+120
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   FA0200EF           SWI      +762
     76              w_fclose(f);
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   FD0200EF           SWI      +765
     77            }
     78          }
   \   00000094   1F80BDE8           POP      {R0-R4,PC}       ;; return
     79          

   \                                 In segment CODE, align 4, keep-with-next
     80          int LoadCS(wchar_t* filename)
     81          {
   \                     ??LoadCS:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   88D04DE2           SUB      SP,SP,#+136
     82            int res = 0;
   \   00000008   0040A0E3           MOV      R4,#+0
     83            wchar_t *fn;
     84            if (filename)
   \   0000000C   000050E3           CMP      R0,#+0
     85            {
     86              fn=filename;
   \   00000010   0050A011           MOVNE    R5,R0
   \   00000014   0500001A           BNE      ??LoadCS_1
     87            }
     88            else
     89            {
     90              if (!w_chdir(mcpath))
   \   00000018   ........           LDR      R0,??DataTable5  ;; mcpath
   \   0000001C   F70200EF           SWI      +759
   \   00000020   000050E3           CMP      R0,#+0
     91                fn=(wchar_t *)mccs_deffile;
   \   00000024   ........           LDREQ    R5,??DataTable6  ;; `?<Constant "mccs">` + 8
     92            }
     93            int f;
     94            if (fn && (f = w_fopen(fn, WA_Read, 0x1FF, NULL)) >=0)
   \   00000028   000055E3           CMP      R5,#+0
   \   0000002C   4200000A           BEQ      ??LoadCS_2
   \                     ??LoadCS_1:
   \   00000030   0030A0E3           MOV      R3,#+0
   \   00000034   FF20A0E3           MOV      R2,#+255
   \   00000038   402F82E3           ORR      R2,R2,#0x100
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   F80200EF           SWI      +760
   \   00000048   0050B0E1           MOVS     R5,R0
   \   0000004C   3A00004A           BMI      ??LoadCS_2
     95            {
     96              MCCS_hdr hdr;
     97              if (w_fread(f, &hdr, sizeof(hdr))==sizeof(hdr))
   \   00000050   1020A0E3           MOV      R2,#+16
   \   00000054   0D10A0E1           MOV      R1,SP
   \   00000058   FB0200EF           SWI      +763
   \   0000005C   100050E3           CMP      R0,#+16
   \   00000060   3300001A           BNE      ??LoadCS_3
     98              {
     99                if ((hdr.sig==mccs_sig) && (hdr.size>=mccs_size))
   \   00000064   ........           LDR      R1,??DataTable7  ;; `?<Constant "mccs">`
   \   00000068   00009DE5           LDR      R0,[SP, #+0]
   \   0000006C   001091E5           LDR      R1,[R1, #+0]
   \   00000070   010050E1           CMP      R0,R1
   \   00000074   2E00001A           BNE      ??LoadCS_3
   \   00000078   08009DE5           LDR      R0,[SP, #+8]
   \   0000007C   780050E3           CMP      R0,#+120
   \   00000080   2B0000BA           BLT      ??LoadCS_3
    100                {
    101                  w_lseek(f,hdr.offset,WSEEK_SET);
   \   00000084   0C109DE5           LDR      R1,[SP, #+12]
   \   00000088   0220A0E3           MOV      R2,#+2
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   FC0200EF           SWI      +764
    102                  if (hdr.ver==2)
   \   00000094   04009DE5           LDR      R0,[SP, #+4]
   \   00000098   020050E3           CMP      R0,#+2
   \   0000009C   0700001A           BNE      ??LoadCS_4
    103                    res = w_fread(f, &Colors, sizeof(Colors))==sizeof(Colors);
   \   000000A0   ........           LDR      R1,??DataTable9  ;; Colors
   \   000000A4   7820A0E3           MOV      R2,#+120
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   FB0200EF           SWI      +763
   \   000000B0   780050E3           CMP      R0,#+120
   \   000000B4   1E00001A           BNE      ??LoadCS_3
   \   000000B8   0140A0E3           MOV      R4,#+1
   \   000000BC   1C0000EA           B        ??LoadCS_3
    104                  else if (hdr.ver==1)
   \                     ??LoadCS_4:
   \   000000C0   010050E3           CMP      R0,#+1
   \   000000C4   1A00001A           BNE      ??LoadCS_3
    105                  {
    106                    char v1[sizeof(Colors)];
    107                    char *t=v1;
   \   000000C8   10608DE2           ADD      R6,SP,#+16
    108                    res = w_fread(f, v1, sizeof(Colors))==sizeof(Colors);
   \   000000CC   7820A0E3           MOV      R2,#+120
   \   000000D0   10108DE2           ADD      R1,SP,#+16
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   FB0200EF           SWI      +763
    109                    for (int i=0; i<(clMAX+1); i++)
   \   000000DC   ........           LDR      R1,??DataTable9  ;; Colors
   \   000000E0   60C09FE5           LDR      R12,??LoadCS_5   ;; 0x51eb851f
   \   000000E4   780050E3           CMP      R0,#+120
   \   000000E8   0140A003           MOVEQ    R4,#+1
   \   000000EC   0000A0E3           MOV      R0,#+0
    110                    {
    111                      unsigned int color=0;
    112                      color=COLOR_RGBA(*t,*(t+1),*(t+2),(*(t+3)*0xFF/0x64));
    113                      Colors[i]=color;
   \                     ??LoadCS_6:
   \   000000F0   0020D6E5           LDRB     R2,[R6, #+0]
   \   000000F4   0130D6E5           LDRB     R3,[R6, #+1]
   \   000000F8   0334A0E1           LSL      R3,R3,#+8
   \   000000FC   022883E1           ORR      R2,R3,R2, LSL #+16
   \   00000100   0230D6E5           LDRB     R3,[R6, #+2]
   \   00000104   022083E1           ORR      R2,R3,R2
   \   00000108   0330D6E5           LDRB     R3,[R6, #+3]
    114                      t+=4;
   \   0000010C   046086E2           ADD      R6,R6,#+4
   \   00000110   033463E0           RSB      R3,R3,R3, LSL #+8
   \   00000114   9CE3C7E0           SMULL    LR,R7,R12,R3
   \   00000118   C772A0E1           ASR      R7,R7,#+5
   \   0000011C   A33F87E0           ADD      R3,R7,R3, LSR #+31
   \   00000120   032C82E1           ORR      R2,R2,R3, LSL #+24
   \   00000124   002181E7           STR      R2,[R1, +R0, LSL #+2]
    115                    }
   \   00000128   010080E2           ADD      R0,R0,#+1
   \   0000012C   1E0050E3           CMP      R0,#+30
   \   00000130   EEFFFFBA           BLT      ??LoadCS_6
    116                  }
    117                }
    118              }
    119              w_fclose(f);
   \                     ??LoadCS_3:
   \   00000134   0500A0E1           MOV      R0,R5
   \   00000138   FD0200EF           SWI      +765
    120            }
    121            return res;
   \                     ??LoadCS_2:
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   88D08DE2           ADD      SP,SP,#+136
   \   00000144   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??LoadCS_5:
   \   00000148   1F85EB51           DC32     0x51eb851f
    122          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     mcpath

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     `?<Constant "mccs">` + 8

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     `?<Constant "mccs">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     Colors

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     InitCS()              4
     LoadCS(wchar_t *)   156
     SaveCS(wchar_t *)    24


   Segment part sizes:

     Function/Label     Bytes
     --------------     -----
     ?<Constant "mccs">   36
     mccs_ext             12
     Colors              120
     ColorIndex          120
     InitCS()             72
     SaveCS(wchar_t *)   152
     LoadCS(wchar_t *)   332
     ??DataTable5          4
     ??DataTable6          4
     ??DataTable7          4
     ??DataTable9          4
      Others              24

 
 584 bytes in segment CODE
 168 bytes in segment DATA_C
 120 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 572 bytes of CODE  memory (+ 24 bytes shared)
 168 bytes of CONST memory
 120 bytes of DATA  memory

Errors: none
Warnings: none
