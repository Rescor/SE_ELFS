//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:47:20 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\keys.cpp /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\keys.cpp /
//                        -D NDEBUG -D USEZLIB -D OLDFUNCTIONS -lCN          /
//                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcs /
//                       e\Release\List\ -o Z:\home\perk11\www\perk11.info\s /
//                       vn\SE\mcse\Release\Obj\ -s9 --no_unroll             /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h --preinclude Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\mcse\..\deleaker\mem2.h -I                     /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\keys.s79                                       /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME keys

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable11 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
        PUBLIC ??DoKey
        FUNCTION ??DoKey,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??DoKey??rT
        MULTWEAK ??EnumIni??rA
        PUBLIC ??GetKeynameIndexByKey
        FUNCTION ??GetKeynameIndexByKey,0203H
        MULTWEAK ??GetKeynameIndexByKey??rT
        PUBLIC ??GetKeyprocByKey
        FUNCTION ??GetKeyprocByKey,0203H
        MULTWEAK ??GetKeyprocByKey??rT
        PUBLIC ??GetKeyprocLongByKey
        FUNCTION ??GetKeyprocLongByKey,0203H
        MULTWEAK ??GetKeyprocLongByKey??rT
        PUBLIC ??InitializeKeyMap
        FUNCTION ??InitializeKeyMap,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??InitializeKeyMap??rT
        PUBLIC ??KeysProc
        FUNCTION ??KeysProc,0603H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??KeysProc??rT
        PUBLIC ??LoadKeys
        FUNCTION ??LoadKeys,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??LoadKeys??rT
        MULTWEAK ??strtolower??rA
        PUBWEAK ?init?tab?DATA_I
        PUBLIC keyMap
        PUBLIC keys_file
        PUBLIC procmap
        PUBLIC procmapl
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        



??DoKey??rT         SYMBOL "??rT", ??DoKey
??EnumIni??rA       SYMBOL "??rA", ??EnumIni

??GetKeynameIndexByKey??rT SYMBOL "??rT", ??GetKeynameIndexByKey

??GetKeyprocByKey??rT SYMBOL "??rT", ??GetKeyprocByKey

??GetKeyprocLongByKey??rT SYMBOL "??rT", ??GetKeyprocLongByKey

??InitializeKeyMap??rT SYMBOL "??rT", ??InitializeKeyMap

??KeysProc??rT      SYMBOL "??rT", ??KeysProc

??LoadKeys??rT      SYMBOL "??rT", ??LoadKeys
??strtolower??rA    SYMBOL "??rA", ??strtolower

        EXTERN ??DoBMAdd
        FUNCTION ??DoBMAdd,0602H
        EXTERN ??DoBMList
        FUNCTION ??DoBMList,0602H
        EXTERN ??DoBackK
        FUNCTION ??DoBackK,0602H
        EXTERN ??DoBegin
        FUNCTION ??DoBegin,0602H
        EXTERN ??DoCancel
        FUNCTION ??DoCancel,0602H
        EXTERN ??DoChk
        FUNCTION ??DoChk,0602H
        EXTERN ??DoChkAll
        FUNCTION ??DoChkAll,0602H
        EXTERN ??DoCopy
        FUNCTION ??DoCopy,0602H
        EXTERN ??DoDel
        FUNCTION ??DoDel,0602H
        EXTERN ??DoDwn
        FUNCTION ??DoDwn,0602H
        EXTERN ??DoErrKey
        FUNCTION ??DoErrKey,0602H
        EXTERN ??DoExit
        FUNCTION ??DoExit,0602H
        EXTERN ??DoFilter
        FUNCTION ??DoFilter,0602H
        EXTERN ??DoInvChk
        FUNCTION ??DoInvChk,0602H
        EXTERN ??DoMenu
        FUNCTION ??DoMenu,0602H
        EXTERN ??DoMove
        FUNCTION ??DoMove,0602H
        EXTERN ??DoNewDir
        FUNCTION ??DoNewDir,0602H
        EXTERN ??DoNxtDrv
        FUNCTION ??DoNxtDrv,0602H
        EXTERN ??DoOpen
        FUNCTION ??DoOpen,0602H
        EXTERN ??DoPaste
        FUNCTION ??DoPaste,0602H
        EXTERN ??DoPgDwn
        FUNCTION ??DoPgDwn,0602H
        EXTERN ??DoPgUp
        FUNCTION ??DoPgUp,0602H
        EXTERN ??DoPrvDrv
        FUNCTION ??DoPrvDrv,0602H
        EXTERN ??DoRefresh
        FUNCTION ??DoRefresh,0602H
        EXTERN ??DoRen
        FUNCTION ??DoRen,0602H
        EXTERN ??DoRoot
        FUNCTION ??DoRoot,0602H
        EXTERN ??DoSetSort
        FUNCTION ??DoSetSort,0602H
        EXTERN ??DoShowPath
        FUNCTION ??DoShowPath,0602H
        EXTERN ??DoSortD
        FUNCTION ??DoSortD,0602H
        EXTERN ??DoSortE
        FUNCTION ??DoSortE,0602H
        EXTERN ??DoSortN
        FUNCTION ??DoSortN,0602H
        EXTERN ??DoSortR
        FUNCTION ??DoSortR,0602H
        EXTERN ??DoSortS
        FUNCTION ??DoSortS,0602H
        EXTERN ??DoSwapTab
        FUNCTION ??DoSwapTab,0602H
        EXTERN ??DoSysOpen
        FUNCTION ??DoSysOpen,0602H
        EXTERN ??DoTabCopy
        FUNCTION ??DoTabCopy,0602H
        EXTERN ??DoTabMove
        FUNCTION ??DoTabMove,0602H
        EXTERN ??DoUnCAll
        FUNCTION ??DoUnCAll,0602H
        EXTERN ??DoUp
        FUNCTION ??DoUp,0602H
        EXTERN ??EnumIni
        FUNCTION ??EnumIni,0202H
        EXTERN ??strtolower
        FUNCTION ??strtolower,0202H
        EXTERN CONFIG_LOAD_KEYS
        EXTERN KEY_DEL
        EXTERN KEY_DIEZ
        EXTERN KEY_DIGITAL_0
        EXTERN KEY_DOWN
        EXTERN KEY_ENTER
        EXTERN KEY_ESC
        EXTERN KEY_LEFT
        EXTERN KEY_LEFT_SOFT
        EXTERN KEY_RIGHT
        EXTERN KEY_RIGHT_SOFT
        EXTERN KEY_STAR
        EXTERN KEY_UP
        EXTERN KEY_VOL_DOWN
        EXTERN KEY_VOL_UP


        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "enter">`:
        DATA
        DC8 "enter"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "sortd">`:
        DATA
        DC8 "sortd"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "sortr">`:
        DATA
        DC8 "sortr"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "setsort">`:
        DATA
        DC8 "setsort"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "tabcopy">`:
        DATA
        DC8 "tabcopy"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "tabmove">`:
        DATA
        DC8 "tabmove"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "lsoft">`:
        DATA
        DC8 "lsoft"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "rsoft">`:
        DATA
        DC8 "rsoft"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "esc">`:
        DATA
        DC8 "esc"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "up">`:
        DATA
        DC8 "up"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "down">`:
        DATA
        DC8 "down"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "left">`:
        DATA
        DC8 "left"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "right">`:
        DATA
        DC8 "right"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "volup">`:
        DATA
        DC8 "volup"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "voldown">`:
        DATA
        DC8 "voldown"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "del">`:
        DATA
        DC8 "del"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "sysopen">`:
        DATA
        DC8 "sysopen"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "*">`:
        DATA
        DC8 "*"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "#">`:
        DATA
        DC8 "#"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "0">`:
        DATA
        DC8 "0"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "1">`:
        DATA
        DC8 "1"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "2">`:
        DATA
        DC8 "2"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "3">`:
        DATA
        DC8 "3"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "4">`:
        DATA
        DC8 "4"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "5">`:
        DATA
        DC8 "5"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "6">`:
        DATA
        DC8 "6"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "7">`:
        DATA
        DC8 "7"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "8">`:
        DATA
        DC8 "8"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "9">`:
        DATA
        DC8 "9"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "none">`:
        DATA
        DC8 "none"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "open">`:
        DATA
        DC8 "open"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "back">`:
        DATA
        DC8 "back"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "rename">`:
        DATA
        DC8 "rename"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "past">`:
        DATA
        DC8 "past"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "copy">`:
        DATA
        DC8 "copy"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "move">`:
        DATA
        DC8 "move"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "cancel">`:
        DATA
        DC8 "cancel"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "newdir">`:
        DATA
        DC8 "newdir"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "menu">`:
        DATA
        DC8 "menu"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "swaptab">`:
        DATA
        DC8 "swaptab"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "prvdrv">`:
        DATA
        DC8 "prvdrv"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "nxtdrv">`:
        DATA
        DC8 "nxtdrv"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "invchk">`:
        DATA
        DC8 "invchk"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "chk">`:
        DATA
        DC8 "chk"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "chkall">`:
        DATA
        DC8 "chkall"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "unchall">`:
        DATA
        DC8 "unchall"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "dwn">`:
        DATA
        DC8 "dwn"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "pgup">`:
        DATA
        DC8 "pgup"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "pgdn">`:
        DATA
        DC8 "pgdn"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "bmlist">`:
        DATA
        DC8 "bmlist"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "bmadd">`:
        DATA
        DC8 "bmadd"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "filter">`:
        DATA
        DC8 "filter"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "refresh">`:
        DATA
        DC8 "refresh"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "root">`:
        DATA
        DC8 "root"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "exit">`:
        DATA
        DC8 "exit"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "showpath">`:
        DATA
        DC8 "showpath"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "begin">`:
        DATA
        DC8 "begin"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "sortn">`:
        DATA
        DC8 "sortn"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "sorte">`:
        DATA
        DC8 "sorte"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "sorts">`:
        DATA
        DC8 "sorts"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
keys_file:
        DATA
        DC8 6DH, 0, 63H, 0, 6BH, 0, 65H, 0
        DC8 79H, 0, 73H, 0, 2EH, 0, 63H, 0
        DC8 66H, 0, 67H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_I:DATA:SORT:NOROOT(2)
procmap:
        DS8 92
        REQUIRE `?<Initializer for procmap>`
procmapl:
        DS8 92
        REQUIRE `?<Initializer for procmapl>`
keyMap:
        DS8 256
        REQUIRE `?<Initializer for keyMap>`

        RSEG DATA_C:CONST:SORT:NOROOT(2)
keynames:
        DATA
        DC32 KEY_LEFT_SOFT, `?<Constant "lsoft">`, KEY_RIGHT_SOFT
        DC32 `?<Constant "rsoft">`, KEY_ENTER, `?<Constant "enter">`, KEY_UP
        DC32 `?<Constant "up">`, KEY_DOWN, `?<Constant "down">`, KEY_LEFT
        DC32 `?<Constant "left">`, KEY_RIGHT, `?<Constant "right">`, KEY_VOL_UP
        DC32 `?<Constant "volup">`, KEY_VOL_DOWN, `?<Constant "voldown">`
        DC32 KEY_DEL, `?<Constant "del">`, KEY_ESC, `?<Constant "esc">`
        DC32 KEY_STAR, `?<Constant "*">`, KEY_DIEZ, `?<Constant "#">`
        DC32 KEY_DIGITAL_0, `?<Constant "0">`, KEY_DIGITAL_0, `?<Constant "1">`
        DC32 KEY_DIGITAL_0, `?<Constant "2">`, KEY_DIGITAL_0, `?<Constant "3">`
        DC32 KEY_DIGITAL_0, `?<Constant "4">`, KEY_DIGITAL_0, `?<Constant "5">`
        DC32 KEY_DIGITAL_0, `?<Constant "6">`, KEY_DIGITAL_0, `?<Constant "7">`
        DC32 KEY_DIGITAL_0, `?<Constant "8">`, KEY_DIGITAL_0, `?<Constant "9">`
        DC32 `?<Constant "none">`, 0H, `?<Constant "open">`, ??DoOpen
        DC32 `?<Constant "back">`, ??DoBackK, `?<Constant "rename">`, ??DoRen
        DC32 `?<Constant "past">`, ??DoPaste, `?<Constant "copy">`, ??DoCopy
        DC32 `?<Constant "move">`, ??DoMove, `?<Constant "del">`, ??DoDel
        DC32 `?<Constant "cancel">`, ??DoCancel, `?<Constant "newdir">`
        DC32 ??DoNewDir, `?<Constant "menu">`, ??DoMenu
        DC32 `?<Constant "swaptab">`, ??DoSwapTab, `?<Constant "prvdrv">`
        DC32 ??DoPrvDrv, `?<Constant "nxtdrv">`, ??DoNxtDrv
        DC32 `?<Constant "invchk">`, ??DoInvChk, `?<Constant "chk">`, ??DoChk
        DC32 `?<Constant "chkall">`, ??DoChkAll, `?<Constant "unchall">`
        DC32 ??DoUnCAll, `?<Constant "up">`, ??DoUp, `?<Constant "dwn">`
        DC32 ??DoDwn, `?<Constant "pgup">`, ??DoPgUp, `?<Constant "pgdn">`
        DC32 ??DoPgDwn, `?<Constant "bmlist">`, ??DoBMList
        DC32 `?<Constant "bmadd">`, ??DoBMAdd, `?<Constant "filter">`
        DC32 ??DoFilter, `?<Constant "refresh">`, ??DoRefresh
        DC32 `?<Constant "root">`, ??DoRoot, `?<Constant "exit">`, ??DoExit
        DC32 `?<Constant "showpath">`, ??DoShowPath, `?<Constant "begin">`
        DC32 ??DoBegin, `?<Constant "sortn">`, ??DoSortN, `?<Constant "sorte">`
        DC32 ??DoSortE, `?<Constant "sorts">`, ??DoSortS, `?<Constant "sortd">`
        DC32 ??DoSortD, `?<Constant "sortr">`, ??DoSortR
        DC32 `?<Constant "setsort">`, ??DoSetSort, `?<Constant "tabcopy">`
        DC32 ??DoTabCopy, `?<Constant "tabmove">`, ??DoTabMove
        DC32 `?<Constant "sysopen">`, ??DoSysOpen

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??KeysProc??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??KeysProc

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??KeysProc
        ARM
??KeysProc:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        LDR      R5,??KeysProc_1  ;; ??DoErrKey
        MOV      R7,R0
        MOV      R4,R1
        MVN      R2,#+0
        MOV      R1,R7
        _BLF     ??strtolower,??strtolower??rA
        MVN      R2,#+0
        MOV      R1,R4
        MOV      R0,R4
        _BLF     ??strtolower,??strtolower??rA
        MOV      R6,#+0
        MOV      R0,R7
        SWI      +346
        CMP      R0,#+1
        BLT      ??KeysProc_2
        ADD      R1,R0,R7
        LDRB     R1,[R1, #-1]
        CMP      R1,#+43
        BNE      ??KeysProc_2
        MOV      R6,#+1
        ADD      R0,R0,R7
        MOV      R1,#+0
        STRB     R1,[R0, #-1]
??KeysProc_2:
        MOV      R8,#+0
        B        ??KeysProc_3
??KeysProc_4:
        ADD      R8,R8,#+1
??KeysProc_3:
        CMP      R8,#+23
        POPCS    {R4-R8,PC}
        LDR      R0,??DataTable5  ;; keynames
        MOV      R1,R7
        ADD      R0,R0,R8, LSL #+3
        LDR      R0,[R0, #+4]
        SWI      +345
        CMP      R0,#+0
        BNE      ??KeysProc_4
        CMN      R8,#+1
        POPEQ    {R4-R8,PC}
        MOV      R7,#+0
        B        ??KeysProc_5
??KeysProc_6:
        ADD      R7,R7,#+1
??KeysProc_5:
        CMP      R7,#+39
        BCS      ??KeysProc_7
        LDR      R0,??DataTable5  ;; keynames
        MOV      R1,R4
        ADD      R0,R0,R7, LSL #+3
        LDR      R0,[R0, #+184]
        SWI      +345
        CMP      R0,#+0
        BNE      ??KeysProc_6
        LDR      R0,??DataTable5  ;; keynames
        ADD      R0,R0,R7, LSL #+3
        LDR      R5,[R0, #+188]
??KeysProc_7:
        LDR      R0,??DataTable12  ;; procmap
        CMP      R6,#+0
        ADDNE    R0,R0,R8, LSL #+2
        STRNE    R5,[R0, #+92]
        POPNE    {R4-R8,PC}
        STR      R5,[R0, +R8, LSL #+2]
        POP      {R4-R8,PC}       ;; return
        DATA
??KeysProc_1:
        DC32     ??DoErrKey
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??InitializeKeyMap??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??InitializeKeyMap

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??InitializeKeyMap
        ARM
??InitializeKeyMap:
        LDR      R0,??InitializeKeyMap_1  ;; procmap + 184
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R2,#+255
        MOV      R1,#+255
        SWI      +274
        LDR      R2,??DataTable9  ;; procmap
        MOV      R0,#+0
        B        ??InitializeKeyMap_2
??InitializeKeyMap_3:
        LDR      R1,??DataTable5  ;; keynames
        LDR      R1,[R1, +R0, LSL #+3]
        LDR      R1,[R1, #+0]
        CMP      R1,#+255
        ADDLT    R1,R1,R2
        STRBLT   R0,[R1, #+184]
        ADD      R0,R0,#+1
??InitializeKeyMap_2:
        CMP      R0,#+13
        BCC      ??InitializeKeyMap_3
        MOV      R0,#+0
??InitializeKeyMap_4:
        LDR      R1,??InitializeKeyMap_1+0x4  ;; KEY_DIGITAL_0
        LDR      R1,[R1, #+0]
        ADD      R1,R0,R1
        CMP      R1,#+255
        BGE      ??InitializeKeyMap_5
        LDR      R2,??DataTable9  ;; procmap
        ADD      R1,R1,R2
        ADD      R2,R0,#+13
        STRB     R2,[R1, #+184]
??InitializeKeyMap_5:
        ADD      R0,R0,#+1
        CMP      R0,#+10
        BLT      ??InitializeKeyMap_4
        POP      {PC}             ;; return
        DATA
??InitializeKeyMap_1:
        DC32     procmap + 184
        DC32     KEY_DIGITAL_0
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable5:
        DC32     keynames

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetKeynameIndexByKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??GetKeynameIndexByKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??GetKeynameIndexByKey
        ARM
??GetKeynameIndexByKey:
        CMP      R0,#+255
        BXEQ     LR
        LDR      R1,??DataTable9  ;; procmap
        ADD      R0,R0,R1
        LDRB     R0,[R0, #+184]
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetKeyprocByKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??GetKeyprocByKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??GetKeyprocByKey
        ARM
??GetKeyprocByKey:
        CMP      R0,#+255
        BEQ      ??GetKeyprocByKey_1
        LDR      R1,??DataTable12  ;; procmap
        ADD      R0,R0,R1
        LDRB     R0,[R0, #+184]
        CMP      R0,#+255
        LDRNE    R0,[R1, +R0, LSL #+2]
        BXNE     LR
??GetKeyprocByKey_1:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetKeyprocLongByKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??GetKeyprocLongByKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??GetKeyprocLongByKey
        ARM
??GetKeyprocLongByKey:
        CMP      R0,#+255
        BEQ      ??GetKeyprocLongByKey_1
        LDR      R1,??DataTable9  ;; procmap
        ADD      R0,R0,R1
        LDRB     R0,[R0, #+184]
        CMP      R0,#+255
        ADDNE    R0,R1,R0, LSL #+2
        LDRNE    R0,[R0, #+92]
        BXNE     LR
??GetKeyprocLongByKey_1:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     procmap

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??DoKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??DoKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??DoKey
        ARM
??DoKey:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        AND      R1,R1,#0xFF
        CMP      R1,#+255
        POPEQ    {PC}
        LDR      R2,??DataTable12  ;; procmap
        ADD      R1,R1,R2
        LDRB     R1,[R1, #+184]
        CMP      R1,#+255
        POPEQ    {PC}
        CMP      R0,#+0
        BEQ      ??DoKey_1
        ADD      R0,R2,R1, LSL #+2
        LDR      R0,[R0, #+92]
        CMP      R0,#+0
        POPEQ    {PC}
        LDR      R0,??DataTable12  ;; procmap
        ADD      R0,R0,R1, LSL #+2
        LDR      R0,[R0, #+92]
        B        ??DoKey_2
??DoKey_1:
        MOV      R0,R1
        LDR      R0,[R2, +R0, LSL #+2]
        CMP      R0,#+0
        POPEQ    {PC}
        LDR      R0,??DataTable12  ;; procmap
        LDR      R0,[R0, +R1, LSL #+2]
??DoKey_2:
        BLX      R0
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable12:
        DC32     procmap

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??LoadKeys??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??LoadKeys

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??LoadKeys
        ARM
??LoadKeys:
        LDR      R0,??LoadKeys_1  ;; CONFIG_LOAD_KEYS
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??LoadKeys_2
        LDR      R2,??LoadKeys_1+0x4  ;; ??KeysProc
        LDR      R1,??LoadKeys_1+0x8  ;; keys_file
        MOV      R0,#+1
        _BLF     ??EnumIni,??EnumIni??rA
??LoadKeys_2:
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        B        ??InitializeKeyMap  ;; tailcall
        DATA
??LoadKeys_1:
        DC32     CONFIG_LOAD_KEYS
        DC32     ??KeysProc
        DC32     keys_file
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        ARM
??strtolower??rA:
        LDR      R12,??Subroutine7_0  ;; ??strtolower
        BX       R12
        DATA
??Subroutine7_0:
        DC32     ??strtolower
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        ARM
??EnumIni??rA:
        LDR      R12,??Subroutine8_0  ;; ??EnumIni
        BX       R12
        DATA
??Subroutine8_0:
        DC32     ??EnumIni
        CFI EndBlock cfiBlock15

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for procmap>`:
        DATA
        DC32 0H, 0H, 0H, ??DoUp, ??DoDwn, ??DoPrvDrv, ??DoNxtDrv, 0H, 0H
        DC32 ??DoDel, 0H, 0H, 0H, ??DoChk, ??DoSwapTab, ??DoUp, ??DoPgUp
        DC32 ??DoPrvDrv, ??DoOpen, ??DoNxtDrv, 0H, ??DoDwn, ??DoPgDwn
`?<Initializer for procmapl>`:
        DC32 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H
        DC32 0H, 0H, 0H, 0H, 0H, 0H
`?<Initializer for keyMap>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 712 bytes in segment CODE
// 911 bytes in segment DATA_C
// 440 bytes in segment DATA_I
// 440 bytes in segment DATA_ID
//  12 bytes in segment INITTAB
// 
//   660 bytes of CODE  memory (+ 64 bytes shared)
// 1 351 bytes of CONST memory
//   440 bytes of DATA  memory
//
//Errors: none
//Warnings: none
