##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:48:25 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ZLib\mini #
#                       zip\unzip.c                                          #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ZLib\mini #
#                       zip\unzip.c -D LOG -D USEZLIB -lCN                   #
#                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\L #
#                       ist\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcse\ #
#                       Release\List\ -o Z:\home\perk11\www\perk11.info\svn\ #
#                       SE\mcse\Release\Obj\ -s9 --no_unroll                 #
#                       --no_code_motion --cpu_mode arm --endian little      #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config Z:\home\perk11\IAR2\arm\LIB #
#                       \dl5tpainl8n.h -I Z:\home\perk11\IAR2\arm\INC\       #
#                       --inline_threshold=2                                 #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\L #
#                       ist\unzip.lst                                        #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\O #
#                       bj\unzip.r79                                         #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\mcse\ZLib\minizip\unzip.c
      1          /* unzip.c -- IO for uncompress .zip files using zlib
      2             Version 1.01e, February 12th, 2005
      3          
      4             Copyright (C) 1998-2005 Gilles Vollant
      5          
      6             Read unzip.h for more info
      7          */
      8          
      9          /* Decryption code comes from crypt.c by Info-ZIP but has been greatly reduced in terms of
     10          compatibility with older software. The following is from the original crypt.c. Code
     11          woven in by Terry Thorsen 1/2003.
     12          */
     13          /*
     14            Copyright (c) 1990-2000 Info-ZIP.  All rights reserved.
     15          
     16            See the accompanying file LICENSE, version 2000-Apr-09 or later
     17            (the contents of which are also included in zip.h) for terms of use.
     18            If, for some reason, all these files are missing, the Info-ZIP license
     19            also may be found at:  ftp://ftp.info-zip.org/pub/infozip/license.html
     20          */
     21          /*
     22            crypt.c (full version) by Info-ZIP.	  Last revised:  [see crypt.h]
     23          
     24            The encryption/decryption parts of this source code (as opposed to the
     25            non-echoing password parts) were originally written in Europe.  The
     26            whole source package can be freely distributed, including from the USA.
     27            (Prior to January 2000, re-export from the US was a violation of US law.)
     28           */
     29          
     30          /*
     31            This encryption code is a direct transcription of the algorithm from
     32            Roger Schlafly, described by Phil Katz in the file appnote.txt.  This
     33            file (appnote.txt) is distributed with the PKZIP program (even in the
     34            version without encryption capabilities).
     35           */
     36          
     37          
     38          //#include <stdio.h>
     39          //#include <stdlib.h>
     40          //#include <string.h>
     41          //#include "..\zlib.h"
     42          #include "unzip.h"
     43          
     44          #ifdef STDC
     45          //#  include <stddef.h>
     46          //#  include <string.h>
     47          //#  include <stdlib.h>
     48          #endif
     49          //#ifdef NO_ERRNO_H
     50          	extern int errno;
     51          //#else
     52          //#   include <errno.h>
     53          //#endif
     54          
     55          #ifndef CASESENSITIVITYDEFAULT_NO
     56          #  if !defined(unix) && !defined(CASESENSITIVITYDEFAULT_YES)
     57          #	define CASESENSITIVITYDEFAULT_NO
     58          #  endif
     59          #endif
     60          
     61          
     62          #ifndef UNZ_BUFSIZE
     63          #define UNZ_BUFSIZE (16384)
     64          #endif
     65          
     66          #ifndef UNZ_MAXFILENAMEINZIP
     67          #define UNZ_MAXFILENAMEINZIP (256)
     68          #endif
     69          
     70          #ifndef ALLOC
     71          # define ALLOC(size) (malloc(size))
     72          #endif
     73          #ifndef TRYFREE
     74          # define TRYFREE(p) {if (p) mfree(p);}
     75          #endif
     76          
     77          #define SIZECENTRALDIRITEM (0x2e)
     78          #define SIZEZIPLOCALHEADER (0x1e)
     79          
     80          
     81          
     82          

   \                                 In segment DATA_C, align 4, align-sorted
     83          const char unz_copyright[] =
   \                     unz_copyright:
   \   00000000   20756E7A6970       DC8 20H, 75H, 6EH, 7AH, 69H, 70H, 20H, 31H
   \              2031        
   \   00000008   2E303120436F       DC8 2EH, 30H, 31H, 20H, 43H, 6FH, 70H, 79H
   \              7079        
   \   00000010   726967687420       DC8 72H, 69H, 67H, 68H, 74H, 20H, 31H, 39H
   \              3139        
   \   00000018   39382D323030       DC8 39H, 38H, 2DH, 32H, 30H, 30H, 34H, 20H
   \              3420        
   \   00000020   47696C6C6573       DC8 47H, 69H, 6CH, 6CH, 65H, 73H, 20H, 56H
   \              2056        
   \   00000028   6F6C6C616E74       DC8 6FH, 6CH, 6CH, 61H, 6EH, 74H, 20H, 2DH
   \              202D        
   \   00000030   20687474703A       DC8 20H, 68H, 74H, 74H, 70H, 3AH, 2FH, 2FH
   \              2F2F        
   \   00000038   7777772E7769       DC8 77H, 77H, 77H, 2EH, 77H, 69H, 6EH, 69H
   \              6E69        
   \   00000040   6D6167652E63       DC8 6DH, 61H, 67H, 65H, 2EH, 63H, 6FH, 6DH
   \              6F6D        
   \   00000048   2F7A4C696244       DC8 2FH, 7AH, 4CH, 69H, 62H, 44H, 6CH, 6CH
   \              6C6C        
   \   00000050   00                 DC8 0
   \   00000051   000000             DC8 0, 0, 0
     84             " unzip 1.01 Copyright 1998-2004 Gilles Vollant - http://www.winimage.com/zLibDll";
     85          
     86          /* unz_file_info_interntal contain internal info about a file in zipfile*/
     87          typedef struct unz_file_info_internal_s
     88          {
     89          	uLong offset_curfile;/* relative offset of  header 4 bytes */
     90          } unz_file_info_internal;
     91          
     92          
     93          /* file_in_zip_read_info_s contain internal information about a file in zipfile,
     94          	when reading and decompress it */
     95          typedef struct
     96          {
     97          	char  *read_buffer;		 /* internal buffer for compressed data */
     98          	z_stream stream;			/* zLib stream structure for inflate */
     99          
    100          	uLong pos_in_zipfile;	   /* position in byte on the zipfile, for fseek*/
    101          	uLong stream_initialised;   /* flag set if stream structure is initialised*/
    102          
    103          	uLong offset_local_extrafield;/* offset of the  extra field */
    104          	uInt  size_local_extrafield;/* size of the  extra field */
    105          	uLong pos_local_extrafield;   /* position in the  extra field in read*/
    106          
    107          	uLong crc32;				/* crc32 of all data uncompressed */
    108          	uLong crc32_wait;		   /* crc32 we must obtain after decompress all */
    109          	uLong rest_read_compressed; /* number of byte to be decompressed */
    110          	uLong rest_read_uncompressed;/*number of byte to be obtained after decomp*/
    111          	zlib_filefunc_def z_filefunc;
    112          	voidpf filestream;		/* io structore of the zipfile */
    113          	uLong compression_method;   /* compression method (0==store) */
    114          	uLong byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
    115          	int   raw;
    116          } file_in_zip_read_info_s;
    117          
    118          
    119          /* unz_s contain internal information about the zipfile
    120          */
    121          typedef struct
    122          {
    123          	zlib_filefunc_def z_filefunc;
    124          	voidpf filestream;		/* io structore of the zipfile */
    125          	unz_global_info gi;	   /* public global information */
    126          	uLong byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
    127          	uLong num_file;			 /* number of the current file in the zipfile*/
    128          	uLong pos_in_central_dir;   /* pos of the current file in the central dir*/
    129          	uLong current_file_ok;	  /* flag about the usability of the current file*/
    130          	uLong central_pos;		  /* position of the beginning of the central dir*/
    131          
    132          	uLong size_central_dir;	 /* size of the central directory  */
    133          	uLong offset_central_dir;   /* offset of start of central directory with
    134          								   respect to the starting disk number */
    135          
    136          	unz_file_info cur_file_info; /* public info about the current file in zip*/
    137          	unz_file_info_internal cur_file_info_internal; /* private info about it*/
    138          	file_in_zip_read_info_s* pfile_in_zip_read; /* structure about the current
    139          										file if we are decompressing it */
    140          	int encrypted;
    141          #	ifndef NOUNCRYPT
    142          	unsigned long keys[3];	 /* keys defining the pseudo-random sequence */
    143          	const unsigned long* pcrc_32_tab;
    144          #	endif
    145          } unz_s;
    146          
    147          
    148          #ifndef NOUNCRYPT
    149          #include "crypt.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int update_keys(unsigned long *, unsigned long const *, int)
   \                     update_keys:
   \   00000000   003090E5           LDR      R3,[R0, #+0]
   \   00000004   00C090E5           LDR      R12,[R0, #+0]
   \   00000008   033022E0           EOR      R3,R2,R3
   \   0000000C   FF3003E2           AND      R3,R3,#0xFF
   \   00000010   033191E7           LDR      R3,[R1, +R3, LSL #+2]
   \   00000014   2C3423E0           EOR      R3,R3,R12, LSR #+8
   \   00000018   003080E5           STR      R3,[R0, #+0]
   \   0000001C   043090E5           LDR      R3,[R0, #+4]
   \   00000020   00C090E5           LDR      R12,[R0, #+0]
   \   00000024   FFC00CE2           AND      R12,R12,#0xFF
   \   00000028   03308CE0           ADD      R3,R12,R3
   \   0000002C   38C09FE5           LDR      R12,??update_keys_0  ;; 0x8088405
   \   00000030   043080E5           STR      R3,[R0, #+4]
   \   00000034   043090E5           LDR      R3,[R0, #+4]
   \   00000038   9C0303E0           MUL      R3,R12,R3
   \   0000003C   013083E2           ADD      R3,R3,#+1
   \   00000040   043080E5           STR      R3,[R0, #+4]
   \   00000044   083090E5           LDR      R3,[R0, #+8]
   \   00000048   04C090E5           LDR      R12,[R0, #+4]
   \   0000004C   2C3C23E0           EOR      R3,R3,R12, LSR #+24
   \   00000050   FF3003E2           AND      R3,R3,#0xFF
   \   00000054   031191E7           LDR      R1,[R1, +R3, LSL #+2]
   \   00000058   083090E5           LDR      R3,[R0, #+8]
   \   0000005C   231421E0           EOR      R1,R1,R3, LSR #+8
   \   00000060   081080E5           STR      R1,[R0, #+8]
   \   00000064   0200A0E1           MOV      R0,R2
   \   00000068   1EFF2FE1           BX       LR               ;; return
   \                     ??update_keys_0:
   \   0000006C   05840808           DC32     0x8088405
    150          #endif
    151          
    152          /* ===========================================================================
    153          	 Read a byte from a gz_stream; update next_in and avail_in. Return EOF
    154             for end of file.
    155             IN assertion: the stream s has been sucessfully opened for reading.
    156          */
    157          
    158          int unzlocal_getByte (
    159          	const zlib_filefunc_def* pzlib_filefunc_def,
    160          	voidpf filestream,
    161          	int *pi);
    162          

   \                                 In segment CODE, align 4, keep-with-next
    163          int unzlocal_getByte(
    164          	const zlib_filefunc_def* pzlib_filefunc_def,
    165          	voidpf filestream,
    166          	int *pi)
    167          {
   \                     unzlocal_getByte:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
    168          	unsigned char c;
    169          	int err = (int)ZREAD(*pzlib_filefunc_def,filestream,&c,1);
   \   0000000C   1C0094E5           LDR      R0,[R4, #+28]
   \   00000010   04C094E5           LDR      R12,[R4, #+4]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0130A0E3           MOV      R3,#+1
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   3CFF2FE1           BLX      R12
    170          	if (err==1)
   \   00000028   010050E3           CMP      R0,#+1
   \   0000002C   0300001A           BNE      ??unzlocal_getByte_0
    171          	{
    172                  *pi = (int)c;
   \   00000030   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000034   000086E5           STR      R0,[R6, #+0]
    173          		return UNZ_OK;
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   7280BDE8           POP      {R1,R4-R6,PC}
    174          	}
    175          	else
    176          	{
    177          		if (ZERROR(*pzlib_filefunc_def,filestream))
   \                     ??unzlocal_getByte_0:
   \   00000040   1C0094E5           LDR      R0,[R4, #+28]
   \   00000044   182094E5           LDR      R2,[R4, #+24]
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   32FF2FE1           BLX      R2
   \   00000050   000050E3           CMP      R0,#+0
    178          			return UNZ_ERRNO;
   \   00000054   0000E013           MVNNE    R0,#+0
    179          		else
    180          			return UNZ_EOF;
   \   00000058   7280BDE8           POP      {R1,R4-R6,PC}    ;; return
    181          	}
    182          }
    183          
    184          
    185          /* ===========================================================================
    186             Reads a long in LSB order from the given gz_stream. Sets
    187          */
    188          int unzlocal_getShort (
    189          	const zlib_filefunc_def* pzlib_filefunc_def,
    190          	voidpf filestream,
    191          	uLong *pX);
    192          

   \                                 In segment CODE, align 4, keep-with-next
    193          int unzlocal_getShort (
    194          	const zlib_filefunc_def* pzlib_filefunc_def,
    195          	voidpf filestream,
    196          	uLong *pX)
    197          {
   \                     unzlocal_getShort:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0050A0E1           MOV      R5,R0
    198          	unsigned char buf[2];
    199          
    200          	int err = (int)ZREAD(*pzlib_filefunc_def,filestream,buf,2);
   \   0000000C   1C0095E5           LDR      R0,[R5, #+28]
   \   00000010   04C095E5           LDR      R12,[R5, #+4]
   \   00000014   0160A0E1           MOV      R6,R1
   \   00000018   0240A0E1           MOV      R4,R2
   \   0000001C   0230A0E3           MOV      R3,#+2
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   3CFF2FE1           BLX      R12
    201          	if (err==2)
   \   00000028   020050E3           CMP      R0,#+2
   \   0000002C   0500001A           BNE      ??unzlocal_getShort_0
    202          	{
    203          		*pX = (uLong)buf[0] + (((uLong)buf[1])<<8);
   \   00000030   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000034   0110DDE5           LDRB     R1,[SP, #+1]
   \   00000038   010480E0           ADD      R0,R0,R1, LSL #+8
   \   0000003C   000084E5           STR      R0,[R4, #+0]
    204          		return UNZ_OK;
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   7280BDE8           POP      {R1,R4-R6,PC}
    205          	}
    206          	else
    207          	{
    208                  *pX = 0;
   \                     ??unzlocal_getShort_0:
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   000084E5           STR      R0,[R4, #+0]
    209          		if (ZERROR(*pzlib_filefunc_def,filestream))
   \   00000050   1C0095E5           LDR      R0,[R5, #+28]
   \   00000054   182095E5           LDR      R2,[R5, #+24]
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   32FF2FE1           BLX      R2
   \   00000060   000050E3           CMP      R0,#+0
    210          			return UNZ_ERRNO;
   \   00000064   0000E013           MVNNE    R0,#+0
    211          		else
    212          			return UNZ_EOF;
   \   00000068   7280BDE8           POP      {R1,R4-R6,PC}    ;; return
    213          	}
    214          }
    215          

   \                                 In segment CODE, align 4, keep-with-next
    216          int unzlocal_getLong (
    217          	const zlib_filefunc_def* pzlib_filefunc_def,
    218          	voidpf filestream,
    219          	uLong *pX)
    220          {
   \                     unzlocal_getLong:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0050A0E1           MOV      R5,R0
    221          	unsigned char buf[4];
    222          
    223          	int err = (int)ZREAD(*pzlib_filefunc_def,filestream,buf,4);
   \   0000000C   1C0095E5           LDR      R0,[R5, #+28]
   \   00000010   04C095E5           LDR      R12,[R5, #+4]
   \   00000014   0160A0E1           MOV      R6,R1
   \   00000018   0240A0E1           MOV      R4,R2
   \   0000001C   0430A0E3           MOV      R3,#+4
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   3CFF2FE1           BLX      R12
    224          	if (err==4)
   \   00000028   040050E3           CMP      R0,#+4
   \   0000002C   0900001A           BNE      ??unzlocal_getLong_0
    225          	{
    226          		*pX = (uLong)buf[0] + (((uLong)buf[1])<<8) + (((uLong)buf[2])<<16) + (((uLong)buf[3])<<24);
   \   00000030   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000034   0110DDE5           LDRB     R1,[SP, #+1]
   \   00000038   010480E0           ADD      R0,R0,R1, LSL #+8
   \   0000003C   0210DDE5           LDRB     R1,[SP, #+2]
   \   00000040   010880E0           ADD      R0,R0,R1, LSL #+16
   \   00000044   0310DDE5           LDRB     R1,[SP, #+3]
   \   00000048   010C80E0           ADD      R0,R0,R1, LSL #+24
   \   0000004C   000084E5           STR      R0,[R4, #+0]
    227          		return UNZ_OK;
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   7280BDE8           POP      {R1,R4-R6,PC}
    228          	}
    229          	else
    230          	{
    231                  *pX = 0;
   \                     ??unzlocal_getLong_0:
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   000084E5           STR      R0,[R4, #+0]
    232          		if (ZERROR(*pzlib_filefunc_def,filestream))
   \   00000060   1C0095E5           LDR      R0,[R5, #+28]
   \   00000064   182095E5           LDR      R2,[R5, #+24]
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   32FF2FE1           BLX      R2
   \   00000070   000050E3           CMP      R0,#+0
    233          			return UNZ_ERRNO;
   \   00000074   0000E013           MVNNE    R0,#+0
    234          		else
    235          			return UNZ_EOF;
   \   00000078   7280BDE8           POP      {R1,R4-R6,PC}    ;; return
    236          	}
    237          }
    238          
    239          
    240          /* My own strcmpi / strcasecmp */

   \                                 In segment CODE, align 4, keep-with-next
    241          int strcmpcasenosensitive_internal (
    242          	const char* fileName1,
    243          	const char* fileName2)
    244          {
   \                     strcmpcasenosensitive_internal:
   \   00000000   010000EA           B        ??strcmpcasenosensitive_internal_0
    245          	for (;;)
    246          	{
    247          		char c1=*(fileName1++);
    248          		char c2=*(fileName2++);
    249          		if ((c1>='a') && (c1<='z'))
    250          			c1 -= 0x20;
    251          		if ((c2>='a') && (c2<='z'))
    252          			c2 -= 0x20;
    253          		if (c1=='\0')
    254          			return ((c2=='\0') ? 0 : -1);
    255          		if (c2=='\0')
    256          			return 1;
    257          		if (c1<c2)
    258          			return -1;
    259          		if (c1>c2)
   \                     ??strcmpcasenosensitive_internal_1:
   \   00000004   030052E1           CMP      R2,R3
   \   00000008   1300003A           BCC      ??strcmpcasenosensitive_internal_2
   \                     ??strcmpcasenosensitive_internal_0:
   \   0000000C   ........           LDRB     R3,[R0], #+1
   \   00000010   ........           LDRB     R2,[R1], #+1
   \   00000014   610053E3           CMP      R3,#+97
   \   00000018   0200003A           BCC      ??strcmpcasenosensitive_internal_3
   \   0000001C   7B0053E3           CMP      R3,#+123
   \   00000020   E0308332           ADDCC    R3,R3,#+224
   \   00000024   FF300332           ANDCC    R3,R3,#0xFF
   \                     ??strcmpcasenosensitive_internal_3:
   \   00000028   610052E3           CMP      R2,#+97
   \   0000002C   0200003A           BCC      ??strcmpcasenosensitive_internal_4
   \   00000030   7B0052E3           CMP      R2,#+123
   \   00000034   E0208232           ADDCC    R2,R2,#+224
   \   00000038   FF200232           ANDCC    R2,R2,#0xFF
   \                     ??strcmpcasenosensitive_internal_4:
   \   0000003C   03C0B0E1           MOVS     R12,R3
   \   00000040   0300001A           BNE      ??strcmpcasenosensitive_internal_5
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   0700001A           BNE      ??strcmpcasenosensitive_internal_6
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   1EFF2FE1           BX       LR
   \                     ??strcmpcasenosensitive_internal_5:
   \   00000054   02C0B0E1           MOVS     R12,R2
   \   00000058   0100001A           BNE      ??strcmpcasenosensitive_internal_7
   \                     ??strcmpcasenosensitive_internal_2:
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   1EFF2FE1           BX       LR
   \                     ??strcmpcasenosensitive_internal_7:
   \   00000064   020053E1           CMP      R3,R2
   \   00000068   E5FFFF2A           BCS      ??strcmpcasenosensitive_internal_1
   \                     ??strcmpcasenosensitive_internal_6:
   \   0000006C   0000E0E3           MVN      R0,#+0
   \   00000070   1EFF2FE1           BX       LR               ;; return
    260          			return 1;
    261          	}
    262          }
    263          
    264          
    265          #ifdef  CASESENSITIVITYDEFAULT_NO
    266          #define CASESENSITIVITYDEFAULTVALUE 2
    267          #else
    268          #define CASESENSITIVITYDEFAULTVALUE 1
    269          #endif
    270          
    271          #ifndef STRCMPCASENOSENTIVEFUNCTION
    272          #define STRCMPCASENOSENTIVEFUNCTION strcmpcasenosensitive_internal
    273          #endif
    274          
    275          /*
    276             Compare two filename (fileName1,fileName2).
    277             If iCaseSenisivity = 1, comparision is case sensitivity (like strcmp)
    278             If iCaseSenisivity = 2, comparision is not case sensitivity (like strcmpi
    279          																or strcasecmp)
    280             If iCaseSenisivity = 0, case sensitivity is defaut of your operating system
    281          		(like 1 on Unix, 2 on Windows)
    282          
    283          */

   \                                 In segment CODE, align 4, keep-with-next
    284          extern int unzStringFileNameCompare (
    285          	const char* fileName1,
    286          	const char* fileName2,
    287          	int iCaseSensitivity)
    288          {
   \                     unzStringFileNameCompare:
   \   00000000   00402DE9           PUSH     {LR}
    289          	if (iCaseSensitivity==0)
   \   00000004   000052E3           CMP      R2,#+0
   \   00000008   0300000A           BEQ      ??unzStringFileNameCompare_0
    290          		iCaseSensitivity=CASESENSITIVITYDEFAULTVALUE;
    291          
    292          	if (iCaseSensitivity==1)
   \   0000000C   010052E3           CMP      R2,#+1
   \   00000010   0100001A           BNE      ??unzStringFileNameCompare_0
    293          		return strcmp(fileName1,fileName2);
   \   00000014   590100EF           SWI      +345
   \   00000018   0080BDE8           POP      {PC}
    294          
    295          	return STRCMPCASENOSENTIVEFUNCTION(fileName1,fileName2);
   \                     ??unzStringFileNameCompare_0:
   \   0000001C   0040BDE8           POP      {LR}             ;; Pop
   \   00000020   ........           B        strcmpcasenosensitive_internal  ;; tailcall
    296          }
    297          
    298          #ifndef BUFREADCOMMENT
    299          #define BUFREADCOMMENT (0x400)
    300          #endif
    301          
    302          /*
    303            Locate the Central directory of a zipfile (at the end, just before
    304          	the global comment)
    305          */
    306           uLong unzlocal_SearchCentralDir (
    307          	const zlib_filefunc_def* pzlib_filefunc_def,
    308          	voidpf filestream);
    309          

   \                                 In segment CODE, align 4, keep-with-next
    310           uLong unzlocal_SearchCentralDir(
    311          	const zlib_filefunc_def* pzlib_filefunc_def,
    312          	voidpf filestream)
    313          {
   \                     unzlocal_SearchCentralDir:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    314          	unsigned char* buf;
    315          	uLong uSizeFile;
    316          	uLong uBackRead;
    317          	uLong uMaxBack=0xffff; /* maximum size of global comment */
    318          	uLong uPosFound=0;
    319          
    320          	if (ZSEEK(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)
   \   00000008   1C0094E5           LDR      R0,[R4, #+28]
   \   0000000C   106094E5           LDR      R6,[R4, #+16]
   \   00000010   FF70A0E3           MOV      R7,#+255
   \   00000014   FF7C87E3           ORR      R7,R7,#0xFF00
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   0230A0E3           MOV      R3,#+2
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   36FF2FE1           BLX      R6
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   4200001A           BNE      ??unzlocal_SearchCentralDir_0
    321          		return 0;
    322          
    323          	uSizeFile = ZTELL(*pzlib_filefunc_def,filestream);
   \   00000030   1C0094E5           LDR      R0,[R4, #+28]
   \   00000034   00109DE5           LDR      R1,[SP, #+0]
   \   00000038   0C2094E5           LDR      R2,[R4, #+12]
   \   0000003C   32FF2FE1           BLX      R2
   \   00000040   0060A0E1           MOV      R6,R0
    324          
    325          	if (uMaxBack>uSizeFile)
   \   00000044   070056E1           CMP      R6,R7
    326          		uMaxBack = uSizeFile;
   \   00000048   0670A031           MOVCC    R7,R6
    327          
    328          	buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);
   \   0000004C   0400A0E3           MOV      R0,#+4
   \   00000050   400E80E3           ORR      R0,R0,#0x400
   \   00000054   030100EF           SWI      +259
   \   00000058   0080B0E1           MOVS     R8,R0
    329          	if (buf==NULL)
   \   0000005C   3600000A           BEQ      ??unzlocal_SearchCentralDir_0
    330          		return 0;
    331          
    332          	uBackRead = 4;
   \   00000060   0490A0E3           MOV      R9,#+4
    333          	while (uBackRead<uMaxBack)
   \                     ??unzlocal_SearchCentralDir_1:
   \   00000064   070059E1           CMP      R9,R7
   \   00000068   3100002A           BCS      ??unzlocal_SearchCentralDir_2
    334          	{
    335          		uLong uReadSize,uReadPos ;
    336          		int i;
    337          		if (uBackRead+BUFREADCOMMENT>uMaxBack)
   \   0000006C   400E89E2           ADD      R0,R9,#+1024
   \   00000070   000057E1           CMP      R7,R0
    338          			uBackRead = uMaxBack;
   \   00000074   0790A031           MOVCC    R9,R7
    339          		else
    340          			uBackRead+=BUFREADCOMMENT;
   \   00000078   409E8922           ADDCS    R9,R9,#+1024
    341          		uReadPos = uSizeFile-uBackRead ;
   \   0000007C   09A046E0           SUB      R10,R6,R9
    342          
    343          		uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
    344          					 (BUFREADCOMMENT+4) : (uSizeFile-uReadPos);
   \   00000080   0A0046E0           SUB      R0,R6,R10
    345          		if (ZSEEK(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)
   \   00000084   10C094E5           LDR      R12,[R4, #+16]
   \   00000088   0510A0E3           MOV      R1,#+5
   \   0000008C   401E81E3           ORR      R1,R1,#0x400
   \   00000090   010050E1           CMP      R0,R1
   \   00000094   1C0094E5           LDR      R0,[R4, #+28]
   \   00000098   01B0C123           BICCS    R11,R1,#0x1
   \   0000009C   00109DE5           LDR      R1,[SP, #+0]
   \   000000A0   0AB04630           SUBCC    R11,R6,R10
   \   000000A4   0030A0E3           MOV      R3,#+0
   \   000000A8   0A20A0E1           MOV      R2,R10
   \   000000AC   3CFF2FE1           BLX      R12
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   1E00001A           BNE      ??unzlocal_SearchCentralDir_2
    346          			break;
    347          
    348          		if (ZREAD(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)
   \   000000B8   1C0094E5           LDR      R0,[R4, #+28]
   \   000000BC   00109DE5           LDR      R1,[SP, #+0]
   \   000000C0   04C094E5           LDR      R12,[R4, #+4]
   \   000000C4   0B30A0E1           MOV      R3,R11
   \   000000C8   0820A0E1           MOV      R2,R8
   \   000000CC   3CFF2FE1           BLX      R12
   \   000000D0   0B0050E1           CMP      R0,R11
   \   000000D4   1600001A           BNE      ??unzlocal_SearchCentralDir_2
    349          			break;
    350          
    351          		for (i=(int)uReadSize-3; (i--)>0;)
   \   000000D8   03004BE2           SUB      R0,R11,#+3
   \                     ??unzlocal_SearchCentralDir_3:
   \   000000DC   0010A0E1           MOV      R1,R0
   \   000000E0   010041E2           SUB      R0,R1,#+1
   \   000000E4   010051E3           CMP      R1,#+1
   \   000000E8   0F0000BA           BLT      ??unzlocal_SearchCentralDir_4
    352          			if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
    353          				((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))
   \   000000EC   0810D0E7           LDRB     R1,[R0, +R8]
   \   000000F0   500051E3           CMP      R1,#+80
   \   000000F4   F8FFFF1A           BNE      ??unzlocal_SearchCentralDir_3
   \   000000F8   081080E0           ADD      R1,R0,R8
   \   000000FC   0110D1E5           LDRB     R1,[R1, #+1]
   \   00000100   4B0051E3           CMP      R1,#+75
   \   00000104   F4FFFF1A           BNE      ??unzlocal_SearchCentralDir_3
   \   00000108   081080E0           ADD      R1,R0,R8
   \   0000010C   0210D1E5           LDRB     R1,[R1, #+2]
   \   00000110   050051E3           CMP      R1,#+5
   \   00000114   F0FFFF1A           BNE      ??unzlocal_SearchCentralDir_3
   \   00000118   081080E0           ADD      R1,R0,R8
   \   0000011C   0310D1E5           LDRB     R1,[R1, #+3]
   \   00000120   060051E3           CMP      R1,#+6
   \   00000124   ECFFFF1A           BNE      ??unzlocal_SearchCentralDir_3
    354          			{
    355          				uPosFound = uReadPos+i;
   \   00000128   0A5080E0           ADD      R5,R0,R10
    356          				break;
    357          			}
    358          
    359          		if (uPosFound!=0)
   \                     ??unzlocal_SearchCentralDir_4:
   \   0000012C   000055E3           CMP      R5,#+0
   \   00000130   CBFFFF0A           BEQ      ??unzlocal_SearchCentralDir_1
    360          			break;
    361          	}
    362          	
    363          	TRYFREE(buf);
   \                     ??unzlocal_SearchCentralDir_2:
   \   00000134   0800A0E1           MOV      R0,R8
   \   00000138   040100EF           SWI      +260
    364          	return uPosFound;
   \                     ??unzlocal_SearchCentralDir_0:
   \   0000013C   0500A0E1           MOV      R0,R5
   \   00000140   F28FBDE8           POP      {R1,R4-R11,PC}   ;; return
    365          }
    366          
    367          /*
    368            Open a Zip file. path contain the full pathname (by example,
    369          	 on a Windows NT computer "c:\\test\\zlib114.zip" or on an Unix computer
    370          	 "zlib/zlib114.zip".
    371          	 If the zipfile cannot be opened (file doesn't exist or in not valid), the
    372          	   return value is NULL.
    373          	 Else, the return value is a unzFile Handle, usable with other function
    374          	   of this unzip package.
    375          */

   \                                 In segment CODE, align 4, keep-with-next
    376          extern unzFile unzOpen2 (
    377                  const wchar_t *name,
    378          	zlib_filefunc_def* pzlib_filefunc_def)
    379          {
   \                     unzOpen2:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   C4D04DE2           SUB      SP,SP,#+196
   \   00000008   0050A0E1           MOV      R5,R0
    380          	unz_s us;
    381          	unz_s *s;
    382          	uLong central_pos, uL;
    383          
    384          	uLong number_disk;		  /* number of the current dist, used for
    385          								   spaning ZIP, unsupported, always 0*/
    386          	uLong number_disk_with_CD;  /* number the the disk with central dir, used
    387          								   for spaning ZIP, unsupported, always 0*/
    388          	uLong number_entry_CD;	  /* total number of entries in
    389          								   the central dir
    390          								   (same than number_entry on nospan) */
    391          
    392          	int err=UNZ_OK;
   \   0000000C   0040A0E3           MOV      R4,#+0
    393          
    394          	if (unz_copyright[0]!=' ')
    395          		return NULL;
    396          
    397          	if (pzlib_filefunc_def==NULL)
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   10008DE2           ADD      R0,SP,#+16
   \   00000018   0100001A           BNE      ??unzOpen2_0
    398          		fill_fopen_filefunc(&us.z_filefunc);
   \   0000001C   ........           _BLF     fill_fopen_filefunc,??fill_fopen_filefunc??rA
   \   00000020   010000EA           B        ??unzOpen2_1
    399          	else
    400          		us.z_filefunc = *pzlib_filefunc_def;
   \                     ??unzOpen2_0:
   \   00000024   CC5391E8           LDM      R1,{R2,R3,R6-R9,R12,LR}
   \   00000028   CC5380E8           STM      R0,{R2,R3,R6-R9,R12,LR}
    401          
    402          	us.filestream= (*(us.z_filefunc.zopen_file))(us.z_filefunc.opaque,
    403                                                                                                           name,
    404          												 ZLIB_FILEFUNC_MODE_READ |
    405          												 ZLIB_FILEFUNC_MODE_EXISTING);
   \                     ??unzOpen2_1:
   \   0000002C   2C009DE5           LDR      R0,[SP, #+44]
   \   00000030   10309DE5           LDR      R3,[SP, #+16]
   \   00000034   0520A0E3           MOV      R2,#+5
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   33FF2FE1           BLX      R3
   \   00000040   30008DE5           STR      R0,[SP, #+48]
    406          	if (us.filestream==NULL)
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   6900000A           BEQ      ??unzOpen2_2
    407          		return NULL;
    408          
    409          	central_pos = unzlocal_SearchCentralDir(&us.z_filefunc,us.filestream);
   \   0000004C   0010A0E1           MOV      R1,R0
   \   00000050   10008DE2           ADD      R0,SP,#+16
   \   00000054   ........           BL       unzlocal_SearchCentralDir
    410          	if (central_pos==0)
    411          		err=UNZ_ERRNO;
    412          
    413          	if (ZSEEK(us.z_filefunc, us.filestream,
    414          		central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)
   \   00000058   30109DE5           LDR      R1,[SP, #+48]
   \   0000005C   20609DE5           LDR      R6,[SP, #+32]
   \   00000060   0050B0E1           MOVS     R5,R0
   \   00000064   2C009DE5           LDR      R0,[SP, #+44]
   \   00000068   0440E001           MVNEQ    R4,R4
   \   0000006C   0030A0E3           MOV      R3,#+0
   \   00000070   0520A0E1           MOV      R2,R5
   \   00000074   36FF2FE1           BLX      R6
    415          		err=UNZ_ERRNO;
    416          
    417          	/* the signature, already checked */
    418          	if (unzlocal_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)
   \   00000078   30109DE5           LDR      R1,[SP, #+48]
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0040E013           MVNNE    R4,#+0
   \   00000084   0C208DE2           ADD      R2,SP,#+12
   \   00000088   10008DE2           ADD      R0,SP,#+16
   \   0000008C   ........           BL       unzlocal_getLong
    419          		err=UNZ_ERRNO;
    420          
    421          	/* number of this disk */
    422          	if (unzlocal_getShort(&us.z_filefunc, us.filestream, &number_disk)!=UNZ_OK)
   \   00000090   30109DE5           LDR      R1,[SP, #+48]
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   0040E013           MVNNE    R4,#+0
   \   0000009C   0D20A0E1           MOV      R2,SP
   \   000000A0   10008DE2           ADD      R0,SP,#+16
   \   000000A4   ........           BL       unzlocal_getShort
    423          		err=UNZ_ERRNO;
    424          
    425          	/* number of the disk with the start of the central directory */
    426          	if (unzlocal_getShort(&us.z_filefunc, us.filestream, &number_disk_with_CD)!=UNZ_OK)
   \   000000A8   30109DE5           LDR      R1,[SP, #+48]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   0040E013           MVNNE    R4,#+0
   \   000000B4   04208DE2           ADD      R2,SP,#+4
   \   000000B8   10008DE2           ADD      R0,SP,#+16
   \   000000BC   ........           BL       unzlocal_getShort
    427          		err=UNZ_ERRNO;
    428          
    429          	/* total number of entries in the central dir on this disk */
    430          	if (unzlocal_getShort(&us.z_filefunc, us.filestream, &us.gi.number_entry)!=UNZ_OK)
   \   000000C0   30109DE5           LDR      R1,[SP, #+48]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0040E013           MVNNE    R4,#+0
   \   000000CC   34208DE2           ADD      R2,SP,#+52
   \   000000D0   10008DE2           ADD      R0,SP,#+16
   \   000000D4   ........           BL       unzlocal_getShort
    431          		err=UNZ_ERRNO;
    432          
    433          	/* total number of entries in the central dir */
    434          	if (unzlocal_getShort(&us.z_filefunc, us.filestream,&number_entry_CD)!=UNZ_OK)
   \   000000D8   30109DE5           LDR      R1,[SP, #+48]
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   0040E013           MVNNE    R4,#+0
   \   000000E4   08208DE2           ADD      R2,SP,#+8
   \   000000E8   10008DE2           ADD      R0,SP,#+16
   \   000000EC   ........           BL       unzlocal_getShort
    435          		err=UNZ_ERRNO;
    436          
    437          	if ((number_entry_CD!=us.gi.number_entry) ||
    438          		(number_disk_with_CD!=0) ||
    439          		(number_disk!=0))
   \   000000F0   34109DE5           LDR      R1,[SP, #+52]
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   08009DE5           LDR      R0,[SP, #+8]
   \   000000FC   0040E013           MVNNE    R4,#+0
   \   00000100   010050E1           CMP      R0,R1
   \   00000104   04009D05           LDREQ    R0,[SP, #+4]
    440          		err=UNZ_BADZIPFILE;
    441          
    442          	/* size of the central directory */
    443          	if (unzlocal_getLong(&us.z_filefunc, us.filestream,&us.size_central_dir)!=UNZ_OK)
   \   00000108   30109DE5           LDR      R1,[SP, #+48]
   \   0000010C   00005003           CMPEQ    R0,#+0
   \   00000110   00009D05           LDREQ    R0,[SP, #+0]
   \   00000114   50208DE2           ADD      R2,SP,#+80
   \   00000118   00005003           CMPEQ    R0,#+0
   \   0000011C   6640E013           MVNNE    R4,#+102
   \   00000120   10008DE2           ADD      R0,SP,#+16
   \   00000124   ........           BL       unzlocal_getLong
    444          		err=UNZ_ERRNO;
    445          
    446          	/* offset of start of central directory with respect to the
    447          		  starting disk number */
    448          	if (unzlocal_getLong(&us.z_filefunc, us.filestream,&us.offset_central_dir)!=UNZ_OK)
   \   00000128   30109DE5           LDR      R1,[SP, #+48]
   \   0000012C   000050E3           CMP      R0,#+0
   \   00000130   0040E013           MVNNE    R4,#+0
   \   00000134   54208DE2           ADD      R2,SP,#+84
   \   00000138   10008DE2           ADD      R0,SP,#+16
   \   0000013C   ........           BL       unzlocal_getLong
    449          		err=UNZ_ERRNO;
    450          
    451          	/* zipfile comment length */
    452          	if (unzlocal_getShort(&us.z_filefunc, us.filestream,&us.gi.size_comment)!=UNZ_OK)
   \   00000140   30109DE5           LDR      R1,[SP, #+48]
   \   00000144   000050E3           CMP      R0,#+0
   \   00000148   0040E013           MVNNE    R4,#+0
   \   0000014C   38208DE2           ADD      R2,SP,#+56
   \   00000150   10008DE2           ADD      R0,SP,#+16
   \   00000154   ........           BL       unzlocal_getShort
    453          		err=UNZ_ERRNO;
    454          
    455          	if ((central_pos<us.offset_central_dir+us.size_central_dir) &&
    456          		(err==UNZ_OK))
   \   00000158   50109DE5           LDR      R1,[SP, #+80]
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   54009DE5           LDR      R0,[SP, #+84]
   \   00000164   0040E013           MVNNE    R4,#+0
   \   00000168   000081E0           ADD      R0,R1,R0
   \   0000016C   000055E1           CMP      R5,R0
   \   00000170   0100002A           BCS      ??unzOpen2_3
   \   00000174   000054E3           CMP      R4,#+0
   \   00000178   0100000A           BEQ      ??unzOpen2_4
    457          		err=UNZ_BADZIPFILE;
    458          
    459          	if (err!=UNZ_OK)
   \                     ??unzOpen2_3:
   \   0000017C   000054E3           CMP      R4,#+0
   \   00000180   0600000A           BEQ      ??unzOpen2_5
    460          	{
    461          		ZCLOSE(us.z_filefunc, us.filestream);
   \                     ??unzOpen2_4:
   \   00000184   30109DE5           LDR      R1,[SP, #+48]
   \   00000188   2C009DE5           LDR      R0,[SP, #+44]
   \   0000018C   24209DE5           LDR      R2,[SP, #+36]
   \   00000190   32FF2FE1           BLX      R2
    462          		return NULL;
   \   00000194   0000A0E3           MOV      R0,#+0
   \   00000198   C4D08DE2           ADD      SP,SP,#+196
   \   0000019C   F083BDE8           POP      {R4-R9,PC}
    463          	}
    464          
    465          	us.byte_before_the_zipfile = central_pos -
    466          							(us.offset_central_dir+us.size_central_dir);
   \                     ??unzOpen2_5:
   \   000001A0   54109DE5           LDR      R1,[SP, #+84]
   \   000001A4   50209DE5           LDR      R2,[SP, #+80]
   \   000001A8   011045E0           SUB      R1,R5,R1
   \   000001AC   021041E0           SUB      R1,R1,R2
   \   000001B0   3C108DE5           STR      R1,[SP, #+60]
    467          	us.central_pos = central_pos;
   \   000001B4   4C508DE5           STR      R5,[SP, #+76]
    468          	us.pfile_in_zip_read = NULL;
   \   000001B8   0000A0E3           MOV      R0,#+0
   \   000001BC   AC008DE5           STR      R0,[SP, #+172]
    469          	us.encrypted = 0;
   \   000001C0   B0008DE5           STR      R0,[SP, #+176]
    470          
    471          	s=(unz_s*)ALLOC(sizeof(unz_s));
   \   000001C4   B400A0E3           MOV      R0,#+180
   \   000001C8   030100EF           SWI      +259
   \   000001CC   0040A0E1           MOV      R4,R0
    472          	*s=us;
   \   000001D0   10008DE2           ADD      R0,SP,#+16
   \   000001D4   B420A0E3           MOV      R2,#+180
   \                     ??unzOpen2_6:
   \   000001D8   042052E2           SUBS     R2,R2,#+4
   \   000001DC   021090E7           LDR      R1,[R0, R2]
   \   000001E0   021084E7           STR      R1,[R4, R2]
   \   000001E4   FBFFFF1A           BNE      ??unzOpen2_6
    473          	unzGoToFirstFile((unzFile)s);
   \   000001E8   0400A0E1           MOV      R0,R4
   \   000001EC   ........           BL       unzGoToFirstFile
    474          	return (unzFile)s;
   \   000001F0   0400A0E1           MOV      R0,R4
   \                     ??unzOpen2_2:
   \   000001F4   C4D08DE2           ADD      SP,SP,#+196      ;; stack cleaning
   \   000001F8   F083BDE8           POP      {R4-R9,PC}       ;; return
    475          }
    476          
    477          

   \                                 In segment CODE, align 4, keep-with-next
    478          extern unzFile unzOpen (const wchar_t *name)
    479          {
    480          	return unzOpen2(name, NULL);
   \                     unzOpen:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   ........           B        unzOpen2         ;; tailcall
    481          }
    482          
    483          /*
    484            Close a ZipFile opened with unzipOpen.
    485            If there is files inside the .Zip opened with unzipOpenCurrentFile (see later),
    486          	these files MUST be closed with unzipCloseCurrentFile before call unzipClose.
    487            return UNZ_OK if there is no problem. */

   \                                 In segment CODE, align 4, keep-with-next
    488          extern int unzClose (unzFile file)
    489          {
   \                     unzClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    490          	unz_s* s;
    491          	if (file==NULL)
    492          		return UNZ_PARAMERROR;
   \   00000008   6500E003           MVNEQ    R0,#+101
   \   0000000C   1080BD08           POPEQ    {R4,PC}
    493          	s=(unz_s*)file;
    494          
    495          	if (s->pfile_in_zip_read!=NULL)
   \   00000010   9C0094E5           LDR      R0,[R4, #+156]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0100000A           BEQ      ??unzClose_0
    496          		unzCloseCurrentFile(file);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       unzCloseCurrentFile
    497          
    498          	ZCLOSE(s->z_filefunc, s->filestream);
   \                     ??unzClose_0:
   \   00000024   201094E5           LDR      R1,[R4, #+32]
   \   00000028   1C0094E5           LDR      R0,[R4, #+28]
   \   0000002C   142094E5           LDR      R2,[R4, #+20]
   \   00000030   32FF2FE1           BLX      R2
    499          	TRYFREE(s);
   \   00000034   000054E3           CMP      R4,#+0
   \   00000038   0100000A           BEQ      ??unzClose_1
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   040100EF           SWI      +260
    500          	return UNZ_OK;
   \                     ??unzClose_1:
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   1080BDE8           POP      {R4,PC}          ;; return
    501          }
    502          
    503          
    504          /*
    505            Write info about the ZipFile in the *pglobal_info structure.
    506            No preparation of the structure is needed
    507            return UNZ_OK if there is no problem. */

   \                                 In segment CODE, align 4, keep-with-next
    508          extern int unzGetGlobalInfo (
    509          	unzFile file,
    510          	unz_global_info *pglobal_info)
    511          {
    512          	unz_s* s;
    513          	if (file==NULL)
   \                     unzGetGlobalInfo:
   \   00000000   000050E3           CMP      R0,#+0
    514          		return UNZ_PARAMERROR;
   \   00000004   6500E003           MVNEQ    R0,#+101
   \   00000008   1EFF2F01           BXEQ     LR
    515          	s=(unz_s*)file;
    516          	*pglobal_info=s->gi;
   \   0000000C   242090E5           LDR      R2,[R0, #+36]
   \   00000010   283090E5           LDR      R3,[R0, #+40]
    517          	return UNZ_OK;
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   0C0081E8           STM      R1,{R2,R3}
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    518          }
    519          
    520          
    521          /*
    522             Translate date/time from Dos format to tm_unz (readable more easilty)
    523          */

   \                                 In segment CODE, align 4, keep-with-next
    524           void unzlocal_DosDateToTmuDate (
    525          	uLong ulDosDate,
    526          	tm_unz* ptm)
    527          {
    528          	uLong uDate;
    529          	uDate = (uLong)(ulDosDate>>16);
   \                     unzlocal_DosDateToTmuDate:
   \   00000000   2028A0E1           LSR      R2,R0,#+16
    530          	ptm->tm_mday = (uInt)(uDate&0x1f) ;
   \   00000004   1F3002E2           AND      R3,R2,#0x1F
   \   00000008   0C3081E5           STR      R3,[R1, #+12]
    531          	ptm->tm_mon =  (uInt)((((uDate)&0x1E0)/0x20)-1) ;
   \   0000000C   783F02E2           AND      R3,R2,#0x1E0
   \   00000010   A332A0E1           LSR      R3,R3,#+5
   \   00000014   013043E2           SUB      R3,R3,#+1
   \   00000018   103081E5           STR      R3,[R1, #+16]
    532          	ptm->tm_year = (uInt)(((uDate&0x0FE00)/0x0200)+1980) ;
   \   0000001C   FE2C02E2           AND      R2,R2,#0xFE00
   \   00000020   BC30A0E3           MOV      R3,#+188
   \   00000024   703E83E3           ORR      R3,R3,#0x700
   \   00000028   A22483E0           ADD      R2,R3,R2, LSR #+9
   \   0000002C   142081E5           STR      R2,[R1, #+20]
    533          
    534          	ptm->tm_hour = (uInt) ((ulDosDate &0xF800)/0x800);
   \   00000030   F82C00E2           AND      R2,R0,#0xF800
   \   00000034   A225A0E1           LSR      R2,R2,#+11
   \   00000038   082081E5           STR      R2,[R1, #+8]
    535          	ptm->tm_min =  (uInt) ((ulDosDate&0x7E0)/0x20) ;
   \   0000003C   7E2E00E2           AND      R2,R0,#0x7E0
   \   00000040   A222A0E1           LSR      R2,R2,#+5
   \   00000044   042081E5           STR      R2,[R1, #+4]
    536          	ptm->tm_sec =  (uInt) (2*(ulDosDate&0x1f)) ;
   \   00000048   1F0000E2           AND      R0,R0,#0x1F
   \   0000004C   8000A0E1           LSL      R0,R0,#+1
   \   00000050   000081E5           STR      R0,[R1, #+0]
    537          }
   \   00000054   1EFF2FE1           BX       LR               ;; return
    538          
    539          /*
    540            Get Info about the current file in the zipfile, with internal only info
    541          */
    542           int unzlocal_GetCurrentFileInfoInternal (unzFile file,
    543          												  unz_file_info *pfile_info,
    544          												  unz_file_info_internal
    545          												  *pfile_info_internal,
    546          												  char *szFileName,
    547          												  uLong fileNameBufferSize,
    548          												  void *extraField,
    549          												  uLong extraFieldBufferSize,
    550          												  char *szComment,
    551          												  uLong commentBufferSize);
    552          

   \                                 In segment CODE, align 4, keep-with-next
    553           int unzlocal_GetCurrentFileInfoInternal (
    554          	unzFile file,
    555          	unz_file_info *pfile_info,
    556          	unz_file_info_internal *pfile_info_internal,
    557          	char *szFileName,
    558          	uLong fileNameBufferSize,
    559          	void *extraField,
    560          	uLong extraFieldBufferSize,
    561          	char *szComment,
    562          	uLong commentBufferSize)
    563          {
   \                     unzlocal_GetCurrentFileInfoInternal:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
   \   00000004   58D04DE2           SUB      SP,SP,#+88
   \   00000008   8C509DE5           LDR      R5,[SP, #+140]
   \   0000000C   90609DE5           LDR      R6,[SP, #+144]
   \   00000010   94709DE5           LDR      R7,[SP, #+148]
   \   00000014   98809DE5           LDR      R8,[SP, #+152]
   \   00000018   0040B0E1           MOVS     R4,R0
    564          	unz_s* s;
    565          	unz_file_info file_info;
    566          	unz_file_info_internal file_info_internal;
    567          	int err=UNZ_OK;
   \   0000001C   0090A0E3           MOV      R9,#+0
    568          	uLong uMagic;
    569          	long lSeek=0;
    570          
    571          	if (file==NULL)
    572          		return UNZ_PARAMERROR;
   \   00000020   6500E003           MVNEQ    R0,#+101
   \   00000024   E600000A           BEQ      ??unzlocal_GetCurrentFileInfoInternal_0
    573          	s=(unz_s*)file;
    574          	if (ZSEEK(s->z_filefunc, s->filestream,
    575          			  s->pos_in_central_dir+s->byte_before_the_zipfile,
    576          			  ZLIB_FILEFUNC_SEEK_SET)!=0)
   \   00000028   340094E5           LDR      R0,[R4, #+52]
   \   0000002C   2C1094E5           LDR      R1,[R4, #+44]
   \   00000030   10A094E5           LDR      R10,[R4, #+16]
   \   00000034   002081E0           ADD      R2,R1,R0
   \   00000038   1C0094E5           LDR      R0,[R4, #+28]
   \   0000003C   201094E5           LDR      R1,[R4, #+32]
   \   00000040   0030A0E3           MOV      R3,#+0
   \   00000044   3AFF2FE1           BLX      R10
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0100000A           BEQ      ??unzlocal_GetCurrentFileInfoInternal_1
    577          		err=UNZ_ERRNO;
   \                     ??unzlocal_GetCurrentFileInfoInternal_2:
   \   00000050   0990E0E1           MVN      R9,R9
   \   00000054   090000EA           B        ??unzlocal_GetCurrentFileInfoInternal_3
    578          
    579          
    580          	/* we check the magic */
    581          	if (err==UNZ_OK)
    582          		if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)
   \                     ??unzlocal_GetCurrentFileInfoInternal_1:
   \   00000058   201094E5           LDR      R1,[R4, #+32]
   \   0000005C   04208DE2           ADD      R2,SP,#+4
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       unzlocal_getLong
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   F7FFFF1A           BNE      ??unzlocal_GetCurrentFileInfoInternal_2
    583          			err=UNZ_ERRNO;
    584          		else if (uMagic!=0x02014b50)
   \   00000070   04009DE5           LDR      R0,[SP, #+4]
   \   00000074   50139FE5           LDR      R1,??unzlocal_GetCurrentFileInfoInternal_4  ;; 0x2014b50
   \   00000078   010050E1           CMP      R0,R1
    585          			err=UNZ_BADZIPFILE;
   \   0000007C   6690E013           MVNNE    R9,#+102
    586          
    587          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.version_madeby) != UNZ_OK)
   \                     ??unzlocal_GetCurrentFileInfoInternal_3:
   \   00000080   201094E5           LDR      R1,[R4, #+32]
   \   00000084   08208DE2           ADD      R2,SP,#+8
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           BL       unzlocal_getShort
    588          		err=UNZ_ERRNO;
    589          
    590          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.version_needed) != UNZ_OK)
   \   00000090   201094E5           LDR      R1,[R4, #+32]
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   0090E013           MVNNE    R9,#+0
   \   0000009C   0C208DE2           ADD      R2,SP,#+12
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           BL       unzlocal_getShort
    591          		err=UNZ_ERRNO;
    592          
    593          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.flag) != UNZ_OK)
   \   000000A8   201094E5           LDR      R1,[R4, #+32]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   0090E013           MVNNE    R9,#+0
   \   000000B4   10208DE2           ADD      R2,SP,#+16
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   ........           BL       unzlocal_getShort
    594          		err=UNZ_ERRNO;
    595          
    596          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.compression_method) != UNZ_OK)
   \   000000C0   201094E5           LDR      R1,[R4, #+32]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0090E013           MVNNE    R9,#+0
   \   000000CC   14208DE2           ADD      R2,SP,#+20
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           BL       unzlocal_getShort
    597          		err=UNZ_ERRNO;
    598          
    599          	if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.dosDate) != UNZ_OK)
   \   000000D8   201094E5           LDR      R1,[R4, #+32]
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   0090E013           MVNNE    R9,#+0
   \   000000E4   18208DE2           ADD      R2,SP,#+24
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           BL       unzlocal_getLong
   \   000000F0   000050E3           CMP      R0,#+0
    600          		err=UNZ_ERRNO;
    601          
    602          	unzlocal_DosDateToTmuDate(file_info.dosDate,&file_info.tmu_date);
   \   000000F4   18009DE5           LDR      R0,[SP, #+24]
   \   000000F8   0090E013           MVNNE    R9,#+0
   \   000000FC   40108DE2           ADD      R1,SP,#+64
   \   00000100   ........           BL       unzlocal_DosDateToTmuDate
    603          
    604          	if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.crc) != UNZ_OK)
   \   00000104   201094E5           LDR      R1,[R4, #+32]
   \   00000108   1C208DE2           ADD      R2,SP,#+28
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   ........           BL       unzlocal_getLong
    605          		err=UNZ_ERRNO;
    606          
    607          	if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.compressed_size) != UNZ_OK)
   \   00000114   201094E5           LDR      R1,[R4, #+32]
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   0090E013           MVNNE    R9,#+0
   \   00000120   20208DE2           ADD      R2,SP,#+32
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           BL       unzlocal_getLong
    608          		err=UNZ_ERRNO;
    609          
    610          	if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.uncompressed_size) != UNZ_OK)
   \   0000012C   201094E5           LDR      R1,[R4, #+32]
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   0090E013           MVNNE    R9,#+0
   \   00000138   24208DE2           ADD      R2,SP,#+36
   \   0000013C   0400A0E1           MOV      R0,R4
   \   00000140   ........           BL       unzlocal_getLong
    611          		err=UNZ_ERRNO;
    612          
    613          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.size_filename) != UNZ_OK)
   \   00000144   201094E5           LDR      R1,[R4, #+32]
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   0090E013           MVNNE    R9,#+0
   \   00000150   28208DE2           ADD      R2,SP,#+40
   \   00000154   0400A0E1           MOV      R0,R4
   \   00000158   ........           BL       unzlocal_getShort
    614          		err=UNZ_ERRNO;
    615          
    616          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_extra) != UNZ_OK)
   \   0000015C   201094E5           LDR      R1,[R4, #+32]
   \   00000160   000050E3           CMP      R0,#+0
   \   00000164   0090E013           MVNNE    R9,#+0
   \   00000168   2C208DE2           ADD      R2,SP,#+44
   \   0000016C   0400A0E1           MOV      R0,R4
   \   00000170   ........           BL       unzlocal_getShort
    617          		err=UNZ_ERRNO;
    618          
    619          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_comment) != UNZ_OK)
   \   00000174   201094E5           LDR      R1,[R4, #+32]
   \   00000178   000050E3           CMP      R0,#+0
   \   0000017C   0090E013           MVNNE    R9,#+0
   \   00000180   30208DE2           ADD      R2,SP,#+48
   \   00000184   0400A0E1           MOV      R0,R4
   \   00000188   ........           BL       unzlocal_getShort
    620          		err=UNZ_ERRNO;
    621          
    622          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.disk_num_start) != UNZ_OK)
   \   0000018C   201094E5           LDR      R1,[R4, #+32]
   \   00000190   000050E3           CMP      R0,#+0
   \   00000194   0090E013           MVNNE    R9,#+0
   \   00000198   34208DE2           ADD      R2,SP,#+52
   \   0000019C   0400A0E1           MOV      R0,R4
   \   000001A0   ........           BL       unzlocal_getShort
    623          		err=UNZ_ERRNO;
    624          
    625          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&file_info.internal_fa) != UNZ_OK)
   \   000001A4   201094E5           LDR      R1,[R4, #+32]
   \   000001A8   000050E3           CMP      R0,#+0
   \   000001AC   0090E013           MVNNE    R9,#+0
   \   000001B0   38208DE2           ADD      R2,SP,#+56
   \   000001B4   0400A0E1           MOV      R0,R4
   \   000001B8   ........           BL       unzlocal_getShort
    626          		err=UNZ_ERRNO;
    627          
    628          	if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info.external_fa) != UNZ_OK)
   \   000001BC   201094E5           LDR      R1,[R4, #+32]
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   0090E013           MVNNE    R9,#+0
   \   000001C8   3C208DE2           ADD      R2,SP,#+60
   \   000001CC   0400A0E1           MOV      R0,R4
   \   000001D0   ........           BL       unzlocal_getLong
    629          		err=UNZ_ERRNO;
    630          
    631          	if (unzlocal_getLong(&s->z_filefunc, s->filestream,&file_info_internal.offset_curfile) != UNZ_OK)
   \   000001D4   201094E5           LDR      R1,[R4, #+32]
   \   000001D8   000050E3           CMP      R0,#+0
   \   000001DC   0090E013           MVNNE    R9,#+0
   \   000001E0   0D20A0E1           MOV      R2,SP
   \   000001E4   0400A0E1           MOV      R0,R4
   \   000001E8   ........           BL       unzlocal_getLong
    632          		err=UNZ_ERRNO;
    633          
    634          	lSeek+=file_info.size_filename;
   \   000001EC   28A09DE5           LDR      R10,[SP, #+40]
   \   000001F0   000050E3           CMP      R0,#+0
   \   000001F4   0090E013           MVNNE    R9,#+0
    635          	if ((err==UNZ_OK) && (szFileName!=NULL))
   \   000001F8   000059E3           CMP      R9,#+0
   \   000001FC   1900001A           BNE      ??unzlocal_GetCurrentFileInfoInternal_5
   \   00000200   60009DE5           LDR      R0,[SP, #+96]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   1800000A           BEQ      ??unzlocal_GetCurrentFileInfoInternal_6
    636          	{
    637          		uLong uSizeRead ;
    638          		if (file_info.size_filename<fileNameBufferSize)
   \   0000020C   88109DE5           LDR      R1,[SP, #+136]
   \   00000210   01005AE1           CMP      R10,R1
   \   00000214   0400002A           BCS      ??unzlocal_GetCurrentFileInfoInternal_7
    639          		{
    640          			*(szFileName+file_info.size_filename)='\0';
   \   00000218   60109DE5           LDR      R1,[SP, #+96]
   \   0000021C   0020A0E3           MOV      R2,#+0
   \   00000220   0120CAE7           STRB     R2,[R10, +R1]
    641          			uSizeRead = file_info.size_filename;
   \   00000224   28B09DE5           LDR      R11,[SP, #+40]
   \   00000228   000000EA           B        ??unzlocal_GetCurrentFileInfoInternal_8
    642          		}
    643          		else
    644          			uSizeRead = fileNameBufferSize;
   \                     ??unzlocal_GetCurrentFileInfoInternal_7:
   \   0000022C   01B0A0E1           MOV      R11,R1
    645          
    646          		if ((file_info.size_filename>0) && (fileNameBufferSize>0))
   \                     ??unzlocal_GetCurrentFileInfoInternal_8:
   \   00000230   28009DE5           LDR      R0,[SP, #+40]
   \   00000234   000050E3           CMP      R0,#+0
   \   00000238   88009D15           LDRNE    R0,[SP, #+136]
   \   0000023C   00005013           CMPNE    R0,#+0
   \   00000240   0700000A           BEQ      ??unzlocal_GetCurrentFileInfoInternal_9
    647          			if (ZREAD(s->z_filefunc, s->filestream,szFileName,uSizeRead)!=uSizeRead)
   \   00000244   1C0094E5           LDR      R0,[R4, #+28]
   \   00000248   60209DE5           LDR      R2,[SP, #+96]
   \   0000024C   201094E5           LDR      R1,[R4, #+32]
   \   00000250   04C094E5           LDR      R12,[R4, #+4]
   \   00000254   0B30A0E1           MOV      R3,R11
   \   00000258   3CFF2FE1           BLX      R12
   \   0000025C   0B0050E1           CMP      R0,R11
    648          				err=UNZ_ERRNO;
   \   00000260   0090E013           MVNNE    R9,#+0
    649          		lSeek -= uSizeRead;
   \                     ??unzlocal_GetCurrentFileInfoInternal_9:
   \   00000264   0BA04AE0           SUB      R10,R10,R11
    650          	}
    651          
    652          
    653          	if ((err==UNZ_OK) && (extraField!=NULL))
   \                     ??unzlocal_GetCurrentFileInfoInternal_5:
   \   00000268   000059E3           CMP      R9,#+0
   \   0000026C   2000001A           BNE      ??unzlocal_GetCurrentFileInfoInternal_10
   \                     ??unzlocal_GetCurrentFileInfoInternal_6:
   \   00000270   000055E3           CMP      R5,#+0
   \   00000274   1E00000A           BEQ      ??unzlocal_GetCurrentFileInfoInternal_10
    654          	{
    655          		uLong uSizeRead ;
    656          		if (file_info.size_file_extra<extraFieldBufferSize)
   \   00000278   2C009DE5           LDR      R0,[SP, #+44]
   \   0000027C   060050E1           CMP      R0,R6
    657          			uSizeRead = file_info.size_file_extra;
   \   00000280   00B0A031           MOVCC    R11,R0
    658          		else
    659          			uSizeRead = extraFieldBufferSize;
   \   00000284   06B0A021           MOVCS    R11,R6
    660          
    661          		if (lSeek!=0)
   \   00000288   00005AE3           CMP      R10,#+0
   \   0000028C   0800000A           BEQ      ??unzlocal_GetCurrentFileInfoInternal_11
    662          			if (ZSEEK(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)
   \   00000290   1C0094E5           LDR      R0,[R4, #+28]
   \   00000294   201094E5           LDR      R1,[R4, #+32]
   \   00000298   10C094E5           LDR      R12,[R4, #+16]
   \   0000029C   0130A0E3           MOV      R3,#+1
   \   000002A0   0A20A0E1           MOV      R2,R10
   \   000002A4   3CFF2FE1           BLX      R12
   \   000002A8   000050E3           CMP      R0,#+0
    663          				lSeek=0;
   \   000002AC   00A0A003           MOVEQ    R10,#+0
    664          			else
    665          				err=UNZ_ERRNO;
   \   000002B0   0090E013           MVNNE    R9,#+0
    666          		if ((file_info.size_file_extra>0) && (extraFieldBufferSize>0))
   \                     ??unzlocal_GetCurrentFileInfoInternal_11:
   \   000002B4   2C009DE5           LDR      R0,[SP, #+44]
   \   000002B8   000050E3           CMP      R0,#+0
   \   000002BC   00005613           CMPNE    R6,#+0
   \   000002C0   0700000A           BEQ      ??unzlocal_GetCurrentFileInfoInternal_12
    667          			if (ZREAD(s->z_filefunc, s->filestream,extraField,uSizeRead)!=uSizeRead)
   \   000002C4   1C0094E5           LDR      R0,[R4, #+28]
   \   000002C8   201094E5           LDR      R1,[R4, #+32]
   \   000002CC   0B30A0E1           MOV      R3,R11
   \   000002D0   0520A0E1           MOV      R2,R5
   \   000002D4   045094E5           LDR      R5,[R4, #+4]
   \   000002D8   35FF2FE1           BLX      R5
   \   000002DC   0B0050E1           CMP      R0,R11
    668          				err=UNZ_ERRNO;
   \   000002E0   0090E013           MVNNE    R9,#+0
    669          		lSeek += file_info.size_file_extra - uSizeRead;
   \                     ??unzlocal_GetCurrentFileInfoInternal_12:
   \   000002E4   2C009DE5           LDR      R0,[SP, #+44]
   \   000002E8   0A0080E0           ADD      R0,R0,R10
   \   000002EC   0B2040E0           SUB      R2,R0,R11
   \   000002F0   010000EA           B        ??unzlocal_GetCurrentFileInfoInternal_13
    670          	}
    671          	else
    672          		lSeek+=file_info.size_file_extra;
   \                     ??unzlocal_GetCurrentFileInfoInternal_10:
   \   000002F4   2C009DE5           LDR      R0,[SP, #+44]
   \   000002F8   0A2080E0           ADD      R2,R0,R10
    673          
    674          
    675          	if ((err==UNZ_OK) && (szComment!=NULL))
   \                     ??unzlocal_GetCurrentFileInfoInternal_13:
   \   000002FC   000059E3           CMP      R9,#+0
   \   00000300   1F00001A           BNE      ??unzlocal_GetCurrentFileInfoInternal_14
   \   00000304   000057E3           CMP      R7,#+0
   \   00000308   1F00000A           BEQ      ??unzlocal_GetCurrentFileInfoInternal_15
    676          	{
    677          		uLong uSizeRead ;
    678          		if (file_info.size_file_comment<commentBufferSize)
   \   0000030C   30009DE5           LDR      R0,[SP, #+48]
   \   00000310   080050E1           CMP      R0,R8
   \   00000314   0300002A           BCS      ??unzlocal_GetCurrentFileInfoInternal_16
    679          		{
    680          			*(szComment+file_info.size_file_comment)='\0';
   \   00000318   0010A0E3           MOV      R1,#+0
   \   0000031C   0710C0E7           STRB     R1,[R0, +R7]
    681          			uSizeRead = file_info.size_file_comment;
   \   00000320   30509DE5           LDR      R5,[SP, #+48]
   \   00000324   000000EA           B        ??unzlocal_GetCurrentFileInfoInternal_17
    682          		}
    683          		else
    684          			uSizeRead = commentBufferSize;
   \                     ??unzlocal_GetCurrentFileInfoInternal_16:
   \   00000328   0850A0E1           MOV      R5,R8
    685          
    686          		if (lSeek!=0)
   \                     ??unzlocal_GetCurrentFileInfoInternal_17:
   \   0000032C   000052E3           CMP      R2,#+0
   \   00000330   0600000A           BEQ      ??unzlocal_GetCurrentFileInfoInternal_18
    687          			if (ZSEEK(s->z_filefunc, s->filestream,lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)
   \   00000334   1C0094E5           LDR      R0,[R4, #+28]
   \   00000338   201094E5           LDR      R1,[R4, #+32]
   \   0000033C   106094E5           LDR      R6,[R4, #+16]
   \   00000340   0130A0E3           MOV      R3,#+1
   \   00000344   36FF2FE1           BLX      R6
   \   00000348   000050E3           CMP      R0,#+0
    688          				lSeek=0;
    689          			else
    690          				err=UNZ_ERRNO;
   \   0000034C   0090E013           MVNNE    R9,#+0
    691          		if ((file_info.size_file_comment>0) && (commentBufferSize>0))
   \                     ??unzlocal_GetCurrentFileInfoInternal_18:
   \   00000350   30009DE5           LDR      R0,[SP, #+48]
   \   00000354   000050E3           CMP      R0,#+0
   \   00000358   00005813           CMPNE    R8,#+0
   \   0000035C   0800000A           BEQ      ??unzlocal_GetCurrentFileInfoInternal_14
    692          			if (ZREAD(s->z_filefunc, s->filestream,szComment,uSizeRead)!=uSizeRead)
   \   00000360   1C0094E5           LDR      R0,[R4, #+28]
   \   00000364   201094E5           LDR      R1,[R4, #+32]
   \   00000368   044094E5           LDR      R4,[R4, #+4]
   \   0000036C   0530A0E1           MOV      R3,R5
   \   00000370   0720A0E1           MOV      R2,R7
   \   00000374   34FF2FE1           BLX      R4
   \   00000378   050050E1           CMP      R0,R5
    693          				err=UNZ_ERRNO;
   \   0000037C   0090E013           MVNNE    R9,#+0
   \   00000380   0E00001A           BNE      ??unzlocal_GetCurrentFileInfoInternal_19
    694          		lSeek+=file_info.size_file_comment - uSizeRead;
    695          	}
    696          	else
    697          		lSeek+=file_info.size_file_comment;
    698          
    699          	if ((err==UNZ_OK) && (pfile_info!=NULL))
   \                     ??unzlocal_GetCurrentFileInfoInternal_14:
   \   00000384   000059E3           CMP      R9,#+0
   \   00000388   0C00001A           BNE      ??unzlocal_GetCurrentFileInfoInternal_19
   \                     ??unzlocal_GetCurrentFileInfoInternal_15:
   \   0000038C   58009DE5           LDR      R0,[SP, #+88]
   \   00000390   000050E3           CMP      R0,#+0
   \   00000394   0500000A           BEQ      ??unzlocal_GetCurrentFileInfoInternal_20
    700          		*pfile_info=file_info;
   \   00000398   08108DE2           ADD      R1,SP,#+8
   \   0000039C   5030A0E3           MOV      R3,#+80
   \                     ??unzlocal_GetCurrentFileInfoInternal_21:
   \   000003A0   043053E2           SUBS     R3,R3,#+4
   \   000003A4   032091E7           LDR      R2,[R1, R3]
   \   000003A8   032080E7           STR      R2,[R0, R3]
   \   000003AC   FBFFFF1A           BNE      ??unzlocal_GetCurrentFileInfoInternal_21
   \                     ??unzlocal_GetCurrentFileInfoInternal_20:
   \   000003B0   5C009DE5           LDR      R0,[SP, #+92]
   \   000003B4   000050E3           CMP      R0,#+0
    701          
    702          	if ((err==UNZ_OK) && (pfile_info_internal!=NULL))
    703          		*pfile_info_internal=file_info_internal;
   \   000003B8   00109D15           LDRNE    R1,[SP, #+0]
   \   000003BC   00108015           STRNE    R1,[R0, #+0]
    704          
    705          	return err;
   \                     ??unzlocal_GetCurrentFileInfoInternal_19:
   \   000003C0   0900A0E1           MOV      R0,R9
   \                     ??unzlocal_GetCurrentFileInfoInternal_0:
   \   000003C4   64D08DE2           ADD      SP,SP,#+100      ;; stack cleaning
   \   000003C8   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??unzlocal_GetCurrentFileInfoInternal_4:
   \   000003CC   504B0102           DC32     0x2014b50
    706          }
    707          
    708          
    709          
    710          /*
    711            Write info about the ZipFile in the *pglobal_info structure.
    712            No preparation of the structure is needed
    713            return UNZ_OK if there is no problem.
    714          */

   \                                 In segment CODE, align 4, keep-with-next
    715          extern int unzGetCurrentFileInfo (
    716          	unzFile file,
    717          	unz_file_info *pfile_info,
    718          	char *szFileName,
    719          	uLong fileNameBufferSize,
    720          	void *extraField,
    721          	uLong extraFieldBufferSize,
    722          	char *szComment,
    723          	uLong commentBufferSize)
    724          {
   \                     unzGetCurrentFileInfo:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   10C09DE5           LDR      R12,[SP, #+16]
   \   00000008   14409DE5           LDR      R4,[SP, #+20]
   \   0000000C   18509DE5           LDR      R5,[SP, #+24]
   \   00000010   1C609DE5           LDR      R6,[SP, #+28]
    725          	return unzlocal_GetCurrentFileInfoInternal(file,pfile_info,NULL,
    726          												szFileName,fileNameBufferSize,
    727          												extraField,extraFieldBufferSize,
    728          												szComment,commentBufferSize);
   \   00000014   40002DE9           PUSH     {R6}
   \   00000018   20002DE9           PUSH     {R5}
   \   0000001C   10002DE9           PUSH     {R4}
   \   00000020   00102DE9           PUSH     {R12}
   \   00000024   08002DE9           PUSH     {R3}
   \   00000028   0230A0E1           MOV      R3,R2
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   ........           BL       unzlocal_GetCurrentFileInfoInternal
   \   00000034   14D08DE2           ADD      SP,SP,#+20
   \   00000038   7080BDE8           POP      {R4-R6,PC}       ;; return
    729          }
    730          
    731          /*
    732            Set the current file of the zipfile to the first file.
    733            return UNZ_OK if there is no problem
    734          */

   \                                 In segment CODE, align 4, keep-with-next
    735          extern int unzGoToFirstFile (unzFile file)
    736          {
   \                     unzGoToFirstFile:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    737          	int err=UNZ_OK;
    738          	unz_s* s;
    739          	if (file==NULL)
    740          		return UNZ_PARAMERROR;
   \   00000008   6500E003           MVNEQ    R0,#+101
   \   0000000C   1080BD08           POPEQ    {R4,PC}
    741          	s=(unz_s*)file;
    742          	s->pos_in_central_dir=s->offset_central_dir;
   \   00000010   440094E5           LDR      R0,[R4, #+68]
    743          	s->num_file=0;
    744          	err=unzlocal_GetCurrentFileInfoInternal(file,&s->cur_file_info,
    745          											 &s->cur_file_info_internal,
    746          											 NULL,0,NULL,0,NULL,0);
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   340084E5           STR      R0,[R4, #+52]
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   300084E5           STR      R0,[R4, #+48]
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   01002DE9           PUSH     {R0}
   \   0000002C   01002DE9           PUSH     {R0}
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   982084E2           ADD      R2,R4,#+152
   \   0000003C   481084E2           ADD      R1,R4,#+72
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       unzlocal_GetCurrentFileInfoInternal
    747          	s->current_file_ok = (err == UNZ_OK);
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   14D08DE2           ADD      SP,SP,#+20
   \   00000050   0110A003           MOVEQ    R1,#+1
   \   00000054   0010A013           MOVNE    R1,#+0
   \   00000058   381084E5           STR      R1,[R4, #+56]
    748          	return err;
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
    749          }
    750          
    751          /*
    752            Set the current file of the zipfile to the next file.
    753            return UNZ_OK if there is no problem
    754            return UNZ_END_OF_LIST_OF_FILE if the actual file was the latest.
    755          */

   \                                 In segment CODE, align 4, keep-with-next
    756          extern int unzGoToNextFile (unzFile file)
    757          {
   \                     unzGoToNextFile:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    758          	unz_s* s;
    759          	int err;
    760          
    761          	if (file==NULL)
    762          		return UNZ_PARAMERROR;
   \   00000008   6500E003           MVNEQ    R0,#+101
   \   0000000C   1080BD08           POPEQ    {R4,PC}
    763          	s=(unz_s*)file;
    764          	if (!s->current_file_ok)
   \   00000010   380094E5           LDR      R0,[R4, #+56]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0100001A           BNE      ??unzGoToNextFile_0
    765          		return UNZ_END_OF_LIST_OF_FILE;
   \                     ??unzGoToNextFile_1:
   \   0000001C   6300E0E3           MVN      R0,#+99
   \   00000020   1080BDE8           POP      {R4,PC}
    766          	if (s->gi.number_entry != 0xffff)	/* 2^16 files overflow hack */
   \                     ??unzGoToNextFile_0:
   \   00000024   240094E5           LDR      R0,[R4, #+36]
   \   00000028   FF10A0E3           MOV      R1,#+255
   \   0000002C   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000030   010050E1           CMP      R0,R1
   \   00000034   0400000A           BEQ      ??unzGoToNextFile_2
    767          	  if (s->num_file+1==s->gi.number_entry)
   \   00000038   300094E5           LDR      R0,[R4, #+48]
   \   0000003C   241094E5           LDR      R1,[R4, #+36]
   \   00000040   010080E2           ADD      R0,R0,#+1
   \   00000044   010050E1           CMP      R0,R1
   \   00000048   F3FFFF0A           BEQ      ??unzGoToNextFile_1
    768          		return UNZ_END_OF_LIST_OF_FILE;
    769          
    770          	s->pos_in_central_dir += SIZECENTRALDIRITEM + s->cur_file_info.size_filename +
    771          			s->cur_file_info.size_file_extra + s->cur_file_info.size_file_comment ;
   \                     ??unzGoToNextFile_2:
   \   0000004C   681094E5           LDR      R1,[R4, #+104]
   \   00000050   6C2094E5           LDR      R2,[R4, #+108]
   \   00000054   340094E5           LDR      R0,[R4, #+52]
   \   00000058   011082E0           ADD      R1,R2,R1
   \   0000005C   702094E5           LDR      R2,[R4, #+112]
    772          	s->num_file++;
    773          	err = unzlocal_GetCurrentFileInfoInternal(file,&s->cur_file_info,
    774          											   &s->cur_file_info_internal,
    775          											   NULL,0,NULL,0,NULL,0);
   \   00000060   0030A0E3           MOV      R3,#+0
   \   00000064   011082E0           ADD      R1,R2,R1
   \   00000068   2E1081E2           ADD      R1,R1,#+46
   \   0000006C   000081E0           ADD      R0,R1,R0
   \   00000070   340084E5           STR      R0,[R4, #+52]
   \   00000074   300094E5           LDR      R0,[R4, #+48]
   \   00000078   982084E2           ADD      R2,R4,#+152
   \   0000007C   010080E2           ADD      R0,R0,#+1
   \   00000080   300084E5           STR      R0,[R4, #+48]
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   01002DE9           PUSH     {R0}
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   01002DE9           PUSH     {R0}
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   01002DE9           PUSH     {R0}
   \   0000009C   481084E2           ADD      R1,R4,#+72
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           BL       unzlocal_GetCurrentFileInfoInternal
    776          	s->current_file_ok = (err == UNZ_OK);
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   14D08DE2           ADD      SP,SP,#+20
   \   000000B0   0110A003           MOVEQ    R1,#+1
   \   000000B4   0010A013           MOVNE    R1,#+0
   \   000000B8   381084E5           STR      R1,[R4, #+56]
    777          	return err;
   \   000000BC   1080BDE8           POP      {R4,PC}          ;; return
    778          }
    779          
    780          
    781          /*
    782            Try locate the file szFileName in the zipfile.
    783            For the iCaseSensitivity signification, see unzipStringFileNameCompare
    784          
    785            return value :
    786            UNZ_OK if the file is found. It becomes the current file.
    787            UNZ_END_OF_LIST_OF_FILE if the file is not found
    788          */

   \                                 In segment CODE, align 4, keep-with-next
    789          extern int unzLocateFile (
    790          	unzFile file,
    791          	const char *szFileName,
    792          	int iCaseSensitivity)
    793          {
   \                     unzLocateFile:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   55DF4DE2           SUB      SP,SP,#+340
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    794          	unz_s* s;
    795          	int err;
    796          
    797          	/* We remember the 'current' position in the file so that we can jump
    798          	 * back there if we fail.
    799          	 */
    800          	unz_file_info cur_file_infoSaved;
    801          	unz_file_info_internal cur_file_info_internalSaved;
    802          	uLong num_fileSaved;
    803          	uLong pos_in_central_dirSaved;
    804          
    805          
    806          	if (file==NULL)
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   0100001A           BNE      ??unzLocateFile_0
    807          		return UNZ_PARAMERROR;
   \                     ??unzLocateFile_1:
   \   0000001C   6500E0E3           MVN      R0,#+101
   \   00000020   2C0000EA           B        ??unzLocateFile_2
    808          
    809          	if (strlen(szFileName)>=UNZ_MAXFILENAMEINZIP)
   \                     ??unzLocateFile_0:
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   5A0100EF           SWI      +346
   \   0000002C   400F50E3           CMP      R0,#+256
   \   00000030   F9FFFFAA           BGE      ??unzLocateFile_1
    810          		return UNZ_PARAMERROR;
    811          
    812          	s=(unz_s*)file;
    813          	if (!s->current_file_ok)
   \   00000034   380094E5           LDR      R0,[R4, #+56]
   \   00000038   000050E3           CMP      R0,#+0
    814          		return UNZ_END_OF_LIST_OF_FILE;
   \   0000003C   6300E003           MVNEQ    R0,#+99
   \   00000040   3000000A           BEQ      ??unzLocateFile_3
    815          
    816          	/* Save the current state */
    817          	num_fileSaved = s->num_file;
   \   00000044   307094E5           LDR      R7,[R4, #+48]
    818          	pos_in_central_dirSaved = s->pos_in_central_dir;
   \   00000048   348094E5           LDR      R8,[R4, #+52]
    819          	cur_file_infoSaved = s->cur_file_info;
   \   0000004C   410F8DE2           ADD      R0,SP,#+260
   \   00000050   481084E2           ADD      R1,R4,#+72
   \   00000054   5030A0E3           MOV      R3,#+80
   \                     ??unzLocateFile_4:
   \   00000058   043053E2           SUBS     R3,R3,#+4
   \   0000005C   032091E7           LDR      R2,[R1, R3]
   \   00000060   032080E7           STR      R2,[R0, R3]
   \   00000064   FBFFFF1A           BNE      ??unzLocateFile_4
    820          	cur_file_info_internalSaved = s->cur_file_info_internal;
   \   00000068   989094E5           LDR      R9,[R4, #+152]
    821          
    822          	err = unzGoToFirstFile(file);
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       unzGoToFirstFile
   \   00000074   010000EA           B        ??unzLocateFile_5
    823          
    824          	while (err == UNZ_OK)
    825          	{
    826          		char szCurrentFileName[UNZ_MAXFILENAMEINZIP+1];
    827          		err = unzGetCurrentFileInfo(file,NULL,
    828          									szCurrentFileName,sizeof(szCurrentFileName)-1,
    829          									NULL,0,NULL,0);
    830          		if (err == UNZ_OK)
    831          		{
    832          			if (unzStringFileNameCompare(szCurrentFileName,
    833          											szFileName,iCaseSensitivity)==0)
    834          				return UNZ_OK;
    835          			err = unzGoToNextFile(file);
   \                     ??unzLocateFile_6:
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           BL       unzGoToNextFile
   \                     ??unzLocateFile_5:
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   1500001A           BNE      ??unzLocateFile_7
   \   00000088   01002DE9           PUSH     {R0}
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   01002DE9           PUSH     {R0}
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   0010A0E3           MOV      R1,#+0
   \   000000A0   400FA0E3           MOV      R0,#+256
   \   000000A4   01002DE9           PUSH     {R0}
   \   000000A8   14308DE2           ADD      R3,SP,#+20
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       unzlocal_GetCurrentFileInfoInternal
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   14D08DE2           ADD      SP,SP,#+20
   \   000000BC   EFFFFF1A           BNE      ??unzLocateFile_5
   \   000000C0   0620A0E1           MOV      R2,R6
   \   000000C4   0510A0E1           MOV      R1,R5
   \   000000C8   0D00A0E1           MOV      R0,SP
   \   000000CC   ........           BL       unzStringFileNameCompare
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   E7FFFF1A           BNE      ??unzLocateFile_6
   \                     ??unzLocateFile_2:
   \   000000D8   55DF8DE2           ADD      SP,SP,#+340
   \   000000DC   F083BDE8           POP      {R4-R9,PC}
    836          		}
    837          	}
    838          
    839          	/* We failed, so restore the state of the 'current file' to where we
    840          	 * were.
    841          	 */
    842          	s->num_file = num_fileSaved ;
   \                     ??unzLocateFile_7:
   \   000000E0   307084E5           STR      R7,[R4, #+48]
    843          	s->pos_in_central_dir = pos_in_central_dirSaved ;
   \   000000E4   348084E5           STR      R8,[R4, #+52]
    844          	s->cur_file_info = cur_file_infoSaved;
   \   000000E8   481084E2           ADD      R1,R4,#+72
   \   000000EC   412F8DE2           ADD      R2,SP,#+260
   \   000000F0   5050A0E3           MOV      R5,#+80
   \                     ??unzLocateFile_8:
   \   000000F4   045055E2           SUBS     R5,R5,#+4
   \   000000F8   053092E7           LDR      R3,[R2, R5]
   \   000000FC   053081E7           STR      R3,[R1, R5]
   \   00000100   FBFFFF1A           BNE      ??unzLocateFile_8
    845          	s->cur_file_info_internal = cur_file_info_internalSaved;
   \   00000104   989084E5           STR      R9,[R4, #+152]
    846          	return err;
   \                     ??unzLocateFile_3:
   \   00000108   55DF8DE2           ADD      SP,SP,#+340      ;; stack cleaning
   \   0000010C   F083BDE8           POP      {R4-R9,PC}       ;; return
    847          }
    848          
    849          
    850          /*
    851          ///////////////////////////////////////////
    852          // Contributed by Ryan Haksi (mailto://cryogen@infoserve.net)
    853          // I need random access
    854          //
    855          // Further optimization could be realized by adding an ability
    856          // to cache the directory in memory. The goal being a single
    857          // comprehensive file read to put the file I need in a memory.
    858          */
    859          
    860          /*
    861          typedef struct unz_file_pos_s
    862          {
    863          	uLong pos_in_zip_directory;   // offset in file
    864          	uLong num_of_file;			// # of file
    865          } unz_file_pos;
    866          */
    867          

   \                                 In segment CODE, align 4, keep-with-next
    868          extern int unzGetFilePos(
    869          	unzFile file,
    870          	unz_file_pos* file_pos)
    871          {
    872          	unz_s* s;
    873          
    874          	if (file==NULL || file_pos==NULL)
   \                     unzGetFilePos:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   00005113           CMPNE    R1,#+0
    875          		return UNZ_PARAMERROR;
   \   00000008   6500E003           MVNEQ    R0,#+101
   \   0000000C   1EFF2F01           BXEQ     LR
    876          	s=(unz_s*)file;
    877          	if (!s->current_file_ok)
   \   00000010   382090E5           LDR      R2,[R0, #+56]
   \   00000014   000052E3           CMP      R2,#+0
    878          		return UNZ_END_OF_LIST_OF_FILE;
   \   00000018   6300E003           MVNEQ    R0,#+99
   \   0000001C   1EFF2F01           BXEQ     LR
    879          
    880          	file_pos->pos_in_zip_directory  = s->pos_in_central_dir;
   \   00000020   342090E5           LDR      R2,[R0, #+52]
   \   00000024   002081E5           STR      R2,[R1, #+0]
    881          	file_pos->num_of_file		   = s->num_file;
   \   00000028   300090E5           LDR      R0,[R0, #+48]
   \   0000002C   040081E5           STR      R0,[R1, #+4]
    882          
    883          	return UNZ_OK;
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   1EFF2FE1           BX       LR               ;; return
    884          }
    885          

   \                                 In segment CODE, align 4, keep-with-next
    886          extern int unzGoToFilePos(
    887          	unzFile file,
    888          	unz_file_pos* file_pos)
    889          {
   \                     unzGoToFilePos:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    890          	unz_s* s;
    891          	int err;
    892          
    893          	if (file==NULL || file_pos==NULL)
   \   00000008   00005113           CMPNE    R1,#+0
    894          		return UNZ_PARAMERROR;
   \   0000000C   6500E003           MVNEQ    R0,#+101
   \   00000010   1080BD08           POPEQ    {R4,PC}
    895          	s=(unz_s*)file;
    896          
    897          	/* jump to the right spot */
    898          	s->pos_in_central_dir = file_pos->pos_in_zip_directory;
   \   00000014   000091E5           LDR      R0,[R1, #+0]
    899          	s->num_file		   = file_pos->num_of_file;
    900          
    901          	/* set the current file */
    902          	err = unzlocal_GetCurrentFileInfoInternal(file,&s->cur_file_info,
    903          											   &s->cur_file_info_internal,
    904          											   NULL,0,NULL,0,NULL,0);
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   340084E5           STR      R0,[R4, #+52]
   \   00000020   040091E5           LDR      R0,[R1, #+4]
   \   00000024   982084E2           ADD      R2,R4,#+152
   \   00000028   300084E5           STR      R0,[R4, #+48]
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   01002DE9           PUSH     {R0}
   \   00000040   01002DE9           PUSH     {R0}
   \   00000044   481084E2           ADD      R1,R4,#+72
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       unzlocal_GetCurrentFileInfoInternal
    905          	/* return results */
    906          	s->current_file_ok = (err == UNZ_OK);
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   14D08DE2           ADD      SP,SP,#+20
   \   00000058   0110A003           MOVEQ    R1,#+1
   \   0000005C   0010A013           MOVNE    R1,#+0
   \   00000060   381084E5           STR      R1,[R4, #+56]
    907          	return err;
   \   00000064   1080BDE8           POP      {R4,PC}          ;; return
    908          }
    909          
    910          /*
    911          // Unzip Helper Functions - should be here?
    912          ///////////////////////////////////////////
    913          */
    914          
    915          /*
    916            Read the  header of the current zipfile
    917            Check the coherency of the  header and info in the end of central
    918          		directory about this file
    919            store in *piSizeVar the size of extra info in  header
    920          		(filename and size of extra field data)
    921          */

   \                                 In segment CODE, align 4, keep-with-next
    922           int unzlocal_CheckCurrentFileCoherencyHeader (
    923          	unz_s* s,
    924          	uInt* piSizeVar,
    925          	uLong *poffset_local_extrafield,
    926          	uInt  *psize_local_extrafield)
    927          {
   \                     unzlocal_CheckCurrentFileCoherencyHeader:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
    928          	uLong uMagic,uData,uFlags;
    929          	uLong size_filename;
    930          	uLong size_extra_field;
    931          	int err=UNZ_OK;
    932          
    933              *piSizeVar = 0;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   000085E5           STR      R0,[R5, #+0]
    934              *poffset_local_extrafield = 0;
   \   00000020   000086E5           STR      R0,[R6, #+0]
    935              *psize_local_extrafield = 0;
   \   00000024   000087E5           STR      R0,[R7, #+0]
    936          
    937          	if (ZSEEK(s->z_filefunc, s->filestream,s->cur_file_info_internal.offset_curfile +
    938          								s->byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET)!=0)
   \   00000028   2C1094E5           LDR      R1,[R4, #+44]
   \   0000002C   10C094E5           LDR      R12,[R4, #+16]
   \   00000030   0030A0E1           MOV      R3,R0
   \   00000034   980094E5           LDR      R0,[R4, #+152]
   \   00000038   0080A0E3           MOV      R8,#+0
   \   0000003C   002081E0           ADD      R2,R1,R0
   \   00000040   1C0094E5           LDR      R0,[R4, #+28]
   \   00000044   201094E5           LDR      R1,[R4, #+32]
   \   00000048   3CFF2FE1           BLX      R12
   \   0000004C   000050E3           CMP      R0,#+0
    939          		return UNZ_ERRNO;
   \   00000050   0800E011           MVNNE    R0,R8
   \   00000054   7B00001A           BNE      ??unzlocal_CheckCurrentFileCoherencyHeader_0
    940          
    941          
    942          	if (err==UNZ_OK)
    943          		if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)
   \   00000058   201094E5           LDR      R1,[R4, #+32]
   \   0000005C   10208DE2           ADD      R2,SP,#+16
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       unzlocal_getLong
   \   00000068   000050E3           CMP      R0,#+0
    944          			err=UNZ_ERRNO;
   \   0000006C   0880E011           MVNNE    R8,R8
   \   00000070   0300001A           BNE      ??unzlocal_CheckCurrentFileCoherencyHeader_1
    945          		else if (uMagic!=0x04034b50)
   \   00000074   10009DE5           LDR      R0,[SP, #+16]
   \   00000078   D0119FE5           LDR      R1,??unzlocal_CheckCurrentFileCoherencyHeader_2  ;; 0x4034b50
   \   0000007C   010050E1           CMP      R0,R1
    946          			err=UNZ_BADZIPFILE;
   \   00000080   6680E013           MVNNE    R8,#+102
    947          
    948          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)
   \                     ??unzlocal_CheckCurrentFileCoherencyHeader_1:
   \   00000084   201094E5           LDR      R1,[R4, #+32]
   \   00000088   0D20A0E1           MOV      R2,SP
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           BL       unzlocal_getShort
    949          		err=UNZ_ERRNO;
    950          /*
    951          	else if ((err==UNZ_OK) && (uData!=s->cur_file_info.wVersion))
    952          		err=UNZ_BADZIPFILE;
    953          */
    954          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&uFlags) != UNZ_OK)
   \   00000094   201094E5           LDR      R1,[R4, #+32]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0080E013           MVNNE    R8,#+0
   \   000000A0   04208DE2           ADD      R2,SP,#+4
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   ........           BL       unzlocal_getShort
    955          		err=UNZ_ERRNO;
    956          
    957          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)
   \   000000AC   201094E5           LDR      R1,[R4, #+32]
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0080E013           MVNNE    R8,#+0
   \   000000B8   0D20A0E1           MOV      R2,SP
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   ........           BL       unzlocal_getShort
   \   000000C4   000050E3           CMP      R0,#+0
    958          		err=UNZ_ERRNO;
   \   000000C8   0080E013           MVNNE    R8,#+0
    959          	else if ((err==UNZ_OK) && (uData!=s->cur_file_info.compression_method))
   \   000000CC   00005803           CMPEQ    R8,#+0
   \   000000D0   0700001A           BNE      ??unzlocal_CheckCurrentFileCoherencyHeader_3
   \   000000D4   00009DE5           LDR      R0,[SP, #+0]
   \   000000D8   541094E5           LDR      R1,[R4, #+84]
   \   000000DC   010050E1           CMP      R0,R1
   \   000000E0   0200001A           BNE      ??unzlocal_CheckCurrentFileCoherencyHeader_4
   \   000000E4   000051E3           CMP      R1,#+0
   \   000000E8   08005113           CMPNE    R1,#+8
   \   000000EC   0000000A           BEQ      ??unzlocal_CheckCurrentFileCoherencyHeader_3
    960          		err=UNZ_BADZIPFILE;
    961          
    962          	if ((err==UNZ_OK) && (s->cur_file_info.compression_method!=0) &&
    963          						 (s->cur_file_info.compression_method!=Z_DEFLATED))
    964          		err=UNZ_BADZIPFILE;
   \                     ??unzlocal_CheckCurrentFileCoherencyHeader_4:
   \   000000F0   6680E0E3           MVN      R8,#+102
    965          
    966          	if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* date/time */
   \                     ??unzlocal_CheckCurrentFileCoherencyHeader_3:
   \   000000F4   201094E5           LDR      R1,[R4, #+32]
   \   000000F8   0D20A0E1           MOV      R2,SP
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   ........           BL       unzlocal_getLong
    967          		err=UNZ_ERRNO;
    968          
    969          	if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* crc */
   \   00000104   201094E5           LDR      R1,[R4, #+32]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   0080E013           MVNNE    R8,#+0
   \   00000110   0D20A0E1           MOV      R2,SP
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   ........           BL       unzlocal_getLong
   \   0000011C   000050E3           CMP      R0,#+0
    970          		err=UNZ_ERRNO;
   \   00000120   0080E013           MVNNE    R8,#+0
    971          	else if ((err==UNZ_OK) && (uData!=s->cur_file_info.crc) &&
    972          							  ((uFlags & 8)==0))
   \   00000124   00005803           CMPEQ    R8,#+0
   \   00000128   0600001A           BNE      ??unzlocal_CheckCurrentFileCoherencyHeader_5
   \   0000012C   00009DE5           LDR      R0,[SP, #+0]
   \   00000130   5C1094E5           LDR      R1,[R4, #+92]
   \   00000134   010050E1           CMP      R0,R1
   \   00000138   0200000A           BEQ      ??unzlocal_CheckCurrentFileCoherencyHeader_5
   \   0000013C   04009DE5           LDR      R0,[SP, #+4]
   \   00000140   080010E3           TST      R0,#0x8
    973          		err=UNZ_BADZIPFILE;
   \   00000144   6680E003           MVNEQ    R8,#+102
    974          
    975          	if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size compr */
   \                     ??unzlocal_CheckCurrentFileCoherencyHeader_5:
   \   00000148   201094E5           LDR      R1,[R4, #+32]
   \   0000014C   0D20A0E1           MOV      R2,SP
   \   00000150   0400A0E1           MOV      R0,R4
   \   00000154   ........           BL       unzlocal_getLong
   \   00000158   000050E3           CMP      R0,#+0
    976          		err=UNZ_ERRNO;
   \   0000015C   0080E013           MVNNE    R8,#+0
    977          	else if ((err==UNZ_OK) && (uData!=s->cur_file_info.compressed_size) &&
    978          							  ((uFlags & 8)==0))
   \   00000160   00005803           CMPEQ    R8,#+0
   \   00000164   0600001A           BNE      ??unzlocal_CheckCurrentFileCoherencyHeader_6
   \   00000168   00009DE5           LDR      R0,[SP, #+0]
   \   0000016C   601094E5           LDR      R1,[R4, #+96]
   \   00000170   010050E1           CMP      R0,R1
   \   00000174   0200000A           BEQ      ??unzlocal_CheckCurrentFileCoherencyHeader_6
   \   00000178   04009DE5           LDR      R0,[SP, #+4]
   \   0000017C   080010E3           TST      R0,#0x8
    979          		err=UNZ_BADZIPFILE;
   \   00000180   6680E003           MVNEQ    R8,#+102
    980          
    981          	if (unzlocal_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size uncompr */
   \                     ??unzlocal_CheckCurrentFileCoherencyHeader_6:
   \   00000184   201094E5           LDR      R1,[R4, #+32]
   \   00000188   0D20A0E1           MOV      R2,SP
   \   0000018C   0400A0E1           MOV      R0,R4
   \   00000190   ........           BL       unzlocal_getLong
   \   00000194   000050E3           CMP      R0,#+0
    982          		err=UNZ_ERRNO;
   \   00000198   0080E013           MVNNE    R8,#+0
    983          	else if ((err==UNZ_OK) && (uData!=s->cur_file_info.uncompressed_size) &&
    984          							  ((uFlags & 8)==0))
   \   0000019C   00005803           CMPEQ    R8,#+0
   \   000001A0   0600001A           BNE      ??unzlocal_CheckCurrentFileCoherencyHeader_7
   \   000001A4   00009DE5           LDR      R0,[SP, #+0]
   \   000001A8   641094E5           LDR      R1,[R4, #+100]
   \   000001AC   010050E1           CMP      R0,R1
   \   000001B0   0200000A           BEQ      ??unzlocal_CheckCurrentFileCoherencyHeader_7
   \   000001B4   04009DE5           LDR      R0,[SP, #+4]
   \   000001B8   080010E3           TST      R0,#0x8
    985          		err=UNZ_BADZIPFILE;
   \   000001BC   6680E003           MVNEQ    R8,#+102
    986          
    987          
    988          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&size_filename) != UNZ_OK)
   \                     ??unzlocal_CheckCurrentFileCoherencyHeader_7:
   \   000001C0   201094E5           LDR      R1,[R4, #+32]
   \   000001C4   08208DE2           ADD      R2,SP,#+8
   \   000001C8   0400A0E1           MOV      R0,R4
   \   000001CC   ........           BL       unzlocal_getShort
   \   000001D0   000050E3           CMP      R0,#+0
    989          		err=UNZ_ERRNO;
   \   000001D4   0080E013           MVNNE    R8,#+0
    990          	else if ((err==UNZ_OK) && (size_filename!=s->cur_file_info.size_filename))
   \   000001D8   00005803           CMPEQ    R8,#+0
   \   000001DC   0300001A           BNE      ??unzlocal_CheckCurrentFileCoherencyHeader_8
   \   000001E0   08009DE5           LDR      R0,[SP, #+8]
   \   000001E4   681094E5           LDR      R1,[R4, #+104]
   \   000001E8   010050E1           CMP      R0,R1
    991          		err=UNZ_BADZIPFILE;
   \   000001EC   6680E013           MVNNE    R8,#+102
    992          
    993              *piSizeVar += (uInt)size_filename;
   \                     ??unzlocal_CheckCurrentFileCoherencyHeader_8:
   \   000001F0   000095E5           LDR      R0,[R5, #+0]
   \   000001F4   08109DE5           LDR      R1,[SP, #+8]
    994          
    995          	if (unzlocal_getShort(&s->z_filefunc, s->filestream,&size_extra_field) != UNZ_OK)
   \   000001F8   0C208DE2           ADD      R2,SP,#+12
   \   000001FC   000081E0           ADD      R0,R1,R0
   \   00000200   000085E5           STR      R0,[R5, #+0]
   \   00000204   201094E5           LDR      R1,[R4, #+32]
   \   00000208   0400A0E1           MOV      R0,R4
   \   0000020C   ........           BL       unzlocal_getShort
    996          		err=UNZ_ERRNO;
    997              *poffset_local_extrafield= s->cur_file_info_internal.offset_curfile +
    998                                              SIZEZIPLOCALHEADER + size_filename;
   \   00000210   08109DE5           LDR      R1,[SP, #+8]
   \   00000214   000050E3           CMP      R0,#+0
   \   00000218   980094E5           LDR      R0,[R4, #+152]
   \   0000021C   0080E013           MVNNE    R8,#+0
   \   00000220   000081E0           ADD      R0,R1,R0
   \   00000224   1E0080E2           ADD      R0,R0,#+30
   \   00000228   000086E5           STR      R0,[R6, #+0]
    999              *psize_local_extrafield = (uInt)size_extra_field;
   \   0000022C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000230   000087E5           STR      R0,[R7, #+0]
   1000          
   1001              *piSizeVar += (uInt)size_extra_field;
   \   00000234   000095E5           LDR      R0,[R5, #+0]
   \   00000238   0C109DE5           LDR      R1,[SP, #+12]
   \   0000023C   000081E0           ADD      R0,R1,R0
   \   00000240   000085E5           STR      R0,[R5, #+0]
   1002          
   1003          	return err;
   \   00000244   0800A0E1           MOV      R0,R8
   \                     ??unzlocal_CheckCurrentFileCoherencyHeader_0:
   \   00000248   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   0000024C   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??unzlocal_CheckCurrentFileCoherencyHeader_2:
   \   00000250   504B0304           DC32     0x4034b50
   1004          }
   1005          
   1006          /*
   1007            Open for reading data the current file in the zipfile.
   1008            If there is no error and the file is opened, the return value is UNZ_OK.
   1009          */

   \                                 In segment CODE, align 4, keep-with-next
   1010          extern int unzOpenCurrentFile3 (
   1011          	unzFile file,
   1012          	int* method,
   1013          	int* level,
   1014          	int raw,
   1015          	const char* password)
   1016          {
   \                     unzOpenCurrentFile3:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   3C609DE5           LDR      R6,[SP, #+60]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0180A0E1           MOV      R8,R1
   \   00000014   0290A0E1           MOV      R9,R2
   \   00000018   0350A0E1           MOV      R5,R3
   1017          	int err=UNZ_OK;
   1018          	uInt iSizeVar;
   1019          	unz_s* s;
   1020          	file_in_zip_read_info_s* pfile_in_zip_read_info;
   1021          	uLong offset_local_extrafield;  /* offset of the  extra field */
   1022          	uInt  size_local_extrafield;	/* size of the  extra field */
   1023          #	ifndef NOUNCRYPT
   1024          	char source[12];
   1025          #	else
   1026          	if (password != NULL)
   1027          		return UNZ_PARAMERROR;
   1028          #	endif
   1029          
   1030          	if (file==NULL)
   \   0000001C   000054E3           CMP      R4,#+0
   \   00000020   0100001A           BNE      ??unzOpenCurrentFile3_0
   1031          		return UNZ_PARAMERROR;
   \                     ??unzOpenCurrentFile3_1:
   \   00000024   6500E0E3           MVN      R0,#+101
   \   00000028   240000EA           B        ??unzOpenCurrentFile3_2
   1032          	s=(unz_s*)file;
   1033          	if (!s->current_file_ok)
   \                     ??unzOpenCurrentFile3_0:
   \   0000002C   380094E5           LDR      R0,[R4, #+56]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   FAFFFF0A           BEQ      ??unzOpenCurrentFile3_1
   1034          		return UNZ_PARAMERROR;
   1035          
   1036          	if (s->pfile_in_zip_read != NULL)
   \   00000038   9C0094E5           LDR      R0,[R4, #+156]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0100000A           BEQ      ??unzOpenCurrentFile3_3
   1037          		unzCloseCurrentFile(file);
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       unzCloseCurrentFile
   1038          
   1039          	if (unzlocal_CheckCurrentFileCoherencyHeader(s,&iSizeVar,
   1040          				&offset_local_extrafield,&size_local_extrafield)!=UNZ_OK)
   \                     ??unzOpenCurrentFile3_3:
   \   0000004C   08308DE2           ADD      R3,SP,#+8
   \   00000050   04208DE2           ADD      R2,SP,#+4
   \   00000054   0D10A0E1           MOV      R1,SP
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       unzlocal_CheckCurrentFileCoherencyHeader
   \   00000060   000050E3           CMP      R0,#+0
   1041          		return UNZ_BADZIPFILE;
   \   00000064   6600E013           MVNNE    R0,#+102
   \   00000068   A200001A           BNE      ??unzOpenCurrentFile3_4
   1042          
   1043          	pfile_in_zip_read_info = (file_in_zip_read_info_s*)
   1044          										ALLOC(sizeof(file_in_zip_read_info_s));
   \   0000006C   9000A0E3           MOV      R0,#+144
   \   00000070   030100EF           SWI      +259
   \   00000074   0070B0E1           MOVS     R7,R0
   1045          	if (pfile_in_zip_read_info==NULL)
   \   00000078   0000001A           BNE      ??unzOpenCurrentFile3_5
   1046          		return UNZ_INTERNALERROR;
   \                     ??unzOpenCurrentFile3_6:
   \   0000007C   0E0000EA           B        ??unzOpenCurrentFile3_7
   1047          
   1048          	pfile_in_zip_read_info->read_buffer=(char*)ALLOC(UNZ_BUFSIZE);
   \                     ??unzOpenCurrentFile3_5:
   \   00000080   400CA0E3           MOV      R0,#+16384
   \   00000084   030100EF           SWI      +259
   \   00000088   000087E5           STR      R0,[R7, #+0]
   1049          	pfile_in_zip_read_info->offset_local_extrafield = offset_local_extrafield;
   \   0000008C   04009DE5           LDR      R0,[SP, #+4]
   \   00000090   440087E5           STR      R0,[R7, #+68]
   1050          	pfile_in_zip_read_info->size_local_extrafield = size_local_extrafield;
   \   00000094   08009DE5           LDR      R0,[SP, #+8]
   \   00000098   480087E5           STR      R0,[R7, #+72]
   1051          	pfile_in_zip_read_info->pos_local_extrafield=0;
   \   0000009C   0000A0E3           MOV      R0,#+0
   \   000000A0   4C0087E5           STR      R0,[R7, #+76]
   1052          	pfile_in_zip_read_info->raw=raw;
   \   000000A4   8C5087E5           STR      R5,[R7, #+140]
   1053          
   1054          	if (pfile_in_zip_read_info->read_buffer==NULL)
   \   000000A8   000097E5           LDR      R0,[R7, #+0]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   0400001A           BNE      ??unzOpenCurrentFile3_8
   1055          	{
   1056          		TRYFREE(pfile_in_zip_read_info);
   \   000000B4   0700A0E1           MOV      R0,R7
   \   000000B8   040100EF           SWI      +260
   \                     ??unzOpenCurrentFile3_7:
   \   000000BC   6700E0E3           MVN      R0,#+103
   \                     ??unzOpenCurrentFile3_2:
   \   000000C0   18D08DE2           ADD      SP,SP,#+24
   \   000000C4   F08FBDE8           POP      {R4-R11,PC}
   1057          		return UNZ_INTERNALERROR;
   1058          	}
   1059          
   1060          	pfile_in_zip_read_info->stream_initialised=0;
   \                     ??unzOpenCurrentFile3_8:
   \   000000C8   0000A0E3           MOV      R0,#+0
   \   000000CC   400087E5           STR      R0,[R7, #+64]
   1061          
   1062          	if (method!=NULL)
   \   000000D0   000058E3           CMP      R8,#+0
   1063                  *method = (int)s->cur_file_info.compression_method;
   \   000000D4   54009415           LDRNE    R0,[R4, #+84]
   \   000000D8   00008815           STRNE    R0,[R8, #+0]
   1064          
   1065          	if (level!=NULL)
   \   000000DC   000059E3           CMP      R9,#+0
   \   000000E0   0F00000A           BEQ      ??unzOpenCurrentFile3_9
   1066          	{
   1067                  *level = 6;
   \   000000E4   0600A0E3           MOV      R0,#+6
   \   000000E8   000089E5           STR      R0,[R9, #+0]
   1068          		switch (s->cur_file_info.flag & 0x06)
   \   000000EC   500094E5           LDR      R0,[R4, #+80]
   \   000000F0   060000E2           AND      R0,R0,#0x6
   \   000000F4   020050E2           SUBS     R0,R0,#+2
   \   000000F8   0700000A           BEQ      ??unzOpenCurrentFile3_10
   \   000000FC   020050E2           SUBS     R0,R0,#+2
   \   00000100   0300000A           BEQ      ??unzOpenCurrentFile3_11
   \   00000104   020050E2           SUBS     R0,R0,#+2
   \   00000108   0500001A           BNE      ??unzOpenCurrentFile3_9
   1069          		{
   1070                    case 6 : *level = 1; break;
   \   0000010C   0100A0E3           MOV      R0,#+1
   \   00000110   020000EA           B        ??unzOpenCurrentFile3_12
   1071                    case 4 : *level = 2; break;
   \                     ??unzOpenCurrentFile3_11:
   \   00000114   0200A0E3           MOV      R0,#+2
   \   00000118   000000EA           B        ??unzOpenCurrentFile3_12
   1072                    case 2 : *level = 9; break;
   \                     ??unzOpenCurrentFile3_10:
   \   0000011C   0900A0E3           MOV      R0,#+9
   \                     ??unzOpenCurrentFile3_12:
   \   00000120   000089E5           STR      R0,[R9, #+0]
   1073          		}
   1074          	}
   1075          
   1076          	if ((s->cur_file_info.compression_method!=0) &&
   1077          		(s->cur_file_info.compression_method!=Z_DEFLATED))
   1078          		err=UNZ_BADZIPFILE;
   1079          
   1080          	pfile_in_zip_read_info->crc32_wait=s->cur_file_info.crc;
   \                     ??unzOpenCurrentFile3_9:
   \   00000124   5C0094E5           LDR      R0,[R4, #+92]
   1081          	pfile_in_zip_read_info->crc32=0;
   1082          	pfile_in_zip_read_info->compression_method =
   1083          			s->cur_file_info.compression_method;
   1084          	pfile_in_zip_read_info->filestream=s->filestream;
   1085          	pfile_in_zip_read_info->z_filefunc=s->z_filefunc;
   \   00000128   602087E2           ADD      R2,R7,#+96
   \   0000012C   540087E5           STR      R0,[R7, #+84]
   \   00000130   0000A0E3           MOV      R0,#+0
   \   00000134   500087E5           STR      R0,[R7, #+80]
   \   00000138   541094E5           LDR      R1,[R4, #+84]
   \   0000013C   841087E5           STR      R1,[R7, #+132]
   \   00000140   201094E5           LDR      R1,[R4, #+32]
   \   00000144   801087E5           STR      R1,[R7, #+128]
   \   00000148   0410A0E1           MOV      R1,R4
   \   0000014C   085FB1E8           LDM      R1!,{R3,R8-R12,LR}
   \   00000150   085FA2E8           STM      R2!,{R3,R8-R12,LR}
   \   00000154   080091E8           LDM      R1,{R3}
   \   00000158   080082E8           STM      R2,{R3}
   1086          	pfile_in_zip_read_info->byte_before_the_zipfile=s->byte_before_the_zipfile;
   \   0000015C   2C1094E5           LDR      R1,[R4, #+44]
   \   00000160   881087E5           STR      R1,[R7, #+136]
   1087          
   1088          	pfile_in_zip_read_info->stream.total_out = 0;
   \   00000164   180087E5           STR      R0,[R7, #+24]
   1089          
   1090          	if ((s->cur_file_info.compression_method==Z_DEFLATED) &&
   1091          		(!raw))
   \   00000168   540094E5           LDR      R0,[R4, #+84]
   \   0000016C   080050E3           CMP      R0,#+8
   \   00000170   00005503           CMPEQ    R5,#+0
   \   00000174   0E00001A           BNE      ??unzOpenCurrentFile3_13
   1092          	{
   1093          	  pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
   1094          	  pfile_in_zip_read_info->stream.zfree = (free_func)0;
   1095          	  pfile_in_zip_read_info->stream.opaque = (voidpf)0;
   1096          	  pfile_in_zip_read_info->stream.next_in = (voidpf)0;
   1097          	  pfile_in_zip_read_info->stream.avail_in = 0;
   1098          
   1099          	  err=inflateInit2(&pfile_in_zip_read_info->stream, -MAX_WBITS);
   \   00000178   90219FE5           LDR      R2,??unzOpenCurrentFile3_14  ;; `?<Constant "1.2.3">`
   \   0000017C   0000A0E3           MOV      R0,#+0
   \   00000180   240087E5           STR      R0,[R7, #+36]
   \   00000184   280087E5           STR      R0,[R7, #+40]
   \   00000188   2C0087E5           STR      R0,[R7, #+44]
   \   0000018C   040087E5           STR      R0,[R7, #+4]
   \   00000190   080087E5           STR      R0,[R7, #+8]
   \   00000194   3830A0E3           MOV      R3,#+56
   \   00000198   0E10E0E3           MVN      R1,#+14
   \   0000019C   040087E2           ADD      R0,R7,#+4
   \   000001A0   7A0200EF           SWI      +634
   \   000001A4   0050B0E1           MOVS     R5,R0
   1100          	  if (err == Z_OK)
   \   000001A8   5400001A           BNE      ??unzOpenCurrentFile3_15
   1101          		pfile_in_zip_read_info->stream_initialised=1;
   \   000001AC   0100A0E3           MOV      R0,#+1
   \   000001B0   400087E5           STR      R0,[R7, #+64]
   1102          	  else
   1103          	  {
   1104          		TRYFREE(pfile_in_zip_read_info);
   1105          		return err;
   1106          	  }
   1107          		/* windowBits is passed < 0 to tell that there is no zlib header.
   1108          		 * Note that in this case inflate *requires* an extra "dummy" byte
   1109          		 * after the compressed stream in order to complete decompression and
   1110          		 * return Z_STREAM_END.
   1111          		 * In unzip, i don't wait absolutely Z_STREAM_END because I known the
   1112          		 * size of both compressed and uncompressed data
   1113          		 */
   1114          	}
   1115          	pfile_in_zip_read_info->rest_read_compressed =
   1116          			s->cur_file_info.compressed_size ;
   \                     ??unzOpenCurrentFile3_13:
   \   000001B4   600094E5           LDR      R0,[R4, #+96]
   1117          	pfile_in_zip_read_info->rest_read_uncompressed =
   1118          			s->cur_file_info.uncompressed_size ;
   1119          
   1120          
   1121          	pfile_in_zip_read_info->pos_in_zipfile =
   1122          			s->cur_file_info_internal.offset_curfile + SIZEZIPLOCALHEADER +
   1123          			  iSizeVar;
   1124          
   1125          	pfile_in_zip_read_info->stream.avail_in = (uInt)0;
   1126          
   1127          	s->pfile_in_zip_read = pfile_in_zip_read_info;
   1128          
   1129          #	ifndef NOUNCRYPT
   1130          	if (password != NULL)
   \   000001B8   000056E3           CMP      R6,#+0
   \   000001BC   580087E5           STR      R0,[R7, #+88]
   \   000001C0   640094E5           LDR      R0,[R4, #+100]
   \   000001C4   5C0087E5           STR      R0,[R7, #+92]
   \   000001C8   980094E5           LDR      R0,[R4, #+152]
   \   000001CC   00109DE5           LDR      R1,[SP, #+0]
   \   000001D0   000081E0           ADD      R0,R1,R0
   \   000001D4   1E0080E2           ADD      R0,R0,#+30
   \   000001D8   3C0087E5           STR      R0,[R7, #+60]
   \   000001DC   0000A0E3           MOV      R0,#+0
   \   000001E0   080087E5           STR      R0,[R7, #+8]
   \   000001E4   9C7084E5           STR      R7,[R4, #+156]
   \   000001E8   4100000A           BEQ      ??unzOpenCurrentFile3_16
   1131          	{
   1132          		int i;
   1133          		s->pcrc_32_tab = get_crc_table();
   \   000001EC   ........           _BLF     get_crc_table,??get_crc_table??rA
   \   000001F0   B00084E5           STR      R0,[R4, #+176]
   1134          		init_keys(password,s->keys,s->pcrc_32_tab);
   \   000001F4   0050A0E1           MOV      R5,R0
   \   000001F8   14019FE5           LDR      R0,??unzOpenCurrentFile3_14+0x4  ;; 0x12345678
   \   000001FC   A47084E2           ADD      R7,R4,#+164
   \   00000200   000087E5           STR      R0,[R7, #+0]
   \   00000204   0C019FE5           LDR      R0,??unzOpenCurrentFile3_14+0x8  ;; 0x23456789
   \   00000208   040087E5           STR      R0,[R7, #+4]
   \   0000020C   08019FE5           LDR      R0,??unzOpenCurrentFile3_14+0xC  ;; 0x34567890
   \   00000210   080087E5           STR      R0,[R7, #+8]
   \   00000214   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000218   000050E3           CMP      R0,#+0
   \   0000021C   0600000A           BEQ      ??unzOpenCurrentFile3_17
   \                     ??unzOpenCurrentFile3_18:
   \   00000220   ........           LDRB     R2,[R6], #+1
   \   00000224   0510A0E1           MOV      R1,R5
   \   00000228   0700A0E1           MOV      R0,R7
   \   0000022C   ........           BL       update_keys
   \   00000230   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000234   000050E3           CMP      R0,#+0
   \   00000238   F8FFFF1A           BNE      ??unzOpenCurrentFile3_18
   1135          		if (ZSEEK(s->z_filefunc, s->filestream,
   1136          				  s->pfile_in_zip_read->pos_in_zipfile +
   1137          					 s->pfile_in_zip_read->byte_before_the_zipfile,
   1138          				  SEEK_SET)!=0)
   \                     ??unzOpenCurrentFile3_17:
   \   0000023C   9C0094E5           LDR      R0,[R4, #+156]
   \   00000240   9C1094E5           LDR      R1,[R4, #+156]
   \   00000244   3C0090E5           LDR      R0,[R0, #+60]
   \   00000248   881091E5           LDR      R1,[R1, #+136]
   \   0000024C   105094E5           LDR      R5,[R4, #+16]
   \   00000250   002081E0           ADD      R2,R1,R0
   \   00000254   1C0094E5           LDR      R0,[R4, #+28]
   \   00000258   201094E5           LDR      R1,[R4, #+32]
   \   0000025C   0030A0E3           MOV      R3,#+0
   \   00000260   35FF2FE1           BLX      R5
   \   00000264   000050E3           CMP      R0,#+0
   \   00000268   93FFFF1A           BNE      ??unzOpenCurrentFile3_7
   1139          			return UNZ_INTERNALERROR;
   1140          		if(ZREAD(s->z_filefunc, s->filestream,source, 12)<12)
   \   0000026C   1C0094E5           LDR      R0,[R4, #+28]
   \   00000270   201094E5           LDR      R1,[R4, #+32]
   \   00000274   045094E5           LDR      R5,[R4, #+4]
   \   00000278   0C30A0E3           MOV      R3,#+12
   \   0000027C   0C208DE2           ADD      R2,SP,#+12
   \   00000280   35FF2FE1           BLX      R5
   \   00000284   0C0050E3           CMP      R0,#+12
   \   00000288   8BFFFF3A           BCC      ??unzOpenCurrentFile3_7
   1141          			return UNZ_INTERNALERROR;
   1142          
   1143          		for (i = 0; i<12; i++)
   \   0000028C   0050A0E3           MOV      R5,#+0
   1144          			zdecode(s->keys,s->pcrc_32_tab,source[i]);
   \                     ??unzOpenCurrentFile3_19:
   \   00000290   AC0094E5           LDR      R0,[R4, #+172]
   \   00000294   0210A0E3           MOV      R1,#+2
   \   00000298   0008A0E1           LSL      R0,R0,#+16
   \   0000029C   200881E1           ORR      R0,R1,R0, LSR #+16
   \   000002A0   0C108DE2           ADD      R1,SP,#+12
   \   000002A4   011085E0           ADD      R1,R5,R1
   \   000002A8   0020D1E5           LDRB     R2,[R1, #+0]
   \   000002AC   013020E2           EOR      R3,R0,#0x1
   \   000002B0   930000E0           MUL      R0,R3,R0
   \   000002B4   015085E2           ADD      R5,R5,#+1
   \   000002B8   2004A0E1           LSR      R0,R0,#+8
   \   000002BC   022020E0           EOR      R2,R0,R2
   \   000002C0   0020C1E5           STRB     R2,[R1, #+0]
   \   000002C4   B01094E5           LDR      R1,[R4, #+176]
   \   000002C8   FF2002E2           AND      R2,R2,#0xFF
   \   000002CC   A40084E2           ADD      R0,R4,#+164
   \   000002D0   ........           BL       update_keys
   \   000002D4   0C0055E3           CMP      R5,#+12
   \   000002D8   ECFFFFBA           BLT      ??unzOpenCurrentFile3_19
   1145          
   1146          		s->pfile_in_zip_read->pos_in_zipfile+=12;
   \   000002DC   9C0094E5           LDR      R0,[R4, #+156]
   \   000002E0   3C1090E5           LDR      R1,[R0, #+60]
   \   000002E4   0C1081E2           ADD      R1,R1,#+12
   \   000002E8   3C1080E5           STR      R1,[R0, #+60]
   1147          		s->encrypted=1;
   \   000002EC   0100A0E3           MOV      R0,#+1
   \   000002F0   A00084E5           STR      R0,[R4, #+160]
   1148          	}
   1149          #	endif
   1150          
   1151          
   1152          	return UNZ_OK;
   \                     ??unzOpenCurrentFile3_16:
   \   000002F4   0000A0E3           MOV      R0,#+0
   \                     ??unzOpenCurrentFile3_4:
   \   000002F8   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   000002FC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??unzOpenCurrentFile3_15:
   \   00000300   0700A0E1           MOV      R0,R7
   \   00000304   040100EF           SWI      +260
   \   00000308   0500A0E1           MOV      R0,R5
   \   0000030C   6BFFFFEA           B        ??unzOpenCurrentFile3_2
   \                     ??unzOpenCurrentFile3_14:
   \   00000310   ........           DC32     `?<Constant "1.2.3">`
   \   00000314   78563412           DC32     0x12345678
   \   00000318   89674523           DC32     0x23456789
   \   0000031C   90785634           DC32     0x34567890
   1153          }
   1154          

   \                                 In segment CODE, align 4, keep-with-next
   1155          extern int unzOpenCurrentFile (unzFile file)
   1156          {
   \                     unzOpenCurrentFile:
   \   00000000   00402DE9           PUSH     {LR}
   1157          	return unzOpenCurrentFile3(file, NULL, NULL, 0, NULL);
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   02002DE9           PUSH     {R1}
   \   0000000C   0030A0E3           MOV      R3,#+0
   \   00000010   0120A0E1           MOV      R2,R1
   \   00000014   ........           BL       unzOpenCurrentFile3
   \   00000018   0280BDE8           POP      {R1,PC}          ;; return
   1158          }
   1159          

   \                                 In segment CODE, align 4, keep-with-next
   1160          extern int unzOpenCurrentFilePassword (
   1161          	unzFile file,
   1162          	const char* password)
   1163          {
   \                     unzOpenCurrentFilePassword:
   \   00000000   00402DE9           PUSH     {LR}
   1164          	return unzOpenCurrentFile3(file, NULL, NULL, 0, password);
   \   00000004   02002DE9           PUSH     {R1}
   \   00000008   0030A0E3           MOV      R3,#+0
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0210A0E1           MOV      R1,R2
   \   00000014   ........           BL       unzOpenCurrentFile3
   \   00000018   0280BDE8           POP      {R1,PC}          ;; return
   1165          }
   1166          

   \                                 In segment CODE, align 4, keep-with-next
   1167          extern int unzOpenCurrentFile2 (
   1168          	unzFile file,
   1169          	int* method,
   1170          	int* level,
   1171          	int raw)
   1172          {
   \                     unzOpenCurrentFile2:
   \   00000000   00402DE9           PUSH     {LR}
   1173          	return unzOpenCurrentFile3(file, method, level, raw, NULL);
   \   00000004   00C0A0E3           MOV      R12,#+0
   \   00000008   00102DE9           PUSH     {R12}
   \   0000000C   ........           BL       unzOpenCurrentFile3
   \   00000010   0280BDE8           POP      {R1,PC}          ;; return
   1174          }
   1175          
   1176          /*
   1177            Read bytes from the current file.
   1178            buf contain buffer where data must be copied
   1179            len the size of buf.
   1180          
   1181            return the number of byte copied if somes bytes are copied
   1182            return 0 if the end of file was reached
   1183            return <0 with error code if there is an error
   1184          	(UNZ_ERRNO for IO error, or zLib error for uncompress error)
   1185          */

   \                                 In segment CODE, align 4, keep-with-next
   1186          extern int unzReadCurrentFile  (
   1187          	unzFile file,
   1188          	voidp buf,
   1189          	unsigned len)
   1190          {
   \                     unzReadCurrentFile:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0050B0E1           MOVS     R5,R0
   1191          
   1192          	int err=UNZ_OK;
   \   00000008   0070A0E3           MOV      R7,#+0
   1193          	uInt iRead = 0;
   \   0000000C   0040A0E3           MOV      R4,#+0
   1194          	unz_s* s;
   1195          	file_in_zip_read_info_s* pfile_in_zip_read_info;
   1196          	if (file==NULL)
   \   00000010   0100001A           BNE      ??unzReadCurrentFile_0
   1197          		return UNZ_PARAMERROR;
   \                     ??unzReadCurrentFile_1:
   \   00000014   6500E0E3           MVN      R0,#+101
   \   00000018   F08FBDE8           POP      {R4-R11,PC}
   1198          	s=(unz_s*)file;
   1199          	pfile_in_zip_read_info=s->pfile_in_zip_read;
   \                     ??unzReadCurrentFile_0:
   \   0000001C   9C6095E5           LDR      R6,[R5, #+156]
   1200          
   1201          	if (pfile_in_zip_read_info==NULL)
   \   00000020   000056E3           CMP      R6,#+0
   \   00000024   FAFFFF0A           BEQ      ??unzReadCurrentFile_1
   1202          		return UNZ_PARAMERROR;
   1203          
   1204          
   1205          	if ((pfile_in_zip_read_info->read_buffer == NULL))
   \   00000028   000096E5           LDR      R0,[R6, #+0]
   \   0000002C   000050E3           CMP      R0,#+0
   1206          		return UNZ_END_OF_LIST_OF_FILE;
   \   00000030   6300E003           MVNEQ    R0,#+99
   \   00000034   F08FBD08           POPEQ    {R4-R11,PC}
   1207          	if (len==0)
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   8400000A           BEQ      ??unzReadCurrentFile_2
   1208          		return 0;
   1209          
   1210          	pfile_in_zip_read_info->stream.next_out = (Bytef*)buf;
   \   00000040   101086E5           STR      R1,[R6, #+16]
   1211          
   1212          	pfile_in_zip_read_info->stream.avail_out = (uInt)len;
   1213          	
   1214          	if ((len>pfile_in_zip_read_info->rest_read_uncompressed) &&
   1215          		(!(pfile_in_zip_read_info->raw)))
   \   00000044   5C1096E5           LDR      R1,[R6, #+92]
   \   00000048   0200A0E1           MOV      R0,R2
   \   0000004C   020051E1           CMP      R1,R2
   \   00000050   0200002A           BCS      ??unzReadCurrentFile_3
   \   00000054   8C1096E5           LDR      R1,[R6, #+140]
   \   00000058   000051E3           CMP      R1,#+0
   1216          		pfile_in_zip_read_info->stream.avail_out =
   1217          			(uInt)pfile_in_zip_read_info->rest_read_uncompressed;
   \   0000005C   5C009605           LDREQ    R0,[R6, #+92]
   \                     ??unzReadCurrentFile_3:
   \   00000060   140086E5           STR      R0,[R6, #+20]
   1218          
   1219          	if ((len>pfile_in_zip_read_info->rest_read_compressed+
   1220          		   pfile_in_zip_read_info->stream.avail_in) &&
   1221          		 (pfile_in_zip_read_info->raw))
   \   00000064   580096E5           LDR      R0,[R6, #+88]
   \   00000068   081096E5           LDR      R1,[R6, #+8]
   \   0000006C   000081E0           ADD      R0,R1,R0
   \   00000070   020050E1           CMP      R0,R2
   \   00000074   2500002A           BCS      ??unzReadCurrentFile_4
   \   00000078   8C0096E5           LDR      R0,[R6, #+140]
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   2200000A           BEQ      ??unzReadCurrentFile_4
   1222          		pfile_in_zip_read_info->stream.avail_out =
   1223          			(uInt)pfile_in_zip_read_info->rest_read_compressed+
   1224          			pfile_in_zip_read_info->stream.avail_in;
   \   00000084   580096E5           LDR      R0,[R6, #+88]
   \   00000088   000081E0           ADD      R0,R1,R0
   \   0000008C   140086E5           STR      R0,[R6, #+20]
   \   00000090   1E0000EA           B        ??unzReadCurrentFile_4
   1225          
   1226          	while (pfile_in_zip_read_info->stream.avail_out>0)
   1227          	{
   1228          		if ((pfile_in_zip_read_info->stream.avail_in==0) &&
   1229          			(pfile_in_zip_read_info->rest_read_compressed>0))
   1230          		{
   1231          			uInt uReadThis = UNZ_BUFSIZE;
   1232          			if (pfile_in_zip_read_info->rest_read_compressed<uReadThis)
   1233          				uReadThis = (uInt)pfile_in_zip_read_info->rest_read_compressed;
   1234          			if (uReadThis == 0)
   1235          				return UNZ_EOF;
   1236          			if (ZSEEK(pfile_in_zip_read_info->z_filefunc,
   1237          					  pfile_in_zip_read_info->filestream,
   1238          					  pfile_in_zip_read_info->pos_in_zipfile +
   1239          						 pfile_in_zip_read_info->byte_before_the_zipfile,
   1240          						 ZLIB_FILEFUNC_SEEK_SET)!=0)
   1241          				return UNZ_ERRNO;
   1242          			if (ZREAD(pfile_in_zip_read_info->z_filefunc,
   1243          					  pfile_in_zip_read_info->filestream,
   1244          					  pfile_in_zip_read_info->read_buffer,
   1245          					  uReadThis)!=uReadThis)
   1246          				return UNZ_ERRNO;
   1247          
   1248          
   1249          #			ifndef NOUNCRYPT
   1250          			if(s->encrypted)
   1251          			{
   1252          				uInt i;
   1253          				for(i=0;i<uReadThis;i++)
   1254          				  pfile_in_zip_read_info->read_buffer[i] =
   1255          					  zdecode(s->keys,s->pcrc_32_tab,
   1256          							  pfile_in_zip_read_info->read_buffer[i]);
   1257          			}
   1258          #			endif
   1259          
   1260          
   1261          			pfile_in_zip_read_info->pos_in_zipfile += uReadThis;
   1262          
   1263          			pfile_in_zip_read_info->rest_read_compressed-=uReadThis;
   1264          
   1265          			pfile_in_zip_read_info->stream.next_in =
   1266          				(Bytef*)pfile_in_zip_read_info->read_buffer;
   1267          			pfile_in_zip_read_info->stream.avail_in = (uInt)uReadThis;
   1268          		}
   1269          
   1270          		if ((pfile_in_zip_read_info->compression_method==0) || (pfile_in_zip_read_info->raw))
   1271          		{
   1272          			uInt uDoCopy,i ;
   1273          
   1274          			if ((pfile_in_zip_read_info->stream.avail_in == 0) &&
   1275          				(pfile_in_zip_read_info->rest_read_compressed == 0))
   1276          				return (iRead==0) ? UNZ_EOF : iRead;
   1277          
   1278          			if (pfile_in_zip_read_info->stream.avail_out <
   1279          							pfile_in_zip_read_info->stream.avail_in)
   1280          				uDoCopy = pfile_in_zip_read_info->stream.avail_out ;
   1281          			else
   1282          				uDoCopy = pfile_in_zip_read_info->stream.avail_in ;
   1283          
   1284          			for (i=0;i<uDoCopy;i++)
   1285          				*(pfile_in_zip_read_info->stream.next_out+i) =
   1286          						*(pfile_in_zip_read_info->stream.next_in+i);
   \                     ??unzReadCurrentFile_5:
   \   00000094   042096E5           LDR      R2,[R6, #+4]
   \   00000098   101096E5           LDR      R1,[R6, #+16]
   \   0000009C   0220D0E7           LDRB     R2,[R0, +R2]
   \   000000A0   0120C0E7           STRB     R2,[R0, +R1]
   \   000000A4   010080E2           ADD      R0,R0,#+1
   \                     ??unzReadCurrentFile_6:
   \   000000A8   080050E1           CMP      R0,R8
   \   000000AC   F8FFFF3A           BCC      ??unzReadCurrentFile_5
   1287          
   1288          			pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,
   1289          								pfile_in_zip_read_info->stream.next_out,
   1290          								uDoCopy);
   \                     ??unzReadCurrentFile_7:
   \   000000B0   500096E5           LDR      R0,[R6, #+80]
   \   000000B4   101096E5           LDR      R1,[R6, #+16]
   \   000000B8   0820A0E1           MOV      R2,R8
   \   000000BC   ........           _BLF     crc32,??crc32??rA
   \   000000C0   500086E5           STR      R0,[R6, #+80]
   1291          			pfile_in_zip_read_info->rest_read_uncompressed-=uDoCopy;
   \   000000C4   5C0096E5           LDR      R0,[R6, #+92]
   1292          			pfile_in_zip_read_info->stream.avail_in -= uDoCopy;
   1293          			pfile_in_zip_read_info->stream.avail_out -= uDoCopy;
   1294          			pfile_in_zip_read_info->stream.next_out += uDoCopy;
   1295          			pfile_in_zip_read_info->stream.next_in += uDoCopy;
   1296          			pfile_in_zip_read_info->stream.total_out += uDoCopy;
   1297          			iRead += uDoCopy;
   \   000000C8   044088E0           ADD      R4,R8,R4
   \   000000CC   080040E0           SUB      R0,R0,R8
   \   000000D0   5C0086E5           STR      R0,[R6, #+92]
   \   000000D4   080096E5           LDR      R0,[R6, #+8]
   \   000000D8   080040E0           SUB      R0,R0,R8
   \   000000DC   080086E5           STR      R0,[R6, #+8]
   \   000000E0   140096E5           LDR      R0,[R6, #+20]
   \   000000E4   080040E0           SUB      R0,R0,R8
   \   000000E8   140086E5           STR      R0,[R6, #+20]
   \   000000EC   100096E5           LDR      R0,[R6, #+16]
   \   000000F0   000088E0           ADD      R0,R8,R0
   \   000000F4   100086E5           STR      R0,[R6, #+16]
   \   000000F8   040096E5           LDR      R0,[R6, #+4]
   \   000000FC   000088E0           ADD      R0,R8,R0
   \   00000100   040086E5           STR      R0,[R6, #+4]
   \   00000104   180096E5           LDR      R0,[R6, #+24]
   \   00000108   000088E0           ADD      R0,R8,R0
   \   0000010C   180086E5           STR      R0,[R6, #+24]
   \                     ??unzReadCurrentFile_4:
   \   00000110   140096E5           LDR      R0,[R6, #+20]
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   7600000A           BEQ      ??unzReadCurrentFile_8
   \   0000011C   080096E5           LDR      R0,[R6, #+8]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   3D00001A           BNE      ??unzReadCurrentFile_9
   \   00000128   580096E5           LDR      R0,[R6, #+88]
   \   0000012C   000050E3           CMP      R0,#+0
   \   00000130   3A00000A           BEQ      ??unzReadCurrentFile_9
   \   00000134   881096E5           LDR      R1,[R6, #+136]
   \   00000138   408CA0E3           MOV      R8,#+16384
   \   0000013C   709096E5           LDR      R9,[R6, #+112]
   \   00000140   400C50E3           CMP      R0,#+16384
   \   00000144   0080A031           MOVCC    R8,R0
   \   00000148   3C0096E5           LDR      R0,[R6, #+60]
   \   0000014C   0030A0E3           MOV      R3,#+0
   \   00000150   002081E0           ADD      R2,R1,R0
   \   00000154   7C0096E5           LDR      R0,[R6, #+124]
   \   00000158   801096E5           LDR      R1,[R6, #+128]
   \   0000015C   39FF2FE1           BLX      R9
   \   00000160   000050E3           CMP      R0,#+0
   \   00000164   0100000A           BEQ      ??unzReadCurrentFile_10
   \                     ??unzReadCurrentFile_11:
   \   00000168   0000E0E3           MVN      R0,#+0
   \   0000016C   F08FBDE8           POP      {R4-R11,PC}
   \                     ??unzReadCurrentFile_10:
   \   00000170   7C0096E5           LDR      R0,[R6, #+124]
   \   00000174   002096E5           LDR      R2,[R6, #+0]
   \   00000178   801096E5           LDR      R1,[R6, #+128]
   \   0000017C   649096E5           LDR      R9,[R6, #+100]
   \   00000180   0830A0E1           MOV      R3,R8
   \   00000184   39FF2FE1           BLX      R9
   \   00000188   080050E1           CMP      R0,R8
   \   0000018C   F5FFFF1A           BNE      ??unzReadCurrentFile_11
   \   00000190   A00095E5           LDR      R0,[R5, #+160]
   \   00000194   000050E3           CMP      R0,#+0
   \   00000198   1700000A           BEQ      ??unzReadCurrentFile_12
   \   0000019C   0090A0E3           MOV      R9,#+0
   \   000001A0   130000EA           B        ??unzReadCurrentFile_13
   \                     ??unzReadCurrentFile_14:
   \   000001A4   AC0095E5           LDR      R0,[R5, #+172]
   \   000001A8   0210A0E3           MOV      R1,#+2
   \   000001AC   0008A0E1           LSL      R0,R0,#+16
   \   000001B0   200881E1           ORR      R0,R1,R0, LSR #+16
   \   000001B4   001096E5           LDR      R1,[R6, #+0]
   \   000001B8   013020E2           EOR      R3,R0,#0x1
   \   000001BC   011089E0           ADD      R1,R9,R1
   \   000001C0   0020D1E5           LDRB     R2,[R1, #+0]
   \   000001C4   930000E0           MUL      R0,R3,R0
   \   000001C8   2004A0E1           LSR      R0,R0,#+8
   \   000001CC   020020E0           EOR      R0,R0,R2
   \   000001D0   0000C1E5           STRB     R0,[R1, #+0]
   \   000001D4   000096E5           LDR      R0,[R6, #+0]
   \   000001D8   B01095E5           LDR      R1,[R5, #+176]
   \   000001DC   0020D9E7           LDRB     R2,[R9, +R0]
   \   000001E0   A40085E2           ADD      R0,R5,#+164
   \   000001E4   ........           BL       update_keys
   \   000001E8   001096E5           LDR      R1,[R6, #+0]
   \   000001EC   0100C9E7           STRB     R0,[R9, +R1]
   \   000001F0   019089E2           ADD      R9,R9,#+1
   \                     ??unzReadCurrentFile_13:
   \   000001F4   080059E1           CMP      R9,R8
   \   000001F8   E9FFFF3A           BCC      ??unzReadCurrentFile_14
   \                     ??unzReadCurrentFile_12:
   \   000001FC   3C0096E5           LDR      R0,[R6, #+60]
   \   00000200   000088E0           ADD      R0,R8,R0
   \   00000204   3C0086E5           STR      R0,[R6, #+60]
   \   00000208   580096E5           LDR      R0,[R6, #+88]
   \   0000020C   080040E0           SUB      R0,R0,R8
   \   00000210   580086E5           STR      R0,[R6, #+88]
   \   00000214   000096E5           LDR      R0,[R6, #+0]
   \   00000218   040086E5           STR      R0,[R6, #+4]
   \   0000021C   088086E5           STR      R8,[R6, #+8]
   \                     ??unzReadCurrentFile_9:
   \   00000220   840096E5           LDR      R0,[R6, #+132]
   \   00000224   000050E3           CMP      R0,#+0
   \   00000228   0200000A           BEQ      ??unzReadCurrentFile_15
   \   0000022C   8C0096E5           LDR      R0,[R6, #+140]
   \   00000230   000050E3           CMP      R0,#+0
   \   00000234   1100000A           BEQ      ??unzReadCurrentFile_16
   \                     ??unzReadCurrentFile_15:
   \   00000238   080096E5           LDR      R0,[R6, #+8]
   \   0000023C   000050E3           CMP      R0,#+0
   \   00000240   58009605           LDREQ    R0,[R6, #+88]
   \   00000244   00005003           CMPEQ    R0,#+0
   \   00000248   0300001A           BNE      ??unzReadCurrentFile_17
   \   0000024C   000054E3           CMP      R4,#+0
   \   00000250   F08FBD08           POPEQ    {R4-R11,PC}
   \                     ??unzReadCurrentFile_2:
   \   00000254   0400A0E1           MOV      R0,R4
   \   00000258   F08FBDE8           POP      {R4-R11,PC}
   \                     ??unzReadCurrentFile_17:
   \   0000025C   140096E5           LDR      R0,[R6, #+20]
   \   00000260   081096E5           LDR      R1,[R6, #+8]
   \   00000264   010050E1           CMP      R0,R1
   \   00000268   0080A031           MOVCC    R8,R0
   \   0000026C   0180A021           MOVCS    R8,R1
   \   00000270   0000A0E3           MOV      R0,#+0
   \   00000274   000058E3           CMP      R8,#+0
   \   00000278   8AFFFF1A           BNE      ??unzReadCurrentFile_6
   \   0000027C   8BFFFFEA           B        ??unzReadCurrentFile_7
   1298          		}
   1299          		else
   1300          		{
   1301          			uLong uTotalOutBefore,uTotalOutAfter;
   1302          			const Bytef *bufBefore;
   1303          			uLong uOutThis;
   1304          			int flush=Z_SYNC_FLUSH;
   1305          
   1306          			uTotalOutBefore = pfile_in_zip_read_info->stream.total_out;
   \                     ??unzReadCurrentFile_16:
   \   00000280   188096E5           LDR      R8,[R6, #+24]
   1307          			bufBefore = pfile_in_zip_read_info->stream.next_out;
   \   00000284   109096E5           LDR      R9,[R6, #+16]
   1308          
   1309          			/*
   1310          			if ((pfile_in_zip_read_info->rest_read_uncompressed ==
   1311          					 pfile_in_zip_read_info->stream.avail_out) &&
   1312          				(pfile_in_zip_read_info->rest_read_compressed == 0))
   1313          				flush = Z_FINISH;
   1314          			*/
   1315          			err=inflate(&pfile_in_zip_read_info->stream,flush);
   \   00000288   0210A0E3           MOV      R1,#+2
   \   0000028C   040086E2           ADD      R0,R6,#+4
   \   00000290   7B0200EF           SWI      +635
   \   00000294   0070B0E1           MOVS     R7,R0
   1316          
   1317          			if ((err>=0) && (pfile_in_zip_read_info->stream.msg!=NULL))
   \   00000298   0200004A           BMI      ??unzReadCurrentFile_18
   \   0000029C   1C0096E5           LDR      R0,[R6, #+28]
   \   000002A0   000050E3           CMP      R0,#+0
   1318          				err = Z_DATA_ERROR;
   \   000002A4   0270E013           MVNNE    R7,#+2
   1319          
   1320          			uTotalOutAfter = pfile_in_zip_read_info->stream.total_out;
   \                     ??unzReadCurrentFile_18:
   \   000002A8   18A096E5           LDR      R10,[R6, #+24]
   1321          			uOutThis = uTotalOutAfter-uTotalOutBefore;
   1322          
   1323          			pfile_in_zip_read_info->crc32 =
   1324          				crc32(pfile_in_zip_read_info->crc32,bufBefore,
   1325          						(uInt)(uOutThis));
   \   000002AC   500096E5           LDR      R0,[R6, #+80]
   \   000002B0   08B04AE0           SUB      R11,R10,R8
   \   000002B4   0B20A0E1           MOV      R2,R11
   \   000002B8   0910A0E1           MOV      R1,R9
   \   000002BC   ........           _BLF     crc32,??crc32??rA
   \   000002C0   500086E5           STR      R0,[R6, #+80]
   1326          
   1327          			pfile_in_zip_read_info->rest_read_uncompressed -=
   1328          				uOutThis;
   \   000002C4   5C0096E5           LDR      R0,[R6, #+92]
   1329          
   1330          			iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);
   1331          
   1332          			if (err==Z_STREAM_END)
   \   000002C8   010057E3           CMP      R7,#+1
   \   000002CC   0B0040E0           SUB      R0,R0,R11
   \   000002D0   5C0086E5           STR      R0,[R6, #+92]
   \   000002D4   04008AE0           ADD      R0,R10,R4
   \   000002D8   084040E0           SUB      R4,R0,R8
   \   000002DC   0300001A           BNE      ??unzReadCurrentFile_19
   1333          				return (iRead==0) ? UNZ_EOF : iRead;
   \   000002E0   000054E3           CMP      R4,#+0
   \   000002E4   DAFFFF1A           BNE      ??unzReadCurrentFile_2
   \   000002E8   0000A0E3           MOV      R0,#+0
   \   000002EC   F08FBDE8           POP      {R4-R11,PC}
   1334          			if (err!=Z_OK)
   \                     ??unzReadCurrentFile_19:
   \   000002F0   000057E3           CMP      R7,#+0
   \   000002F4   85FFFF0A           BEQ      ??unzReadCurrentFile_4
   1335          				break;
   1336          		}
   1337          	}
   1338          
   1339          	if (err==Z_OK)
   \                     ??unzReadCurrentFile_8:
   \   000002F8   000057E3           CMP      R7,#+0
   \   000002FC   D4FFFF0A           BEQ      ??unzReadCurrentFile_2
   1340          		return iRead;
   1341          	return err;
   \   00000300   0700A0E1           MOV      R0,R7
   \   00000304   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1342          }
   1343          
   1344          
   1345          /*
   1346            Give the current position in uncompressed data
   1347          */

   \                                 In segment CODE, align 4, keep-with-next
   1348          extern z_off_t unztell (unzFile file)
   1349          {
   1350          	unz_s* s;
   1351          	file_in_zip_read_info_s* pfile_in_zip_read_info;
   1352          	if (file==NULL)
   \                     unztell:
   \   00000000   000050E3           CMP      R0,#+0
   1353          		return UNZ_PARAMERROR;
   1354          	s=(unz_s*)file;
   1355          	pfile_in_zip_read_info=s->pfile_in_zip_read;
   \   00000004   9C009015           LDRNE    R0,[R0, #+156]
   1356          
   1357          	if (pfile_in_zip_read_info==NULL)
   \   00000008   00005013           CMPNE    R0,#+0
   1358          		return UNZ_PARAMERROR;
   \   0000000C   6500E003           MVNEQ    R0,#+101
   \   00000010   1EFF2F01           BXEQ     LR
   1359          
   1360          	return (z_off_t)pfile_in_zip_read_info->stream.total_out;
   \   00000014   180090E5           LDR      R0,[R0, #+24]
   \   00000018   1EFF2FE1           BX       LR               ;; return
   1361          }
   1362          
   1363          
   1364          /*
   1365            return 1 if the end of file was reached, 0 elsewhere
   1366          */

   \                                 In segment CODE, align 4, keep-with-next
   1367          extern int unzeof (unzFile file)
   1368          {
   1369          	unz_s* s;
   1370          	file_in_zip_read_info_s* pfile_in_zip_read_info;
   1371          	if (file==NULL)
   \                     unzeof:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   0100001A           BNE      ??unzeof_0
   1372          		return UNZ_PARAMERROR;
   \                     ??unzeof_1:
   \   00000008   6500E0E3           MVN      R0,#+101
   \   0000000C   1EFF2FE1           BX       LR
   1373          	s=(unz_s*)file;
   1374          	pfile_in_zip_read_info=s->pfile_in_zip_read;
   \                     ??unzeof_0:
   \   00000010   9C0090E5           LDR      R0,[R0, #+156]
   1375          
   1376          	if (pfile_in_zip_read_info==NULL)
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   FAFFFF0A           BEQ      ??unzeof_1
   1377          		return UNZ_PARAMERROR;
   1378          
   1379          	if (pfile_in_zip_read_info->rest_read_uncompressed == 0)
   \   0000001C   5C0090E5           LDR      R0,[R0, #+92]
   \   00000020   000050E3           CMP      R0,#+0
   1380          		return 1;
   \   00000024   0100A003           MOVEQ    R0,#+1
   \   00000028   1EFF2F01           BXEQ     LR
   1381          	else
   1382          		return 0;
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   1EFF2FE1           BX       LR               ;; return
   1383          }
   1384          
   1385          
   1386          
   1387          /*
   1388            Read extra field from the current file (opened by unzOpenCurrentFile)
   1389            This is the -header version of the extra field (sometimes, there is
   1390          	more info in the -header version than in the central-header)
   1391          
   1392            if buf==NULL, it return the size of the  extra field that can be read
   1393          
   1394            if buf!=NULL, len is the size of the buffer, the extra header is copied in
   1395          	buf.
   1396            the return value is the number of bytes copied in buf, or (if <0)
   1397          	the error code
   1398          */

   \                                 In segment CODE, align 4, keep-with-next
   1399          extern int unzGetLocalExtrafield (
   1400          	unzFile file,
   1401          	voidp buf,
   1402          	unsigned len)
   1403          {
   \                     unzGetLocalExtrafield:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   1404          	unz_s* s;
   1405          	file_in_zip_read_info_s* pfile_in_zip_read_info;
   1406          	uInt read_now;
   1407          	uLong size_to_read;
   1408          
   1409          	if (file==NULL)
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0100001A           BNE      ??unzGetLocalExtrafield_0
   1410          		return UNZ_PARAMERROR;
   \                     ??unzGetLocalExtrafield_1:
   \   00000014   6500E0E3           MVN      R0,#+101
   \   00000018   7080BDE8           POP      {R4-R6,PC}
   1411          	s=(unz_s*)file;
   1412          	pfile_in_zip_read_info=s->pfile_in_zip_read;
   \                     ??unzGetLocalExtrafield_0:
   \   0000001C   9C5090E5           LDR      R5,[R0, #+156]
   1413          
   1414          	if (pfile_in_zip_read_info==NULL)
   \   00000020   000055E3           CMP      R5,#+0
   \   00000024   FAFFFF0A           BEQ      ??unzGetLocalExtrafield_1
   1415          		return UNZ_PARAMERROR;
   1416          
   1417          	size_to_read = (pfile_in_zip_read_info->size_local_extrafield -
   1418          				pfile_in_zip_read_info->pos_local_extrafield);
   \   00000028   480095E5           LDR      R0,[R5, #+72]
   \   0000002C   4C1095E5           LDR      R1,[R5, #+76]
   1419          
   1420          	if (buf==NULL)
   \   00000030   000054E3           CMP      R4,#+0
   \   00000034   010040E0           SUB      R0,R0,R1
   \   00000038   7080BD08           POPEQ    {R4-R6,PC}
   1421          		return (int)size_to_read;
   1422          
   1423          	if (len>size_to_read)
   \   0000003C   060050E1           CMP      R0,R6
   1424          		read_now = (uInt)size_to_read;
   \   00000040   0060A031           MOVCC    R6,R0
   1425          	else
   1426          		read_now = (uInt)len ;
   1427          
   1428          	if (read_now==0)
   \   00000044   000056E3           CMP      R6,#+0
   1429          		return 0;
   \   00000048   0000A003           MOVEQ    R0,#+0
   \   0000004C   7080BD08           POPEQ    {R4-R6,PC}
   1430          
   1431          	if (ZSEEK(pfile_in_zip_read_info->z_filefunc,
   1432          			  pfile_in_zip_read_info->filestream,
   1433          			  pfile_in_zip_read_info->offset_local_extrafield +
   1434          			  pfile_in_zip_read_info->pos_local_extrafield,
   1435          			  ZLIB_FILEFUNC_SEEK_SET)!=0)
   \   00000050   440095E5           LDR      R0,[R5, #+68]
   \   00000054   70C095E5           LDR      R12,[R5, #+112]
   \   00000058   002081E0           ADD      R2,R1,R0
   \   0000005C   7C0095E5           LDR      R0,[R5, #+124]
   \   00000060   801095E5           LDR      R1,[R5, #+128]
   \   00000064   0030A0E3           MOV      R3,#+0
   \   00000068   3CFF2FE1           BLX      R12
   \   0000006C   000050E3           CMP      R0,#+0
   1436          		return UNZ_ERRNO;
   \   00000070   0000E013           MVNNE    R0,#+0
   \   00000074   7080BD18           POPNE    {R4-R6,PC}
   1437          
   1438          	if (ZREAD(pfile_in_zip_read_info->z_filefunc,
   1439          			  pfile_in_zip_read_info->filestream,
   1440          			  buf,read_now)!=read_now)
   \   00000078   7C0095E5           LDR      R0,[R5, #+124]
   \   0000007C   801095E5           LDR      R1,[R5, #+128]
   \   00000080   0630A0E1           MOV      R3,R6
   \   00000084   0420A0E1           MOV      R2,R4
   \   00000088   644095E5           LDR      R4,[R5, #+100]
   \   0000008C   34FF2FE1           BLX      R4
   \   00000090   060050E1           CMP      R0,R6
   1441          		return UNZ_ERRNO;
   \   00000094   0000E013           MVNNE    R0,#+0
   1442          
   1443          	return (int)read_now;
   \   00000098   7080BDE8           POP      {R4-R6,PC}       ;; return
   1444          }
   1445          
   1446          /*
   1447            Close the file in zip opened with unzipOpenCurrentFile
   1448            Return UNZ_CRCERROR if all the file was read but the CRC is not good
   1449          */

   \                                 In segment CODE, align 4, keep-with-next
   1450          extern int unzCloseCurrentFile (unzFile file)
   1451          {
   \                     unzCloseCurrentFile:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   1452          	int err=UNZ_OK;
   \   00000008   0060A0E3           MOV      R6,#+0
   1453          
   1454          	unz_s* s;
   1455          	file_in_zip_read_info_s* pfile_in_zip_read_info;
   1456          	if (file==NULL)
   \   0000000C   0100001A           BNE      ??unzCloseCurrentFile_0
   1457          		return UNZ_PARAMERROR;
   \                     ??unzCloseCurrentFile_1:
   \   00000010   6500E0E3           MVN      R0,#+101
   \   00000014   F080BDE8           POP      {R4-R7,PC}
   1458          	s=(unz_s*)file;
   1459          	pfile_in_zip_read_info=s->pfile_in_zip_read;
   \                     ??unzCloseCurrentFile_0:
   \   00000018   9C5094E5           LDR      R5,[R4, #+156]
   1460          
   1461          	if (pfile_in_zip_read_info==NULL)
   \   0000001C   000055E3           CMP      R5,#+0
   \   00000020   FAFFFF0A           BEQ      ??unzCloseCurrentFile_1
   1462          		return UNZ_PARAMERROR;
   1463          
   1464          
   1465          	if ((pfile_in_zip_read_info->rest_read_uncompressed == 0) &&
   1466          		(!pfile_in_zip_read_info->raw))
   \   00000024   5C0095E5           LDR      R0,[R5, #+92]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   8C009505           LDREQ    R0,[R5, #+140]
   \   00000030   00005003           CMPEQ    R0,#+0
   \   00000034   0300001A           BNE      ??unzCloseCurrentFile_2
   1467          	{
   1468          		if (pfile_in_zip_read_info->crc32 != pfile_in_zip_read_info->crc32_wait)
   \   00000038   500095E5           LDR      R0,[R5, #+80]
   \   0000003C   541095E5           LDR      R1,[R5, #+84]
   \   00000040   010050E1           CMP      R0,R1
   1469          			err=UNZ_CRCERROR;
   \   00000044   6860E013           MVNNE    R6,#+104
   1470          	}
   1471          
   1472          
   1473          	TRYFREE(pfile_in_zip_read_info->read_buffer);
   \                     ??unzCloseCurrentFile_2:
   \   00000048   000095E5           LDR      R0,[R5, #+0]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0100000A           BEQ      ??unzCloseCurrentFile_3
   \   00000054   040100EF           SWI      +260
   1474          	pfile_in_zip_read_info->read_buffer = NULL;
   \   00000058   0000A0E3           MOV      R0,#+0
   \                     ??unzCloseCurrentFile_3:
   \   0000005C   000085E5           STR      R0,[R5, #+0]
   1475          	if (pfile_in_zip_read_info->stream_initialised)
   \   00000060   400095E5           LDR      R0,[R5, #+64]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0100000A           BEQ      ??unzCloseCurrentFile_4
   1476          		inflateEnd(&pfile_in_zip_read_info->stream);
   \   0000006C   040085E2           ADD      R0,R5,#+4
   \   00000070   7C0200EF           SWI      +636
   1477          
   1478          	pfile_in_zip_read_info->stream_initialised = 0;
   \                     ??unzCloseCurrentFile_4:
   \   00000074   0070A0E3           MOV      R7,#+0
   \   00000078   407085E5           STR      R7,[R5, #+64]
   1479          	TRYFREE(pfile_in_zip_read_info);
   \   0000007C   0500A0E1           MOV      R0,R5
   \   00000080   040100EF           SWI      +260
   1480          
   1481          	s->pfile_in_zip_read=NULL;
   \   00000084   9C7084E5           STR      R7,[R4, #+156]
   1482          
   1483          	return err;
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F080BDE8           POP      {R4-R7,PC}       ;; return
   1484          }
   1485          
   1486          
   1487          /*
   1488            Get the global comment string of the ZipFile, in the szComment buffer.
   1489            uSizeBuf is the size of the szComment buffer.
   1490            return the number of byte copied or an error code <0
   1491          */

   \                                 In segment CODE, align 4, keep-with-next
   1492          extern int unzGetGlobalComment (
   1493          	unzFile file,
   1494          	char *szComment,
   1495          	uLong uSizeBuf)
   1496          {
   \                     unzGetGlobalComment:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   1497          	unz_s* s;
   1498          	uLong uReadThis ;
   1499          	if (file==NULL)
   \   00000010   000054E3           CMP      R4,#+0
   1500          		return UNZ_PARAMERROR;
   \   00000014   6500E003           MVNEQ    R0,#+101
   \   00000018   F080BD08           POPEQ    {R4-R7,PC}
   1501          	s=(unz_s*)file;
   1502          
   1503          	uReadThis = uSizeBuf;
   1504          	if (uReadThis>s->gi.size_comment)
   \   0000001C   280094E5           LDR      R0,[R4, #+40]
   1505          		uReadThis = s->gi.size_comment;
   1506          
   1507          	if (ZSEEK(s->z_filefunc,s->filestream,s->central_pos+22,ZLIB_FILEFUNC_SEEK_SET)!=0)
   \   00000020   201094E5           LDR      R1,[R4, #+32]
   \   00000024   10C094E5           LDR      R12,[R4, #+16]
   \   00000028   0670A0E1           MOV      R7,R6
   \   0000002C   070050E1           CMP      R0,R7
   \   00000030   0070A031           MOVCC    R7,R0
   \   00000034   3C0094E5           LDR      R0,[R4, #+60]
   \   00000038   0030A0E3           MOV      R3,#+0
   \   0000003C   162080E2           ADD      R2,R0,#+22
   \   00000040   1C0094E5           LDR      R0,[R4, #+28]
   \   00000044   3CFF2FE1           BLX      R12
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0100000A           BEQ      ??unzGetGlobalComment_0
   1508          		return UNZ_ERRNO;
   \                     ??unzGetGlobalComment_1:
   \   00000050   0000E0E3           MVN      R0,#+0
   \   00000054   F080BDE8           POP      {R4-R7,PC}
   1509          
   1510          	if (uReadThis>0)
   \                     ??unzGetGlobalComment_0:
   \   00000058   000057E3           CMP      R7,#+0
   \   0000005C   0800000A           BEQ      ??unzGetGlobalComment_2
   1511          	{
   1512          	  *szComment='\0';
   \   00000060   0000C5E5           STRB     R0,[R5, #+0]
   1513          	  if (ZREAD(s->z_filefunc,s->filestream,szComment,uReadThis)!=uReadThis)
   \   00000064   1C0094E5           LDR      R0,[R4, #+28]
   \   00000068   201094E5           LDR      R1,[R4, #+32]
   \   0000006C   04C094E5           LDR      R12,[R4, #+4]
   \   00000070   0730A0E1           MOV      R3,R7
   \   00000074   0520A0E1           MOV      R2,R5
   \   00000078   3CFF2FE1           BLX      R12
   \   0000007C   070050E1           CMP      R0,R7
   \   00000080   F2FFFF1A           BNE      ??unzGetGlobalComment_1
   1514          		return UNZ_ERRNO;
   1515          	}
   1516          
   1517          	if ((szComment != NULL) && (uSizeBuf > s->gi.size_comment))
   \                     ??unzGetGlobalComment_2:
   \   00000084   000055E3           CMP      R5,#+0
   \   00000088   0300000A           BEQ      ??unzGetGlobalComment_3
   \   0000008C   280094E5           LDR      R0,[R4, #+40]
   \   00000090   060050E1           CMP      R0,R6
   1518          		*(szComment+s->gi.size_comment)='\0';
   \   00000094   0010A033           MOVCC    R1,#+0
   \   00000098   0510C037           STRBCC   R1,[R0, +R5]
   1519          	return (int)uReadThis;
   \                     ??unzGetGlobalComment_3:
   \   0000009C   0700A0E1           MOV      R0,R7
   \   000000A0   F080BDE8           POP      {R4-R7,PC}       ;; return
   1520          }
   1521          
   1522          /* Additions by RX '2004 */

   \                                 In segment CODE, align 4, keep-with-next
   1523          extern uLong unzGetOffset (unzFile file)
   1524          {
   1525          	unz_s* s;
   1526          
   1527          	if (file==NULL)
   \                     unzGetOffset:
   \   00000000   000050E3           CMP      R0,#+0
   1528          		  return (uLong)UNZ_PARAMERROR;
   \   00000004   6500E003           MVNEQ    R0,#+101
   \   00000008   1EFF2F01           BXEQ     LR
   1529          	s=(unz_s*)file;
   1530          	if (!s->current_file_ok)
   \   0000000C   381090E5           LDR      R1,[R0, #+56]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   0100001A           BNE      ??unzGetOffset_0
   1531          	  return 0;
   \                     ??unzGetOffset_1:
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   1EFF2FE1           BX       LR
   1532          	if (s->gi.number_entry != 0 && s->gi.number_entry != 0xffff)
   \                     ??unzGetOffset_0:
   \   00000020   241090E5           LDR      R1,[R0, #+36]
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   0700000A           BEQ      ??unzGetOffset_2
   \   0000002C   FF20A0E3           MOV      R2,#+255
   \   00000030   FF2C82E3           ORR      R2,R2,#0xFF00
   \   00000034   020051E1           CMP      R1,R2
   \   00000038   0300000A           BEQ      ??unzGetOffset_2
   1533          	  if (s->num_file==s->gi.number_entry)
   \   0000003C   301090E5           LDR      R1,[R0, #+48]
   \   00000040   242090E5           LDR      R2,[R0, #+36]
   \   00000044   020051E1           CMP      R1,R2
   \   00000048   F2FFFF0A           BEQ      ??unzGetOffset_1
   1534          		 return 0;
   1535          	return s->pos_in_central_dir;
   \                     ??unzGetOffset_2:
   \   0000004C   340090E5           LDR      R0,[R0, #+52]
   \   00000050   1EFF2FE1           BX       LR               ;; return
   1536          }
   1537          

   \                                 In segment CODE, align 4, keep-with-next
   1538          extern int unzSetOffset (
   1539          		unzFile file,
   1540          		uLong pos)
   1541          {
   \                     unzSetOffset:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   1542          	unz_s* s;
   1543          	int err;
   1544          
   1545          	if (file==NULL)
   1546          		return UNZ_PARAMERROR;
   \   00000008   6500E003           MVNEQ    R0,#+101
   \   0000000C   1080BD08           POPEQ    {R4,PC}
   1547          	s=(unz_s*)file;
   1548          
   1549          	s->pos_in_central_dir = pos;
   \   00000010   341084E5           STR      R1,[R4, #+52]
   1550          	s->num_file = s->gi.number_entry;	  /* hack */
   \   00000014   240094E5           LDR      R0,[R4, #+36]
   1551          	err = unzlocal_GetCurrentFileInfoInternal(file,&s->cur_file_info,
   1552          											  &s->cur_file_info_internal,
   1553          											  NULL,0,NULL,0,NULL,0);
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   300084E5           STR      R0,[R4, #+48]
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   01002DE9           PUSH     {R0}
   \   0000002C   01002DE9           PUSH     {R0}
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   982084E2           ADD      R2,R4,#+152
   \   0000003C   481084E2           ADD      R1,R4,#+72
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       unzlocal_GetCurrentFileInfoInternal
   1554          	s->current_file_ok = (err == UNZ_OK);
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   14D08DE2           ADD      SP,SP,#+20
   \   00000050   0110A003           MOVEQ    R1,#+1
   \   00000054   0010A013           MOVNE    R1,#+0
   \   00000058   381084E5           STR      R1,[R4, #+56]
   1555          	return err;
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
   1556          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "1.2.3">`:
   \   00000000   312E322E3300       DC8 "1.2.3"
   \   00000006   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     strcmpcasenosensitive_internal     4
     unzClose                           8
     unzCloseCurrentFile               20
     unzGetCurrentFileInfo             36
     unzGetFilePos                      0
     unzGetGlobalComment               20
     unzGetGlobalInfo                   0
     unzGetLocalExtrafield             16
     unzGetOffset                       0
     unzGoToFilePos                    28
     unzGoToFirstFile                  28
     unzGoToNextFile                   28
     unzLocateFile                    388
     unzOpen                            4
     unzOpen2                         224
     unzOpenCurrentFile                 8
     unzOpenCurrentFile2                8
     unzOpenCurrentFile3               60
     unzOpenCurrentFilePassword         8
     unzReadCurrentFile                36
     unzSetOffset                      28
     unzStringFileNameCompare           4
     unzeof                             0
     unzlocal_CheckCurrentFileCoherencyHeader
                                       44
     unzlocal_DosDateToTmuDate          0
     unzlocal_GetCurrentFileInfoInternal
                                      136
     unzlocal_SearchCentralDir         40
     unzlocal_getByte                  20
     unzlocal_getLong                  20
     unzlocal_getShort                 20
     unztell                            0
     update_keys                        0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     unz_copyright                    84
     update_keys                     112
     unzlocal_getByte                 92
     unzlocal_getShort               108
     unzlocal_getLong                124
     strcmpcasenosensitive_internal  116
     unzStringFileNameCompare         36
     unzlocal_SearchCentralDir       324
     unzOpen2                        508
     unzOpen                           8
     unzClose                         76
     unzGetGlobalInfo                 32
     unzlocal_DosDateToTmuDate        88
     unzlocal_GetCurrentFileInfoInternal
                                     976
     unzGetCurrentFileInfo            60
     unzGoToFirstFile                 96
     unzGoToNextFile                 192
     unzLocateFile                   272
     unzGetFilePos                    56
     unzGoToFilePos                  104
     unzlocal_CheckCurrentFileCoherencyHeader
                                     596
     unzOpenCurrentFile3             800
     unzOpenCurrentFile               28
     unzOpenCurrentFilePassword       28
     unzOpenCurrentFile2              20
     unzReadCurrentFile              776
     unztell                          28
     unzeof                           52
     unzGetLocalExtrafield           156
     unzCloseCurrentFile             144
     unzGetGlobalComment             164
     unzGetOffset                     84
     unzSetOffset                     96
     ?<Constant "1.2.3">               8
      Others                         164

 
 6 516 bytes in segment CODE
    92 bytes in segment DATA_C
 
 6 352 bytes of CODE  memory (+ 164 bytes shared)
    92 bytes of CONST memory

Errors: none
Warnings: none
