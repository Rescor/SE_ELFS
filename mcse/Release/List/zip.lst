##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:48:35 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ZLib\mini #
#                       zip\zip.c                                            #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\ZLib\mini #
#                       zip\zip.c -D LOG -D USEZLIB -lCN                     #
#                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\L #
#                       ist\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcse\ #
#                       Release\List\ -o Z:\home\perk11\www\perk11.info\svn\ #
#                       SE\mcse\Release\Obj\ -s9 --no_unroll                 #
#                       --no_code_motion --cpu_mode arm --endian little      #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config Z:\home\perk11\IAR2\arm\LIB #
#                       \dl5tpainl8n.h -I Z:\home\perk11\IAR2\arm\INC\       #
#                       --inline_threshold=2                                 #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\L #
#                       ist\zip.lst                                          #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\O #
#                       bj\zip.r79                                           #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\mcse\ZLib\minizip\zip.c
      1          /* zip.c -- IO on .zip files using zlib
      2             Version 1.01e, February 12th, 2005
      3          
      4             27 Dec 2004 Rolf Kalbermatter
      5             Modification to zipOpen2 to support globalComment retrieval.
      6          
      7             Copyright (C) 1998-2005 Gilles Vollant
      8          
      9             Read zip.h for more info
     10          */
     11          
     12          
     13          //#include <stdio.h>
     14          //#include <stdlib.h>
     15          //#include <string.h>
     16          //#include <time.h>
     17          #include "..\..\..\include\types.h"
     18          #include "zip.h"
     19          
     20          #ifdef STDC
     21          //#  include <stddef.h>
     22          //#  include <string.h>
     23          //#  include <stdlib.h>
     24          #endif
     25          //#ifdef NO_ERRNO_H
     26          	extern int errno;
     27          //#else
     28          //#   include <errno.h>
     29          //#endif
     30          
     31          
     32          #ifndef local
     33          #  define local static
     34          #endif
     35          /* compile with -Dlocal if your debugger can't find static symbols */
     36          
     37          #ifndef VERSIONMADEBY
     38          # define VERSIONMADEBY   (0x0) /* platform depedent */
     39          #endif
     40          
     41          #ifndef Z_BUFSIZE
     42          #define Z_BUFSIZE (16384)
     43          #endif
     44          
     45          #ifndef Z_MAXFILENAMEINZIP
     46          #define Z_MAXFILENAMEINZIP (256)
     47          #endif
     48          
     49          #ifndef ALLOC
     50          # define ALLOC(size) (malloc(size))
     51          #endif
     52          #ifndef TRYFREE
     53          # define TRYFREE(p) {if (p) mfree(p);}
     54          #endif
     55          
     56          /*
     57          #define SIZECENTRALDIRITEM (0x2e)
     58          #define SIZEZIPLOCALHEADER (0x1e)
     59          */
     60          
     61          /* I've found an old Unix (a SunOS 4.1.3_U1) without all SEEK_* defined.... */
     62          
     63          /*
     64          #ifndef SEEK_CUR
     65          #define SEEK_CUR	1
     66          #endif
     67          
     68          #ifndef SEEK_END
     69          #define SEEK_END	2
     70          #endif
     71          
     72          #ifndef SEEK_SET
     73          #define SEEK_SET	0
     74          #endif
     75          */
     76          
     77          #ifndef DEF_MEM_LEVEL
     78          #if MAX_MEM_LEVEL >= 8
     79          #  define DEF_MEM_LEVEL 8
     80          #else
     81          #  define DEF_MEM_LEVEL  MAX_MEM_LEVEL
     82          #endif
     83          #endif

   \                                 In segment DATA_C, align 4, align-sorted
     84          const char zip_copyright[] =
   \                     zip_copyright:
   \   00000000   207A69702031       DC8 20H, 7AH, 69H, 70H, 20H, 31H, 2EH, 30H
   \              2E30        
   \   00000008   3120436F7079       DC8 31H, 20H, 43H, 6FH, 70H, 79H, 72H, 69H
   \              7269        
   \   00000010   676874203139       DC8 67H, 68H, 74H, 20H, 31H, 39H, 39H, 38H
   \              3938        
   \   00000018   2D3230303420       DC8 2DH, 32H, 30H, 30H, 34H, 20H, 47H, 69H
   \              4769        
   \   00000020   6C6C65732056       DC8 6CH, 6CH, 65H, 73H, 20H, 56H, 6FH, 6CH
   \              6F6C        
   \   00000028   6C616E74202D       DC8 6CH, 61H, 6EH, 74H, 20H, 2DH, 20H, 68H
   \              2068        
   \   00000030   7474703A2F2F       DC8 74H, 74H, 70H, 3AH, 2FH, 2FH, 77H, 77H
   \              7777        
   \   00000038   772E77696E69       DC8 77H, 2EH, 77H, 69H, 6EH, 69H, 6DH, 61H
   \              6D61        
   \   00000040   67652E636F6D       DC8 67H, 65H, 2EH, 63H, 6FH, 6DH, 2FH, 7AH
   \              2F7A        
   \   00000048   4C6962446C6C       DC8 4CH, 69H, 62H, 44H, 6CH, 6CH, 0
   \              00          
   \   0000004F   00                 DC8 0
     85             " zip 1.01 Copyright 1998-2004 Gilles Vollant - http://www.winimage.com/zLibDll";
     86          
     87          
     88          #define SIZEDATA_INDATABLOCK (4096-(4*4))
     89          
     90          #define LOCALHEADERMAGIC	(0x04034b50)
     91          #define CENTRALHEADERMAGIC  (0x02014b50)
     92          #define ENDHEADERMAGIC	  (0x06054b50)
     93          
     94          #define FLAG_LOCALHEADER_OFFSET (0x06)
     95          #define CRC_LOCALHEADER_OFFSET  (0x0e)
     96          
     97          #define SIZECENTRALHEADER (0x2e) /* 46 */
     98          
     99          typedef struct linkedlist_datablock_internal_s
    100          {
    101            struct linkedlist_datablock_internal_s* next_datablock;
    102            uLong  avail_in_this_block;
    103            uLong  filled_in_this_block;
    104            uLong  unused; /* for future use and alignement */
    105            unsigned char data[SIZEDATA_INDATABLOCK];
    106          } linkedlist_datablock_internal;
    107          
    108          typedef struct linkedlist_data_s
    109          {
    110          	linkedlist_datablock_internal* first_block;
    111          	linkedlist_datablock_internal* last_block;
    112          } linkedlist_data;
    113          
    114          
    115          typedef struct
    116          {
    117          	z_stream stream;			/* zLib stream structure for inflate */
    118          	int  stream_initialised;	/* 1 is stream is initialised */
    119          	uInt pos_in_buffered_data;  /* last written byte in buffered_data */
    120          
    121          	uLong pos_local_header;	 /* offset of the local header of the file
    122          									 currenty writing */
    123          	char* central_header;	   /* central header data for the current file */
    124          	uLong size_centralheader;   /* size of the central header for cur file */
    125          	uLong flag;				 /* flag of the file currently writing */
    126          
    127          	int  method;				/* compression method of file currenty wr.*/
    128          	int  raw;				   /* 1 for directly writing raw data */
    129          	Byte buffered_data[Z_BUFSIZE];/* buffer contain compressed data to be writ*/
    130          	uLong dosDate;
    131          	uLong crc32;
    132          	int  encrypt;
    133          #ifndef NOCRYPT
    134          	unsigned long keys[3];	 /* keys defining the pseudo-random sequence */
    135          	const unsigned long* pcrc_32_tab;
    136          	int crypt_header_size;
    137          #endif
    138          } curfile_info;
    139          
    140          typedef struct
    141          {
    142          	zlib_filefunc_def z_filefunc;
    143          	voidpf filestream;		/* io structore of the zipfile */
    144          	linkedlist_data central_dir;/* datablock with central dir in construction*/
    145          	int  in_opened_file_inzip;  /* 1 if a file in the zip is currently writ.*/
    146          	curfile_info ci;			/* info on the file curretly writing */
    147          
    148          	uLong begin_pos;			/* position of the beginning of the zipfile */
    149          	uLong add_position_when_writting_offset;
    150          	uLong number_entry;
    151          #ifndef NO_ADDFILEINEXISTINGZIP
    152          	char *globalcomment;
    153          #endif
    154          } zip_internal;
    155          
    156          
    157          
    158          #ifndef NOCRYPT
    159          #define INCLUDECRYPTINGCODE_IFCRYPTALLOWED
    160          #include "crypt.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int update_keys(unsigned long *, unsigned long const *, int)
   \                     update_keys:
   \   00000000   003090E5           LDR      R3,[R0, #+0]
   \   00000004   00C090E5           LDR      R12,[R0, #+0]
   \   00000008   033022E0           EOR      R3,R2,R3
   \   0000000C   FF3003E2           AND      R3,R3,#0xFF
   \   00000010   033191E7           LDR      R3,[R1, +R3, LSL #+2]
   \   00000014   2C3423E0           EOR      R3,R3,R12, LSR #+8
   \   00000018   003080E5           STR      R3,[R0, #+0]
   \   0000001C   043090E5           LDR      R3,[R0, #+4]
   \   00000020   00C090E5           LDR      R12,[R0, #+0]
   \   00000024   FFC00CE2           AND      R12,R12,#0xFF
   \   00000028   03308CE0           ADD      R3,R12,R3
   \   0000002C   38C09FE5           LDR      R12,??update_keys_0  ;; 0x8088405
   \   00000030   043080E5           STR      R3,[R0, #+4]
   \   00000034   043090E5           LDR      R3,[R0, #+4]
   \   00000038   9C0303E0           MUL      R3,R12,R3
   \   0000003C   013083E2           ADD      R3,R3,#+1
   \   00000040   043080E5           STR      R3,[R0, #+4]
   \   00000044   083090E5           LDR      R3,[R0, #+8]
   \   00000048   04C090E5           LDR      R12,[R0, #+4]
   \   0000004C   2C3C23E0           EOR      R3,R3,R12, LSR #+24
   \   00000050   FF3003E2           AND      R3,R3,#0xFF
   \   00000054   031191E7           LDR      R1,[R1, +R3, LSL #+2]
   \   00000058   083090E5           LDR      R3,[R0, #+8]
   \   0000005C   231421E0           EOR      R1,R1,R3, LSR #+8
   \   00000060   081080E5           STR      R1,[R0, #+8]
   \   00000064   0200A0E1           MOV      R0,R2
   \   00000068   1EFF2FE1           BX       LR               ;; return
   \                     ??update_keys_0:
   \   0000006C   05840808           DC32     0x8088405

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __code __interwork __atpcs int crypthead()
   \                     crypthead:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   30709DE5           LDR      R7,[SP, #+48]
   \   0000000C   34809DE5           LDR      R8,[SP, #+52]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   0C0052E3           CMP      R2,#+12
   \   00000020   0000A0B3           MOVLT    R0,#+0
   \   00000024   FE8FBDB8           POPLT    {R1-R11,PC}
   \   00000028   BC019FE5           LDR      R0,??crypthead_0  ;; ??calls
   \   0000002C   001090E5           LDR      R1,[R0, #+0]
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   001080E5           STR      R1,[R0, #+0]
   \   00000038   010051E3           CMP      R1,#+1
   \   0000003C   0200001A           BNE      ??crypthead_1
   \   00000040   9E00A0E3           MOV      R0,#+158
   \   00000044   5B0C80E3           ORR      R0,R0,#0x5B00
   \   00000048   ........           _BLF     srand,??srand??rA
   \                     ??crypthead_1:
   \   0000004C   9C019FE5           LDR      R0,??crypthead_0+0x4  ;; 0x12345678
   \   00000050   0490A0E1           MOV      R9,R4
   \   00000054   000086E5           STR      R0,[R6, #+0]
   \   00000058   94019FE5           LDR      R0,??crypthead_0+0x8  ;; 0x23456789
   \   0000005C   040086E5           STR      R0,[R6, #+4]
   \   00000060   90019FE5           LDR      R0,??crypthead_0+0xC  ;; 0x34567890
   \   00000064   080086E5           STR      R0,[R6, #+8]
   \   00000068   0000D9E5           LDRB     R0,[R9, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0600000A           BEQ      ??crypthead_2
   \                     ??crypthead_3:
   \   00000074   ........           LDRB     R2,[R9], #+1
   \   00000078   0710A0E1           MOV      R1,R7
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   ........           BL       update_keys
   \   00000084   0000D9E5           LDRB     R0,[R9, #+0]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   F8FFFF1A           BNE      ??crypthead_3
   \                     ??crypthead_2:
   \   00000090   0090A0E3           MOV      R9,#+0
   \                     ??crypthead_4:
   \   00000094   ........           _BLF     rand,??rand??rA
   \   00000098   FF10A0E3           MOV      R1,#+255
   \   0000009C   C0A301E0           AND      R10,R1,R0, ASR #+7
   \   000000A0   080096E5           LDR      R0,[R6, #+8]
   \   000000A4   0210A0E3           MOV      R1,#+2
   \   000000A8   0008A0E1           LSL      R0,R0,#+16
   \   000000AC   20B881E1           ORR      R11,R1,R0, LSR #+16
   \   000000B0   0A20A0E1           MOV      R2,R10
   \   000000B4   0710A0E1           MOV      R1,R7
   \   000000B8   0600A0E1           MOV      R0,R6
   \   000000BC   ........           BL       update_keys
   \   000000C0   01102BE2           EOR      R1,R11,#0x1
   \   000000C4   910B02E0           MUL      R2,R1,R11
   \   000000C8   0D00A0E1           MOV      R0,SP
   \   000000CC   2214A0E1           LSR      R1,R2,#+8
   \   000000D0   01102AE0           EOR      R1,R10,R1
   \   000000D4   0010C9E7           STRB     R1,[R9, +R0]
   \   000000D8   019089E2           ADD      R9,R9,#+1
   \   000000DC   0A0059E3           CMP      R9,#+10
   \   000000E0   EBFFFFBA           BLT      ??crypthead_4
   \   000000E4   04019FE5           LDR      R0,??crypthead_0+0x4  ;; 0x12345678
   \   000000E8   000086E5           STR      R0,[R6, #+0]
   \   000000EC   00019FE5           LDR      R0,??crypthead_0+0x8  ;; 0x23456789
   \   000000F0   040086E5           STR      R0,[R6, #+4]
   \   000000F4   FC009FE5           LDR      R0,??crypthead_0+0xC  ;; 0x34567890
   \   000000F8   080086E5           STR      R0,[R6, #+8]
   \   000000FC   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   0600000A           BEQ      ??crypthead_5
   \                     ??crypthead_6:
   \   00000108   ........           LDRB     R2,[R4], #+1
   \   0000010C   0710A0E1           MOV      R1,R7
   \   00000110   0600A0E1           MOV      R0,R6
   \   00000114   ........           BL       update_keys
   \   00000118   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000011C   000050E3           CMP      R0,#+0
   \   00000120   F8FFFF1A           BNE      ??crypthead_6
   \                     ??crypthead_5:
   \   00000124   0040A0E3           MOV      R4,#+0
   \                     ??crypthead_7:
   \   00000128   080096E5           LDR      R0,[R6, #+8]
   \   0000012C   0210A0E3           MOV      R1,#+2
   \   00000130   0008A0E1           LSL      R0,R0,#+16
   \   00000134   209881E1           ORR      R9,R1,R0, LSR #+16
   \   00000138   0D00A0E1           MOV      R0,SP
   \   0000013C   00A0D4E7           LDRB     R10,[R4, +R0]
   \   00000140   0710A0E1           MOV      R1,R7
   \   00000144   0600A0E1           MOV      R0,R6
   \   00000148   0A20A0E1           MOV      R2,R10
   \   0000014C   ........           BL       update_keys
   \   00000150   010029E2           EOR      R0,R9,#0x1
   \   00000154   900901E0           MUL      R1,R0,R9
   \   00000158   2104A0E1           LSR      R0,R1,#+8
   \   0000015C   00002AE0           EOR      R0,R10,R0
   \   00000160   0500C4E7           STRB     R0,[R4, +R5]
   \   00000164   014084E2           ADD      R4,R4,#+1
   \   00000168   0A0054E3           CMP      R4,#+10
   \   0000016C   EDFFFFBA           BLT      ??crypthead_7
   \   00000170   080096E5           LDR      R0,[R6, #+8]
   \   00000174   FF90A0E3           MOV      R9,#+255
   \   00000178   FF9C89E3           ORR      R9,R9,#0xFF00
   \   0000017C   000009E0           AND      R0,R9,R0
   \   00000180   02A080E3           ORR      R10,R0,#0x2
   \   00000184   28B8A0E1           LSR      R11,R8,#+16
   \   00000188   FF200BE2           AND      R2,R11,#0xFF
   \   0000018C   0710A0E1           MOV      R1,R7
   \   00000190   0600A0E1           MOV      R0,R6
   \   00000194   ........           BL       update_keys
   \   00000198   01002AE2           EOR      R0,R10,#0x1
   \   0000019C   900A01E0           MUL      R1,R0,R10
   \   000001A0   288CA0E1           LSR      R8,R8,#+24
   \   000001A4   2104A0E1           LSR      R0,R1,#+8
   \   000001A8   00002BE0           EOR      R0,R11,R0
   \   000001AC   0500C4E7           STRB     R0,[R4, +R5]
   \   000001B0   080096E5           LDR      R0,[R6, #+8]
   \   000001B4   0820A0E1           MOV      R2,R8
   \   000001B8   000009E0           AND      R0,R9,R0
   \   000001BC   029080E3           ORR      R9,R0,#0x2
   \   000001C0   0710A0E1           MOV      R1,R7
   \   000001C4   0600A0E1           MOV      R0,R6
   \   000001C8   ........           BL       update_keys
   \   000001CC   010029E2           EOR      R0,R9,#0x1
   \   000001D0   900901E0           MUL      R1,R0,R9
   \   000001D4   014084E2           ADD      R4,R4,#+1
   \   000001D8   2104A0E1           LSR      R0,R1,#+8
   \   000001DC   000028E0           EOR      R0,R8,R0
   \   000001E0   0500C4E7           STRB     R0,[R4, +R5]
   \   000001E4   010084E2           ADD      R0,R4,#+1
   \   000001E8   FE8FBDE8           POP      {R1-R11,PC}      ;; return
   \                     ??crypthead_0:
   \   000001EC   ........           DC32     ??calls
   \   000001F0   78563412           DC32     0x12345678
   \   000001F4   89674523           DC32     0x23456789
   \   000001F8   90785634           DC32     0x34567890

   \                                 In segment DATA_Z, align 4, align-sorted
   \   unsigned int __data calls
   \                     ??calls:
   \   00000000                      DS8 4
    161          #endif
    162          
    163          local linkedlist_datablock_internal* allocate_new_datablock()
    164          {
    165          	linkedlist_datablock_internal* ldi;
    166          	ldi = (linkedlist_datablock_internal*)
    167          				 ALLOC(sizeof(linkedlist_datablock_internal));
    168          	if (ldi!=NULL)
    169          	{
    170          		ldi->next_datablock = NULL ;
    171          		ldi->filled_in_this_block = 0 ;
    172          		ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;
    173          	}
    174          	return ldi;
    175          }
    176          
    177          local void free_datablock(linkedlist_datablock_internal* ldi)
    178          {
    179          	while (ldi!=NULL)
    180          	{
    181          		linkedlist_datablock_internal* ldinext = ldi->next_datablock;
    182          		TRYFREE(ldi);
    183          		ldi = ldinext;
    184          	}
    185          }
    186          
    187          local void init_linkedlist(linkedlist_data* ll)
    188          {
    189          	ll->first_block = ll->last_block = NULL;
    190          }
    191          
    192          //local void free_linkedlist(ll)
    193          //	linkedlist_data* ll;
    194          //{
    195          //	free_datablock(ll->first_block);
    196          //	ll->first_block = ll->last_block = NULL;
    197          //}
    198          
    199          

   \                                 In segment CODE, align 4, keep-with-next
    200          local int add_data_in_datablock(
    201          	linkedlist_data* ll,
    202          	const void* buf,
    203          	uLong len)
    204          {
   \                     add_data_in_datablock:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0250A0E1           MOV      R5,R2
    205          	linkedlist_datablock_internal* ldi;
    206          	const unsigned char* from_copy;
    207          
    208          	if (ll==NULL)
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0100001A           BNE      ??add_data_in_datablock_0
    209          		return ZIP_INTERNALERROR;
   \                     ??add_data_in_datablock_1:
   \   00000018   6700E0E3           MVN      R0,#+103
   \   0000001C   F080BDE8           POP      {R4-R7,PC}
    210          
    211          	if (ll->last_block == NULL)
   \                     ??add_data_in_datablock_0:
   \   00000020   040094E5           LDR      R0,[R4, #+4]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0B00001A           BNE      ??add_data_in_datablock_2
    212          	{
    213          		ll->first_block = ll->last_block = allocate_new_datablock();
   \   0000002C   400DA0E3           MOV      R0,#+4096
   \   00000030   030100EF           SWI      +259
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0400000A           BEQ      ??add_data_in_datablock_3
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   001080E5           STR      R1,[R0, #+0]
   \   00000044   081080E5           STR      R1,[R0, #+8]
   \   00000048   FF1EA0E3           MOV      R1,#+4080
   \   0000004C   041080E5           STR      R1,[R0, #+4]
   \                     ??add_data_in_datablock_3:
   \   00000050   040084E5           STR      R0,[R4, #+4]
   \   00000054   000084E5           STR      R0,[R4, #+0]
    214          		if (ll->first_block == NULL)
   \   00000058   EEFFFF0A           BEQ      ??add_data_in_datablock_1
    215          			return ZIP_INTERNALERROR;
    216          	}
    217          
    218          	ldi = ll->last_block;
   \                     ??add_data_in_datablock_2:
   \   0000005C   047094E5           LDR      R7,[R4, #+4]
    219          	from_copy = (unsigned char*)buf;
   \   00000060   0C0000EA           B        ??add_data_in_datablock_4
    220          
    221          	while (len>0)
    222          	{
    223          		uInt copy_this;
    224          		uInt i;
    225          		unsigned char* to_copy;
    226          
    227          		if (ldi->avail_in_this_block==0)
    228          		{
    229          			ldi->next_datablock = allocate_new_datablock();
    230          			if (ldi->next_datablock == NULL)
    231          				return ZIP_INTERNALERROR;
    232          			ldi = ldi->next_datablock ;
    233          			ll->last_block = ldi;
    234          		}
    235          
    236          		if (ldi->avail_in_this_block < len)
    237          			copy_this = (uInt)ldi->avail_in_this_block;
    238          		else
    239          			copy_this = (uInt)len;
    240          
    241          		to_copy = &(ldi->data[ldi->filled_in_this_block]);
    242          
    243          		for (i=0;i<copy_this;i++)
    244          			*(to_copy+i)=*(from_copy+i);
   \                     ??add_data_in_datablock_5:
   \   00000064   0630D1E7           LDRB     R3,[R1, +R6]
   \   00000068   0030C1E7           STRB     R3,[R1, +R0]
   \   0000006C   011081E2           ADD      R1,R1,#+1
   \                     ??add_data_in_datablock_6:
   \   00000070   020051E1           CMP      R1,R2
   \   00000074   FAFFFF3A           BCC      ??add_data_in_datablock_5
    245          
    246          		ldi->filled_in_this_block += copy_this;
   \                     ??add_data_in_datablock_7:
   \   00000078   080097E5           LDR      R0,[R7, #+8]
    247          		ldi->avail_in_this_block -= copy_this;
    248          		from_copy += copy_this ;
   \   0000007C   066082E0           ADD      R6,R2,R6
   \   00000080   000082E0           ADD      R0,R2,R0
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \   00000088   040097E5           LDR      R0,[R7, #+4]
    249          		len -= copy_this;
   \   0000008C   025045E0           SUB      R5,R5,R2
   \   00000090   020040E0           SUB      R0,R0,R2
   \   00000094   040087E5           STR      R0,[R7, #+4]
   \                     ??add_data_in_datablock_4:
   \   00000098   000055E3           CMP      R5,#+0
   \   0000009C   1A00000A           BEQ      ??add_data_in_datablock_8
   \   000000A0   040097E5           LDR      R0,[R7, #+4]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0C00001A           BNE      ??add_data_in_datablock_9
   \   000000AC   400DA0E3           MOV      R0,#+4096
   \   000000B0   030100EF           SWI      +259
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0400000A           BEQ      ??add_data_in_datablock_10
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   001080E5           STR      R1,[R0, #+0]
   \   000000C4   081080E5           STR      R1,[R0, #+8]
   \   000000C8   FF1EA0E3           MOV      R1,#+4080
   \   000000CC   041080E5           STR      R1,[R0, #+4]
   \                     ??add_data_in_datablock_10:
   \   000000D0   000087E5           STR      R0,[R7, #+0]
   \   000000D4   CFFFFF0A           BEQ      ??add_data_in_datablock_1
   \   000000D8   0070A0E1           MOV      R7,R0
   \   000000DC   047084E5           STR      R7,[R4, #+4]
   \                     ??add_data_in_datablock_9:
   \   000000E0   040097E5           LDR      R0,[R7, #+4]
   \   000000E4   0010A0E3           MOV      R1,#+0
   \   000000E8   050050E1           CMP      R0,R5
   \   000000EC   0020A031           MOVCC    R2,R0
   \   000000F0   080097E5           LDR      R0,[R7, #+8]
   \   000000F4   0520A021           MOVCS    R2,R5
   \   000000F8   070080E0           ADD      R0,R0,R7
   \   000000FC   100080E2           ADD      R0,R0,#+16
   \   00000100   000052E3           CMP      R2,#+0
   \   00000104   D9FFFF1A           BNE      ??add_data_in_datablock_6
   \   00000108   DAFFFFEA           B        ??add_data_in_datablock_7
    250          	}
    251          	return ZIP_OK;
   \                     ??add_data_in_datablock_8:
   \   0000010C   0000A0E3           MOV      R0,#+0
   \   00000110   F080BDE8           POP      {R4-R7,PC}       ;; return
    252          }
    253          
    254          
    255          
    256          /****************************************************************************/
    257          
    258          #ifndef NO_ADDFILEINEXISTINGZIP
    259          /* ===========================================================================
    260             Inputs a long in LSB order to the given file
    261             nbByte == 1, 2 or 4 (byte, short or long)
    262          */
    263          
    264          local int ziplocal_putValue (const zlib_filefunc_def* pzlib_filefunc_def,
    265          								voidpf filestream, uLong x, int nbByte);

   \                                 In segment CODE, align 4, keep-with-next
    266          local int ziplocal_putValue (
    267          	const zlib_filefunc_def* pzlib_filefunc_def,
    268          	voidpf filestream,
    269          	uLong x,
    270          	int nbByte)
    271          {
   \                     ziplocal_putValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   00C0A0E1           MOV      R12,R0
   \   0000000C   0340A0E1           MOV      R4,R3
    272          	unsigned char buf[4];
    273          	int n;
    274          	for (n = 0; n < nbByte; n++)
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   010054E3           CMP      R4,#+1
   \   00000018   040000AA           BGE      ??ziplocal_putValue_0
   \   0000001C   050000EA           B        ??ziplocal_putValue_1
    275          	{
    276          		buf[n] = (unsigned char)(x & 0xff);
   \                     ??ziplocal_putValue_2:
   \   00000020   0D30A0E1           MOV      R3,SP
   \   00000024   0320C0E7           STRB     R2,[R0, +R3]
    277          		x >>= 8;
   \   00000028   2224A0E1           LSR      R2,R2,#+8
    278          	}
   \   0000002C   010080E2           ADD      R0,R0,#+1
   \                     ??ziplocal_putValue_0:
   \   00000030   040050E1           CMP      R0,R4
   \   00000034   F9FFFFBA           BLT      ??ziplocal_putValue_2
    279          	if (x != 0)
   \                     ??ziplocal_putValue_1:
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0900000A           BEQ      ??ziplocal_putValue_3
    280          	  {	 /* data overflow - hack for ZIP64 (X Roche) */
    281          	  for (n = 0; n < nbByte; n++)
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   010054E3           CMP      R4,#+1
   \   00000048   FF30A0E3           MOV      R3,#+255
   \   0000004C   030000AA           BGE      ??ziplocal_putValue_4
   \   00000050   040000EA           B        ??ziplocal_putValue_3
    282          		{
    283          		  buf[n] = 0xff;
   \                     ??ziplocal_putValue_5:
   \   00000054   0D20A0E1           MOV      R2,SP
   \   00000058   0230C0E7           STRB     R3,[R0, +R2]
    284          		}
   \   0000005C   010080E2           ADD      R0,R0,#+1
   \                     ??ziplocal_putValue_4:
   \   00000060   040050E1           CMP      R0,R4
   \   00000064   FAFFFFBA           BLT      ??ziplocal_putValue_5
    285          	  }
    286          
    287          	if (ZWRITE(*pzlib_filefunc_def,filestream,buf,nbByte)!=(uLong)nbByte)
   \                     ??ziplocal_putValue_3:
   \   00000068   1C009CE5           LDR      R0,[R12, #+28]
   \   0000006C   08C09CE5           LDR      R12,[R12, #+8]
   \   00000070   0430A0E1           MOV      R3,R4
   \   00000074   0D20A0E1           MOV      R2,SP
   \   00000078   3CFF2FE1           BLX      R12
   \   0000007C   040050E1           CMP      R0,R4
    288          		return ZIP_ERRNO;
   \   00000080   0000E013           MVNNE    R0,#+0
   \   00000084   1280BD18           POPNE    {R1,R4,PC}
    289          	else
    290          		return ZIP_OK;
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   1280BDE8           POP      {R1,R4,PC}       ;; return
    291          }
    292          
    293          local void ziplocal_putValue_inmemory (void* dest, uLong x, int nbByte);

   \                                 In segment CODE, align 4, keep-with-next
    294          local void ziplocal_putValue_inmemory (
    295          	void* dest,
    296          	uLong x,
    297          	int nbByte)
    298          {
    299          	unsigned char* buf=(unsigned char*)dest;
    300          	int n;
    301          	for (n = 0; n < nbByte; n++) {
   \                     ziplocal_putValue_inmemory:
   \   00000000   0030A0E3           MOV      R3,#+0
   \   00000004   010052E3           CMP      R2,#+1
   \   00000008   030000AA           BGE      ??ziplocal_putValue_inmemory_0
   \   0000000C   040000EA           B        ??ziplocal_putValue_inmemory_1
    302          		buf[n] = (unsigned char)(x & 0xff);
   \                     ??ziplocal_putValue_inmemory_2:
   \   00000010   0010C3E7           STRB     R1,[R3, +R0]
    303          		x >>= 8;
   \   00000014   2114A0E1           LSR      R1,R1,#+8
    304          	}
   \   00000018   013083E2           ADD      R3,R3,#+1
   \                     ??ziplocal_putValue_inmemory_0:
   \   0000001C   020053E1           CMP      R3,R2
   \   00000020   FAFFFFBA           BLT      ??ziplocal_putValue_inmemory_2
    305          
    306          	if (x != 0)
   \                     ??ziplocal_putValue_inmemory_1:
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   1EFF2F01           BXEQ     LR
    307          	{	 /* data overflow - hack for ZIP64 */
    308          	   for (n = 0; n < nbByte; n++)
   \   0000002C   0030A0E3           MOV      R3,#+0
   \   00000030   010052E3           CMP      R2,#+1
   \   00000034   FF10A0E3           MOV      R1,#+255
   \   00000038   020000AA           BGE      ??ziplocal_putValue_inmemory_3
   \   0000003C   1EFF2FE1           BX       LR
    309          	   {
    310          		  buf[n] = 0xff;
   \                     ??ziplocal_putValue_inmemory_4:
   \   00000040   0010C3E7           STRB     R1,[R3, +R0]
    311          	   }
   \   00000044   013083E2           ADD      R3,R3,#+1
   \                     ??ziplocal_putValue_inmemory_3:
   \   00000048   020053E1           CMP      R3,R2
   \   0000004C   FBFFFFBA           BLT      ??ziplocal_putValue_inmemory_4
    312          	}
    313          }
   \   00000050   1EFF2FE1           BX       LR               ;; return
    314          
    315          /****************************************************************************/
    316          
    317          
    318          local uLong ziplocal_TmzDateToDosDate(
    319          	const tm_zip* ptm,
    320          	uLong dosDate)
    321          {
    322          	uLong year = (uLong)ptm->tm_year;
    323          	if (year>1980)
    324          		year-=1980;
    325          	else if (year>80)
    326          		year-=80;
    327          	return
    328          	  (uLong) (((ptm->tm_mday) + (32 * (ptm->tm_mon+1)) + (512 * year)) << 16) |
    329          		((ptm->tm_sec/2) + (32* ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));
    330          }
    331          
    332          
    333          /****************************************************************************/
    334          
    335          local int ziplocal_getByte (
    336          	const zlib_filefunc_def* pzlib_filefunc_def,
    337          	voidpf filestream,
    338          	int *pi);
    339          

   \                                 In segment CODE, align 4, keep-with-next
    340          local int ziplocal_getByte(
    341          	const zlib_filefunc_def* pzlib_filefunc_def,
    342          	voidpf filestream,
    343          	int *pi)
    344          {
   \                     ziplocal_getByte:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
    345          	unsigned char c;
    346          	int err = (int)ZREAD(*pzlib_filefunc_def,filestream,&c,1);
   \   0000000C   1C0094E5           LDR      R0,[R4, #+28]
   \   00000010   04C094E5           LDR      R12,[R4, #+4]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0130A0E3           MOV      R3,#+1
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   3CFF2FE1           BLX      R12
    347          	if (err==1)
   \   00000028   010050E3           CMP      R0,#+1
   \   0000002C   0300001A           BNE      ??ziplocal_getByte_0
    348          	{
    349          		*pi = (int)c;
   \   00000030   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000034   000086E5           STR      R0,[R6, #+0]
    350          		return ZIP_OK;
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   7280BDE8           POP      {R1,R4-R6,PC}
    351          	}
    352          	else
    353          	{
    354          		if (ZERROR(*pzlib_filefunc_def,filestream))
   \                     ??ziplocal_getByte_0:
   \   00000040   1C0094E5           LDR      R0,[R4, #+28]
   \   00000044   182094E5           LDR      R2,[R4, #+24]
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   32FF2FE1           BLX      R2
   \   00000050   000050E3           CMP      R0,#+0
    355          			return ZIP_ERRNO;
   \   00000054   0000E013           MVNNE    R0,#+0
    356          		else
    357          			return ZIP_EOF;
   \   00000058   7280BDE8           POP      {R1,R4-R6,PC}    ;; return
    358          	}
    359          }
    360          
    361          
    362          /* ===========================================================================
    363             Reads a long in LSB order from the given gz_stream. Sets
    364          */
    365          local int ziplocal_getShort (
    366          	const zlib_filefunc_def* pzlib_filefunc_def,
    367          	voidpf filestream,
    368          	uLong *pX);
    369          

   \                                 In segment CODE, align 4, keep-with-next
    370          local int ziplocal_getShort (
    371          	const zlib_filefunc_def* pzlib_filefunc_def,
    372          	voidpf filestream,
    373          	uLong *pX)
    374          {
   \                     ziplocal_getShort:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    375          	uLong x ;
    376          	int i;
    377          	int err;
    378          
    379          	err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);
   \   00000014   0D20A0E1           MOV      R2,SP
   \   00000018   ........           BL       ziplocal_getByte
    380          	x = (uLong)i;
   \   0000001C   00709DE5           LDR      R7,[SP, #+0]
    381          
    382          	if (err==ZIP_OK)
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0300001A           BNE      ??ziplocal_getShort_0
    383          		err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       ziplocal_getByte
    384          	x += ((uLong)i)<<8;
    385          
    386          	if (err==ZIP_OK)
   \                     ??ziplocal_getShort_0:
   \   00000038   000050E3           CMP      R0,#+0
    387          		*pX = x;
   \   0000003C   00109D05           LDREQ    R1,[SP, #+0]
   \   00000040   01148700           ADDEQ    R1,R7,R1, LSL #+8
    388          	else
    389          		*pX = 0;
   \   00000044   0010A013           MOVNE    R1,#+0
   \   00000048   001086E5           STR      R1,[R6, #+0]
    390          	return err;
   \   0000004C   F280BDE8           POP      {R1,R4-R7,PC}    ;; return
    391          }
    392          
    393          local int ziplocal_getLong (
    394          	const zlib_filefunc_def* pzlib_filefunc_def,
    395          	voidpf filestream,
    396          	uLong *pX);
    397          

   \                                 In segment CODE, align 4, keep-with-next
    398          local int ziplocal_getLong (
    399          	const zlib_filefunc_def* pzlib_filefunc_def,
    400          	voidpf filestream,
    401          	uLong *pX)
    402          {
   \                     ziplocal_getLong:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0240A0E1           MOV      R4,R2
    403          	uLong x ;
    404          	int i;
    405          	int err;
    406          
    407          	err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);
   \   00000014   0D20A0E1           MOV      R2,SP
   \   00000018   ........           BL       ziplocal_getByte
    408          	x = (uLong)i;
   \   0000001C   00709DE5           LDR      R7,[SP, #+0]
    409          
    410          	if (err==ZIP_OK)
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0300001A           BNE      ??ziplocal_getLong_0
    411          		err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           BL       ziplocal_getByte
    412          	x += ((uLong)i)<<8;
   \                     ??ziplocal_getLong_0:
   \   00000038   00109DE5           LDR      R1,[SP, #+0]
    413          
    414          	if (err==ZIP_OK)
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   017487E0           ADD      R7,R7,R1, LSL #+8
   \   00000044   0300001A           BNE      ??ziplocal_getLong_1
    415          		err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);
   \   00000048   0D20A0E1           MOV      R2,SP
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   ........           BL       ziplocal_getByte
    416          	x += ((uLong)i)<<16;
   \                     ??ziplocal_getLong_1:
   \   00000058   00109DE5           LDR      R1,[SP, #+0]
    417          
    418          	if (err==ZIP_OK)
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   017887E0           ADD      R7,R7,R1, LSL #+16
   \   00000064   0300001A           BNE      ??ziplocal_getLong_2
    419          		err = ziplocal_getByte(pzlib_filefunc_def,filestream,&i);
   \   00000068   0D20A0E1           MOV      R2,SP
   \   0000006C   0610A0E1           MOV      R1,R6
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           BL       ziplocal_getByte
    420          	x += ((uLong)i)<<24;
    421          
    422          	if (err==ZIP_OK)
   \                     ??ziplocal_getLong_2:
   \   00000078   000050E3           CMP      R0,#+0
    423          		*pX = x;
   \   0000007C   00109D05           LDREQ    R1,[SP, #+0]
   \   00000080   011C8700           ADDEQ    R1,R7,R1, LSL #+24
    424          	else
    425          		*pX = 0;
   \   00000084   0010A013           MOVNE    R1,#+0
   \   00000088   001084E5           STR      R1,[R4, #+0]
    426          	return err;
   \   0000008C   F280BDE8           POP      {R1,R4-R7,PC}    ;; return
    427          }
    428          
    429          #ifndef BUFREADCOMMENT
    430          #define BUFREADCOMMENT (0x400)
    431          #endif
    432          /*
    433            Locate the Central directory of a zipfile (at the end, just before
    434          	the global comment)
    435          */
    436          local uLong ziplocal_SearchCentralDir (
    437          	const zlib_filefunc_def* pzlib_filefunc_def,
    438          	voidpf filestream);
    439          

   \                                 In segment CODE, align 4, keep-with-next
    440          local uLong ziplocal_SearchCentralDir(
    441          	const zlib_filefunc_def* pzlib_filefunc_def,
    442          	voidpf filestream)
    443          {
   \                     ziplocal_SearchCentralDir:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    444          	unsigned char* buf;
    445          	uLong uSizeFile;
    446          	uLong uBackRead;
    447          	uLong uMaxBack=0xffff; /* maximum size of global comment */
    448          	uLong uPosFound=0;
    449          
    450          	if (ZSEEK(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)
   \   00000008   1C0094E5           LDR      R0,[R4, #+28]
   \   0000000C   106094E5           LDR      R6,[R4, #+16]
   \   00000010   FF70A0E3           MOV      R7,#+255
   \   00000014   FF7C87E3           ORR      R7,R7,#0xFF00
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   0230A0E3           MOV      R3,#+2
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   36FF2FE1           BLX      R6
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   4200001A           BNE      ??ziplocal_SearchCentralDir_0
    451          		return 0;
    452          
    453          
    454          	uSizeFile = ZTELL(*pzlib_filefunc_def,filestream);
   \   00000030   1C0094E5           LDR      R0,[R4, #+28]
   \   00000034   00109DE5           LDR      R1,[SP, #+0]
   \   00000038   0C2094E5           LDR      R2,[R4, #+12]
   \   0000003C   32FF2FE1           BLX      R2
   \   00000040   0060A0E1           MOV      R6,R0
    455          
    456          	if (uMaxBack>uSizeFile)
   \   00000044   070056E1           CMP      R6,R7
    457          		uMaxBack = uSizeFile;
   \   00000048   0670A031           MOVCC    R7,R6
    458          
    459          	buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);
   \   0000004C   0400A0E3           MOV      R0,#+4
   \   00000050   400E80E3           ORR      R0,R0,#0x400
   \   00000054   030100EF           SWI      +259
   \   00000058   0080B0E1           MOVS     R8,R0
    460          	if (buf==NULL)
   \   0000005C   3600000A           BEQ      ??ziplocal_SearchCentralDir_0
    461          		return 0;
    462          
    463          	uBackRead = 4;
   \   00000060   0490A0E3           MOV      R9,#+4
    464          	while (uBackRead<uMaxBack)
   \                     ??ziplocal_SearchCentralDir_1:
   \   00000064   070059E1           CMP      R9,R7
   \   00000068   3100002A           BCS      ??ziplocal_SearchCentralDir_2
    465          	{
    466          		uLong uReadSize,uReadPos ;
    467          		int i;
    468          		if (uBackRead+BUFREADCOMMENT>uMaxBack)
   \   0000006C   400E89E2           ADD      R0,R9,#+1024
   \   00000070   000057E1           CMP      R7,R0
    469          			uBackRead = uMaxBack;
   \   00000074   0790A031           MOVCC    R9,R7
    470          		else
    471          			uBackRead+=BUFREADCOMMENT;
   \   00000078   409E8922           ADDCS    R9,R9,#+1024
    472          		uReadPos = uSizeFile-uBackRead ;
   \   0000007C   09A046E0           SUB      R10,R6,R9
    473          
    474          		uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
    475          					 (BUFREADCOMMENT+4) : (uSizeFile-uReadPos);
   \   00000080   0A0046E0           SUB      R0,R6,R10
    476          		if (ZSEEK(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)
   \   00000084   10C094E5           LDR      R12,[R4, #+16]
   \   00000088   0510A0E3           MOV      R1,#+5
   \   0000008C   401E81E3           ORR      R1,R1,#0x400
   \   00000090   010050E1           CMP      R0,R1
   \   00000094   1C0094E5           LDR      R0,[R4, #+28]
   \   00000098   01B0C123           BICCS    R11,R1,#0x1
   \   0000009C   00109DE5           LDR      R1,[SP, #+0]
   \   000000A0   0AB04630           SUBCC    R11,R6,R10
   \   000000A4   0030A0E3           MOV      R3,#+0
   \   000000A8   0A20A0E1           MOV      R2,R10
   \   000000AC   3CFF2FE1           BLX      R12
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   1E00001A           BNE      ??ziplocal_SearchCentralDir_2
    477          			break;
    478          
    479          		if (ZREAD(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)
   \   000000B8   1C0094E5           LDR      R0,[R4, #+28]
   \   000000BC   00109DE5           LDR      R1,[SP, #+0]
   \   000000C0   04C094E5           LDR      R12,[R4, #+4]
   \   000000C4   0B30A0E1           MOV      R3,R11
   \   000000C8   0820A0E1           MOV      R2,R8
   \   000000CC   3CFF2FE1           BLX      R12
   \   000000D0   0B0050E1           CMP      R0,R11
   \   000000D4   1600001A           BNE      ??ziplocal_SearchCentralDir_2
    480          			break;
    481          
    482          		for (i=(int)uReadSize-3; (i--)>0;)
   \   000000D8   03004BE2           SUB      R0,R11,#+3
   \                     ??ziplocal_SearchCentralDir_3:
   \   000000DC   0010A0E1           MOV      R1,R0
   \   000000E0   010041E2           SUB      R0,R1,#+1
   \   000000E4   010051E3           CMP      R1,#+1
   \   000000E8   0F0000BA           BLT      ??ziplocal_SearchCentralDir_4
    483          			if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
    484          				((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))
   \   000000EC   0810D0E7           LDRB     R1,[R0, +R8]
   \   000000F0   500051E3           CMP      R1,#+80
   \   000000F4   F8FFFF1A           BNE      ??ziplocal_SearchCentralDir_3
   \   000000F8   081080E0           ADD      R1,R0,R8
   \   000000FC   0110D1E5           LDRB     R1,[R1, #+1]
   \   00000100   4B0051E3           CMP      R1,#+75
   \   00000104   F4FFFF1A           BNE      ??ziplocal_SearchCentralDir_3
   \   00000108   081080E0           ADD      R1,R0,R8
   \   0000010C   0210D1E5           LDRB     R1,[R1, #+2]
   \   00000110   050051E3           CMP      R1,#+5
   \   00000114   F0FFFF1A           BNE      ??ziplocal_SearchCentralDir_3
   \   00000118   081080E0           ADD      R1,R0,R8
   \   0000011C   0310D1E5           LDRB     R1,[R1, #+3]
   \   00000120   060051E3           CMP      R1,#+6
   \   00000124   ECFFFF1A           BNE      ??ziplocal_SearchCentralDir_3
    485          			{
    486          				uPosFound = uReadPos+i;
   \   00000128   0A5080E0           ADD      R5,R0,R10
    487          				break;
    488          			}
    489          
    490          		if (uPosFound!=0)
   \                     ??ziplocal_SearchCentralDir_4:
   \   0000012C   000055E3           CMP      R5,#+0
   \   00000130   CBFFFF0A           BEQ      ??ziplocal_SearchCentralDir_1
    491          			break;
    492          	}
    493          	TRYFREE(buf);
   \                     ??ziplocal_SearchCentralDir_2:
   \   00000134   0800A0E1           MOV      R0,R8
   \   00000138   040100EF           SWI      +260
    494          	return uPosFound;
   \                     ??ziplocal_SearchCentralDir_0:
   \   0000013C   0500A0E1           MOV      R0,R5
   \   00000140   F28FBDE8           POP      {R1,R4-R11,PC}   ;; return
    495          }
    496          #endif /* !NO_ADDFILEINEXISTINGZIP*/
    497          
    498          /************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
    499          extern zipFile zipOpen2 (
    500          	const wchar_t *path,
    501                  const wchar_t *file,
    502          	int append,
    503          	zipcharpc* globalcomment,
    504          	zlib_filefunc_def* pzlib_filefunc_def)
    505          {
   \                     zipOpen2:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   D8D04DE2           SUB      SP,SP,#+216
   \   00000008   40DC4DE2           SUB      SP,SP,#+16384
   \   0000000C   400C8DE2           ADD      R0,SP,#+16384
   \   00000010   FC0090E5           LDR      R0,[R0, #+252]
   \   00000014   0160A0E1           MOV      R6,R1
   \   00000018   0270A0E1           MOV      R7,R2
   \   0000001C   0340A0E1           MOV      R4,R3
    506          	zip_internal ziinit;
    507          	zip_internal* zi;
    508          	int err=ZIP_OK;
   \   00000020   0050A0E3           MOV      R5,#+0
    509          
    510          
    511          	if (pzlib_filefunc_def==NULL)
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0200001A           BNE      ??zipOpen2_0
    512          		fill_fopen_filefunc(&ziinit.z_filefunc);
   \   0000002C   20008DE2           ADD      R0,SP,#+32
   \   00000030   ........           _BLF     fill_fopen_filefunc,??fill_fopen_filefunc??rA
   \   00000034   020000EA           B        ??zipOpen2_1
    513          	else
    514          		ziinit.z_filefunc = *pzlib_filefunc_def;
   \                     ??zipOpen2_0:
   \   00000038   0C5F90E8           LDM      R0,{R2,R3,R8-R12,LR}
   \   0000003C   20108DE2           ADD      R1,SP,#+32
   \   00000040   0C5F81E8           STM      R1,{R2,R3,R8-R12,LR}
    515          
    516          	ziinit.filestream = (*(ziinit.z_filefunc.zopen_file))
    517          				 (ziinit.z_filefunc.opaque,
    518                                            file,
    519          				  (append == APPEND_STATUS_CREATE) ?
    520          				  (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_CREATE) :
    521          					(ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_EXISTING));
   \                     ??zipOpen2_1:
   \   00000044   20309DE5           LDR      R3,[SP, #+32]
   \   00000048   24008DE2           ADD      R0,SP,#+36
   \   0000004C   180090E5           LDR      R0,[R0, #+24]
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B20A003           MOVEQ    R2,#+11
   \   00000058   0720A013           MOVNE    R2,#+7
   \   0000005C   0610A0E1           MOV      R1,R6
   \   00000060   33FF2FE1           BLX      R3
   \   00000064   24108DE2           ADD      R1,SP,#+36
   \   00000068   1C0081E5           STR      R0,[R1, #+28]
    522          
    523          	if (ziinit.filestream == NULL)
   \   0000006C   24008DE2           ADD      R0,SP,#+36
   \   00000070   1C0090E5           LDR      R0,[R0, #+28]
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0300001A           BNE      ??zipOpen2_2
    524          		return NULL;
   \                     ??zipOpen2_3:
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   D8D08DE2           ADD      SP,SP,#+216
   \   00000084   40DC8DE2           ADD      SP,SP,#+16384
   \   00000088   F08FBDE8           POP      {R4-R11,PC}
    525          	ziinit.begin_pos = ZTELL(ziinit.z_filefunc,ziinit.filestream);
   \                     ??zipOpen2_2:
   \   0000008C   24008DE2           ADD      R0,SP,#+36
   \   00000090   1C1090E5           LDR      R1,[R0, #+28]
   \   00000094   180090E5           LDR      R0,[R0, #+24]
   \   00000098   A880A0E3           MOV      R8,#+168
   \   0000009C   408C88E3           ORR      R8,R8,#0x4000
   \   000000A0   24208DE2           ADD      R2,SP,#+36
   \   000000A4   082092E5           LDR      R2,[R2, #+8]
   \   000000A8   32FF2FE1           BLX      R2
   \   000000AC   20108DE2           ADD      R1,SP,#+32
   \   000000B0   010088E7           STR      R0,[R8, +R1]
    526          	ziinit.in_opened_file_inzip = 0;
   \   000000B4   0000A0E3           MOV      R0,#+0
   \   000000B8   24108DE2           ADD      R1,SP,#+36
   \   000000BC   280081E5           STR      R0,[R1, #+40]
    527          	ziinit.ci.stream_initialised = 0;
   \   000000C0   640081E5           STR      R0,[R1, #+100]
    528          	ziinit.number_entry = 0;
   \   000000C4   20108DE2           ADD      R1,SP,#+32
   \   000000C8   011088E0           ADD      R1,R8,R1
   \   000000CC   080081E5           STR      R0,[R1, #+8]
    529          	ziinit.add_position_when_writting_offset = 0;
   \   000000D0   20108DE2           ADD      R1,SP,#+32
   \   000000D4   011088E0           ADD      R1,R8,R1
   \   000000D8   040081E5           STR      R0,[R1, #+4]
    530          	init_linkedlist(&(ziinit.central_dir));
   \   000000DC   24108DE2           ADD      R1,SP,#+36
   \   000000E0   240081E5           STR      R0,[R1, #+36]
   \   000000E4   200081E5           STR      R0,[R1, #+32]
    531          
    532          
    533          	zi = (zip_internal*)ALLOC(sizeof(zip_internal));
   \   000000E8   100088E3           ORR      R0,R8,#0x10
   \   000000EC   030100EF           SWI      +259
   \   000000F0   0060B0E1           MOVS     R6,R0
    534          	if (zi==NULL)
   \   000000F4   0600001A           BNE      ??zipOpen2_4
    535          	{
    536          		ZCLOSE(ziinit.z_filefunc,ziinit.filestream);
   \                     ??zipOpen2_5:
   \   000000F8   24008DE2           ADD      R0,SP,#+36
   \   000000FC   1C1090E5           LDR      R1,[R0, #+28]
   \   00000100   180090E5           LDR      R0,[R0, #+24]
   \   00000104   24208DE2           ADD      R2,SP,#+36
   \   00000108   102092E5           LDR      R2,[R2, #+16]
   \   0000010C   32FF2FE1           BLX      R2
    537          		return NULL;
   \   00000110   D9FFFFEA           B        ??zipOpen2_3
    538          	}
    539          
    540          	/* now we add file in a zipfile */
    541          #	ifndef NO_ADDFILEINEXISTINGZIP
    542          	ziinit.globalcomment = NULL;
   \                     ??zipOpen2_4:
   \   00000114   20108DE2           ADD      R1,SP,#+32
   \   00000118   010088E0           ADD      R0,R8,R1
   \   0000011C   0010A0E3           MOV      R1,#+0
   \   00000120   0C1080E5           STR      R1,[R0, #+12]
    543          	if (append == APPEND_STATUS_ADDINZIP)
   \   00000124   020057E3           CMP      R7,#+2
   \   00000128   BE00001A           BNE      ??zipOpen2_6
    544          	{
    545          		uLong byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
    546          
    547          		uLong size_central_dir;	 /* size of the central directory  */
    548          		uLong offset_central_dir;   /* offset of start of central directory */
    549          		uLong central_pos,uL;
    550          
    551          		uLong number_disk;		  /* number of the current dist, used for
    552          									spaning ZIP, unsupported, always 0*/
    553          		uLong number_disk_with_CD;  /* number the the disk with central dir, used
    554          									for spaning ZIP, unsupported, always 0*/
    555          		uLong number_entry;
    556          		uLong number_entry_CD;	  /* total number of entries in
    557          									the central dir
    558          									(same than number_entry on nospan) */
    559          		uLong size_comment;
    560          
    561          		central_pos = ziplocal_SearchCentralDir(&ziinit.z_filefunc,ziinit.filestream);
   \   0000012C   24008DE2           ADD      R0,SP,#+36
   \   00000130   1C1090E5           LDR      R1,[R0, #+28]
   \   00000134   20008DE2           ADD      R0,SP,#+32
   \   00000138   ........           BL       ziplocal_SearchCentralDir
   \   0000013C   0070B0E1           MOVS     R7,R0
    562          		if (central_pos==0)
    563          			err=ZIP_ERRNO;
    564          
    565          		if (ZSEEK(ziinit.z_filefunc, ziinit.filestream,
    566          										central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)
   \   00000140   24008DE2           ADD      R0,SP,#+36
   \   00000144   1C1090E5           LDR      R1,[R0, #+28]
   \   00000148   180090E5           LDR      R0,[R0, #+24]
   \   0000014C   0550E001           MVNEQ    R5,R5
   \   00000150   0030A0E3           MOV      R3,#+0
   \   00000154   0720A0E1           MOV      R2,R7
   \   00000158   24808DE2           ADD      R8,SP,#+36
   \   0000015C   0C8098E5           LDR      R8,[R8, #+12]
   \   00000160   38FF2FE1           BLX      R8
   \   00000164   000050E3           CMP      R0,#+0
    567          			err=ZIP_ERRNO;
   \   00000168   0050E013           MVNNE    R5,#+0
    568          
    569          		/* the signature, already checked */
    570          		if (ziplocal_getLong(&ziinit.z_filefunc, ziinit.filestream,&uL)!=ZIP_OK)
   \   0000016C   1C208DE2           ADD      R2,SP,#+28
   \   00000170   24008DE2           ADD      R0,SP,#+36
   \   00000174   1C1090E5           LDR      R1,[R0, #+28]
   \   00000178   20008DE2           ADD      R0,SP,#+32
   \   0000017C   ........           BL       ziplocal_getLong
   \   00000180   000050E3           CMP      R0,#+0
    571          			err=ZIP_ERRNO;
   \   00000184   0050E013           MVNNE    R5,#+0
    572          
    573          		/* number of this disk */
    574          		if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&number_disk)!=ZIP_OK)
   \   00000188   10208DE2           ADD      R2,SP,#+16
   \   0000018C   24008DE2           ADD      R0,SP,#+36
   \   00000190   1C1090E5           LDR      R1,[R0, #+28]
   \   00000194   20008DE2           ADD      R0,SP,#+32
   \   00000198   ........           BL       ziplocal_getShort
   \   0000019C   000050E3           CMP      R0,#+0
    575          			err=ZIP_ERRNO;
   \   000001A0   0050E013           MVNNE    R5,#+0
    576          
    577          		/* number of the disk with the start of the central directory */
    578          		if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&number_disk_with_CD)!=ZIP_OK)
   \   000001A4   14208DE2           ADD      R2,SP,#+20
   \   000001A8   24008DE2           ADD      R0,SP,#+36
   \   000001AC   1C1090E5           LDR      R1,[R0, #+28]
   \   000001B0   20008DE2           ADD      R0,SP,#+32
   \   000001B4   ........           BL       ziplocal_getShort
   \   000001B8   000050E3           CMP      R0,#+0
    579          			err=ZIP_ERRNO;
   \   000001BC   0050E013           MVNNE    R5,#+0
    580          
    581          		/* total number of entries in the central dir on this disk */
    582          		if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&number_entry)!=ZIP_OK)
   \   000001C0   18208DE2           ADD      R2,SP,#+24
   \   000001C4   24008DE2           ADD      R0,SP,#+36
   \   000001C8   1C1090E5           LDR      R1,[R0, #+28]
   \   000001CC   20008DE2           ADD      R0,SP,#+32
   \   000001D0   ........           BL       ziplocal_getShort
   \   000001D4   000050E3           CMP      R0,#+0
    583          			err=ZIP_ERRNO;
   \   000001D8   0050E013           MVNNE    R5,#+0
    584          
    585          		/* total number of entries in the central dir */
    586          		if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&number_entry_CD)!=ZIP_OK)
   \   000001DC   0C208DE2           ADD      R2,SP,#+12
   \   000001E0   24008DE2           ADD      R0,SP,#+36
   \   000001E4   1C1090E5           LDR      R1,[R0, #+28]
   \   000001E8   20008DE2           ADD      R0,SP,#+32
   \   000001EC   ........           BL       ziplocal_getShort
    587          			err=ZIP_ERRNO;
    588          
    589          		if ((number_entry_CD!=number_entry) ||
    590          			(number_disk_with_CD!=0) ||
    591          			(number_disk!=0))
   \   000001F0   18109DE5           LDR      R1,[SP, #+24]
   \   000001F4   000050E3           CMP      R0,#+0
   \   000001F8   0C009DE5           LDR      R0,[SP, #+12]
   \   000001FC   0050E013           MVNNE    R5,#+0
   \   00000200   010050E1           CMP      R0,R1
   \   00000204   14009D05           LDREQ    R0,[SP, #+20]
    592          			err=ZIP_BADZIPFILE;
    593          
    594          		/* size of the central directory */
    595          		if (ziplocal_getLong(&ziinit.z_filefunc, ziinit.filestream,&size_central_dir)!=ZIP_OK)
   \   00000208   08208DE2           ADD      R2,SP,#+8
   \   0000020C   00005003           CMPEQ    R0,#+0
   \   00000210   10009D05           LDREQ    R0,[SP, #+16]
   \   00000214   00005003           CMPEQ    R0,#+0
   \   00000218   6650E013           MVNNE    R5,#+102
   \   0000021C   24008DE2           ADD      R0,SP,#+36
   \   00000220   1C1090E5           LDR      R1,[R0, #+28]
   \   00000224   20008DE2           ADD      R0,SP,#+32
   \   00000228   ........           BL       ziplocal_getLong
   \   0000022C   000050E3           CMP      R0,#+0
    596          			err=ZIP_ERRNO;
   \   00000230   0050E013           MVNNE    R5,#+0
    597          
    598          		/* offset of start of central directory with respect to the
    599          			starting disk number */
    600          		if (ziplocal_getLong(&ziinit.z_filefunc, ziinit.filestream,&offset_central_dir)!=ZIP_OK)
   \   00000234   04208DE2           ADD      R2,SP,#+4
   \   00000238   24008DE2           ADD      R0,SP,#+36
   \   0000023C   1C1090E5           LDR      R1,[R0, #+28]
   \   00000240   20008DE2           ADD      R0,SP,#+32
   \   00000244   ........           BL       ziplocal_getLong
   \   00000248   000050E3           CMP      R0,#+0
    601          			err=ZIP_ERRNO;
   \   0000024C   0050E013           MVNNE    R5,#+0
    602          
    603          		/* zipfile global comment length */
    604          		if (ziplocal_getShort(&ziinit.z_filefunc, ziinit.filestream,&size_comment)!=ZIP_OK)
   \   00000250   0D20A0E1           MOV      R2,SP
   \   00000254   24008DE2           ADD      R0,SP,#+36
   \   00000258   1C1090E5           LDR      R1,[R0, #+28]
   \   0000025C   20008DE2           ADD      R0,SP,#+32
   \   00000260   ........           BL       ziplocal_getShort
    605          			err=ZIP_ERRNO;
    606          
    607          		if ((central_pos<offset_central_dir+size_central_dir) &&
    608          			(err==ZIP_OK))
   \   00000264   08109DE5           LDR      R1,[SP, #+8]
   \   00000268   000050E3           CMP      R0,#+0
   \   0000026C   04009DE5           LDR      R0,[SP, #+4]
   \   00000270   0050E013           MVNNE    R5,#+0
   \   00000274   000081E0           ADD      R0,R1,R0
   \   00000278   000057E1           CMP      R7,R0
   \   0000027C   0100002A           BCS      ??zipOpen2_7
   \   00000280   000055E3           CMP      R5,#+0
   \   00000284   9BFFFF0A           BEQ      ??zipOpen2_5
    609          			err=ZIP_BADZIPFILE;
    610          
    611          		if (err!=ZIP_OK)
   \                     ??zipOpen2_7:
   \   00000288   000055E3           CMP      R5,#+0
   \   0000028C   99FFFF1A           BNE      ??zipOpen2_5
    612          		{
    613          			ZCLOSE(ziinit.z_filefunc, ziinit.filestream);
    614          			return NULL;
    615          		}
    616          
    617          		if (size_comment>0)
   \   00000290   00009DE5           LDR      R0,[SP, #+0]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   1A00000A           BEQ      ??zipOpen2_8
    618          		{
    619          			ziinit.globalcomment = ALLOC(size_comment+1);
   \   0000029C   A880A0E3           MOV      R8,#+168
   \   000002A0   408C88E3           ORR      R8,R8,#0x4000
   \   000002A4   010080E2           ADD      R0,R0,#+1
   \   000002A8   030100EF           SWI      +259
   \   000002AC   20108DE2           ADD      R1,SP,#+32
   \   000002B0   011088E0           ADD      R1,R8,R1
   \   000002B4   0C0081E5           STR      R0,[R1, #+12]
    620          			if (ziinit.globalcomment)
   \   000002B8   20008DE2           ADD      R0,SP,#+32
   \   000002BC   000088E0           ADD      R0,R8,R0
   \   000002C0   0C0090E5           LDR      R0,[R0, #+12]
   \   000002C4   000050E3           CMP      R0,#+0
   \   000002C8   0E00000A           BEQ      ??zipOpen2_8
    621          			{
    622          			   size_comment = ZREAD(ziinit.z_filefunc, ziinit.filestream,ziinit.globalcomment,size_comment);
   \   000002CC   00309DE5           LDR      R3,[SP, #+0]
   \   000002D0   24909DE5           LDR      R9,[SP, #+36]
   \   000002D4   20008DE2           ADD      R0,SP,#+32
   \   000002D8   000088E0           ADD      R0,R8,R0
   \   000002DC   0C2090E5           LDR      R2,[R0, #+12]
   \   000002E0   24008DE2           ADD      R0,SP,#+36
   \   000002E4   1C1090E5           LDR      R1,[R0, #+28]
   \   000002E8   180090E5           LDR      R0,[R0, #+24]
   \   000002EC   39FF2FE1           BLX      R9
   \   000002F0   00008DE5           STR      R0,[SP, #+0]
    623          			   ziinit.globalcomment[size_comment]=0;
   \   000002F4   20108DE2           ADD      R1,SP,#+32
   \   000002F8   011088E0           ADD      R1,R8,R1
   \   000002FC   0C1091E5           LDR      R1,[R1, #+12]
   \   00000300   0020A0E3           MOV      R2,#+0
   \   00000304   0120C0E7           STRB     R2,[R0, +R1]
    624          			}
    625          		}
    626          
    627          		byte_before_the_zipfile = central_pos -
    628          								(offset_central_dir+size_central_dir);
   \                     ??zipOpen2_8:
   \   00000308   04009DE5           LDR      R0,[SP, #+4]
   \   0000030C   08109DE5           LDR      R1,[SP, #+8]
   \   00000310   000047E0           SUB      R0,R7,R0
   \   00000314   017040E0           SUB      R7,R0,R1
    629          		ziinit.add_position_when_writting_offset = byte_before_the_zipfile;
   \   00000318   A800A0E3           MOV      R0,#+168
   \   0000031C   400C80E3           ORR      R0,R0,#0x4000
   \   00000320   20108DE2           ADD      R1,SP,#+32
   \   00000324   010080E0           ADD      R0,R0,R1
   \   00000328   047080E5           STR      R7,[R0, #+4]
    630          
    631          		{
    632          			uLong size_central_dir_to_read = size_central_dir;
   \   0000032C   08809DE5           LDR      R8,[SP, #+8]
    633          			size_t buf_size = SIZEDATA_INDATABLOCK;
    634          			void* buf_read = (void*)ALLOC(buf_size);
   \   00000330   FF0EA0E3           MOV      R0,#+4080
   \   00000334   030100EF           SWI      +259
   \   00000338   0090A0E1           MOV      R9,R0
    635          			if (ZSEEK(ziinit.z_filefunc, ziinit.filestream,
    636          				  offset_central_dir + byte_before_the_zipfile,
    637          				  ZLIB_FILEFUNC_SEEK_SET) != 0)
   \   0000033C   04009DE5           LDR      R0,[SP, #+4]
   \   00000340   0030A0E3           MOV      R3,#+0
   \   00000344   002087E0           ADD      R2,R7,R0
   \   00000348   24008DE2           ADD      R0,SP,#+36
   \   0000034C   1C1090E5           LDR      R1,[R0, #+28]
   \   00000350   180090E5           LDR      R0,[R0, #+24]
   \   00000354   24A08DE2           ADD      R10,SP,#+36
   \   00000358   0CA09AE5           LDR      R10,[R10, #+12]
   \   0000035C   3AFF2FE1           BLX      R10
   \   00000360   000050E3           CMP      R0,#+0
   \   00000364   0700000A           BEQ      ??zipOpen2_9
    638          				  err=ZIP_ERRNO;
   \   00000368   0050E0E3           MVN      R5,#+0
   \   0000036C   050000EA           B        ??zipOpen2_9
    639          
    640          			while ((size_central_dir_to_read>0) && (err==ZIP_OK))
    641          			{
    642          				uLong read_this = SIZEDATA_INDATABLOCK;
    643          				if (read_this > size_central_dir_to_read)
    644          					read_this = size_central_dir_to_read;
    645          				if (ZREAD(ziinit.z_filefunc, ziinit.filestream,buf_read,read_this) != read_this)
    646          					err=ZIP_ERRNO;
    647          
    648          				if (err==ZIP_OK)
    649          					err = add_data_in_datablock(&ziinit.central_dir,buf_read,
    650          												(uLong)read_this);
   \                     ??zipOpen2_10:
   \   00000370   0A20A0E1           MOV      R2,R10
   \   00000374   0910A0E1           MOV      R1,R9
   \   00000378   44008DE2           ADD      R0,SP,#+68
   \   0000037C   ........           BL       add_data_in_datablock
   \   00000380   0050A0E1           MOV      R5,R0
    651          				size_central_dir_to_read-=read_this;
   \                     ??zipOpen2_11:
   \   00000384   0A8048E0           SUB      R8,R8,R10
   \                     ??zipOpen2_9:
   \   00000388   000058E3           CMP      R8,#+0
   \   0000038C   0F00000A           BEQ      ??zipOpen2_12
   \   00000390   000055E3           CMP      R5,#+0
   \   00000394   0D00001A           BNE      ??zipOpen2_12
   \   00000398   24509DE5           LDR      R5,[SP, #+36]
   \   0000039C   24008DE2           ADD      R0,SP,#+36
   \   000003A0   1C1090E5           LDR      R1,[R0, #+28]
   \   000003A4   180090E5           LDR      R0,[R0, #+24]
   \   000003A8   FFAEA0E3           MOV      R10,#+4080
   \   000003AC   FF0E58E3           CMP      R8,#+4080
   \   000003B0   08A0A031           MOVCC    R10,R8
   \   000003B4   0A30A0E1           MOV      R3,R10
   \   000003B8   0920A0E1           MOV      R2,R9
   \   000003BC   35FF2FE1           BLX      R5
   \   000003C0   0A0050E1           CMP      R0,R10
   \   000003C4   E9FFFF0A           BEQ      ??zipOpen2_10
   \   000003C8   0050E0E3           MVN      R5,#+0
   \   000003CC   ECFFFFEA           B        ??zipOpen2_11
    652          			}
    653          			TRYFREE(buf_read);
   \                     ??zipOpen2_12:
   \   000003D0   000059E3           CMP      R9,#+0
   \   000003D4   0100000A           BEQ      ??zipOpen2_13
   \   000003D8   0900A0E1           MOV      R0,R9
   \   000003DC   040100EF           SWI      +260
    654          		}
    655          		ziinit.begin_pos = byte_before_the_zipfile;
   \                     ??zipOpen2_13:
   \   000003E0   A880A0E3           MOV      R8,#+168
   \   000003E4   408C88E3           ORR      R8,R8,#0x4000
   \   000003E8   20008DE2           ADD      R0,SP,#+32
   \   000003EC   007088E7           STR      R7,[R8, +R0]
    656          		ziinit.number_entry = number_entry_CD;
   \   000003F0   0C109DE5           LDR      R1,[SP, #+12]
   \   000003F4   000088E0           ADD      R0,R8,R0
   \   000003F8   081080E5           STR      R1,[R0, #+8]
    657          
    658          		if (ZSEEK(ziinit.z_filefunc, ziinit.filestream,
    659          				  offset_central_dir+byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET)!=0)
   \   000003FC   04009DE5           LDR      R0,[SP, #+4]
   \   00000400   0030A0E3           MOV      R3,#+0
   \   00000404   002087E0           ADD      R2,R7,R0
   \   00000408   24008DE2           ADD      R0,SP,#+36
   \   0000040C   1C1090E5           LDR      R1,[R0, #+28]
   \   00000410   180090E5           LDR      R0,[R0, #+24]
   \   00000414   24708DE2           ADD      R7,SP,#+36
   \   00000418   0C7097E5           LDR      R7,[R7, #+12]
   \   0000041C   37FF2FE1           BLX      R7
   \   00000420   000050E3           CMP      R0,#+0
    660          			err=ZIP_ERRNO;
   \   00000424   0050E013           MVNNE    R5,#+0
    661          	}
    662          
    663          	if (globalcomment)
   \                     ??zipOpen2_6:
   \   00000428   000054E3           CMP      R4,#+0
   \   0000042C   0300000A           BEQ      ??zipOpen2_14
    664          	{
    665          	  *globalcomment = ziinit.globalcomment;
   \   00000430   20108DE2           ADD      R1,SP,#+32
   \   00000434   010088E0           ADD      R0,R8,R1
   \   00000438   0C0090E5           LDR      R0,[R0, #+12]
   \   0000043C   000084E5           STR      R0,[R4, #+0]
    666          	}
    667          #	endif /* !NO_ADDFILEINEXISTINGZIP*/
    668          
    669          	if (err != ZIP_OK)
   \                     ??zipOpen2_14:
   \   00000440   000055E3           CMP      R5,#+0
   \   00000444   0A00000A           BEQ      ??zipOpen2_15
    670          	{
    671          #	ifndef NO_ADDFILEINEXISTINGZIP
    672          		TRYFREE(ziinit.globalcomment);
   \   00000448   20108DE2           ADD      R1,SP,#+32
   \   0000044C   010088E0           ADD      R0,R8,R1
   \   00000450   0C0090E5           LDR      R0,[R0, #+12]
   \   00000454   000050E3           CMP      R0,#+0
   \   00000458   0200000A           BEQ      ??zipOpen2_16
   \   0000045C   010088E0           ADD      R0,R8,R1
   \   00000460   0C0090E5           LDR      R0,[R0, #+12]
   \   00000464   040100EF           SWI      +260
    673          #	endif /* !NO_ADDFILEINEXISTINGZIP*/
    674          		TRYFREE(zi);
   \                     ??zipOpen2_16:
   \   00000468   0600A0E1           MOV      R0,R6
   \   0000046C   040100EF           SWI      +260
   \   00000470   01FFFFEA           B        ??zipOpen2_3
    675          		return NULL;
    676          	}
    677          	else
    678          	{
    679          		*zi = ziinit;
   \                     ??zipOpen2_15:
   \   00000474   20008DE2           ADD      R0,SP,#+32
   \   00000478   102088E3           ORR      R2,R8,#0x10
   \                     ??zipOpen2_17:
   \   0000047C   042052E2           SUBS     R2,R2,#+4
   \   00000480   021090E7           LDR      R1,[R0, R2]
   \   00000484   021086E7           STR      R1,[R6, R2]
   \   00000488   FBFFFF1A           BNE      ??zipOpen2_17
    680          		return (zipFile)zi;
   \   0000048C   0600A0E1           MOV      R0,R6
   \   00000490   D8D08DE2           ADD      SP,SP,#+216
   \   00000494   40DC8DE2           ADD      SP,SP,#+16384
   \   00000498   F08FBDE8           POP      {R4-R11,PC}      ;; return
    681          	}
    682          }
    683          

   \                                 In segment CODE, align 4, keep-with-next
    684          extern zipFile zipOpen (
    685          	const wchar_t *path,
    686                  const wchar_t *name,
    687          	int append)
    688          {
   \                     zipOpen:
   \   00000000   00402DE9           PUSH     {LR}
    689          	return zipOpen2(path,name,append,NULL,NULL);
   \   00000004   0030A0E3           MOV      R3,#+0
   \   00000008   08002DE9           PUSH     {R3}
   \   0000000C   ........           BL       zipOpen2
   \   00000010   0280BDE8           POP      {R1,PC}          ;; return
    690          }
    691          

   \                                 In segment CODE, align 4, keep-with-next
    692          extern int zipOpenNewFileInZip3 (
    693          	zipFile file,
    694          	const char* filename,
    695          	const zip_fileinfo* zipfi,
    696          	const void* extrafield_local,
    697          	uInt size_extrafield_local,
    698          	const void* extrafield_global,
    699          	uInt size_extrafield_global,
    700          	const char* comment,
    701          	int method,
    702          	int level,
    703          	int raw,
    704          	int windowBits,
    705          	int memLevel,
    706          	int strategy,
    707          	const char* password,
    708          	uLong crcForCrypting)
    709          {
   \                     zipOpenNewFileInZip3:
   \   00000000   FA4F2DE9           PUSH     {R1,R3-R11,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   40609DE5           LDR      R6,[SP, #+64]
   \   0000000C   54709DE5           LDR      R7,[SP, #+84]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0250A0E1           MOV      R5,R2
    710          	zip_internal* zi;
    711          	uInt size_filename;
    712          	uInt size_comment;
    713          	uInt i;
    714          	int err = ZIP_OK;
    715          
    716          #	ifdef NOCRYPT
    717          	if (password != NULL)
    718          		return ZIP_PARAMERROR;
    719          #	endif
    720          
    721          	if (file == NULL)
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0200001A           BNE      ??zipOpenNewFileInZip3_0
    722          		return ZIP_PARAMERROR;
   \                     ??zipOpenNewFileInZip3_1:
   \   00000020   6500E0E3           MVN      R0,#+101
   \                     ??zipOpenNewFileInZip3_2:
   \   00000024   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000028   F08FBDE8           POP      {R4-R11,PC}      ;; return
    723          	if ((method!=0) && (method!=Z_DEFLATED))
   \                     ??zipOpenNewFileInZip3_0:
   \   0000002C   48009DE5           LDR      R0,[SP, #+72]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   08005013           CMPNE    R0,#+8
   \   00000038   F8FFFF1A           BNE      ??zipOpenNewFileInZip3_1
    724          		return ZIP_PARAMERROR;
    725          
    726          	zi = (zip_internal*)file;
    727          
    728          	if (zi->in_opened_file_inzip == 1)
   \   0000003C   080084E2           ADD      R0,R4,#+8
   \   00000040   240090E5           LDR      R0,[R0, #+36]
   \   00000044   010050E3           CMP      R0,#+1
   \   00000048   0600001A           BNE      ??zipOpenNewFileInZip3_3
    729          	{
    730          		err = zipCloseFileInZip (file);
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           BL       zipCloseFileInZipRaw
   \   0000005C   00B0B0E1           MOVS     R11,R0
    731          		if (err != ZIP_OK)
   \   00000060   0000000A           BEQ      ??zipOpenNewFileInZip3_3
    732          			return err;
   \                     ??zipOpenNewFileInZip3_4:
   \   00000064   B50100EA           B        ??zipOpenNewFileInZip3_5
    733          	}
    734          
    735          
    736          	if (filename==NULL)
   \                     ??zipOpenNewFileInZip3_3:
   \   00000068   0C009DE5           LDR      R0,[SP, #+12]
   \   0000006C   000050E3           CMP      R0,#+0
    737          		filename="-";
   \   00000070   E01F8F02           ADREQ    R1,??zipOpenNewFileInZip3_6  ;; "-"
   \   00000074   0C108D05           STREQ    R1,[SP, #+12]
    738          
    739          	if (comment==NULL)
   \   00000078   44009DE5           LDR      R0,[SP, #+68]
   \   0000007C   000050E3           CMP      R0,#+0
    740          		size_comment = 0;
   \   00000080   00B0A003           MOVEQ    R11,#+0
   \   00000084   0100000A           BEQ      ??zipOpenNewFileInZip3_7
    741          	else
    742          		size_comment = (uInt)strlen(comment);
   \   00000088   5A0100EF           SWI      +346
   \   0000008C   00B0A0E1           MOV      R11,R0
    743          
    744          	size_filename = (uInt)strlen(filename);
   \                     ??zipOpenNewFileInZip3_7:
   \   00000090   0C009DE5           LDR      R0,[SP, #+12]
   \   00000094   5A0100EF           SWI      +346
   \   00000098   0080A0E1           MOV      R8,R0
    745          
    746          	if (zipfi == NULL)
   \   0000009C   000055E3           CMP      R5,#+0
   \   000000A0   0300001A           BNE      ??zipOpenNewFileInZip3_8
    747          		zi->ci.dosDate = 0;
   \   000000A4   8800A0E3           MOV      R0,#+136
   \   000000A8   400C80E3           ORR      R0,R0,#0x4000
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   1F0000EA           B        ??zipOpenNewFileInZip3_9
    748          	else
    749          	{
    750          		if (zipfi->dosDate != 0)
   \                     ??zipOpenNewFileInZip3_8:
   \   000000B4   180095E5           LDR      R0,[R5, #+24]
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0300000A           BEQ      ??zipOpenNewFileInZip3_10
    751          			zi->ci.dosDate = zipfi->dosDate;
   \   000000C0   181095E5           LDR      R1,[R5, #+24]
   \   000000C4   8800A0E3           MOV      R0,#+136
   \   000000C8   400C80E3           ORR      R0,R0,#0x4000
   \   000000CC   180000EA           B        ??zipOpenNewFileInZip3_9
    752          		else zi->ci.dosDate = ziplocal_TmzDateToDosDate(&zipfi->tmz_date,zipfi->dosDate);
   \                     ??zipOpenNewFileInZip3_10:
   \   000000D0   141095E5           LDR      R1,[R5, #+20]
   \   000000D4   BD00A0E3           MOV      R0,#+189
   \   000000D8   700E80E3           ORR      R0,R0,#0x700
   \   000000DC   000051E1           CMP      R1,R0
   \   000000E0   0300003A           BCC      ??zipOpenNewFileInZip3_11
   \   000000E4   BB00E0E3           MVN      R0,#+187
   \   000000E8   700EC0E3           BIC      R0,R0,#0x700
   \   000000EC   011080E0           ADD      R1,R0,R1
   \   000000F0   010000EA           B        ??zipOpenNewFileInZip3_12
   \                     ??zipOpenNewFileInZip3_11:
   \   000000F4   510051E3           CMP      R1,#+81
   \   000000F8   50104122           SUBCS    R1,R1,#+80
   \                     ??zipOpenNewFileInZip3_12:
   \   000000FC   0C2095E5           LDR      R2,[R5, #+12]
   \   00000100   103095E5           LDR      R3,[R5, #+16]
   \   00000104   8800A0E3           MOV      R0,#+136
   \   00000108   013083E2           ADD      R3,R3,#+1
   \   0000010C   832282E0           ADD      R2,R2,R3, LSL #+5
   \   00000110   043095E5           LDR      R3,[R5, #+4]
   \   00000114   811482E0           ADD      R1,R2,R1, LSL #+9
   \   00000118   002095E5           LDR      R2,[R5, #+0]
   \   0000011C   8332A0E1           LSL      R3,R3,#+5
   \   00000120   A22083E0           ADD      R2,R3,R2, LSR #+1
   \   00000124   083095E5           LDR      R3,[R5, #+8]
   \   00000128   400C80E3           ORR      R0,R0,#0x4000
   \   0000012C   832582E0           ADD      R2,R2,R3, LSL #+11
   \   00000130   011882E1           ORR      R1,R2,R1, LSL #+16
   \                     ??zipOpenNewFileInZip3_9:
   \   00000134   041080E7           STR      R1,[R0, +R4]
    753          	}
    754          
    755          	zi->ci.flag = 0;
   \   00000138   080084E2           ADD      R0,R4,#+8
   \   0000013C   0010A0E3           MOV      R1,#+0
   \   00000140   741080E5           STR      R1,[R0, #+116]
    756          	if ((level==8) || (level==9))
   \   00000144   4C009DE5           LDR      R0,[SP, #+76]
   \   00000148   080050E3           CMP      R0,#+8
   \   0000014C   09005013           CMPNE    R0,#+9
    757          	  zi->ci.flag |= 2;
   \   00000150   08908402           ADDEQ    R9,R4,#+8
   \   00000154   0200A003           MOVEQ    R0,#+2
   \   00000158   74008905           STREQ    R0,[R9, #+116]
    758          	if ((level==2))
   \   0000015C   4C009DE5           LDR      R0,[SP, #+76]
   \   00000160   020050E3           CMP      R0,#+2
   \   00000164   0300001A           BNE      ??zipOpenNewFileInZip3_13
    759          	  zi->ci.flag |= 4;
   \   00000168   089084E2           ADD      R9,R4,#+8
   \   0000016C   740099E5           LDR      R0,[R9, #+116]
   \   00000170   040080E3           ORR      R0,R0,#0x4
   \   00000174   040000EA           B        ??zipOpenNewFileInZip3_14
    760          	if ((level==1))
   \                     ??zipOpenNewFileInZip3_13:
   \   00000178   010050E3           CMP      R0,#+1
   \   0000017C   0300001A           BNE      ??zipOpenNewFileInZip3_15
    761          	  zi->ci.flag |= 6;
   \   00000180   089084E2           ADD      R9,R4,#+8
   \   00000184   740099E5           LDR      R0,[R9, #+116]
   \   00000188   060080E3           ORR      R0,R0,#0x6
   \                     ??zipOpenNewFileInZip3_14:
   \   0000018C   740089E5           STR      R0,[R9, #+116]
    762          	if (password != NULL)
   \                     ??zipOpenNewFileInZip3_15:
   \   00000190   60009DE5           LDR      R0,[SP, #+96]
   \   00000194   000050E3           CMP      R0,#+0
   \   00000198   0300000A           BEQ      ??zipOpenNewFileInZip3_16
    763          	  zi->ci.flag |= 1;
   \   0000019C   089084E2           ADD      R9,R4,#+8
   \   000001A0   740099E5           LDR      R0,[R9, #+116]
   \   000001A4   010080E3           ORR      R0,R0,#0x1
   \   000001A8   740089E5           STR      R0,[R9, #+116]
    764          
    765          	zi->ci.crc32 = 0;
   \                     ??zipOpenNewFileInZip3_16:
   \   000001AC   8800A0E3           MOV      R0,#+136
   \   000001B0   400C80E3           ORR      R0,R0,#0x4000
   \   000001B4   04A080E0           ADD      R10,R0,R4
   \   000001B8   0000A0E3           MOV      R0,#+0
   \   000001BC   04008AE5           STR      R0,[R10, #+4]
    766          	zi->ci.method = method;
   \   000001C0   48109DE5           LDR      R1,[SP, #+72]
   \   000001C4   089084E2           ADD      R9,R4,#+8
   \   000001C8   781089E5           STR      R1,[R9, #+120]
    767          	zi->ci.encrypt = 0;
   \   000001CC   08008AE5           STR      R0,[R10, #+8]
    768          	zi->ci.stream_initialised = 0;
   \   000001D0   600089E5           STR      R0,[R9, #+96]
    769          	zi->ci.pos_in_buffered_data = 0;
   \   000001D4   640089E5           STR      R0,[R9, #+100]
    770          	zi->ci.raw = raw;
   \   000001D8   50009DE5           LDR      R0,[SP, #+80]
   \   000001DC   7C0089E5           STR      R0,[R9, #+124]
    771          	zi->ci.pos_local_header = ZTELL(zi->z_filefunc,zi->filestream) ;
   \   000001E0   140099E5           LDR      R0,[R9, #+20]
   \   000001E4   181099E5           LDR      R1,[R9, #+24]
   \   000001E8   042099E5           LDR      R2,[R9, #+4]
   \   000001EC   32FF2FE1           BLX      R2
   \   000001F0   680089E5           STR      R0,[R9, #+104]
    772          	zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename +
    773          									  size_extrafield_global + size_comment;
   \   000001F4   080086E0           ADD      R0,R6,R8
   \   000001F8   00008BE0           ADD      R0,R11,R0
   \   000001FC   2E0080E2           ADD      R0,R0,#+46
   \   00000200   700089E5           STR      R0,[R9, #+112]
    774          	zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader);
   \   00000204   030100EF           SWI      +259
    775          
    776          	ziplocal_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);
   \   00000208   3C159FE5           LDR      R1,??zipOpenNewFileInZip3_17  ;; 0x2014b50
   \   0000020C   6C0089E5           STR      R0,[R9, #+108]
   \   00000210   0420A0E3           MOV      R2,#+4
   \   00000214   ........           BL       ziplocal_putValue_inmemory
    777          	/* version info */
    778          	ziplocal_putValue_inmemory(zi->ci.central_header+4,(uLong)VERSIONMADEBY,2);
   \   00000218   6C0099E5           LDR      R0,[R9, #+108]
   \   0000021C   0220A0E3           MOV      R2,#+2
   \   00000220   0010A0E3           MOV      R1,#+0
   \   00000224   040080E2           ADD      R0,R0,#+4
   \   00000228   ........           BL       ziplocal_putValue_inmemory
    779          	ziplocal_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);
   \   0000022C   6C0099E5           LDR      R0,[R9, #+108]
   \   00000230   0220A0E3           MOV      R2,#+2
   \   00000234   1410A0E3           MOV      R1,#+20
   \   00000238   060080E2           ADD      R0,R0,#+6
   \   0000023C   ........           BL       ziplocal_putValue_inmemory
    780          	ziplocal_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);
   \   00000240   6C0099E5           LDR      R0,[R9, #+108]
   \   00000244   741099E5           LDR      R1,[R9, #+116]
   \   00000248   0220A0E3           MOV      R2,#+2
   \   0000024C   080080E2           ADD      R0,R0,#+8
   \   00000250   ........           BL       ziplocal_putValue_inmemory
    781          	ziplocal_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);
   \   00000254   6C0099E5           LDR      R0,[R9, #+108]
   \   00000258   781099E5           LDR      R1,[R9, #+120]
   \   0000025C   0220A0E3           MOV      R2,#+2
   \   00000260   0A0080E2           ADD      R0,R0,#+10
   \   00000264   ........           BL       ziplocal_putValue_inmemory
    782          	ziplocal_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);
   \   00000268   6C0099E5           LDR      R0,[R9, #+108]
   \   0000026C   00109AE5           LDR      R1,[R10, #+0]
   \   00000270   0420A0E3           MOV      R2,#+4
   \   00000274   0C0080E2           ADD      R0,R0,#+12
   \   00000278   ........           BL       ziplocal_putValue_inmemory
    783          	ziplocal_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/
   \   0000027C   6C0099E5           LDR      R0,[R9, #+108]
   \   00000280   0420A0E3           MOV      R2,#+4
   \   00000284   0010A0E3           MOV      R1,#+0
   \   00000288   100080E2           ADD      R0,R0,#+16
   \   0000028C   ........           BL       ziplocal_putValue_inmemory
    784          	ziplocal_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/
   \   00000290   6C0099E5           LDR      R0,[R9, #+108]
   \   00000294   0420A0E3           MOV      R2,#+4
   \   00000298   0010A0E3           MOV      R1,#+0
   \   0000029C   140080E2           ADD      R0,R0,#+20
   \   000002A0   ........           BL       ziplocal_putValue_inmemory
    785          	ziplocal_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/
   \   000002A4   6C0099E5           LDR      R0,[R9, #+108]
   \   000002A8   0420A0E3           MOV      R2,#+4
   \   000002AC   0010A0E3           MOV      R1,#+0
   \   000002B0   180080E2           ADD      R0,R0,#+24
   \   000002B4   ........           BL       ziplocal_putValue_inmemory
    786          	ziplocal_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);
   \   000002B8   6C0099E5           LDR      R0,[R9, #+108]
   \   000002BC   0220A0E3           MOV      R2,#+2
   \   000002C0   0810A0E1           MOV      R1,R8
   \   000002C4   1C0080E2           ADD      R0,R0,#+28
   \   000002C8   ........           BL       ziplocal_putValue_inmemory
    787          	ziplocal_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);
   \   000002CC   6C0099E5           LDR      R0,[R9, #+108]
   \   000002D0   0220A0E3           MOV      R2,#+2
   \   000002D4   0610A0E1           MOV      R1,R6
   \   000002D8   1E0080E2           ADD      R0,R0,#+30
   \   000002DC   ........           BL       ziplocal_putValue_inmemory
    788          	ziplocal_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);
   \   000002E0   6C0099E5           LDR      R0,[R9, #+108]
   \   000002E4   0220A0E3           MOV      R2,#+2
   \   000002E8   0B10A0E1           MOV      R1,R11
   \   000002EC   200080E2           ADD      R0,R0,#+32
   \   000002F0   ........           BL       ziplocal_putValue_inmemory
    789          	ziplocal_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/
   \   000002F4   6C0099E5           LDR      R0,[R9, #+108]
   \   000002F8   0220A0E3           MOV      R2,#+2
   \   000002FC   0010A0E3           MOV      R1,#+0
   \   00000300   220080E2           ADD      R0,R0,#+34
   \   00000304   ........           BL       ziplocal_putValue_inmemory
    790          
    791          	if (zipfi==NULL)
   \   00000308   000055E3           CMP      R5,#+0
   \   0000030C   0220A0E3           MOV      R2,#+2
   \   00000310   0600001A           BNE      ??zipOpenNewFileInZip3_18
    792          		ziplocal_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2);
   \   00000314   6C0099E5           LDR      R0,[R9, #+108]
   \   00000318   0010A0E3           MOV      R1,#+0
   \   0000031C   240080E2           ADD      R0,R0,#+36
   \   00000320   ........           BL       ziplocal_putValue_inmemory
    793          	else
    794          		ziplocal_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2);
    795          
    796          	if (zipfi==NULL)
    797          		ziplocal_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4);
   \   00000324   0420A0E3           MOV      R2,#+4
   \   00000328   0010A0E3           MOV      R1,#+0
   \   0000032C   050000EA           B        ??zipOpenNewFileInZip3_19
   \                     ??zipOpenNewFileInZip3_18:
   \   00000330   6C0099E5           LDR      R0,[R9, #+108]
   \   00000334   1C1095E5           LDR      R1,[R5, #+28]
   \   00000338   240080E2           ADD      R0,R0,#+36
   \   0000033C   ........           BL       ziplocal_putValue_inmemory
    798          	else
    799          		ziplocal_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);
   \   00000340   201095E5           LDR      R1,[R5, #+32]
   \   00000344   0420A0E3           MOV      R2,#+4
   \                     ??zipOpenNewFileInZip3_19:
   \   00000348   6C0099E5           LDR      R0,[R9, #+108]
   \   0000034C   260080E2           ADD      R0,R0,#+38
   \   00000350   ........           BL       ziplocal_putValue_inmemory
    800          
    801          	ziplocal_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header- zi->add_position_when_writting_offset,4);
   \   00000354   680099E5           LDR      R0,[R9, #+104]
   \   00000358   8810A0E3           MOV      R1,#+136
   \   0000035C   401C81E3           ORR      R1,R1,#0x4000
   \   00000360   041081E0           ADD      R1,R1,R4
   \   00000364   241091E5           LDR      R1,[R1, #+36]
   \   00000368   0420A0E3           MOV      R2,#+4
   \   0000036C   011040E0           SUB      R1,R0,R1
   \   00000370   6C0099E5           LDR      R0,[R9, #+108]
   \   00000374   2A0080E2           ADD      R0,R0,#+42
   \   00000378   ........           BL       ziplocal_putValue_inmemory
    802          
    803          	for (i=0;i<size_filename;i++)
   \   0000037C   0000A0E3           MOV      R0,#+0
   \   00000380   000058E3           CMP      R8,#+0
   \   00000384   0700001A           BNE      ??zipOpenNewFileInZip3_20
   \   00000388   080000EA           B        ??zipOpenNewFileInZip3_21
    804          		*(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);
   \                     ??zipOpenNewFileInZip3_22:
   \   0000038C   0C209DE5           LDR      R2,[SP, #+12]
   \   00000390   081084E2           ADD      R1,R4,#+8
   \   00000394   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000398   6C1091E5           LDR      R1,[R1, #+108]
   \   0000039C   011080E0           ADD      R1,R0,R1
   \   000003A0   2E20C1E5           STRB     R2,[R1, #+46]
   \   000003A4   010080E2           ADD      R0,R0,#+1
   \                     ??zipOpenNewFileInZip3_20:
   \   000003A8   080050E1           CMP      R0,R8
   \   000003AC   F6FFFF3A           BCC      ??zipOpenNewFileInZip3_22
    805          
    806          	for (i=0;i<size_extrafield_global;i++)
   \                     ??zipOpenNewFileInZip3_21:
   \   000003B0   0000A0E3           MOV      R0,#+0
   \   000003B4   000056E3           CMP      R6,#+0
   \   000003B8   0800001A           BNE      ??zipOpenNewFileInZip3_23
   \   000003BC   090000EA           B        ??zipOpenNewFileInZip3_24
    807          		*(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =
    808          			  *(((const char*)extrafield_global)+i);
   \                     ??zipOpenNewFileInZip3_25:
   \   000003C0   3C209DE5           LDR      R2,[SP, #+60]
   \   000003C4   081084E2           ADD      R1,R4,#+8
   \   000003C8   0220D0E7           LDRB     R2,[R0, +R2]
   \   000003CC   6C1091E5           LDR      R1,[R1, #+108]
   \   000003D0   011088E0           ADD      R1,R8,R1
   \   000003D4   011080E0           ADD      R1,R0,R1
   \   000003D8   2E20C1E5           STRB     R2,[R1, #+46]
   \   000003DC   010080E2           ADD      R0,R0,#+1
   \                     ??zipOpenNewFileInZip3_23:
   \   000003E0   060050E1           CMP      R0,R6
   \   000003E4   F5FFFF3A           BCC      ??zipOpenNewFileInZip3_25
    809          
    810          	for (i=0;i<size_comment;i++)
   \                     ??zipOpenNewFileInZip3_24:
   \   000003E8   0000A0E3           MOV      R0,#+0
   \   000003EC   00005BE3           CMP      R11,#+0
   \   000003F0   0A00001A           BNE      ??zipOpenNewFileInZip3_26
   \   000003F4   0B0000EA           B        ??zipOpenNewFileInZip3_27
   \                     ??zipOpenNewFileInZip3_6:
   \   000003F8   2D000000           DC8      "-",+0,+0
    811          		*(zi->ci.central_header+SIZECENTRALHEADER+size_filename+
    812          			  size_extrafield_global+i) = *(comment+i);
   \                     ??zipOpenNewFileInZip3_28:
   \   000003FC   44209DE5           LDR      R2,[SP, #+68]
   \   00000400   081084E2           ADD      R1,R4,#+8
   \   00000404   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000408   6C1091E5           LDR      R1,[R1, #+108]
   \   0000040C   011088E0           ADD      R1,R8,R1
   \   00000410   011086E0           ADD      R1,R6,R1
   \   00000414   011080E0           ADD      R1,R0,R1
   \   00000418   2E20C1E5           STRB     R2,[R1, #+46]
   \   0000041C   010080E2           ADD      R0,R0,#+1
   \                     ??zipOpenNewFileInZip3_26:
   \   00000420   0B0050E1           CMP      R0,R11
   \   00000424   F4FFFF3A           BCC      ??zipOpenNewFileInZip3_28
    813          	if (zi->ci.central_header == NULL)
   \                     ??zipOpenNewFileInZip3_27:
   \   00000428   080084E2           ADD      R0,R4,#+8
   \   0000042C   6C0090E5           LDR      R0,[R0, #+108]
   \   00000430   000050E3           CMP      R0,#+0
    814          		return ZIP_INTERNALERROR;
   \   00000434   6700E003           MVNEQ    R0,#+103
   \   00000438   F9FEFF0A           BEQ      ??zipOpenNewFileInZip3_2
    815          
    816          	/* write the local header */
    817          	err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)LOCALHEADERMAGIC,4);
   \   0000043C   0C239FE5           LDR      R2,??zipOpenNewFileInZip3_17+0x4  ;; 0x4034b50
   \   00000440   0430A0E3           MOV      R3,#+4
   \   00000444   080084E2           ADD      R0,R4,#+8
   \   00000448   181090E5           LDR      R1,[R0, #+24]
   \   0000044C   0400A0E1           MOV      R0,R4
   \   00000450   ........           BL       ziplocal_putValue
   \   00000454   00B0B0E1           MOVS     R11,R0
    818          
    819          	if (err==ZIP_OK)
   \   00000458   0600001A           BNE      ??zipOpenNewFileInZip3_29
    820          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)20,2);/* version needed to extract */
   \   0000045C   0230A0E3           MOV      R3,#+2
   \   00000460   1420A0E3           MOV      R2,#+20
   \   00000464   080084E2           ADD      R0,R4,#+8
   \   00000468   181090E5           LDR      R1,[R0, #+24]
   \   0000046C   0400A0E1           MOV      R0,R4
   \   00000470   ........           BL       ziplocal_putValue
   \   00000474   00B0A0E1           MOV      R11,R0
    821          	if (err==ZIP_OK)
   \                     ??zipOpenNewFileInZip3_29:
   \   00000478   00005BE3           CMP      R11,#+0
   \   0000047C   0500001A           BNE      ??zipOpenNewFileInZip3_30
    822          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.flag,2);
   \   00000480   742099E5           LDR      R2,[R9, #+116]
   \   00000484   181099E5           LDR      R1,[R9, #+24]
   \   00000488   0230A0E3           MOV      R3,#+2
   \   0000048C   0400A0E1           MOV      R0,R4
   \   00000490   ........           BL       ziplocal_putValue
   \   00000494   00B0A0E1           MOV      R11,R0
    823          
    824          	if (err==ZIP_OK)
   \                     ??zipOpenNewFileInZip3_30:
   \   00000498   00005BE3           CMP      R11,#+0
   \   0000049C   0500001A           BNE      ??zipOpenNewFileInZip3_31
    825          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.method,2);
   \   000004A0   782099E5           LDR      R2,[R9, #+120]
   \   000004A4   181099E5           LDR      R1,[R9, #+24]
   \   000004A8   0230A0E3           MOV      R3,#+2
   \   000004AC   0400A0E1           MOV      R0,R4
   \   000004B0   ........           BL       ziplocal_putValue
   \   000004B4   00B0A0E1           MOV      R11,R0
    826          
    827          	if (err==ZIP_OK)
   \                     ??zipOpenNewFileInZip3_31:
   \   000004B8   00005BE3           CMP      R11,#+0
   \   000004BC   0800001A           BNE      ??zipOpenNewFileInZip3_32
    828          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.dosDate,4);
   \   000004C0   0430A0E3           MOV      R3,#+4
   \   000004C4   8800A0E3           MOV      R0,#+136
   \   000004C8   400C80E3           ORR      R0,R0,#0x4000
   \   000004CC   042090E7           LDR      R2,[R0, +R4]
   \   000004D0   080084E2           ADD      R0,R4,#+8
   \   000004D4   181090E5           LDR      R1,[R0, #+24]
   \   000004D8   0400A0E1           MOV      R0,R4
   \   000004DC   ........           BL       ziplocal_putValue
   \   000004E0   00B0A0E1           MOV      R11,R0
    829          
    830          	if (err==ZIP_OK)
   \                     ??zipOpenNewFileInZip3_32:
   \   000004E4   00005BE3           CMP      R11,#+0
   \   000004E8   0600001A           BNE      ??zipOpenNewFileInZip3_33
    831          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* crc 32, unknown */
   \   000004EC   0430A0E3           MOV      R3,#+4
   \   000004F0   0020A0E3           MOV      R2,#+0
   \   000004F4   080084E2           ADD      R0,R4,#+8
   \   000004F8   181090E5           LDR      R1,[R0, #+24]
   \   000004FC   0400A0E1           MOV      R0,R4
   \   00000500   ........           BL       ziplocal_putValue
   \   00000504   00B0A0E1           MOV      R11,R0
    832          	if (err==ZIP_OK)
   \                     ??zipOpenNewFileInZip3_33:
   \   00000508   00005BE3           CMP      R11,#+0
   \   0000050C   0600001A           BNE      ??zipOpenNewFileInZip3_34
    833          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* compressed size, unknown */
   \   00000510   0430A0E3           MOV      R3,#+4
   \   00000514   0020A0E3           MOV      R2,#+0
   \   00000518   080084E2           ADD      R0,R4,#+8
   \   0000051C   181090E5           LDR      R1,[R0, #+24]
   \   00000520   0400A0E1           MOV      R0,R4
   \   00000524   ........           BL       ziplocal_putValue
   \   00000528   00B0A0E1           MOV      R11,R0
    834          	if (err==ZIP_OK)
   \                     ??zipOpenNewFileInZip3_34:
   \   0000052C   00005BE3           CMP      R11,#+0
   \   00000530   0600001A           BNE      ??zipOpenNewFileInZip3_35
    835          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* uncompressed size, unknown */
   \   00000534   0430A0E3           MOV      R3,#+4
   \   00000538   0020A0E3           MOV      R2,#+0
   \   0000053C   080084E2           ADD      R0,R4,#+8
   \   00000540   181090E5           LDR      R1,[R0, #+24]
   \   00000544   0400A0E1           MOV      R0,R4
   \   00000548   ........           BL       ziplocal_putValue
   \   0000054C   00B0A0E1           MOV      R11,R0
    836          
    837          	if (err==ZIP_OK)
   \                     ??zipOpenNewFileInZip3_35:
   \   00000550   00005BE3           CMP      R11,#+0
   \   00000554   0600001A           BNE      ??zipOpenNewFileInZip3_36
    838          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_filename,2);
   \   00000558   0230A0E3           MOV      R3,#+2
   \   0000055C   0820A0E1           MOV      R2,R8
   \   00000560   080084E2           ADD      R0,R4,#+8
   \   00000564   181090E5           LDR      R1,[R0, #+24]
   \   00000568   0400A0E1           MOV      R0,R4
   \   0000056C   ........           BL       ziplocal_putValue
   \   00000570   00B0A0E1           MOV      R11,R0
    839          
    840          	if (err==ZIP_OK)
   \                     ??zipOpenNewFileInZip3_36:
   \   00000574   00005BE3           CMP      R11,#+0
   \   00000578   0600001A           BNE      ??zipOpenNewFileInZip3_37
    841          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_extrafield_local,2);
   \   0000057C   38209DE5           LDR      R2,[SP, #+56]
   \   00000580   0230A0E3           MOV      R3,#+2
   \   00000584   080084E2           ADD      R0,R4,#+8
   \   00000588   181090E5           LDR      R1,[R0, #+24]
   \   0000058C   0400A0E1           MOV      R0,R4
   \   00000590   ........           BL       ziplocal_putValue
   \   00000594   00B0A0E1           MOV      R11,R0
    842          
    843          	if ((err==ZIP_OK) && (size_filename>0))
   \                     ??zipOpenNewFileInZip3_37:
   \   00000598   00005BE3           CMP      R11,#+0
   \   0000059C   1600001A           BNE      ??zipOpenNewFileInZip3_38
   \   000005A0   000058E3           CMP      R8,#+0
   \   000005A4   0700000A           BEQ      ??zipOpenNewFileInZip3_39
    844          		if (ZWRITE(zi->z_filefunc,zi->filestream,filename,size_filename)!=size_filename)
   \   000005A8   140099E5           LDR      R0,[R9, #+20]
   \   000005AC   0C209DE5           LDR      R2,[SP, #+12]
   \   000005B0   181099E5           LDR      R1,[R9, #+24]
   \   000005B4   005099E5           LDR      R5,[R9, #+0]
   \   000005B8   0830A0E1           MOV      R3,R8
   \   000005BC   35FF2FE1           BLX      R5
   \   000005C0   080050E1           CMP      R0,R8
   \   000005C4   0B00001A           BNE      ??zipOpenNewFileInZip3_40
   \                     ??zipOpenNewFileInZip3_39:
   \   000005C8   38009DE5           LDR      R0,[SP, #+56]
   \   000005CC   000050E3           CMP      R0,#+0
   \   000005D0   0900000A           BEQ      ??zipOpenNewFileInZip3_38
    845          				err = ZIP_ERRNO;
    846          
    847          	if ((err==ZIP_OK) && (size_extrafield_local>0))
    848          		if (ZWRITE(zi->z_filefunc,zi->filestream,extrafield_local,size_extrafield_local)
    849          																		   !=size_extrafield_local)
   \   000005D4   10209DE5           LDR      R2,[SP, #+16]
   \   000005D8   181099E5           LDR      R1,[R9, #+24]
   \   000005DC   005099E5           LDR      R5,[R9, #+0]
   \   000005E0   0030A0E1           MOV      R3,R0
   \   000005E4   140099E5           LDR      R0,[R9, #+20]
   \   000005E8   35FF2FE1           BLX      R5
   \   000005EC   38109DE5           LDR      R1,[SP, #+56]
   \   000005F0   010050E1           CMP      R0,R1
   \   000005F4   0000000A           BEQ      ??zipOpenNewFileInZip3_38
    850          				err = ZIP_ERRNO;
   \                     ??zipOpenNewFileInZip3_40:
   \   000005F8   00B0E0E3           MVN      R11,#+0
    851          
    852          	zi->ci.stream.avail_in = (uInt)0;
   \                     ??zipOpenNewFileInZip3_38:
   \   000005FC   0000A0E3           MOV      R0,#+0
   \   00000600   2C0089E5           STR      R0,[R9, #+44]
    853          	zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
   \   00000604   401CA0E3           MOV      R1,#+16384
   \   00000608   381089E5           STR      R1,[R9, #+56]
    854          	zi->ci.stream.next_out = zi->ci.buffered_data;
   \   0000060C   881084E2           ADD      R1,R4,#+136
   \   00000610   341089E5           STR      R1,[R9, #+52]
    855          	zi->ci.stream.total_in = 0;
   \   00000614   300089E5           STR      R0,[R9, #+48]
    856          	zi->ci.stream.total_out = 0;
   \   00000618   3C0089E5           STR      R0,[R9, #+60]
    857          
    858          	if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))
   \   0000061C   00005BE3           CMP      R11,#+0
   \   00000620   1E00001A           BNE      ??zipOpenNewFileInZip3_41
   \   00000624   080084E2           ADD      R0,R4,#+8
   \   00000628   780090E5           LDR      R0,[R0, #+120]
   \   0000062C   080050E3           CMP      R0,#+8
   \   00000630   1A00001A           BNE      ??zipOpenNewFileInZip3_41
   \   00000634   080084E2           ADD      R0,R4,#+8
   \   00000638   7C0090E5           LDR      R0,[R0, #+124]
   \   0000063C   000050E3           CMP      R0,#+0
   \   00000640   1600001A           BNE      ??zipOpenNewFileInZip3_41
    859          	{
    860          		zi->ci.stream.zalloc = (alloc_func)0;
   \   00000644   480089E5           STR      R0,[R9, #+72]
    861          		zi->ci.stream.zfree = (free_func)0;
   \   00000648   4C0089E5           STR      R0,[R9, #+76]
    862          		zi->ci.stream.opaque = (voidpf)0;
   \   0000064C   500089E5           STR      R0,[R9, #+80]
    863          
    864          		if (windowBits>0)
    865          			windowBits = -windowBits;
    866          
    867          		err = deflateInit2(&zi->ci.stream, level,
    868          			   Z_DEFLATED, windowBits, memLevel, strategy);
   \   00000650   3800A0E3           MOV      R0,#+56
   \   00000654   01002DE9           PUSH     {R0}
   \   00000658   F4009FE5           LDR      R0,??zipOpenNewFileInZip3_17+0x8  ;; `?<Constant "1.2.3">`
   \   0000065C   010057E3           CMP      R7,#+1
   \   00000660   01002DE9           PUSH     {R0}
   \   00000664   64009DE5           LDR      R0,[SP, #+100]
   \   00000668   007067A2           RSBGE    R7,R7,#+0
   \   0000066C   01002DE9           PUSH     {R0}
   \   00000670   64009DE5           LDR      R0,[SP, #+100]
   \   00000674   0730A0E1           MOV      R3,R7
   \   00000678   01002DE9           PUSH     {R0}
   \   0000067C   5C109DE5           LDR      R1,[SP, #+92]
   \   00000680   0820A0E3           MOV      R2,#+8
   \   00000684   300084E2           ADD      R0,R4,#+48
   \   00000688   ........           _BLF     deflateInit2_,??deflateInit2_??rA
   \   0000068C   00B0B0E1           MOVS     R11,R0
    869          
    870          		if (err==Z_OK)
   \   00000690   10D08DE2           ADD      SP,SP,#+16
    871          			zi->ci.stream_initialised = 1;
   \   00000694   08008402           ADDEQ    R0,R4,#+8
   \   00000698   0110A003           MOVEQ    R1,#+1
   \   0000069C   60108005           STREQ    R1,[R0, #+96]
    872          	}
    873          #	ifndef NOCRYPT
    874          	zi->ci.crypt_header_size = 0;
   \                     ??zipOpenNewFileInZip3_41:
   \   000006A0   8800A0E3           MOV      R0,#+136
   \   000006A4   400C80E3           ORR      R0,R0,#0x4000
   \   000006A8   040080E0           ADD      R0,R0,R4
   \   000006AC   0010A0E3           MOV      R1,#+0
   \   000006B0   1C1080E5           STR      R1,[R0, #+28]
    875          	if ((err==Z_OK) && (password != NULL))
   \   000006B4   00005BE3           CMP      R11,#+0
   \   000006B8   2000001A           BNE      ??zipOpenNewFileInZip3_5
   \   000006BC   60009DE5           LDR      R0,[SP, #+96]
   \   000006C0   000050E3           CMP      R0,#+0
   \   000006C4   1A00000A           BEQ      ??zipOpenNewFileInZip3_42
    876          	{
    877          		unsigned char bufHead[RAND_HEAD_LEN];
    878          		unsigned int sizeHead;
    879          		zi->ci.encrypt = 1;
   \   000006C8   0100A0E3           MOV      R0,#+1
   \   000006CC   08008AE5           STR      R0,[R10, #+8]
    880          		zi->ci.pcrc_32_tab = get_crc_table();
   \   000006D0   ........           _BLF     get_crc_table,??get_crc_table??rA
   \   000006D4   18008AE5           STR      R0,[R10, #+24]
    881          		/*init_keys(password,zi->ci.keys,zi->ci.pcrc_32_tab);*/
    882          
    883          		sizeHead=crypthead(password,bufHead,RAND_HEAD_LEN,zi->ci.keys,zi->ci.pcrc_32_tab,crcForCrypting);
   \   000006D8   64009DE5           LDR      R0,[SP, #+100]
   \   000006DC   0C20A0E3           MOV      R2,#+12
   \   000006E0   01002DE9           PUSH     {R0}
   \   000006E4   18009AE5           LDR      R0,[R10, #+24]
   \   000006E8   01002DE9           PUSH     {R0}
   \   000006EC   08108DE2           ADD      R1,SP,#+8
   \   000006F0   9400A0E3           MOV      R0,#+148
   \   000006F4   400C80E3           ORR      R0,R0,#0x4000
   \   000006F8   043080E0           ADD      R3,R0,R4
   \   000006FC   68009DE5           LDR      R0,[SP, #+104]
   \   00000700   ........           BL       crypthead
   \   00000704   0050A0E1           MOV      R5,R0
    884          		zi->ci.crypt_header_size = sizeHead;
   \   00000708   1C508AE5           STR      R5,[R10, #+28]
    885          
    886          		if (ZWRITE(zi->z_filefunc,zi->filestream,bufHead,sizeHead) != sizeHead)
   \   0000070C   140099E5           LDR      R0,[R9, #+20]
   \   00000710   181099E5           LDR      R1,[R9, #+24]
   \   00000714   006099E5           LDR      R6,[R9, #+0]
   \   00000718   0530A0E1           MOV      R3,R5
   \   0000071C   08208DE2           ADD      R2,SP,#+8
   \   00000720   36FF2FE1           BLX      R6
   \   00000724   050050E1           CMP      R0,R5
   \   00000728   08D08DE2           ADD      SP,SP,#+8
    887          				err = ZIP_ERRNO;
   \   0000072C   00B0E013           MVNNE    R11,#+0
   \   00000730   0200001A           BNE      ??zipOpenNewFileInZip3_5
    888          	}
    889          #	endif
    890          
    891          	if (err==Z_OK)
    892          		zi->in_opened_file_inzip = 1;
   \                     ??zipOpenNewFileInZip3_42:
   \   00000734   080084E2           ADD      R0,R4,#+8
   \   00000738   0110A0E3           MOV      R1,#+1
   \   0000073C   241080E5           STR      R1,[R0, #+36]
   \                     ??zipOpenNewFileInZip3_5:
   \   00000740   0B00A0E1           MOV      R0,R11
   \   00000744   14D08DE2           ADD      SP,SP,#+20
   \   00000748   F08FBDE8           POP      {R4-R11,PC}
   \                     ??zipOpenNewFileInZip3_17:
   \   0000074C   504B0102           DC32     0x2014b50
   \   00000750   504B0304           DC32     0x4034b50
   \   00000754   ........           DC32     `?<Constant "1.2.3">`
    893          	return err;
    894          }
    895          

   \                                 In segment CODE, align 4, keep-with-next
    896          extern int zipOpenNewFileInZip2(
    897          	zipFile file,
    898          	const char* filename,
    899          	const zip_fileinfo* zipfi,
    900          	const void* extrafield_local,
    901          	uInt size_extrafield_local,
    902          	const void* extrafield_global,
    903          	uInt size_extrafield_global,
    904          	const char* comment,
    905          	int method,
    906          	int level,
    907          	int raw)
    908          {
   \                     zipOpenNewFileInZip2:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20C09DE5           LDR      R12,[SP, #+32]
   \   00000008   24409DE5           LDR      R4,[SP, #+36]
   \   0000000C   28509DE5           LDR      R5,[SP, #+40]
   \   00000010   2C609DE5           LDR      R6,[SP, #+44]
   \   00000014   30709DE5           LDR      R7,[SP, #+48]
   \   00000018   34809DE5           LDR      R8,[SP, #+52]
   \   0000001C   38909DE5           LDR      R9,[SP, #+56]
    909          	return zipOpenNewFileInZip3 (file, filename, zipfi,
    910          								 extrafield_local, size_extrafield_local,
    911          								 extrafield_global, size_extrafield_global,
    912          								 comment, method, level, raw,
    913          								 -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
    914          								 NULL, 0);
   \   00000020   00A0A0E3           MOV      R10,#+0
   \   00000024   00042DE9           PUSH     {R10}
   \   00000028   00042DE9           PUSH     {R10}
   \   0000002C   00042DE9           PUSH     {R10}
   \   00000030   08A0A0E3           MOV      R10,#+8
   \   00000034   00042DE9           PUSH     {R10}
   \   00000038   0EA0E0E3           MVN      R10,#+14
   \   0000003C   00042DE9           PUSH     {R10}
   \   00000040   00022DE9           PUSH     {R9}
   \   00000044   00012DE9           PUSH     {R8}
   \   00000048   80002DE9           PUSH     {R7}
   \   0000004C   40002DE9           PUSH     {R6}
   \   00000050   20002DE9           PUSH     {R5}
   \   00000054   10002DE9           PUSH     {R4}
   \   00000058   00102DE9           PUSH     {R12}
   \   0000005C   ........           BL       zipOpenNewFileInZip3
   \   00000060   30D08DE2           ADD      SP,SP,#+48
   \   00000064   F087BDE8           POP      {R4-R10,PC}      ;; return
    915          }
    916          

   \                                 In segment CODE, align 4, keep-with-next
    917          extern int zipOpenNewFileInZip (
    918          	zipFile file,
    919          	const char* filename,
    920          	const zip_fileinfo* zipfi,
    921          	const void* extrafield_local,
    922          	uInt size_extrafield_local,
    923          	const void* extrafield_global,
    924          	uInt size_extrafield_global,
    925          	const char* comment,
    926          	int method,
    927          	int level)
    928          {
   \                     zipOpenNewFileInZip:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1CC09DE5           LDR      R12,[SP, #+28]
   \   00000008   20409DE5           LDR      R4,[SP, #+32]
   \   0000000C   24509DE5           LDR      R5,[SP, #+36]
   \   00000010   28609DE5           LDR      R6,[SP, #+40]
   \   00000014   2C709DE5           LDR      R7,[SP, #+44]
   \   00000018   30809DE5           LDR      R8,[SP, #+48]
    929          	return zipOpenNewFileInZip2 (file, filename, zipfi,
    930          								 extrafield_local, size_extrafield_local,
    931          								 extrafield_global, size_extrafield_global,
    932          								 comment, method, level, 0);
   \   0000001C   0090A0E3           MOV      R9,#+0
   \   00000020   00022DE9           PUSH     {R9}
   \   00000024   00022DE9           PUSH     {R9}
   \   00000028   00022DE9           PUSH     {R9}
   \   0000002C   0890A0E3           MOV      R9,#+8
   \   00000030   00022DE9           PUSH     {R9}
   \   00000034   0E90E0E3           MVN      R9,#+14
   \   00000038   00022DE9           PUSH     {R9}
   \   0000003C   0090A0E3           MOV      R9,#+0
   \   00000040   00022DE9           PUSH     {R9}
   \   00000044   00012DE9           PUSH     {R8}
   \   00000048   80002DE9           PUSH     {R7}
   \   0000004C   40002DE9           PUSH     {R6}
   \   00000050   20002DE9           PUSH     {R5}
   \   00000054   10002DE9           PUSH     {R4}
   \   00000058   00102DE9           PUSH     {R12}
   \   0000005C   ........           BL       zipOpenNewFileInZip3
   \   00000060   30D08DE2           ADD      SP,SP,#+48
   \   00000064   F083BDE8           POP      {R4-R9,PC}       ;; return
    933          }
    934          

   \                                 In segment CODE, align 4, keep-with-next
    935          local int zipFlushWriteBuffer(zip_internal* zi)
    936          {
   \                     zipFlushWriteBuffer:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    937          	int err=ZIP_OK;
    938          
    939          	if (zi->ci.encrypt != 0)
   \   00000008   9000A0E3           MOV      R0,#+144
   \   0000000C   400C80E3           ORR      R0,R0,#0x4000
   \   00000010   040090E7           LDR      R0,[R0, +R4]
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1E00000A           BEQ      ??zipFlushWriteBuffer_0
    940          	{
    941          #ifndef NOCRYPT
    942          		uInt i;
    943          		int t;
    944          		for (i=0;i<zi->ci.pos_in_buffered_data;i++)
   \   00000020   080084E2           ADD      R0,R4,#+8
   \   00000024   640090E5           LDR      R0,[R0, #+100]
   \   00000028   0060A0E3           MOV      R6,#+0
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   1500001A           BNE      ??zipFlushWriteBuffer_1
   \   00000034   180000EA           B        ??zipFlushWriteBuffer_0
   \                     ??zipFlushWriteBuffer_2:
   \   00000038   9000A0E3           MOV      R0,#+144
   \   0000003C   400C80E3           ORR      R0,R0,#0x4000
   \   00000040   040080E0           ADD      R0,R0,R4
   \   00000044   0C1090E5           LDR      R1,[R0, #+12]
   \   00000048   0220A0E3           MOV      R2,#+2
   \   0000004C   0118A0E1           LSL      R1,R1,#+16
   \   00000050   217882E1           ORR      R7,R2,R1, LSR #+16
    945          			zi->ci.buffered_data[i] = zencode(zi->ci.keys, zi->ci.pcrc_32_tab,
    946          									   zi->ci.buffered_data[i],t);
   \   00000054   101090E5           LDR      R1,[R0, #+16]
   \   00000058   048086E0           ADD      R8,R6,R4
   \   0000005C   8820D8E5           LDRB     R2,[R8, #+136]
   \   00000060   9400A0E3           MOV      R0,#+148
   \   00000064   400C80E3           ORR      R0,R0,#0x4000
   \   00000068   040080E0           ADD      R0,R0,R4
   \   0000006C   ........           BL       update_keys
   \   00000070   8800D8E5           LDRB     R0,[R8, #+136]
   \   00000074   011027E2           EOR      R1,R7,#0x1
   \   00000078   910702E0           MUL      R2,R1,R7
   \   0000007C   016086E2           ADD      R6,R6,#+1
   \   00000080   2214A0E1           LSR      R1,R2,#+8
   \   00000084   000021E0           EOR      R0,R1,R0
   \   00000088   8800C8E5           STRB     R0,[R8, #+136]
   \                     ??zipFlushWriteBuffer_1:
   \   0000008C   080084E2           ADD      R0,R4,#+8
   \   00000090   640090E5           LDR      R0,[R0, #+100]
   \   00000094   000056E1           CMP      R6,R0
   \   00000098   E6FFFF3A           BCC      ??zipFlushWriteBuffer_2
    947          #endif
    948          	}
    949          	if (ZWRITE(zi->z_filefunc,zi->filestream,zi->ci.buffered_data,zi->ci.pos_in_buffered_data)
    950          																	!=zi->ci.pos_in_buffered_data)
   \                     ??zipFlushWriteBuffer_0:
   \   0000009C   086084E2           ADD      R6,R4,#+8
   \   000000A0   643096E5           LDR      R3,[R6, #+100]
   \   000000A4   181096E5           LDR      R1,[R6, #+24]
   \   000000A8   140096E5           LDR      R0,[R6, #+20]
   \   000000AC   007096E5           LDR      R7,[R6, #+0]
   \   000000B0   882084E2           ADD      R2,R4,#+136
   \   000000B4   37FF2FE1           BLX      R7
   \   000000B8   641096E5           LDR      R1,[R6, #+100]
   \   000000BC   010050E1           CMP      R0,R1
    951          	  err = ZIP_ERRNO;
   \   000000C0   0550E011           MVNNE    R5,R5
    952          	zi->ci.pos_in_buffered_data = 0;
   \   000000C4   080084E2           ADD      R0,R4,#+8
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   641080E5           STR      R1,[R0, #+100]
    953          	return err;
   \   000000D0   0500A0E1           MOV      R0,R5
   \   000000D4   F081BDE8           POP      {R4-R8,PC}       ;; return
    954          }
    955          

   \                                 In segment CODE, align 4, keep-with-next
    956          extern int zipWriteInFileInZip (
    957          	zipFile file,
    958          	const void* buf,
    959          	unsigned len)
    960          {
   \                     zipWriteInFileInZip:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    961          	zip_internal* zi;
    962          	int err=ZIP_OK;
   \   00000008   0050A0E3           MOV      R5,#+0
    963          
    964          	if (file == NULL)
   \   0000000C   0100001A           BNE      ??zipWriteInFileInZip_0
    965          		return ZIP_PARAMERROR;
   \                     ??zipWriteInFileInZip_1:
   \   00000010   6500E0E3           MVN      R0,#+101
   \   00000014   F080BDE8           POP      {R4-R7,PC}
    966          	zi = (zip_internal*)file;
    967          
    968          	if (zi->in_opened_file_inzip == 0)
   \                     ??zipWriteInFileInZip_0:
   \   00000018   2C0094E5           LDR      R0,[R4, #+44]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   FAFFFF0A           BEQ      ??zipWriteInFileInZip_1
    969          		return ZIP_PARAMERROR;
    970          
    971          	zi->ci.stream.next_in = (void*)buf;
   \   00000024   2C6084E2           ADD      R6,R4,#+44
   \   00000028   041086E5           STR      R1,[R6, #+4]
    972          	zi->ci.stream.avail_in = len;
   \   0000002C   082086E5           STR      R2,[R6, #+8]
   \   00000030   8C00A0E3           MOV      R0,#+140
   \   00000034   400C80E3           ORR      R0,R0,#0x4000
   \   00000038   046080E0           ADD      R6,R0,R4
   \   0000003C   000096E5           LDR      R0,[R6, #+0]
    973          	zi->ci.crc32 = crc32(zi->ci.crc32,buf,len);
   \   00000040   ........           _BLF     crc32,??crc32??rA
   \   00000044   000086E5           STR      R0,[R6, #+0]
   \   00000048   0C0000EA           B        ??zipWriteInFileInZip_2
    974          
    975          	while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))
    976          	{
    977          		if (zi->ci.stream.avail_out == 0)
    978          		{
    979          			if (zipFlushWriteBuffer(zi) == ZIP_ERRNO)
    980          				err = ZIP_ERRNO;
    981          			zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
    982          			zi->ci.stream.next_out = zi->ci.buffered_data;
    983          		}
    984          
    985          
    986          		if(err != ZIP_OK)
    987          			break;
    988          
    989          		if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))
    990          		{
    991          			uLong uTotalOutBefore = zi->ci.stream.total_out;
   \                     ??zipWriteInFileInZip_3:
   \   0000004C   2C6084E2           ADD      R6,R4,#+44
   \   00000050   187096E5           LDR      R7,[R6, #+24]
    992          			err=deflate(&zi->ci.stream,  Z_NO_FLUSH);
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   300084E2           ADD      R0,R4,#+48
   \   0000005C   ........           _BLF     deflate,??deflate??rA
    993          			zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;
   \   00000060   181096E5           LDR      R1,[R6, #+24]
   \   00000064   0050A0E1           MOV      R5,R0
   \   00000068   400096E5           LDR      R0,[R6, #+64]
    994          
    995          		}
   \   0000006C   000055E3           CMP      R5,#+0
   \   00000070   000081E0           ADD      R0,R1,R0
   \   00000074   070040E0           SUB      R0,R0,R7
   \   00000078   400086E5           STR      R0,[R6, #+64]
   \   0000007C   4200001A           BNE      ??zipWriteInFileInZip_4
   \                     ??zipWriteInFileInZip_2:
   \   00000080   2C0084E2           ADD      R0,R4,#+44
   \   00000084   080090E5           LDR      R0,[R0, #+8]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   3E00000A           BEQ      ??zipWriteInFileInZip_4
   \   00000090   2C0084E2           ADD      R0,R4,#+44
   \   00000094   140090E5           LDR      R0,[R0, #+20]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0A00001A           BNE      ??zipWriteInFileInZip_5
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           BL       zipFlushWriteBuffer
   \   000000A8   010070E3           CMN      R0,#+1
   \   000000AC   0050E003           MVNEQ    R5,#+0
   \   000000B0   2C6084E2           ADD      R6,R4,#+44
   \   000000B4   400CA0E3           MOV      R0,#+16384
   \   000000B8   140086E5           STR      R0,[R6, #+20]
   \   000000BC   880084E2           ADD      R0,R4,#+136
   \   000000C0   100086E5           STR      R0,[R6, #+16]
   \   000000C4   000055E3           CMP      R5,#+0
   \   000000C8   2F00001A           BNE      ??zipWriteInFileInZip_4
   \                     ??zipWriteInFileInZip_5:
   \   000000CC   2C0084E2           ADD      R0,R4,#+44
   \   000000D0   540090E5           LDR      R0,[R0, #+84]
   \   000000D4   080050E3           CMP      R0,#+8
   \   000000D8   0300001A           BNE      ??zipWriteInFileInZip_6
   \   000000DC   2C0084E2           ADD      R0,R4,#+44
   \   000000E0   580090E5           LDR      R0,[R0, #+88]
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   D7FFFF0A           BEQ      ??zipWriteInFileInZip_3
    996          		else
    997          		{
    998          			uInt copy_this,i;
    999          			if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)
   \                     ??zipWriteInFileInZip_6:
   \   000000EC   2C6084E2           ADD      R6,R4,#+44
   \   000000F0   080096E5           LDR      R0,[R6, #+8]
   \   000000F4   141096E5           LDR      R1,[R6, #+20]
   \   000000F8   010050E1           CMP      R0,R1
   \   000000FC   2C0084E2           ADD      R0,R4,#+44
   1000          				copy_this = zi->ci.stream.avail_in;
   \   00000100   08009035           LDRCC    R0,[R0, #+8]
   1001          			else
   1002          				copy_this = zi->ci.stream.avail_out;
   \   00000104   0100A021           MOVCS    R0,R1
   1003          			for (i=0;i<copy_this;i++)
   \   00000108   0010A0E3           MOV      R1,#+0
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   0500001A           BNE      ??zipWriteInFileInZip_7
   \   00000114   060000EA           B        ??zipWriteInFileInZip_8
   1004          				*(((char*)zi->ci.stream.next_out)+i) =
   1005          					*(((const char*)zi->ci.stream.next_in)+i);
   \                     ??zipWriteInFileInZip_9:
   \   00000118   043096E5           LDR      R3,[R6, #+4]
   \   0000011C   102096E5           LDR      R2,[R6, #+16]
   \   00000120   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000124   0230C1E7           STRB     R3,[R1, +R2]
   \   00000128   011081E2           ADD      R1,R1,#+1
   \                     ??zipWriteInFileInZip_7:
   \   0000012C   000051E1           CMP      R1,R0
   \   00000130   F8FFFF3A           BCC      ??zipWriteInFileInZip_9
   1006          			{
   1007          				zi->ci.stream.avail_in -= copy_this;
   \                     ??zipWriteInFileInZip_8:
   \   00000134   081096E5           LDR      R1,[R6, #+8]
   \   00000138   001041E0           SUB      R1,R1,R0
   \   0000013C   081086E5           STR      R1,[R6, #+8]
   1008          				zi->ci.stream.avail_out-= copy_this;
   \   00000140   141096E5           LDR      R1,[R6, #+20]
   \   00000144   001041E0           SUB      R1,R1,R0
   \   00000148   141086E5           STR      R1,[R6, #+20]
   1009          				zi->ci.stream.next_in+= copy_this;
   \   0000014C   041096E5           LDR      R1,[R6, #+4]
   \   00000150   011080E0           ADD      R1,R0,R1
   \   00000154   041086E5           STR      R1,[R6, #+4]
   1010          				zi->ci.stream.next_out+= copy_this;
   \   00000158   101096E5           LDR      R1,[R6, #+16]
   \   0000015C   011080E0           ADD      R1,R0,R1
   \   00000160   101086E5           STR      R1,[R6, #+16]
   1011          				zi->ci.stream.total_in+= copy_this;
   \   00000164   0C1096E5           LDR      R1,[R6, #+12]
   \   00000168   011080E0           ADD      R1,R0,R1
   \   0000016C   0C1086E5           STR      R1,[R6, #+12]
   1012          				zi->ci.stream.total_out+= copy_this;
   \   00000170   181096E5           LDR      R1,[R6, #+24]
   \   00000174   011080E0           ADD      R1,R0,R1
   \   00000178   181086E5           STR      R1,[R6, #+24]
   1013          				zi->ci.pos_in_buffered_data += copy_this;
   \   0000017C   401096E5           LDR      R1,[R6, #+64]
   \   00000180   010080E0           ADD      R0,R0,R1
   \   00000184   400086E5           STR      R0,[R6, #+64]
   \   00000188   BCFFFFEA           B        ??zipWriteInFileInZip_2
   1014          			}
   1015          		}
   1016          	}
   1017          
   1018          	return err;
   \                     ??zipWriteInFileInZip_4:
   \   0000018C   0500A0E1           MOV      R0,R5
   \   00000190   F080BDE8           POP      {R4-R7,PC}       ;; return
   1019          }
   1020          

   \                                 In segment CODE, align 4, keep-with-next
   1021          extern int zipCloseFileInZipRaw (
   1022          	zipFile file,
   1023          	uLong uncompressed_size,
   1024          	uLong crc32)
   1025          {
   \                     zipCloseFileInZipRaw:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0270A0E1           MOV      R7,R2
   1026          	zip_internal* zi;
   1027          	uLong compressed_size;
   1028          	int err=ZIP_OK;
   \   00000010   0050A0E3           MOV      R5,#+0
   1029          
   1030          	if (file == NULL)
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   0100001A           BNE      ??zipCloseFileInZipRaw_0
   1031          		return ZIP_PARAMERROR;
   \                     ??zipCloseFileInZipRaw_1:
   \   0000001C   6500E0E3           MVN      R0,#+101
   \   00000020   F087BDE8           POP      {R4-R10,PC}
   1032          	zi = (zip_internal*)file;
   1033          
   1034          	if (zi->in_opened_file_inzip == 0)
   \                     ??zipCloseFileInZipRaw_0:
   \   00000024   0C0084E2           ADD      R0,R4,#+12
   \   00000028   200090E5           LDR      R0,[R0, #+32]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   F9FFFF0A           BEQ      ??zipCloseFileInZipRaw_1
   1035          		return ZIP_PARAMERROR;
   1036          	zi->ci.stream.avail_in = 0;
   \   00000034   0C8084E2           ADD      R8,R4,#+12
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   280088E5           STR      R0,[R8, #+40]
   1037          
   1038          	if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))
   \   00000040   740098E5           LDR      R0,[R8, #+116]
   \   00000044   080050E3           CMP      R0,#+8
   \   00000048   1B00001A           BNE      ??zipCloseFileInZipRaw_2
   \   0000004C   0C0084E2           ADD      R0,R4,#+12
   \   00000050   780090E5           LDR      R0,[R0, #+120]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   1700001A           BNE      ??zipCloseFileInZipRaw_2
   1039          		while (err==ZIP_OK)
   1040          	{
   1041          		uLong uTotalOutBefore;
   1042          		if (zi->ci.stream.avail_out == 0)
   \                     ??zipCloseFileInZipRaw_3:
   \   0000005C   0C0084E2           ADD      R0,R4,#+12
   \   00000060   340090E5           LDR      R0,[R0, #+52]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0500001A           BNE      ??zipCloseFileInZipRaw_4
   1043          		{
   1044          			if (zipFlushWriteBuffer(zi) == ZIP_ERRNO)
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       zipFlushWriteBuffer
   1045          				err = ZIP_ERRNO;
   1046          			zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
   \   00000074   400CA0E3           MOV      R0,#+16384
   \   00000078   340088E5           STR      R0,[R8, #+52]
   1047          			zi->ci.stream.next_out = zi->ci.buffered_data;
   \   0000007C   880084E2           ADD      R0,R4,#+136
   \   00000080   300088E5           STR      R0,[R8, #+48]
   1048          		}
   1049          		uTotalOutBefore = zi->ci.stream.total_out;
   \                     ??zipCloseFileInZipRaw_4:
   \   00000084   389098E5           LDR      R9,[R8, #+56]
   1050          		err=deflate(&zi->ci.stream,  Z_FINISH);
   \   00000088   0410A0E3           MOV      R1,#+4
   \   0000008C   300084E2           ADD      R0,R4,#+48
   \   00000090   ........           _BLF     deflate,??deflate??rA
   1051          		zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;
   \   00000094   381098E5           LDR      R1,[R8, #+56]
   \   00000098   0050A0E1           MOV      R5,R0
   \   0000009C   600098E5           LDR      R0,[R8, #+96]
   1052          	}
   \   000000A0   000055E3           CMP      R5,#+0
   \   000000A4   000081E0           ADD      R0,R1,R0
   \   000000A8   090040E0           SUB      R0,R0,R9
   \   000000AC   600088E5           STR      R0,[R8, #+96]
   \   000000B0   E9FFFF0A           BEQ      ??zipCloseFileInZipRaw_3
   1053          
   1054          	if (err==Z_STREAM_END)
   \   000000B4   010055E3           CMP      R5,#+1
   1055          		err=ZIP_OK; /* this is normal */
   \   000000B8   0050A003           MOVEQ    R5,#+0
   1056          
   1057          	if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))
   \                     ??zipCloseFileInZipRaw_2:
   \   000000BC   0C0084E2           ADD      R0,R4,#+12
   \   000000C0   600090E5           LDR      R0,[R0, #+96]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0500000A           BEQ      ??zipCloseFileInZipRaw_5
   \   000000CC   000055E3           CMP      R5,#+0
   \   000000D0   0300001A           BNE      ??zipCloseFileInZipRaw_5
   1058          		if (zipFlushWriteBuffer(zi)==ZIP_ERRNO)
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   ........           BL       zipFlushWriteBuffer
   \   000000DC   010070E3           CMN      R0,#+1
   1059          			err = ZIP_ERRNO;
   \   000000E0   0050E003           MVNEQ    R5,#+0
   1060          
   1061          	if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))
   \                     ??zipCloseFileInZipRaw_5:
   \   000000E4   0C0084E2           ADD      R0,R4,#+12
   \   000000E8   740090E5           LDR      R0,[R0, #+116]
   \   000000EC   080050E3           CMP      R0,#+8
   \   000000F0   0900001A           BNE      ??zipCloseFileInZipRaw_6
   \   000000F4   0C0084E2           ADD      R0,R4,#+12
   \   000000F8   780090E5           LDR      R0,[R0, #+120]
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   0500001A           BNE      ??zipCloseFileInZipRaw_6
   1062          	{
   1063          		err=deflateEnd(&zi->ci.stream);
   \   00000104   300084E2           ADD      R0,R4,#+48
   \   00000108   ........           _BLF     deflateEnd,??deflateEnd??rA
   \   0000010C   0050A0E1           MOV      R5,R0
   1064          		zi->ci.stream_initialised = 0;
   \   00000110   0C0084E2           ADD      R0,R4,#+12
   \   00000114   0010A0E3           MOV      R1,#+0
   \   00000118   5C1080E5           STR      R1,[R0, #+92]
   1065          	}
   1066          
   1067          	if (!zi->ci.raw)
   \                     ??zipCloseFileInZipRaw_6:
   \   0000011C   0C0084E2           ADD      R0,R4,#+12
   \   00000120   780090E5           LDR      R0,[R0, #+120]
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   0400001A           BNE      ??zipCloseFileInZipRaw_7
   1068          	{
   1069          		crc32 = (uLong)zi->ci.crc32;
   \   0000012C   8C00A0E3           MOV      R0,#+140
   \   00000130   400C80E3           ORR      R0,R0,#0x4000
   \   00000134   047090E7           LDR      R7,[R0, +R4]
   1070          		uncompressed_size = (uLong)zi->ci.stream.total_in;
   \   00000138   0C0084E2           ADD      R0,R4,#+12
   \   0000013C   2C6090E5           LDR      R6,[R0, #+44]
   1071          	}
   1072          	compressed_size = (uLong)zi->ci.stream.total_out;
   1073          #	ifndef NOCRYPT
   1074          	compressed_size += zi->ci.crypt_header_size;
   \                     ??zipCloseFileInZipRaw_7:
   \   00000140   380098E5           LDR      R0,[R8, #+56]
   \   00000144   8C10A0E3           MOV      R1,#+140
   \   00000148   401C81E3           ORR      R1,R1,#0x4000
   \   0000014C   041081E0           ADD      R1,R1,R4
   \   00000150   181091E5           LDR      R1,[R1, #+24]
   1075          #	endif
   1076          
   1077          	ziplocal_putValue_inmemory(zi->ci.central_header+16,crc32,4); /*crc*/
   \   00000154   0420A0E3           MOV      R2,#+4
   \   00000158   009081E0           ADD      R9,R1,R0
   \   0000015C   680098E5           LDR      R0,[R8, #+104]
   \   00000160   0710A0E1           MOV      R1,R7
   \   00000164   100080E2           ADD      R0,R0,#+16
   \   00000168   ........           BL       ziplocal_putValue_inmemory
   1078          	ziplocal_putValue_inmemory(zi->ci.central_header+20,
   1079          								compressed_size,4); /*compr size*/
   \   0000016C   680098E5           LDR      R0,[R8, #+104]
   \   00000170   0420A0E3           MOV      R2,#+4
   \   00000174   0910A0E1           MOV      R1,R9
   \   00000178   140080E2           ADD      R0,R0,#+20
   \   0000017C   ........           BL       ziplocal_putValue_inmemory
   1080          	if (zi->ci.stream.data_type == Z_ASCII)
   \   00000180   500098E5           LDR      R0,[R8, #+80]
   \   00000184   010050E3           CMP      R0,#+1
   \   00000188   0500001A           BNE      ??zipCloseFileInZipRaw_8
   1081          		ziplocal_putValue_inmemory(zi->ci.central_header+36,(uLong)Z_ASCII,2);
   \   0000018C   0C0084E2           ADD      R0,R4,#+12
   \   00000190   680090E5           LDR      R0,[R0, #+104]
   \   00000194   0220A0E3           MOV      R2,#+2
   \   00000198   0110A0E3           MOV      R1,#+1
   \   0000019C   240080E2           ADD      R0,R0,#+36
   \   000001A0   ........           BL       ziplocal_putValue_inmemory
   1082          	ziplocal_putValue_inmemory(zi->ci.central_header+24,
   1083          								uncompressed_size,4); /*uncompr size*/
   \                     ??zipCloseFileInZipRaw_8:
   \   000001A4   0C0084E2           ADD      R0,R4,#+12
   \   000001A8   680090E5           LDR      R0,[R0, #+104]
   \   000001AC   0420A0E3           MOV      R2,#+4
   \   000001B0   0610A0E1           MOV      R1,R6
   \   000001B4   180080E2           ADD      R0,R0,#+24
   \   000001B8   ........           BL       ziplocal_putValue_inmemory
   1084          
   1085          	if (err==ZIP_OK)
   \   000001BC   000055E3           CMP      R5,#+0
   \   000001C0   0400001A           BNE      ??zipCloseFileInZipRaw_9
   1086          		err = add_data_in_datablock(&zi->central_dir,zi->ci.central_header,
   1087          									   (uLong)zi->ci.size_centralheader);
   \   000001C4   6C2098E5           LDR      R2,[R8, #+108]
   \   000001C8   681098E5           LDR      R1,[R8, #+104]
   \   000001CC   240084E2           ADD      R0,R4,#+36
   \   000001D0   ........           BL       add_data_in_datablock
   \   000001D4   0050A0E1           MOV      R5,R0
   1088          	mfree(zi->ci.central_header);
   \                     ??zipCloseFileInZipRaw_9:
   \   000001D8   0C0084E2           ADD      R0,R4,#+12
   \   000001DC   680090E5           LDR      R0,[R0, #+104]
   \   000001E0   040100EF           SWI      +260
   1089          
   1090          	if (err==ZIP_OK)
   \   000001E4   000055E3           CMP      R5,#+0
   \   000001E8   2E00001A           BNE      ??zipCloseFileInZipRaw_10
   1091          	{
   1092          		long cur_pos_inzip = ZTELL(zi->z_filefunc,zi->filestream);
   \   000001EC   100098E5           LDR      R0,[R8, #+16]
   \   000001F0   141098E5           LDR      R1,[R8, #+20]
   \   000001F4   002098E5           LDR      R2,[R8, #+0]
   \   000001F8   32FF2FE1           BLX      R2
   1093          		if (ZSEEK(zi->z_filefunc,zi->filestream,
   1094          				  zi->ci.pos_local_header + 14,ZLIB_FILEFUNC_SEEK_SET)!=0)
   \   000001FC   141098E5           LDR      R1,[R8, #+20]
   \   00000200   045098E5           LDR      R5,[R8, #+4]
   \   00000204   00A0A0E1           MOV      R10,R0
   \   00000208   640098E5           LDR      R0,[R8, #+100]
   \   0000020C   0030A0E3           MOV      R3,#+0
   \   00000210   0E2080E2           ADD      R2,R0,#+14
   \   00000214   100098E5           LDR      R0,[R8, #+16]
   \   00000218   35FF2FE1           BLX      R5
   \   0000021C   000050E3           CMP      R0,#+0
   1095          			err = ZIP_ERRNO;
   \   00000220   0050E013           MVNNE    R5,#+0
   \   00000224   1700001A           BNE      ??zipCloseFileInZipRaw_11
   1096          
   1097          		if (err==ZIP_OK)
   1098          			err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,crc32,4); /* crc 32, unknown */
   \   00000228   0430A0E3           MOV      R3,#+4
   \   0000022C   0720A0E1           MOV      R2,R7
   \   00000230   0C0084E2           ADD      R0,R4,#+12
   \   00000234   141090E5           LDR      R1,[R0, #+20]
   \   00000238   0400A0E1           MOV      R0,R4
   \   0000023C   ........           BL       ziplocal_putValue
   \   00000240   0050B0E1           MOVS     R5,R0
   1099          
   1100          		if (err==ZIP_OK) /* compressed size, unknown */
   \   00000244   0600001A           BNE      ??zipCloseFileInZipRaw_12
   1101          			err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,compressed_size,4);
   \   00000248   0430A0E3           MOV      R3,#+4
   \   0000024C   0920A0E1           MOV      R2,R9
   \   00000250   0C0084E2           ADD      R0,R4,#+12
   \   00000254   141090E5           LDR      R1,[R0, #+20]
   \   00000258   0400A0E1           MOV      R0,R4
   \   0000025C   ........           BL       ziplocal_putValue
   \   00000260   0050A0E1           MOV      R5,R0
   1102          
   1103          		if (err==ZIP_OK) /* uncompressed size, unknown */
   \                     ??zipCloseFileInZipRaw_12:
   \   00000264   000055E3           CMP      R5,#+0
   \   00000268   0600001A           BNE      ??zipCloseFileInZipRaw_11
   1104          			err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,uncompressed_size,4);
   \   0000026C   0430A0E3           MOV      R3,#+4
   \   00000270   0620A0E1           MOV      R2,R6
   \   00000274   0C0084E2           ADD      R0,R4,#+12
   \   00000278   141090E5           LDR      R1,[R0, #+20]
   \   0000027C   0400A0E1           MOV      R0,R4
   \   00000280   ........           BL       ziplocal_putValue
   \   00000284   0050A0E1           MOV      R5,R0
   1105          
   1106          		if (ZSEEK(zi->z_filefunc,zi->filestream,
   1107          				  cur_pos_inzip,ZLIB_FILEFUNC_SEEK_SET)!=0)
   \                     ??zipCloseFileInZipRaw_11:
   \   00000288   100098E5           LDR      R0,[R8, #+16]
   \   0000028C   141098E5           LDR      R1,[R8, #+20]
   \   00000290   046098E5           LDR      R6,[R8, #+4]
   \   00000294   0030A0E3           MOV      R3,#+0
   \   00000298   0A20A0E1           MOV      R2,R10
   \   0000029C   36FF2FE1           BLX      R6
   \   000002A0   000050E3           CMP      R0,#+0
   1108          			err = ZIP_ERRNO;
   \   000002A4   0050E013           MVNNE    R5,#+0
   \                     ??zipCloseFileInZipRaw_10:
   \   000002A8   8C00A0E3           MOV      R0,#+140
   \   000002AC   400C80E3           ORR      R0,R0,#0x4000
   \   000002B0   040080E0           ADD      R0,R0,R4
   \   000002B4   241090E5           LDR      R1,[R0, #+36]
   \   000002B8   011081E2           ADD      R1,R1,#+1
   \   000002BC   241080E5           STR      R1,[R0, #+36]
   1109          	}
   1110          
   1111          	zi->number_entry ++;
   1112          	zi->in_opened_file_inzip = 0;
   \   000002C0   0C0084E2           ADD      R0,R4,#+12
   \   000002C4   0010A0E3           MOV      R1,#+0
   \   000002C8   201080E5           STR      R1,[R0, #+32]
   1113          
   1114          	return err;
   \   000002CC   0500A0E1           MOV      R0,R5
   \   000002D0   F087BDE8           POP      {R4-R10,PC}      ;; return
   1115          }
   1116          

   \                                 In segment CODE, align 4, keep-with-next
   1117          extern int zipCloseFileInZip (zipFile file)
   1118          {
   1119          	return zipCloseFileInZipRaw (file,0,0);
   \                     zipCloseFileInZip:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   ........           B        zipCloseFileInZipRaw  ;; tailcall
   1120          }
   1121          

   \                                 In segment CODE, align 4, keep-with-next
   1122          extern int zipClose (
   1123          	zipFile file,
   1124          	const char* global_comment)
   1125          {
   \                     zipClose:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0170A0E1           MOV      R7,R1
   1126          	zip_internal* zi;
   1127          	int err = 0;
   \   0000000C   0060A0E3           MOV      R6,#+0
   1128          	uLong size_centraldir = 0;
   \   00000010   0050A0E3           MOV      R5,#+0
   1129          	uLong centraldir_pos_inzip;
   1130          	uInt size_global_comment;
   1131          	if (file == NULL)
   \   00000014   000054E3           CMP      R4,#+0
   1132          		return ZIP_PARAMERROR;
   \   00000018   6500E003           MVNEQ    R0,#+101
   \   0000001C   F087BD08           POPEQ    {R4-R10,PC}
   1133          	zi = (zip_internal*)file;
   1134          
   1135          	if (zi->in_opened_file_inzip == 1)
   \   00000020   080084E2           ADD      R0,R4,#+8
   \   00000024   240090E5           LDR      R0,[R0, #+36]
   \   00000028   010050E3           CMP      R0,#+1
   \   0000002C   0400001A           BNE      ??zipClose_0
   1136          	{
   1137          		err = zipCloseFileInZip (file);
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0210A0E1           MOV      R1,R2
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       zipCloseFileInZipRaw
   \   00000040   0060A0E1           MOV      R6,R0
   1138          	}
   1139          
   1140          #ifndef NO_ADDFILEINEXISTINGZIP
   1141          	if (global_comment==NULL)
   \                     ??zipClose_0:
   \   00000044   000057E3           CMP      R7,#+0
   \   00000048   0300001A           BNE      ??zipClose_1
   1142          		global_comment = zi->globalcomment;
   \   0000004C   AC00A0E3           MOV      R0,#+172
   \   00000050   400C80E3           ORR      R0,R0,#0x4000
   \   00000054   040080E0           ADD      R0,R0,R4
   \   00000058   087090E5           LDR      R7,[R0, #+8]
   1143          #endif
   1144          	if (global_comment==NULL)
   \                     ??zipClose_1:
   \   0000005C   000057E3           CMP      R7,#+0
   1145          		size_global_comment = 0;
   \   00000060   0080A003           MOVEQ    R8,#+0
   \   00000064   0200000A           BEQ      ??zipClose_2
   1146          	else
   1147          		size_global_comment = (uInt)strlen(global_comment);
   \   00000068   0700A0E1           MOV      R0,R7
   \   0000006C   5A0100EF           SWI      +346
   \   00000070   0080A0E1           MOV      R8,R0
   1148          
   1149          	centraldir_pos_inzip = ZTELL(zi->z_filefunc,zi->filestream);
   \                     ??zipClose_2:
   \   00000074   08C084E2           ADD      R12,R4,#+8
   \   00000078   14009CE5           LDR      R0,[R12, #+20]
   \   0000007C   18109CE5           LDR      R1,[R12, #+24]
   \   00000080   04209CE5           LDR      R2,[R12, #+4]
   \   00000084   32FF2FE1           BLX      R2
   \   00000088   0090A0E1           MOV      R9,R0
   1150          	if (err==ZIP_OK)
   \   0000008C   000056E3           CMP      R6,#+0
   \   00000090   1800001A           BNE      ??zipClose_3
   1151          	{
   1152          		linkedlist_datablock_internal* ldi = zi->central_dir.first_block ;
   \   00000094   080084E2           ADD      R0,R4,#+8
   \   00000098   1CA090E5           LDR      R10,[R0, #+28]
   \   0000009C   00005AE3           CMP      R10,#+0
   \   000000A0   0200001A           BNE      ??zipClose_4
   \   000000A4   130000EA           B        ??zipClose_3
   1153          		while (ldi!=NULL)
   1154          		{
   1155          			if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))
   \                     ??zipClose_5:
   \   000000A8   000056E3           CMP      R6,#+0
   \   000000AC   0C00001A           BNE      ??zipClose_6
   \                     ??zipClose_4:
   \   000000B0   08009AE5           LDR      R0,[R10, #+8]
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0900000A           BEQ      ??zipClose_6
   1156          				if (ZWRITE(zi->z_filefunc,zi->filestream,
   1157          						   ldi->data,ldi->filled_in_this_block)
   1158          							  !=ldi->filled_in_this_block )
   \   000000BC   08C084E2           ADD      R12,R4,#+8
   \   000000C0   18109CE5           LDR      R1,[R12, #+24]
   \   000000C4   0030A0E1           MOV      R3,R0
   \   000000C8   14009CE5           LDR      R0,[R12, #+20]
   \   000000CC   00C09CE5           LDR      R12,[R12, #+0]
   \   000000D0   10208AE2           ADD      R2,R10,#+16
   \   000000D4   3CFF2FE1           BLX      R12
   \   000000D8   08109AE5           LDR      R1,[R10, #+8]
   \   000000DC   010050E1           CMP      R0,R1
   1159          					err = ZIP_ERRNO;
   \   000000E0   0060E013           MVNNE    R6,#+0
   1160          
   1161          			size_centraldir += ldi->filled_in_this_block;
   \                     ??zipClose_6:
   \   000000E4   08009AE5           LDR      R0,[R10, #+8]
   1162          			ldi = ldi->next_datablock;
   \   000000E8   00A09AE5           LDR      R10,[R10, #+0]
   \   000000EC   055080E0           ADD      R5,R0,R5
   1163          		}
   \   000000F0   00005AE3           CMP      R10,#+0
   \   000000F4   EBFFFF1A           BNE      ??zipClose_5
   1164          	}
   1165          	free_datablock(zi->central_dir.first_block);
   \                     ??zipClose_3:
   \   000000F8   080084E2           ADD      R0,R4,#+8
   \   000000FC   1C0090E5           LDR      R0,[R0, #+28]
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   0500000A           BEQ      ??zipClose_7
   \                     ??zipClose_8:
   \   00000108   00A090E5           LDR      R10,[R0, #+0]
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   0000000A           BEQ      ??zipClose_9
   \   00000114   040100EF           SWI      +260
   \                     ??zipClose_9:
   \   00000118   0A00B0E1           MOVS     R0,R10
   \   0000011C   F9FFFF1A           BNE      ??zipClose_8
   1166          
   1167          	if (err==ZIP_OK) /* Magic End */
   \                     ??zipClose_7:
   \   00000120   000056E3           CMP      R6,#+0
   \   00000124   0600001A           BNE      ??zipClose_10
   1168          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)ENDHEADERMAGIC,4);
   \   00000128   D0219FE5           LDR      R2,??zipClose_11  ;; 0x6054b50
   \   0000012C   0430A0E3           MOV      R3,#+4
   \   00000130   080084E2           ADD      R0,R4,#+8
   \   00000134   181090E5           LDR      R1,[R0, #+24]
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   ........           BL       ziplocal_putValue
   \   00000140   0060A0E1           MOV      R6,R0
   1169          
   1170          	if (err==ZIP_OK) /* number of this disk */
   \                     ??zipClose_10:
   \   00000144   000056E3           CMP      R6,#+0
   \   00000148   0600001A           BNE      ??zipClose_12
   1171          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);
   \   0000014C   0230A0E3           MOV      R3,#+2
   \   00000150   0020A0E3           MOV      R2,#+0
   \   00000154   080084E2           ADD      R0,R4,#+8
   \   00000158   181090E5           LDR      R1,[R0, #+24]
   \   0000015C   0400A0E1           MOV      R0,R4
   \   00000160   ........           BL       ziplocal_putValue
   \   00000164   0060A0E1           MOV      R6,R0
   1172          
   1173          	if (err==ZIP_OK) /* number of the disk with the start of the central directory */
   \                     ??zipClose_12:
   \   00000168   000056E3           CMP      R6,#+0
   \   0000016C   0600001A           BNE      ??zipClose_13
   1174          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);
   \   00000170   0230A0E3           MOV      R3,#+2
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   080084E2           ADD      R0,R4,#+8
   \   0000017C   181090E5           LDR      R1,[R0, #+24]
   \   00000180   0400A0E1           MOV      R0,R4
   \   00000184   ........           BL       ziplocal_putValue
   \   00000188   0060A0E1           MOV      R6,R0
   1175          
   1176          	if (err==ZIP_OK) /* total number of entries in the central dir on this disk */
   \                     ??zipClose_13:
   \   0000018C   000056E3           CMP      R6,#+0
   \   00000190   0900001A           BNE      ??zipClose_14
   1177          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);
   \   00000194   0230A0E3           MOV      R3,#+2
   \   00000198   AC00A0E3           MOV      R0,#+172
   \   0000019C   400C80E3           ORR      R0,R0,#0x4000
   \   000001A0   040080E0           ADD      R0,R0,R4
   \   000001A4   042090E5           LDR      R2,[R0, #+4]
   \   000001A8   080084E2           ADD      R0,R4,#+8
   \   000001AC   181090E5           LDR      R1,[R0, #+24]
   \   000001B0   0400A0E1           MOV      R0,R4
   \   000001B4   ........           BL       ziplocal_putValue
   \   000001B8   0060A0E1           MOV      R6,R0
   1178          
   1179          	if (err==ZIP_OK) /* total number of entries in the central dir */
   \                     ??zipClose_14:
   \   000001BC   000056E3           CMP      R6,#+0
   \   000001C0   0900001A           BNE      ??zipClose_15
   1180          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);
   \   000001C4   0230A0E3           MOV      R3,#+2
   \   000001C8   AC00A0E3           MOV      R0,#+172
   \   000001CC   400C80E3           ORR      R0,R0,#0x4000
   \   000001D0   040080E0           ADD      R0,R0,R4
   \   000001D4   042090E5           LDR      R2,[R0, #+4]
   \   000001D8   080084E2           ADD      R0,R4,#+8
   \   000001DC   181090E5           LDR      R1,[R0, #+24]
   \   000001E0   0400A0E1           MOV      R0,R4
   \   000001E4   ........           BL       ziplocal_putValue
   \   000001E8   0060A0E1           MOV      R6,R0
   1181          
   1182          	if (err==ZIP_OK) /* size of the central directory */
   \                     ??zipClose_15:
   \   000001EC   000056E3           CMP      R6,#+0
   \   000001F0   0600001A           BNE      ??zipClose_16
   1183          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_centraldir,4);
   \   000001F4   0430A0E3           MOV      R3,#+4
   \   000001F8   0520A0E1           MOV      R2,R5
   \   000001FC   080084E2           ADD      R0,R4,#+8
   \   00000200   181090E5           LDR      R1,[R0, #+24]
   \   00000204   0400A0E1           MOV      R0,R4
   \   00000208   ........           BL       ziplocal_putValue
   \   0000020C   0060A0E1           MOV      R6,R0
   1184          
   1185          	if (err==ZIP_OK) /* offset of start of central directory with respect to the
   \                     ??zipClose_16:
   \   00000210   000056E3           CMP      R6,#+0
   \   00000214   0900001A           BNE      ??zipClose_17
   1186          							starting disk number */
   1187          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,
   1188          								(uLong)(centraldir_pos_inzip - zi->add_position_when_writting_offset),4);
   \   00000218   AC00A0E3           MOV      R0,#+172
   \   0000021C   400C80E3           ORR      R0,R0,#0x4000
   \   00000220   040090E7           LDR      R0,[R0, +R4]
   \   00000224   0430A0E3           MOV      R3,#+4
   \   00000228   002049E0           SUB      R2,R9,R0
   \   0000022C   080084E2           ADD      R0,R4,#+8
   \   00000230   181090E5           LDR      R1,[R0, #+24]
   \   00000234   0400A0E1           MOV      R0,R4
   \   00000238   ........           BL       ziplocal_putValue
   \   0000023C   0060A0E1           MOV      R6,R0
   1189          
   1190          	if (err==ZIP_OK) /* zipfile comment length */
   \                     ??zipClose_17:
   \   00000240   000056E3           CMP      R6,#+0
   \   00000244   0600001A           BNE      ??zipClose_18
   1191          		err = ziplocal_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_global_comment,2);
   \   00000248   0230A0E3           MOV      R3,#+2
   \   0000024C   0820A0E1           MOV      R2,R8
   \   00000250   080084E2           ADD      R0,R4,#+8
   \   00000254   181090E5           LDR      R1,[R0, #+24]
   \   00000258   0400A0E1           MOV      R0,R4
   \   0000025C   ........           BL       ziplocal_putValue
   \   00000260   0060A0E1           MOV      R6,R0
   1192          
   1193          	if ((err==ZIP_OK) && (size_global_comment>0))
   \                     ??zipClose_18:
   \   00000264   000056E3           CMP      R6,#+0
   \   00000268   0A00001A           BNE      ??zipClose_19
   \   0000026C   000058E3           CMP      R8,#+0
   \   00000270   0800000A           BEQ      ??zipClose_19
   1194          		if (ZWRITE(zi->z_filefunc,zi->filestream,
   1195          				   global_comment,size_global_comment) != size_global_comment)
   \   00000274   08C084E2           ADD      R12,R4,#+8
   \   00000278   14009CE5           LDR      R0,[R12, #+20]
   \   0000027C   18109CE5           LDR      R1,[R12, #+24]
   \   00000280   00509CE5           LDR      R5,[R12, #+0]
   \   00000284   0830A0E1           MOV      R3,R8
   \   00000288   0720A0E1           MOV      R2,R7
   \   0000028C   35FF2FE1           BLX      R5
   \   00000290   080050E1           CMP      R0,R8
   1196          				err = ZIP_ERRNO;
   \   00000294   0060E013           MVNNE    R6,#+0
   1197          
   1198          	if (ZCLOSE(zi->z_filefunc,zi->filestream) != 0)
   \                     ??zipClose_19:
   \   00000298   08C084E2           ADD      R12,R4,#+8
   \   0000029C   14009CE5           LDR      R0,[R12, #+20]
   \   000002A0   18109CE5           LDR      R1,[R12, #+24]
   \   000002A4   0C209CE5           LDR      R2,[R12, #+12]
   \   000002A8   32FF2FE1           BLX      R2
   \   000002AC   000050E3           CMP      R0,#+0
   \   000002B0   0100000A           BEQ      ??zipClose_20
   1199          		if (err == ZIP_OK)
   \   000002B4   000056E3           CMP      R6,#+0
   1200          			err = ZIP_ERRNO;
   \   000002B8   0060E003           MVNEQ    R6,#+0
   1201          
   1202          #ifndef NO_ADDFILEINEXISTINGZIP
   1203          	TRYFREE(zi->globalcomment);
   \                     ??zipClose_20:
   \   000002BC   AC00A0E3           MOV      R0,#+172
   \   000002C0   400C80E3           ORR      R0,R0,#0x4000
   \   000002C4   040080E0           ADD      R0,R0,R4
   \   000002C8   080090E5           LDR      R0,[R0, #+8]
   \   000002CC   000050E3           CMP      R0,#+0
   \   000002D0   0400000A           BEQ      ??zipClose_21
   \   000002D4   AC00A0E3           MOV      R0,#+172
   \   000002D8   400C80E3           ORR      R0,R0,#0x4000
   \   000002DC   040080E0           ADD      R0,R0,R4
   \   000002E0   080090E5           LDR      R0,[R0, #+8]
   \   000002E4   040100EF           SWI      +260
   1204          #endif
   1205          	TRYFREE(zi);
   \                     ??zipClose_21:
   \   000002E8   000054E3           CMP      R4,#+0
   \   000002EC   0100000A           BEQ      ??zipClose_22
   \   000002F0   0400A0E1           MOV      R0,R4
   \   000002F4   040100EF           SWI      +260
   1206          
   1207          	return err;
   \                     ??zipClose_22:
   \   000002F8   0600A0E1           MOV      R0,R6
   \   000002FC   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??zipClose_11:
   \   00000300   504B0506           DC32     0x6054b50
   1208          }

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2D00               DC8 "-"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "1.2.3">`:
   \   00000000   312E322E3300       DC8 "1.2.3"
   \   00000006   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function                   CSTACK
     --------                   ------
     add_data_in_datablock         20
     crypthead                     48
     update_keys                    0
     zipClose                      32
     zipCloseFileInZip              4
     zipCloseFileInZipRaw          32
     zipFlushWriteBuffer           24
     zipOpen                        8
     zipOpen2                   16636
     zipOpenNewFileInZip           76
     zipOpenNewFileInZip2          80
     zipOpenNewFileInZip3          72
     zipWriteInFileInZip           20
     ziplocal_SearchCentralDir     40
     ziplocal_getByte              20
     ziplocal_getLong              24
     ziplocal_getShort             24
     ziplocal_putValue             12
     ziplocal_putValue_inmemory     0


   Segment part sizes:

     Function/Label             Bytes
     --------------             -----
     zip_copyright                80
     update_keys                 112
     crypthead                   508
     calls                         4
     add_data_in_datablock       276
     ziplocal_putValue           144
     ziplocal_putValue_inmemory   84
     ziplocal_getByte             92
     ziplocal_getShort            80
     ziplocal_getLong            144
     ziplocal_SearchCentralDir   324
     zipOpen2                   1180
     zipOpen                      20
     zipOpenNewFileInZip3       1880
     zipOpenNewFileInZip2        104
     zipOpenNewFileInZip         104
     zipFlushWriteBuffer         216
     zipWriteInFileInZip         404
     zipCloseFileInZipRaw        724
     zipCloseFileInZip            12
     zipClose                    772
     ?<Constant "-">               2
     ?<Constant "1.2.3">           8
      Others                     184

 
 7 352 bytes in segment CODE
    90 bytes in segment DATA_C
     4 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
 7 180 bytes of CODE  memory (+ 184 bytes shared)
    90 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
