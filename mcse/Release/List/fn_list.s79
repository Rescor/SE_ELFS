//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:46:58 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\fn_list. /
//                       cpp                                                 /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\fn_list. /
//                       cpp -D NDEBUG -D USEZLIB -D OLDFUNCTIONS -lCN       /
//                       Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\ -la Z:\home\perk11\www\perk11.info\svn\SE\mcs /
//                       e\Release\List\ -o Z:\home\perk11\www\perk11.info\s /
//                       vn\SE\mcse\Release\Obj\ -s9 --no_unroll             /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h --preinclude Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\mcse\..\deleaker\mem2.h -I                     /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\mcse\Release\ /
//                       List\fn_list.s79                                    /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME fn_list

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
        PUBLIC ??DestroyPathBuf
        FUNCTION ??DestroyPathBuf,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??DestroyPathBuf??rT
        MULTWEAK ??EnumFiles??rA
        PUBLIC ??GetPathBuf
        FUNCTION ??GetPathBuf,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??GetPathBuf??rT
        PUBLIC ??_fn_fill
        FUNCTION ??_fn_fill,0603H
        LOCFRAME CSTACK, 36, STACK
        MULTWEAK ??_fn_fill??rT
        PUBLIC ??fn_add
        FUNCTION ??fn_add,0203H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??fn_add??rT
        PUBLIC ??fn_fill
        FUNCTION ??fn_fill,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??fn_fill??rT
        PUBLIC ??fn_free
        FUNCTION ??fn_free,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??fn_free??rT
        PUBLIC ??fn_inlist
        FUNCTION ??fn_inlist,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??fn_inlist??rT
        PUBLIC ??fn_rev
        FUNCTION ??fn_rev,0203H
        MULTWEAK ??fn_rev??rT
        PUBLIC ??fn_zero
        FUNCTION ??fn_zero,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??fn_zero??rT
        MULTWEAK ??isdir??rA
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        PUBWEAK ?init?tab?DATA_Z
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        






??DestroyPathBuf??rT SYMBOL "??rT", ??DestroyPathBuf
??EnumFiles??rA     SYMBOL "??rA", ??EnumFiles

??GetPathBuf??rT    SYMBOL "??rT", ??GetPathBuf

??_fn_fill??rT      SYMBOL "??rT", ??_fn_fill

??fn_add??rT        SYMBOL "??rT", ??fn_add

??fn_fill??rT       SYMBOL "??rT", ??fn_fill

??fn_free??rT       SYMBOL "??rT", ??fn_free

??fn_inlist??rT     SYMBOL "??rT", ??fn_inlist

??fn_rev??rT        SYMBOL "??rT", ??fn_rev

??fn_zero??rT       SYMBOL "??rT", ??fn_zero
??isdir??rA         SYMBOL "??rA", ??isdir
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

        EXTERN ??EnumFiles
        FUNCTION ??EnumFiles,0202H
        EXTERN ??isdir
        FUNCTION ??isdir,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN _ls_ls


        RSEG DATA_Z:DATA:SORT:NOROOT(2)
st_pathbuf_fn:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetPathBuf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??GetPathBuf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??GetPathBuf
        ARM
??GetPathBuf:
        LDR      R0,??DataTable4  ;; st_pathbuf_fn
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        LDRNE    R0,??DataTable4  ;; st_pathbuf_fn
        LDRNE    R0,[R0, #+0]
        POPNE    {R4,PC}
        LDR      R4,??DataTable4  ;; st_pathbuf_fn
        MOV      R0,#+512
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R4, #+0]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??DestroyPathBuf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??DestroyPathBuf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??DestroyPathBuf
        ARM
??DestroyPathBuf:
        LDR      R0,??DataTable4  ;; st_pathbuf_fn
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        POPEQ    {R4,PC}
        LDR      R4,??DataTable4  ;; st_pathbuf_fn
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R0,#+0
        STR      R0,[R4, #+0]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     st_pathbuf_fn

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??fn_zero??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??fn_zero

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??fn_zero
        ARM
??fn_zero:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R2,#+12
        MOV      R1,#+0
        SWI      +274
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??fn_free??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??fn_free

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??fn_free
        ARM
??fn_free:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOVS     R4,R0
        POPEQ    {R4,R5,PC}
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        BNE      ??fn_free_1
        POP      {R4,R5,PC}
??fn_free_2:
        MOV      R5,R0
        LDR      R0,[R5, #+12]
        STR      R0,[R4, #+8]
        LDR      R0,[R5, #+8]
        CMP      R0,#+0
        BEQ      ??fn_free_3
        _BLF     `??operator delete`,`??operator delete??rA`
??fn_free_3:
        LDR      R0,[R5, #+16]
        CMP      R0,#+0
        BEQ      ??fn_free_4
        _BLF     `??operator delete`,`??operator delete??rA`
??fn_free_4:
        MOV      R0,R5
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R0,[R4, #+0]
        SUB      R0,R0,#+1
        STR      R0,[R4, #+0]
??fn_free_1:
        LDR      R0,[R4, #+8]
        CMP      R0,#+0
        BNE      ??fn_free_2
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??fn_rev??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??fn_rev

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??fn_rev
        ARM
??fn_rev:
        CMP      R0,#+0
        LDRNE    R1,[R0, #+0]
        CMPNE    R1,#+0
        BXEQ     LR
        LDR      R1,[R0, #+8]
        LDR      R2,[R1, #+12]
        CMP      R2,#+0
        BXEQ     LR
??fn_rev_1:
        LDR      R3,[R2, #+12]
        STR      R3,[R1, #+12]
        LDR      R3,[R0, #+8]
        STR      R3,[R2, #+12]
        STR      R2,[R0, #+8]
        LDR      R2,[R1, #+12]
        CMP      R2,#+0
        BNE      ??fn_rev_1
        BX       LR               ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??fn_inlist??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??fn_inlist

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??fn_inlist
        ARM
??fn_inlist:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        CMP      R0,#+0
        MOV      R4,R1
        POPEQ    {R4,R5,PC}
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        BNE      ??fn_inlist_1
??fn_inlist_2:
        MOV      R0,#+0
        POP      {R4,R5,PC}
??fn_inlist_1:
        LDR      R5,[R0, #+8]
        B        ??fn_inlist_3
??fn_inlist_4:
        LDR      R5,[R5, #+12]
??fn_inlist_3:
        CMP      R5,#+0
        BEQ      ??fn_inlist_2
        LDR      R0,[R5, #+8]
        MOV      R1,R4
        SWI      +342
        CMP      R0,#+0
        BNE      ??fn_inlist_4
        MOV      R0,#+1
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??fn_add??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??fn_add

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??fn_add
        ARM
??fn_add:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R4,R0
        LDR      R8,[SP, #+28]
        LDR      R9,[SP, #+32]
        MOV      R7,R1
        MOV      R5,R2
        MOV      R6,R3
        CMP      R4,#+0
        POPEQ    {R4-R9,PC}
        LDR      R0,[R4, #+4]
        CMP      R7,R0
        BEQ      ??fn_add_1
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        BEQ      ??fn_add_2
        MOV      R0,R4
        BL       ??fn_free
??fn_add_2:
        STR      R7,[R4, #+4]
??fn_add_1:
        MOV      R1,R8
        MOV      R0,R4
        BL       ??fn_inlist
        CMP      R0,#+0
        POPNE    {R4-R9,PC}
        MOV      R0,#+20
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R7,R0
        STR      R5,[R7, #+0]
        STR      R6,[R7, #+4]
        MOV      R0,R8
        SWI      +343
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R7, #+8]
        MOV      R1,R8
        SWI      +338
        CMP      R9,#+0
        BEQ      ??fn_add_3
        MOV      R0,R9
        SWI      +343
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R7, #+16]
        MOV      R1,R9
        SWI      +338
        B        ??fn_add_4
??fn_add_3:
        MOV      R0,#+0
        STR      R0,[R7, #+16]
??fn_add_4:
        LDR      R0,[R4, #+8]
        STR      R0,[R7, #+12]
        STR      R7,[R4, #+8]
        LDR      R0,[R4, #+0]
        ADD      R0,R0,#+1
        STR      R0,[R4, #+0]
        POP      {R4-R9,PC}       ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??_fn_fill??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??_fn_fill

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??_fn_fill
        ARM
??_fn_fill:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
        MOV      R7,R3
        BL       ??GetPathBuf
        MOVS     R8,R0
        BEQ      ??_fn_fill_1
        LDR      R0,[R6, #+0]
        LDR      R2,??_fn_fill_2  ;; _ls_ls
        TST      R0,#0x4000
        MOVNE    R6,#+1
        MOVEQ    R6,#+0
        PUSH     {R5}
        CFI CFA R13+28
        MOV      R3,R4
        MOV      R1,#+255
        MOV      R0,R8
        SWI      +277
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+32
        PUSH     {R8}
        CFI CFA R13+36
        MOV      R3,#+0
        MOV      R2,R6
        MOV      R1,#+1
        MOV      R0,R7
        BL       ??fn_add
        MOV      R0,#+1
        ADD      SP,SP,#+12
        CFI CFA R13+24
        POP      {R4-R8,PC}
??_fn_fill_1:
        MOV      R0,#+0
        POP      {R4-R8,PC}       ;; return
        DATA
??_fn_fill_2:
        DC32     _ls_ls
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??fn_fill??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??fn_fill

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??fn_fill
        ARM
??fn_fill:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        CMP      R4,#+0
        POPEQ    {R4-R6,PC}
        MOV      R0,R5
        _BLF     ??isdir,??isdir??rA
        CMP      R0,#+0
        BEQ      ??fn_fill_1
        LDR      R1,??fn_fill_2   ;; ??_fn_fill
        MOV      R2,R4
        MOV      R0,R5
        _BLF     ??EnumFiles,??EnumFiles??rA
        MOV      R6,#+1
        B        ??fn_fill_3
??fn_fill_1:
        MOV      R6,#+0
??fn_fill_3:
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+20
        PUSH     {R5}
        CFI CFA R13+24
        MOV      R3,#+0
        MOV      R2,R6
        MOV      R1,#+1
        MOV      R0,R4
        BL       ??fn_add
        ADD      SP,SP,#+8
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        DATA
??fn_fill_2:
        DC32     ??_fn_fill
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine9_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine9_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine10_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine10_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine11_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine11_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI NoFunction
        ARM
??isdir??rA:
        LDR      R12,??Subroutine12_0  ;; ??isdir
        BX       R12
        DATA
??Subroutine12_0:
        DC32     ??isdir
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
??EnumFiles??rA:
        LDR      R12,??Subroutine13_0  ;; ??EnumFiles
        BX       R12
        DATA
??Subroutine13_0:
        DC32     ??EnumFiles
        CFI EndBlock cfiBlock22

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
// 928 bytes in segment CODE
//   4 bytes in segment DATA_Z
//  12 bytes in segment INITTAB
// 
// 832 bytes of CODE memory (+ 108 bytes shared)
//   4 bytes of DATA memory
//
//Errors: none
//Warnings: none
