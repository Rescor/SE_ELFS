//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:41:49 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\GpsMAP\read_i /
//                       ni.c                                                /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\GpsMAP\read_i /
//                       ni.c -D NDEBUG -D OLDFUNCTIONS -lCN                 /
//                       Z:\home\perk11\www\perk11.info\svn\SE\GpsMAP\Releas /
//                       e\List\ -la Z:\home\perk11\www\perk11.info\svn\SE\G /
//                       psMAP\Release\List\ -o Z:\home\perk11\www\perk11.in /
//                       fo\svn\SE\GpsMAP\Release\Obj\ -s9 --no_unroll       /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\GpsMAP\Releas /
//                       e\List\read_ini.s79                                 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME read_ini

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        MULTWEAK ??DestroyCsvList??rA
        PUBLIC ??MainIniDeInit
        FUNCTION ??MainIniDeInit,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??MainIniDeInit??rT
        PUBLIC ??MainIniInit
        FUNCTION ??MainIniInit,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??MainIniInit??rT
        PUBLIC ??ReadMainIni
        FUNCTION ??ReadMainIni,0203H
        LOCFRAME CSTACK, 96, STACK
        MULTWEAK ??ReadMainIni??rT
        MULTWEAK ??__fAdd??rA
        MULTWEAK ??__fDiv??rA
        PUBLIC ??find_eol
        FUNCTION ??find_eol,0203H
        MULTWEAK ??find_eol??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        PUBLIC ??skip_probel
        FUNCTION ??skip_probel,0203H
        MULTWEAK ??skip_probel??rT
        PUBLIC ??str_tof
        FUNCTION ??str_tof,0203H
        LOCFRAME CSTACK, 76, STACK
        MULTWEAK ??str_tof??rT
        MULTWEAK ??strtof??rA
        MULTWEAK ??strtol??rA
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        




__fAdd              SYMBOL "__fAdd"
__fDiv              SYMBOL "__fDiv"
strtof              SYMBOL "strtof"
strtol              SYMBOL "strtol"
??DestroyCsvList??rA SYMBOL "??rA", ??DestroyCsvList

??MainIniDeInit??rT SYMBOL "??rT", ??MainIniDeInit

??MainIniInit??rT   SYMBOL "??rT", ??MainIniInit

??ReadMainIni??rT   SYMBOL "??rT", ??ReadMainIni
??__fAdd??rA        SYMBOL "??rA", __fAdd
??__fDiv??rA        SYMBOL "??rA", __fDiv

??find_eol??rT      SYMBOL "??rT", ??find_eol
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

??skip_probel??rT   SYMBOL "??rT", ??skip_probel

??str_tof??rT       SYMBOL "??rT", ??str_tof
??strtof??rA        SYMBOL "??rA", strtof
??strtol??rA        SYMBOL "??rA", strtol

        EXTERN ??DestroyCsvList
        FUNCTION ??DestroyCsvList,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN __fAdd
        FUNCTION __fAdd,010202H
        EXTERN __fDiv
        FUNCTION __fDiv,010202H
        EXTERN strtof
        FUNCTION strtof,0202H
        EXTERN strtol
        FUNCTION strtol,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??MainIniInit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??MainIniInit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??MainIniInit
        ARM
??MainIniInit:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        SWI      +361
        STR      R0,[R4, #+0]
        MOV      R0,#+0
        STR      R0,[R4, #+4]
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        B        ??ReadMainIni    ;; tailcall
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??MainIniDeInit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??MainIniDeInit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??MainIniDeInit
        ARM
??MainIniDeInit:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        LDR      R0,[R4, #+0]
        LDRH     R0,[R0, #+2]
        CMP      R0,#+0
        BEQ      ??MainIniDeInit_1
??MainIniDeInit_2:
        LDR      R0,[R4, #+0]
        MOV      R1,#+0
        SWI      +377
        MOV      R5,R0
        _BLF     ??DestroyCsvList,??DestroyCsvList??rA
        LDR      R0,[R5, #+48]
        SWI      +362
        LDR      R0,[R5, #+0]
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R0,[R4, #+0]
        LDRH     R0,[R0, #+2]
        CMP      R0,#+0
        BNE      ??MainIniDeInit_2
??MainIniDeInit_1:
        LDR      R0,[R4, #+0]
        SWI      +362
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??find_eol??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??find_eol

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??find_eol
        ARM
??find_eol:
        SUB      R0,R0,#+1
??find_eol_1:
        LDRB     R1,[R0, #+1]!
        CMP      R1,#+0
        CMPNE    R1,#+13
        CMPNE    R1,#+10
        BNE      ??find_eol_1
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??str_tof??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??str_tof

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??str_tof
        ARM
??str_tof:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB      SP,SP,#+64
        CFI CFA R13+76
        MOV      R4,#+0
        MOV      R5,R0
        MOV      R0,SP
        B        ??str_tof_1
??str_tof_2:
        CMP      R1,#+58
        BLT      ??str_tof_3
??str_tof_4:
        ADD      R5,R5,#+1
??str_tof_1:
        LDRB     R1,[R5, #+0]
        CMP      R1,#+176
        BEQ      ??str_tof_5
        CMP      R1,#+48
        BGE      ??str_tof_2
        CMP      R1,#+46
        BNE      ??str_tof_6
??str_tof_3:
        STRB     R1,[R0], #+1
??str_tof_6:
        CMP      R1,#+0
        BNE      ??str_tof_4
??str_tof_5:
        MOV      R1,#+0
        STRB     R1,[R0, #+0]
        MOV      R1,SP
        CMP      R0,R1
        BEQ      ??str_tof_7
        MOV      R1,#+0
        MOV      R0,SP
        _BLF     strtof,??strtof??rA
        MOV      R1,R4
        _BLF     __fAdd,??__fAdd??rA
        MOV      R4,R0
??str_tof_7:
        MOV      R0,SP
        B        ??str_tof_8
??str_tof_9:
        CMP      R1,#+58
        BLT      ??str_tof_10
??str_tof_11:
        ADD      R5,R5,#+1
??str_tof_8:
        LDRB     R1,[R5, #+0]
        CMP      R1,#+39
        BEQ      ??str_tof_12
        CMP      R1,#+48
        BGE      ??str_tof_9
        CMP      R1,#+46
        BNE      ??str_tof_13
??str_tof_10:
        STRB     R1,[R0], #+1
??str_tof_13:
        CMP      R1,#+0
        BNE      ??str_tof_11
??str_tof_12:
        MOV      R1,#+0
        STRB     R1,[R0, #+0]
        MOV      R1,SP
        CMP      R0,R1
        BEQ      ??str_tof_14
        MOV      R1,#+0
        MOV      R0,SP
        _BLF     strtof,??strtof??rA
        MOV      R1,#+1073741824
        ORR      R1,R1,#0x2700000
        _BLF     __fDiv,??__fDiv??rA
        MOV      R1,R4
        _BLF     __fAdd,??__fAdd??rA
        MOV      R4,R0
??str_tof_14:
        MOV      R0,SP
        B        ??str_tof_15
??str_tof_16:
        CMP      R1,#+58
        BLT      ??str_tof_17
??str_tof_18:
        ADD      R5,R5,#+1
??str_tof_15:
        LDRB     R1,[R5, #+0]
        CMP      R1,#+34
        BEQ      ??str_tof_19
        CMP      R1,#+48
        BGE      ??str_tof_16
        CMP      R1,#+46
        BNE      ??str_tof_20
??str_tof_17:
        STRB     R1,[R0], #+1
??str_tof_20:
        CMP      R1,#+0
        BNE      ??str_tof_18
??str_tof_19:
        MOV      R1,#+0
        STRB     R1,[R0, #+0]
        MOV      R1,SP
        CMP      R0,R1
        BEQ      ??str_tof_21
        MOV      R1,#+0
        MOV      R0,SP
        _BLF     strtof,??strtof??rA
        MOV      R1,#+1157627904
        ORR      R1,R1,#0x610000
        _BLF     __fDiv,??__fDiv??rA
        MOV      R1,R4
        _BLF     __fAdd,??__fAdd??rA
        MOV      R4,R0
??str_tof_21:
        MOV      R0,R4
        ADD      SP,SP,#+64
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??skip_probel??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??skip_probel

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??skip_probel
        ARM
??skip_probel:
        SUB      R0,R0,#+1
??skip_probel_1:
        LDRB     R1,[R0, #+1]!
        CMP      R1,#+0
        BXEQ     LR
        CMP      R1,#+32
        CMPNE    R1,#+9
        BEQ      ??skip_probel_1
        BX       LR               ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??ReadMainIni??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??ReadMainIni

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??ReadMainIni
        ARM
??ReadMainIni:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        SUB      SP,SP,#+60
        CFI CFA R13+92
        MOV      R5,R0
        MOV      R6,#+0
        MOV      R0,#+20
        SWI      +261
        LDR      R1,??ReadMainIni_2  ;; `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\`
        ADD      R2,SP,#+32
        SWI      +284
        CMP      R0,#+0
        BMI      ??ReadMainIni_3
        LDR      R9,[SP, #+40]
        CMP      R9,#+1
        BLT      ??ReadMainIni_3
        MOV      R0,#+20
        SWI      +261
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+96
        MOV      R3,#+384
        LDR      R1,??ReadMainIni_2  ;; `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\`
        MOV      R2,#+1
        SWI      +278
        MOVS     R4,R0
        ADD      SP,SP,#+4
        CFI CFA R13+92
        BMI      ??ReadMainIni_3
        ADD      R0,R9,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R7,R0
        MOVS     R8,R7
        BEQ      ??ReadMainIni_4
        MOV      R2,R9
        MOV      R1,R7
        MOV      R0,R4
        SWI      +280
        MOV      R1,#+0
        STRB     R1,[R0, +R7]
        B        ??ReadMainIni_5
??ReadMainIni_6:
        ADD      R8,R8,#+1
??ReadMainIni_5:
        LDRB     R0,[R8, #+0]
        CMP      R0,#+0
        BEQ      ??ReadMainIni_7
        CMP      R0,#+13
        CMPNE    R0,#+10
        BEQ      ??ReadMainIni_6
        CMP      R0,#+59
        BNE      ??ReadMainIni_8
??ReadMainIni_9:
        MOV      R0,R8
        BL       ??find_eol
        MOV      R8,R0
        B        ??ReadMainIni_5
??ReadMainIni_8:
        CMP      R0,#+91
        BNE      ??ReadMainIni_10
        LDR      R1,??ReadMainIni_2+0x4  ;; `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\` + 24
        MOV      R2,#+5
        ADD      R8,R8,#+1
        MOV      R0,R8
        SWI      +638
        CMP      R0,#+0
        BNE      ??ReadMainIni_10
        ADD      R8,R8,#+5
        CMP      R6,#+0
        BEQ      ??ReadMainIni_11
        LDR      R0,[R5, #+0]
        MOV      R1,R6
        SWI      +363
??ReadMainIni_11:
        MOV      R0,#+52
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R6,R0
        MOV      R2,#+52
        MOV      R1,#+0
        SWI      +274
        SWI      +361
        STR      R0,[R6, #+48]
        MOV      R2,#+10
        MOV      R1,#+0
        MOV      R0,R8
        _BLF     strtol,??strtol??rA
        STR      R0,[R6, #+4]
        B        ??ReadMainIni_9
??ReadMainIni_10:
        MOV      R0,R8
        BL       ??skip_probel
        LDR      R1,??ReadMainIni_2+0x8  ;; `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\` + 72
        MOV      R8,R0
        MOV      R2,#+4
        SWI      +638
        CMP      R0,#+0
        MOVEQ    R9,#+1
        MOVEQ    R0,#+4
        BEQ      ??ReadMainIni_12
        LDR      R1,??ReadMainIni_2+0xC  ;; `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\` + 60
        MOV      R2,#+9
        MOV      R0,R8
        SWI      +638
        CMP      R0,#+0
        BNE      ??ReadMainIni_13
        MOV      R9,#+2
??ReadMainIni_14:
        MOV      R0,#+9
        B        ??ReadMainIni_12
??ReadMainIni_13:
        LDR      R1,??ReadMainIni_2+0x10  ;; `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\` + 48
        MOV      R2,#+9
        MOV      R0,R8
        SWI      +638
        CMP      R0,#+0
        MOVEQ    R9,#+3
        BEQ      ??ReadMainIni_14
        LDR      R1,??ReadMainIni_2+0x14  ;; `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\` + 40
        MOV      R2,#+7
        MOV      R0,R8
        SWI      +638
        CMP      R0,#+0
        MOVEQ    R9,#+4
        BEQ      ??ReadMainIni_15
        LDR      R1,??ReadMainIni_2+0x18  ;; `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\` + 32
        MOV      R2,#+7
        MOV      R0,R8
        SWI      +638
        CMP      R0,#+0
        BNE      ??ReadMainIni_9
        MOV      R9,#+5
??ReadMainIni_15:
        MOV      R0,#+7
??ReadMainIni_12:
        ADD      R0,R0,R8
        BL       ??skip_probel
        MOV      R8,R0
        LDRB     R0,[R8, #+0]
        CMP      R0,#+61
        BNE      ??ReadMainIni_9
        ADD      R0,R8,#+1
        BL       ??skip_probel
        MOV      R8,R0
        BL       ??find_eol
        SUBS     R10,R0,R8
        BEQ      ??ReadMainIni_16
        CMP      R10,#+32
        MOVGE    R10,#+31
        MOV      R2,R10
        MOV      R1,R8
        MOV      R0,SP
        SWI      +639
        MOV      R0,SP
        MOV      R1,#+0
        B        ??ReadMainIni_17
??ReadMainIni_18:
        SUB      R10,R10,#+1
        MOV      R0,SP
??ReadMainIni_17:
        STRB     R1,[R10, +R0]
        ADD      R0,R10,R0
        LDRB     R0,[R0, #-1]
        CMP      R0,#+32
        BEQ      ??ReadMainIni_18
        MOV      R0,SP
        ADD      R0,R10,R0
        LDRB     R0,[R0, #-1]
        CMP      R0,#+9
        BEQ      ??ReadMainIni_18
??ReadMainIni_16:
        CMP      R6,#+0
        CMPNE    R10,#+0
        BEQ      ??ReadMainIni_9
        SUB      R9,R9,#+1
        CMP      R9,#+4
        BHI      ??ReadMainIni_9
        ADR      R0,??ReadMainIni_1
        LDRSB    R0,[R0, R9]
        ADD      PC,PC,R0, LSL #+2
        DATA
??ReadMainIni_1:
        DC8      +1,+11,+16,+21
        DC8      +26,+0,+0,+0
        ARM
??ReadMainIni_19:
        ADD      R0,R10,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R6, #+0]
        MOV      R2,R10
        MOV      R1,SP
        SWI      +639
        LDR      R0,[R6, #+0]
        MOV      R1,#+0
        STRB     R1,[R10, +R0]
        B        ??ReadMainIni_9
??ReadMainIni_20:
        MOV      R1,#+0
        MOV      R0,SP
        BL       ??str_tof
        STR      R0,[R6, #+8]
        B        ??ReadMainIni_9
??ReadMainIni_21:
        MOV      R1,#+0
        MOV      R0,SP
        BL       ??str_tof
        STR      R0,[R6, #+12]
        B        ??ReadMainIni_9
??ReadMainIni_22:
        MOV      R1,#+0
        MOV      R0,SP
        BL       ??str_tof
        STR      R0,[R6, #+16]
        B        ??ReadMainIni_9
??ReadMainIni_23:
        MOV      R1,#+0
        MOV      R0,SP
        BL       ??str_tof
        STR      R0,[R6, #+20]
        B        ??ReadMainIni_9
??ReadMainIni_7:
        CMP      R6,#+0
        BEQ      ??ReadMainIni_24
        LDR      R0,[R5, #+0]
        MOV      R1,R6
        SWI      +363
??ReadMainIni_24:
        MOV      R0,R7
        _BLF     `??operator delete`,`??operator delete??rA`
??ReadMainIni_4:
        MOV      R0,R4
        SWI      +279
??ReadMainIni_3:
        ADD      SP,SP,#+60       ;; stack cleaning
        CFI CFA R13+32
        POP      {R4-R10,PC}      ;; return
        DATA
??ReadMainIni_2:
        DC32     `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\`
        DC32     `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\` + 24
        DC32     `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\` + 72
        DC32     `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\` + 60
        DC32     `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\` + 48
        DC32     `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\` + 40
        DC32     `?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\` + 32
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI NoFunction
        ARM
??DestroyCsvList??rA:
        LDR      R12,??Subroutine6_0  ;; ??DestroyCsvList
        BX       R12
        DATA
??Subroutine6_0:
        DC32     ??DestroyCsvList
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine7_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine7_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        ARM
??strtof??rA:
        LDR      R12,??Subroutine8_0  ;; strtof
        BX       R12
        DATA
??Subroutine8_0:
        DC32     strtof
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        ARM
??__fAdd??rA:
        LDR      R3,??Subroutine9_0  ;; __fAdd
        BX       R3
        DATA
??Subroutine9_0:
        DC32     __fAdd
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
??__fDiv??rA:
        LDR      R3,??Subroutine10_0  ;; __fDiv
        BX       R3
        DATA
??Subroutine10_0:
        DC32     __fDiv
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine11_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine11_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine12_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine12_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock18

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        ARM
??strtol??rA:
        LDR      R12,??Subroutine13_0  ;; strtol
        BX       R12
        DATA
??Subroutine13_0:
        DC32     strtol
        CFI EndBlock cfiBlock19

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x47\\x70\\x73\\x4d\\x41\\x50\\x2e\\x69\\`:
        DATA
        DC8 47H, 0, 70H, 0, 73H, 0, 4DH, 0
        DC8 41H, 0, 50H, 0, 2EH, 0, 69H, 0
        DC8 6EH, 0, 69H, 0, 0, 0
        DC8 0, 0
        DC8 "Town "
        DC8 0, 0
        DC8 "MapEndY"
        DC8 "MapEndX"
        DC8 "MapStartY"
        DC8 0, 0
        DC8 "MapStartX"
        DC8 0, 0
        DC8 "Name"
        DC8 0, 0, 0

        END
// 
// 1 516 bytes in segment CODE
//    80 bytes in segment DATA_C
// 
// 1 396 bytes of CODE  memory (+ 120 bytes shared)
//    80 bytes of CONST memory
//
//Errors: none
//Warnings: 1
