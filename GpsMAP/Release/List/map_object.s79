//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:41:36 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\GpsMAP\map_ob /
//                       ject.c                                              /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\GpsMAP\map_ob /
//                       ject.c -D NDEBUG -D OLDFUNCTIONS -lCN               /
//                       Z:\home\perk11\www\perk11.info\svn\SE\GpsMAP\Releas /
//                       e\List\ -la Z:\home\perk11\www\perk11.info\svn\SE\G /
//                       psMAP\Release\List\ -o Z:\home\perk11\www\perk11.in /
//                       fo\svn\SE\GpsMAP\Release\Obj\ -s9 --no_unroll       /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\GpsMAP\Releas /
//                       e\List\map_object.s79                               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME map_object

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
        PUBLIC ??CreateMapGUI
        FUNCTION ??CreateMapGUI,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??CreateMapGUI??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable5 EQU 0
        PUBLIC ??DeInitDirPng
        FUNCTION ??DeInitDirPng,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??DeInitDirPng??rT
        MULTWEAK ??Destr_Png??rA
        PUBLIC ??FillScreenBuffer
        FUNCTION ??FillScreenBuffer,0203H
        LOCFRAME CSTACK, 88, STACK
        MULTWEAK ??FillScreenBuffer??rT
        MULTWEAK ??FindTownByCiLac??rA
        PUBLIC ??GetCid_ByCh
        FUNCTION ??GetCid_ByCh,0203H
        MULTWEAK ??GetCid_ByCh??rT
        PUBLIC ??GetLac_ByCh
        FUNCTION ??GetLac_ByCh,0203H
        MULTWEAK ??GetLac_ByCh??rT
        PUBLIC ??GetRxLev_ByCh
        FUNCTION ??GetRxLev_ByCh,0203H
        MULTWEAK ??GetRxLev_ByCh??rT
        PUBLIC ??InitDirPng
        FUNCTION ??InitDirPng,0203H
        LOCFRAME CSTACK, 324, STACK
        MULTWEAK ??InitDirPng??rT
        MULTWEAK ??InitPng??rA
        MULTWEAK ??MainIniDeInit??rA
        MULTWEAK ??MainIniInit??rA
        PUBLIC ??MapGuiOnClose
        FUNCTION ??MapGuiOnClose,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??MapGuiOnClose??rT
        PUBLIC ??MapGuiOnCreate
        FUNCTION ??MapGuiOnCreate,0603H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??MapGuiOnCreate??rT
        PUBLIC ??MapGuiOnKey
        FUNCTION ??MapGuiOnKey,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??MapGuiOnKey??rT
        PUBLIC ??MapGuiOnRedraw
        FUNCTION ??MapGuiOnRedraw,0603H
        LOCFRAME CSTACK, 180, STACK
        MULTWEAK ??MapGuiOnRedraw??rT
        PUBLIC ??MapGui_constr
        FUNCTION ??MapGui_constr,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??MapGui_constr??rT
        PUBLIC ??MapGui_destr
        FUNCTION ??MapGui_destr,0603H
        MULTWEAK ??MapGui_destr??rT
        PUBLIC ??PngCmpProc
        FUNCTION ??PngCmpProc,0603H
        MULTWEAK ??PngCmpProc??rT
        PUBLIC ??ReadPngFile
        FUNCTION ??ReadPngFile,0203H
        LOCFRAME CSTACK, 324, STACK
        MULTWEAK ??ReadPngFile??rT
        PUBLIC ??RecalkPos
        FUNCTION ??RecalkPos,0203H
        LOCFRAME CSTACK, 40, STACK
        MULTWEAK ??RecalkPos??rT
        MULTWEAK ??RemovePngListElement??rA
        MULTWEAK ??__fAdd??rA
        MULTWEAK ??__fDiv??rA
        MULTWEAK ??__fMul??rA
        MULTWEAK ??__fSub??rA
        MULTWEAK ??__floatToDouble??rA
        MULTWEAK ??__floatToLong??rA
        MULTWEAK ??__longToFloat??rA
        MULTWEAK ??get_png_info??rA
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        MULTWEAK ??powf??rA
        MULTWEAK ??process_data??rA
        PUBWEAK ?init?tab?DATA_I
        PUBLIC CurNetData
        PUBLIC NetData
        PUBLIC str_id
        PUBLIC x1_map_real
        PUBLIC x2_map_real
        PUBLIC y1_map_real
        PUBLIC y2_map_real
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        











__fAdd              SYMBOL "__fAdd"
__fDiv              SYMBOL "__fDiv"
__fMul              SYMBOL "__fMul"
__fSub              SYMBOL "__fSub"
__floatToDouble     SYMBOL "__floatToDouble"
__floatToLong       SYMBOL "__floatToLong"
__longToFloat       SYMBOL "__longToFloat"
powf                SYMBOL "powf"

??CreateMapGUI??rT  SYMBOL "??rT", ??CreateMapGUI

??DeInitDirPng??rT  SYMBOL "??rT", ??DeInitDirPng
??Destr_Png??rA     SYMBOL "??rA", ??Destr_Png

??FillScreenBuffer??rT SYMBOL "??rT", ??FillScreenBuffer
??FindTownByCiLac??rA SYMBOL "??rA", ??FindTownByCiLac

??GetCid_ByCh??rT   SYMBOL "??rT", ??GetCid_ByCh

??GetLac_ByCh??rT   SYMBOL "??rT", ??GetLac_ByCh

??GetRxLev_ByCh??rT SYMBOL "??rT", ??GetRxLev_ByCh

??InitDirPng??rT    SYMBOL "??rT", ??InitDirPng
??InitPng??rA       SYMBOL "??rA", ??InitPng
??MainIniDeInit??rA SYMBOL "??rA", ??MainIniDeInit
??MainIniInit??rA   SYMBOL "??rA", ??MainIniInit

??MapGuiOnClose??rT SYMBOL "??rT", ??MapGuiOnClose

??MapGuiOnCreate??rT SYMBOL "??rT", ??MapGuiOnCreate

??MapGuiOnKey??rT   SYMBOL "??rT", ??MapGuiOnKey

??MapGuiOnRedraw??rT SYMBOL "??rT", ??MapGuiOnRedraw

??MapGui_constr??rT SYMBOL "??rT", ??MapGui_constr

??MapGui_destr??rT  SYMBOL "??rT", ??MapGui_destr

??PngCmpProc??rT    SYMBOL "??rT", ??PngCmpProc

??ReadPngFile??rT   SYMBOL "??rT", ??ReadPngFile

??RecalkPos??rT     SYMBOL "??rT", ??RecalkPos
??RemovePngListElement??rA SYMBOL "??rA", ??RemovePngListElement
??__fAdd??rA        SYMBOL "??rA", __fAdd
??__fDiv??rA        SYMBOL "??rA", __fDiv
??__fMul??rA        SYMBOL "??rA", __fMul
??__fSub??rA        SYMBOL "??rA", __fSub
??__floatToDouble??rA SYMBOL "??rA", __floatToDouble
??__floatToLong??rA SYMBOL "??rA", __floatToLong
??__longToFloat??rA SYMBOL "??rA", __longToFloat
??get_png_info??rA  SYMBOL "??rA", ??get_png_info
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`
??powf??rA          SYMBOL "??rA", powf
??process_data??rA  SYMBOL "??rA", ??process_data

        EXTERN ??Destr_Png
        FUNCTION ??Destr_Png,0202H
        EXTERN ??FindBSByCiLac
        FUNCTION ??FindBSByCiLac,0602H
        EXTERN ??FindTownByCiLac
        FUNCTION ??FindTownByCiLac,0202H
        EXTERN ??InitPng
        FUNCTION ??InitPng,0202H
        EXTERN ??MainIniDeInit
        FUNCTION ??MainIniDeInit,0202H
        EXTERN ??MainIniInit
        FUNCTION ??MainIniInit,0202H
        EXTERN ??RemovePngListElement
        FUNCTION ??RemovePngListElement,0202H
        EXTERN ??get_png_info
        FUNCTION ??get_png_info,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN ??process_data
        FUNCTION ??process_data,0202H
        EXTERN FONT_E_20R
        EXTERN KBD_REPEAT
        EXTERN KBD_SHORT_RELEASE
        EXTERN KEY_DIGITAL_0
        EXTERN KEY_DOWN
        EXTERN KEY_LEFT
        EXTERN KEY_RIGHT
        EXTERN KEY_UP
        EXTERN __fAdd
        FUNCTION __fAdd,010202H
        EXTERN __fDiv
        FUNCTION __fDiv,010202H
        EXTERN __fMul
        FUNCTION __fMul,010202H
        EXTERN __fSub
        FUNCTION __fSub,010202H
        EXTERN __floatToDouble
        FUNCTION __floatToDouble,0202H
        EXTERN __floatToLong
        FUNCTION __floatToLong,0202H
        EXTERN __longToFloat
        FUNCTION __longToFloat,0202H
        EXTERN powf
        FUNCTION powf,010202H


        RSEG DATA_I:DATA:SORT:NOROOT(2)
x1_map_real:
        DS8 4
        REQUIRE `?<Initializer for x1_map_real>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
x2_map_real:
        DS8 4
        REQUIRE `?<Initializer for x2_map_real>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
y1_map_real:
        DS8 4
        REQUIRE `?<Initializer for y1_map_real>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
y2_map_real:
        DS8 4
        REQUIRE `?<Initializer for y2_map_real>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
NetData:
        DS8 4
        REQUIRE `?<Initializer for NetData>`
CurNetData:
        DS8 4
        REQUIRE `?<Initializer for CurNetData>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetRxLev_ByCh??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??GetRxLev_ByCh

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??GetRxLev_ByCh
        ARM
??GetRxLev_ByCh:
        CMP      R0,#+0
        MVNEQ    R0,#+79
        BXEQ     LR
        CMP      R0,#+8
        MVNGE    R0,#+119
        BXGE     LR
        LDR      R2,??DataTable4  ;; NetData
        MOV      R1,#+68
        LDR      R2,[R2, #+0]
        MLA      R0,R1,R0,R2
        LDRSB    R0,[R0, #-12]
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetCid_ByCh??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??GetCid_ByCh

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??GetCid_ByCh
        ARM
??GetCid_ByCh:
        CMP      R0,#+0
        BNE      ??GetCid_ByCh_1
        LDR      R0,??DataTable3  ;; NetData + 4
        LDR      R0,[R0, #+0]
        LDRH     R0,[R0, #+0]
        BX       LR
??GetCid_ByCh_1:
        CMP      R0,#+8
        MOVGE    R0,#+0
        BXGE     LR
        LDR      R2,??DataTable4  ;; NetData
        MOV      R1,#+68
        LDR      R2,[R2, #+0]
        MLA      R0,R1,R0,R2
        LDRH     R0,[R0, #-64]
        BX       LR               ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetLac_ByCh??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??GetLac_ByCh

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??GetLac_ByCh
        ARM
??GetLac_ByCh:
        CMP      R0,#+0
        BNE      ??GetLac_ByCh_1
        LDR      R0,??DataTable3  ;; NetData + 4
        LDR      R0,[R0, #+0]
        LDRB     R0,[R0, #+8]
        BX       LR
??GetLac_ByCh_1:
        CMP      R0,#+8
        MOVGE    R0,#+0
        BXGE     LR
        LDR      R2,??DataTable4  ;; NetData
        MOV      R1,#+68
        LDR      R2,[R2, #+0]
        MLA      R0,R1,R0,R2
        LDRB     R0,[R0, #-34]
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     NetData + 4

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     NetData

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??ReadPngFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??ReadPngFile

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??ReadPngFile
        ARM
??ReadPngFile:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        SUB      SP,SP,#+284
        CFI CFA R13+312
        MOV      R5,R0
        MOV      R8,R1
        MOV      R6,R2
        MOV      R7,R3
        LDR      R9,??DataTable6  ;; `?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\`
        MOV      R0,#+16
        SWI      +261
        MOV      R1,R8
        PUSH     {R1}
        CFI CFA R13+316
        MOV      R3,R0
        MOV      R2,R9
        ADD      R0,SP,#+32
        MOV      R1,#+63
        SWI      +277
        MOV      R0,R6
        PUSH     {R0}
        CFI CFA R13+320
        MOV      R4,#+0
        MOV      R3,R8
        ADD      R2,R9,#+28
        MOV      R0,R7
        PUSH     {R0}
        CFI CFA R13+324
        MOV      R1,#+63
        ADD      R0,SP,#+168
        SWI      +277
        ADD      R2,SP,#+12
        ADD      R1,SP,#+168
        ADD      R0,SP,#+40
        SWI      +284
        CMP      R0,#+0
        ADD      SP,SP,#+12
        CFI CFA R13+312
        BMI      ??ReadPngFile_1
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+316
        MOV      R3,#+384
        MOV      R2,#+1
        ADD      R1,SP,#+160
        ADD      R0,SP,#+32
        SWI      +278
        MOVS     R8,R0
        ADD      SP,SP,#+4
        CFI CFA R13+312
        BMI      ??ReadPngFile_1
        LDR      R0,[SP, #+8]
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOVS     R9,R0
        BEQ      ??ReadPngFile_1
        MOV      R2,R7
        MOV      R1,R6
        MOV      R0,R5
        _BLF     ??InitPng,??InitPng??rA
        LDR      R2,[SP, #+8]
        MOV      R5,R0
        MOV      R1,R9
        MOV      R0,R8
        SWI      +280
        MOV      R0,R8
        SWI      +279
        LDR      R2,[SP, #+8]
        MOV      R1,R9
        MOV      R0,R5
        _BLF     ??process_data,??process_data??rA
        MOV      R0,R5
        _BLF     ??Destr_Png,??Destr_Png??rA
        MOV      R0,R9
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R4,#+1
??ReadPngFile_1:
        MOV      R0,R4
        ADD      SP,SP,#+284
        CFI CFA R13+28
        POP      {R4-R9,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??InitDirPng??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??InitDirPng

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??InitDirPng
        ARM
??InitDirPng:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        SUB      SP,SP,#+292
        CFI CFA R13+320
        MOV      R4,R0
        MOV      R0,#+16
        SWI      +261
        LDR      R1,[R4, #+0]
        LDR      R2,??DataTable6  ;; `?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\`
        PUSH     {R1}
        CFI CFA R13+324
        MOV      R5,#+0
        MOV      R6,#+0
        MOV      R3,R0
        MOV      R1,#+63
        ADD      R0,SP,#+12
        SWI      +277
        MOV      R7,R5
        MOV      R8,R5
        ADD      SP,SP,#+4
        CFI CFA R13+320
??InitDirPng_1:
        LDR      R2,??InitDirPng_2  ;; `?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\` + 64
        MOV      R0,R7
        PUSH     {R0}
        CFI CFA R13+324
        LDR      R3,[R4, #+0]
        MOV      R1,#+63
        ADD      R0,SP,#+140
        SWI      +277
        ADD      R2,SP,#+268
        ADD      R1,SP,#+140
        ADD      R0,SP,#+12
        SWI      +284
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+320
        BMI      ??InitDirPng_3
        ADD      R7,R7,#+1
        CMP      R7,#+100
        BLT      ??InitDirPng_1
??InitDirPng_3:
        LDR      R2,??InitDirPng_2+0x4  ;; `?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\` + 96
        MOV      R0,R8
        PUSH     {R0}
        CFI CFA R13+324
        LDR      R3,[R4, #+0]
        MOV      R1,#+63
        ADD      R0,SP,#+140
        SWI      +277
        ADD      R2,SP,#+268
        ADD      R1,SP,#+140
        ADD      R0,SP,#+12
        SWI      +284
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+320
        BMI      ??InitDirPng_4
        ADD      R8,R8,#+1
        CMP      R8,#+100
        BLT      ??InitDirPng_3
??InitDirPng_4:
        LSL      R0,R7,#+2
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R4, #+40]
        LSL      R0,R8,#+2
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R4, #+44]
        MOV      R9,#+0
        CMP      R7,#+1
        BGE      ??InitDirPng_5
??InitDirPng_6:
        MOV      R9,#+0
        CMP      R8,#+1
        BGE      ??InitDirPng_7
??InitDirPng_8:
        STR      R7,[R4, #+32]
        STR      R8,[R4, #+36]
        STR      R5,[R4, #+24]
        STR      R6,[R4, #+28]
        ADD      SP,SP,#+292
        CFI CFA R13+28
        POP      {R4-R9,PC}       ;; return
        CFI CFA R13+320
??InitDirPng_9:
        LDR      R1,[R4, #+40]
        ADD      R5,R0,R5
        ADD      R1,R1,R9, LSL #+2
        STR      R0,[R1, #+0]
        ADD      R9,R9,#+1
??InitDirPng_5:
        CMP      R9,R7
        BGE      ??InitDirPng_6
        LDR      R2,??InitDirPng_2  ;; `?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\` + 64
        MOV      R0,R9
        PUSH     {R0}
        CFI CFA R13+324
        LDR      R3,[R4, #+0]
        MOV      R1,#+63
        ADD      R0,SP,#+140
        SWI      +277
        ADD      R3,SP,#+8
        ADD      R2,SP,#+4
        ADD      R1,SP,#+140
        ADD      R0,SP,#+12
        _BLF     ??get_png_info,??get_png_info??rA
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+320
        LDRNE    R0,[SP, #+0]
        MOVEQ    R0,#+0
        B        ??InitDirPng_9
??InitDirPng_10:
        LDR      R1,[R4, #+44]
        ADD      R6,R0,R6
        ADD      R1,R1,R9, LSL #+2
        STR      R0,[R1, #+0]
        ADD      R9,R9,#+1
??InitDirPng_7:
        CMP      R9,R8
        BGE      ??InitDirPng_8
        LDR      R2,??InitDirPng_2+0x4  ;; `?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\` + 96
        MOV      R0,R9
        PUSH     {R0}
        CFI CFA R13+324
        LDR      R3,[R4, #+0]
        MOV      R1,#+63
        ADD      R0,SP,#+140
        SWI      +277
        ADD      R3,SP,#+8
        ADD      R2,SP,#+4
        ADD      R1,SP,#+140
        ADD      R0,SP,#+12
        _BLF     ??get_png_info,??get_png_info??rA
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+320
        LDRNE    R0,[SP, #+4]
        MOVEQ    R0,#+0
        B        ??InitDirPng_10
        DATA
??InitDirPng_2:
        DC32     `?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\` + 64
        DC32     `?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\` + 96
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     `?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??DeInitDirPng??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??DeInitDirPng

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??DeInitDirPng
        ARM
??DeInitDirPng:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,[R4, #+40]
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R0,[R4, #+44]
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF      `??operator delete`,`??operator delete??rA`  ;; tailcall
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??PngCmpProc??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??PngCmpProc

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??PngCmpProc
        ARM
??PngCmpProc:
        LDR      R2,[R0, #+0]
        LDR      R3,[R1, #+0]
        CMP      R2,R3
        BNE      ??PngCmpProc_1
        LDR      R0,[R0, #+4]
        LDR      R1,[R1, #+4]
        CMP      R0,R1
        MOVEQ    R0,#+0
        BXEQ     LR
??PngCmpProc_1:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??RecalkPos??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??RecalkPos

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??RecalkPos
        ARM
??RecalkPos:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        SUB      SP,SP,#+8
        CFI CFA R13+40
        MOV      R4,R0
        MOV      R5,#+0
        MOV      R6,#+0
        MOV      R7,R5
        MOV      R8,#+1
??RecalkPos_1:
        MOV      R0,R8
        BL       ??GetCid_ByCh
        STR      R0,[SP, #+0]
        MOV      R0,R8
        BL       ??GetLac_ByCh
        LDR      R2,??RecalkPos_2  ;; ??FindBSByCiLac
        STR      R0,[SP, #+4]
        LDR      R0,[R4, #+400]
        MOV      R1,SP
        LDR      R0,[R0, #+48]
        SWI      +428
        MOV      R10,R0
        MOV      R0,#+255
        ORR      R0,R0,#0xFF00
        CMP      R10,R0
        BEQ      ??RecalkPos_3
        MOV      R0,R8
        BL       ??GetRxLev_ByCh
        MOV      R9,R0
        LDR      R0,[R4, #+400]
        MOV      R1,R10
        LDR      R0,[R0, #+48]
        SWI      +429
        LDR      R1,??RecalkPos_2+0x4  ;; 0x66666667
        MOV      R10,R0
        ADD      R0,R9,#+30
        SMULL    R2,R3,R1,R0
        ASR      R3,R3,#+1
        ADD      R0,R3,R0, LSR #+31
        _BLF     __longToFloat,??__longToFloat??rA
        MOV      R1,R0
        MOV      R0,#+1073741824
        ORR      R0,R0,#0x1200000
        _BLF     powf,??powf??rA
        MOV      R9,R0
        LDR      R0,[R10, #+4]
        MOV      R1,R9
        _BLF     __fMul,??__fMul??rA
        MOV      R1,R5
        _BLF     __fAdd,??__fAdd??rA
        MOV      R5,R0
        LDR      R0,[R10, #+8]
        MOV      R1,R9
        _BLF     __fMul,??__fMul??rA
        MOV      R1,R6
        _BLF     __fAdd,??__fAdd??rA
        MOV      R6,R0
        MOV      R0,R7
        MOV      R1,R9
        _BLF     __fAdd,??__fAdd??rA
        MOV      R7,R0
??RecalkPos_3:
        ADD      R8,R8,#+1
        CMP      R8,#+7
        BLT      ??RecalkPos_1
        MOV      R0,R5
        MOV      R1,R7
        _BLF     __fDiv,??__fDiv??rA
        MOV      R5,R0
        STR      R5,[R4, #+412]
        MOV      R0,R6
        MOV      R1,R7
        _BLF     __fDiv,??__fDiv??rA
        MOV      R1,R0
        STR      R1,[R4, #+416]
        LDR      R6,[R4, #+400]
        LDR      R0,[R6, #+12]
        _BLF     __fSub,??__fSub??rA
        LDR      R1,[R6, #+12]
        BIC      R7,R0,#0x80000000
        LDR      R0,[R6, #+20]
        _BLF     __fSub,??__fSub??rA
        BIC      R1,R0,#0x80000000
        LDR      R0,[R6, #+28]
        MOV      R8,R1
        _BLF     __longToFloat,??__longToFloat??rA
        MOV      R1,R7
        _BLF     __fMul,??__fMul??rA
        MOV      R1,R8
        _BLF     __fDiv,??__fDiv??rA
        _BLF     __floatToLong,??__floatToLong??rA
        STR      R0,[R4, #+392]
        LDR      R0,[R6, #+8]
        MOV      R1,R5
        _BLF     __fSub,??__fSub??rA
        LDR      R1,[R6, #+8]
        BIC      R5,R0,#0x80000000
        LDR      R0,[R6, #+16]
        _BLF     __fSub,??__fSub??rA
        BIC      R1,R0,#0x80000000
        LDR      R0,[R6, #+24]
        MOV      R7,R1
        _BLF     __longToFloat,??__longToFloat??rA
        MOV      R1,R5
        _BLF     __fMul,??__fMul??rA
        MOV      R1,R7
        _BLF     __fDiv,??__fDiv??rA
        _BLF     __floatToLong,??__floatToLong??rA
        STR      R0,[R4, #+388]
        POP      {R0,R1,R4-R10,PC}  ;; return
        DATA
??RecalkPos_2:
        DC32     ??FindBSByCiLac
        DC32     0x66666667
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??FillScreenBuffer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??FillScreenBuffer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??FillScreenBuffer
        ARM
??FillScreenBuffer:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+52
        CFI CFA R13+88
        MOV      R4,R0
        MOV      R1,#+0
        STR      R1,[SP, #+20]
        STR      R1,[SP, #+0]
        STR      R1,[SP, #+24]
        STR      R1,[SP, #+4]
        LDR      R0,[R4, #+368]
        LDR      R1,[R4, #+364]
        SUB      R5,R0,R1
        LDR      R0,[R4, #+376]
        LDR      R1,[R4, #+372]
        SUB      R6,R0,R1
        LDR      R0,[R4, #+388]
        ADD      R1,R5,R5, LSR #+31
        CMP      R0,R1, ASR #+1
        MOVLT    R1,#+0
        BLT      ??FillScreenBuffer_1
        LDR      R1,[R4, #+400]
        ADD      R2,R5,R5, LSR #+31
        LDR      R1,[R1, #+24]
        SUB      R1,R1,R2, ASR #+1
        CMP      R0,R1
        BLT      ??FillScreenBuffer_2
        LDR      R1,[R4, #+400]
        LDR      R1,[R1, #+24]
        SUB      R1,R1,R5
        B        ??FillScreenBuffer_1
??FillScreenBuffer_2:
        SUB      R1,R0,R2, ASR #+1
??FillScreenBuffer_1:
        STR      R1,[SP, #+8]
        LDR      R1,[R4, #+388]
        LDR      R2,[SP, #+8]
        SUB      R1,R1,R2
        STR      R1,[SP, #+28]
        LDR      R0,[R4, #+392]
        ADD      R1,R6,R6, LSR #+31
        CMP      R0,R1, ASR #+1
        MOVLT    R1,#+0
        BLT      ??FillScreenBuffer_3
        LDR      R1,[R4, #+400]
        ADD      R2,R6,R6, LSR #+31
        LDR      R1,[R1, #+28]
        SUB      R1,R1,R2, ASR #+1
        CMP      R0,R1
        BLT      ??FillScreenBuffer_4
        LDR      R1,[R4, #+400]
        LDR      R1,[R1, #+28]
        SUB      R1,R1,R6
        B        ??FillScreenBuffer_3
??FillScreenBuffer_4:
        SUB      R1,R0,R2, ASR #+1
??FillScreenBuffer_3:
        STR      R1,[SP, #+12]
        LDR      R1,[R4, #+392]
        LDR      R2,[SP, #+12]
        MOV      R0,#+0
        SUB      R1,R1,R2
        STR      R1,[SP, #+32]
        LDR      R7,[R4, #+404]
        MOV      R1,#+0
        B        ??FillScreenBuffer_5
??FillScreenBuffer_6:
        ADD      R0,R0,#+1
??FillScreenBuffer_5:
        LDR      R2,[R4, #+400]
        LDR      R2,[R2, #+32]
        CMP      R0,R2
        BGE      ??FillScreenBuffer_7
        LDR      R2,[SP, #+8]
        CMP      R2,R1
        STRGE    R0,[SP, #+20]
        LDR      R2,[R4, #+400]
        LDR      R2,[R2, #+40]
        LDR      R2,[R2, +R0, LSL #+2]
        STR      R0,[SP, #+0]
        ADD      R1,R2,R1
        LDR      R2,[SP, #+8]
        ADD      R2,R5,R2
        CMP      R2,R1
        BGE      ??FillScreenBuffer_6
??FillScreenBuffer_7:
        MOV      R0,#+0
        MOV      R1,#+0
        B        ??FillScreenBuffer_8
??FillScreenBuffer_9:
        ADD      R0,R0,#+1
??FillScreenBuffer_8:
        LDR      R2,[R4, #+400]
        LDR      R2,[R2, #+36]
        CMP      R0,R2
        BGE      ??FillScreenBuffer_10
        LDR      R2,[SP, #+12]
        CMP      R2,R1
        STRGE    R0,[SP, #+24]
        LDR      R2,[R4, #+400]
        LDR      R2,[R2, #+44]
        LDR      R2,[R2, +R0, LSL #+2]
        STR      R0,[SP, #+4]
        ADD      R1,R2,R1
        LDR      R2,[SP, #+12]
        ADD      R2,R6,R2
        CMP      R2,R1
        BGE      ??FillScreenBuffer_9
??FillScreenBuffer_10:
        LDR      R0,[R4, #+408]
        MOV      R8,#+0
        LDRH     R0,[R0, #+2]
        CMP      R0,#+0
        BNE      ??FillScreenBuffer_11
        B        ??FillScreenBuffer_12
??FillScreenBuffer_13:
        LDR      R0,[R4, #+408]
        LDRH     R1,[R0, #+2]
        SUB      R1,R1,#+1
        SWI      +429
        LDR      R1,[R0, #+0]
        LDR      R2,[SP, #+20]
        CMP      R1,R2
        BLT      ??FillScreenBuffer_14
        LDR      R1,[SP, #+0]
        LDR      R2,[R0, #+0]
        CMP      R1,R2
        BLT      ??FillScreenBuffer_14
        LDR      R1,[R0, #+4]
        LDR      R2,[SP, #+24]
        CMP      R1,R2
        BLT      ??FillScreenBuffer_14
        LDR      R1,[SP, #+4]
        LDR      R0,[R0, #+4]
        CMP      R1,R0
        BGE      ??FillScreenBuffer_15
??FillScreenBuffer_14:
        LDR      R0,[R4, #+408]
        LDRH     R0,[R0, #+2]
        CMP      R0,#+11
        BCC      ??FillScreenBuffer_15
        LDR      R0,[R4, #+408]
        LDRH     R1,[R0, #+2]
        SUB      R1,R1,#+1
        SWI      +377
        _BLF     ??RemovePngListElement,??RemovePngListElement??rA
??FillScreenBuffer_15:
        ADD      R8,R8,#+1
??FillScreenBuffer_11:
        LDR      R0,[R4, #+408]
        LDRH     R0,[R0, #+2]
        CMP      R8,R0
        BLT      ??FillScreenBuffer_13
??FillScreenBuffer_12:
        LDR      R8,[SP, #+24]
        LDR      R0,[SP, #+4]
        CMP      R0,R8
        BLT      ??FillScreenBuffer_16
??FillScreenBuffer_17:
        LDR      R9,[SP, #+20]
        LDR      R0,[SP, #+0]
        CMP      R0,R9
        BLT      ??FillScreenBuffer_18
??FillScreenBuffer_19:
        LDR      R2,??FillScreenBuffer_20  ;; ??PngCmpProc
        STR      R9,[SP, #+36]
        STR      R8,[SP, #+40]
        LDR      R0,[R4, #+408]
        ADD      R1,SP,#+36
        SWI      +428
        MOV      R1,#+255
        ORR      R1,R1,#0xFF00
        CMP      R0,R1
        BNE      ??FillScreenBuffer_21
        LDR      R0,[R4, #+400]
        MOV      R3,R8
        LDR      R1,[R0, #+0]
        LDR      R0,[R4, #+408]
        MOV      R2,R9
        BL       ??ReadPngFile
??FillScreenBuffer_21:
        LDR      R0,[SP, #+0]
        ADD      R9,R9,#+1
        CMP      R0,R9
        BGE      ??FillScreenBuffer_19
??FillScreenBuffer_18:
        LDR      R0,[SP, #+4]
        ADD      R8,R8,#+1
        CMP      R0,R8
        BGE      ??FillScreenBuffer_17
??FillScreenBuffer_16:
        MOV      R1,#+0
        STR      R1,[SP, #+16]
        STR      R1,[SP, #+44]
        LDR      R0,[SP, #+4]
        CMP      R0,#+0
        BPL      ??FillScreenBuffer_22
??FillScreenBuffer_23:
        MVN      R0,#+4
??FillScreenBuffer_24:
        LDR      R1,[SP, #+28]
        ADDS     R1,R0,R1
        BMI      ??FillScreenBuffer_25
        LDR      R1,[SP, #+28]
        ADD      R1,R0,R1
        CMP      R1,R5
        BGE      ??FillScreenBuffer_25
        LDR      R1,[SP, #+32]
        LDR      R2,[SP, #+28]
        MLA      R1,R5,R1,R2
        MOV      R2,#-16777216
        ADD      R1,R0,R1
        STR      R2,[R7, +R1, LSL #+2]
??FillScreenBuffer_25:
        ADD      R0,R0,#+1
        CMP      R0,#+6
        BLT      ??FillScreenBuffer_24
        MVN      R0,#+4
??FillScreenBuffer_26:
        LDR      R1,[SP, #+32]
        ADDS     R1,R0,R1
        BMI      ??FillScreenBuffer_27
        LDR      R1,[SP, #+32]
        ADD      R1,R0,R1
        CMP      R1,R6
        BGE      ??FillScreenBuffer_27
        LDR      R1,[SP, #+32]
        LDR      R2,[SP, #+28]
        ADD      R1,R0,R1
        MLA      R1,R5,R1,R2
        MOV      R2,#-16777216
        STR      R2,[R7, +R1, LSL #+2]
??FillScreenBuffer_27:
        ADD      R0,R0,#+1
        CMP      R0,#+6
        BLT      ??FillScreenBuffer_26
        ADD      SP,SP,#+52       ;; stack cleaning
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        CFI CFA R13+88
??FillScreenBuffer_28:
        LDR      R3,[R4, #+400]
        LDR      R2,[SP, #+16]
        LDR      R3,[R3, #+44]
        LDR      R1,[SP, #+44]
        LDR      R2,[R3, +R2, LSL #+2]
        ADD      R1,R2,R1
        STR      R1,[SP, #+44]
        LDR      R1,[SP, #+16]
        ADD      R1,R1,#+1
        STR      R1,[SP, #+16]
??FillScreenBuffer_22:
        LDR      R0,[SP, #+4]
        LDR      R1,[SP, #+16]
        CMP      R0,R1
        BLT      ??FillScreenBuffer_23
        MOV      R0,R1
        LDR      R1,[SP, #+24]
        CMP      R0,R1
        BLT      ??FillScreenBuffer_28
        MOV      R1,#+0
        STR      R1,[SP, #+48]
        LDR      R0,[SP, #+0]
        MOV      R8,#+0
        CMP      R0,#+0
        BPL      ??FillScreenBuffer_29
        B        ??FillScreenBuffer_28
??FillScreenBuffer_30:
        LDR      R2,[R4, #+400]
        LDR      R1,[SP, #+48]
        LDR      R2,[R2, #+40]
        LDR      R2,[R2, +R8, LSL #+2]
        ADD      R8,R8,#+1
        ADD      R1,R2,R1
        STR      R1,[SP, #+48]
??FillScreenBuffer_29:
        LDR      R0,[SP, #+0]
        CMP      R0,R8
        BLT      ??FillScreenBuffer_28
        LDR      R0,[SP, #+20]
        CMP      R8,R0
        BLT      ??FillScreenBuffer_30
        LDR      R2,??FillScreenBuffer_20  ;; ??PngCmpProc
        STR      R8,[SP, #+36]
        LDR      R1,[SP, #+16]
        STR      R1,[SP, #+40]
        LDR      R0,[R4, #+408]
        ADD      R1,SP,#+36
        SWI      +428
        MOV      R1,#+255
        ORR      R1,R1,#0xFF00
        CMP      R0,R1
        BEQ      ??FillScreenBuffer_30
        MOV      R1,R0
        LDR      R0,[R4, #+408]
        SWI      +429
        LDR      R1,[SP, #+48]
        LDR      R2,[SP, #+8]
        LDR      R3,[SP, #+12]
        SUB      R1,R1,R2
        LDR      R2,[SP, #+44]
        CMP      R6,#+1
        SUB      R2,R2,R3
        MOV      R3,#+0
        BGE      ??FillScreenBuffer_31
        B        ??FillScreenBuffer_30
??FillScreenBuffer_32:
        CMP      R9,R1
        BLT      ??FillScreenBuffer_33
        LDR      R12,[R0, #+8]
        ADD      R12,R12,R1
        CMP      R9,R12
        BGE      ??FillScreenBuffer_33
        LDR      LR,[R0, #+8]
        SUB      R12,R3,R2
        MLA      R12,LR,R12,R9
        LDR      LR,[R0, #+16]
        SUB      R12,R12,R1
        LDRB     R12,[R12, +LR]
        MLA      LR,R5,R3,R9
        MOV      R10,#+255
        AND      R10,R10,R12, LSL #+6
        AND      R11,R12,#0x1C
        ORR      R10,R10,R11, LSL #+11
        AND      R11,R12,#0xE0
        ORR      R10,R10,R11, LSL #+16
        ORR      R10,R10,#0xFF000000
        STR      R10,[R7, +LR, LSL #+2]
??FillScreenBuffer_33:
        ADD      R9,R9,#+1
??FillScreenBuffer_34:
        CMP      R9,R5
        BLT      ??FillScreenBuffer_32
??FillScreenBuffer_35:
        ADD      R3,R3,#+1
??FillScreenBuffer_31:
        CMP      R3,R6
        BGE      ??FillScreenBuffer_30
        CMP      R3,R2
        BLT      ??FillScreenBuffer_35
        LDR      R9,[R0, #+12]
        ADD      R9,R9,R2
        CMP      R3,R9
        BGE      ??FillScreenBuffer_35
        MOV      R9,#+0
        CMP      R5,#+1
        BGE      ??FillScreenBuffer_34
        B        ??FillScreenBuffer_35
        DATA
??FillScreenBuffer_20:
        DC32     ??PngCmpProc
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??MapGuiOnCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??MapGuiOnCreate

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\`:
        DATA
        DC8 25H, 0, 6CH, 0, 73H, 0, 2FH, 0
        DC8 47H, 0, 70H, 0, 73H, 0, 4DH, 0
        DC8 41H, 0, 50H, 0, 2FH, 0, 25H, 0
        DC8 73H, 0, 0, 0
        DC8 25H, 0, 73H, 0, 5FH, 0, 25H, 0
        DC8 30H, 0, 32H, 0, 75H, 0, 5FH, 0
        DC8 25H, 0, 30H, 0, 32H, 0, 75H, 0
        DC8 2EH, 0, 70H, 0, 6EH, 0, 67H, 0
        DC8 0, 0
        DC8 0, 0
        DC8 25H, 0, 73H, 0, 5FH, 0, 30H, 0
        DC8 30H, 0, 5FH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 75H, 0, 2EH, 0, 70H, 0
        DC8 6EH, 0, 67H, 0, 0, 0
        DC8 0, 0
        DC8 25H, 0, 73H, 0, 5FH, 0, 25H, 0
        DC8 30H, 0, 32H, 0, 75H, 0, 5FH, 0
        DC8 30H, 0, 30H, 0, 2EH, 0, 70H, 0
        DC8 6EH, 0, 67H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x25\\x66\\x2c\\x25\\x66">`:
        DATA
        DC8 25H, 0, 66H, 0, 2CH, 0, 25H, 0
        DC8 66H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
MapGuiName:
        DATA
        DC8 "Gui_GpsMAP"
        DC8 0

        RSEG DATA_I:DATA:SORT:NOROOT(2)
str_id:
        DS8 4
        REQUIRE `?<Initializer for str_id>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??MapGuiOnCreate
        ARM
??MapGuiOnCreate:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R0,#+0
        SWI      +600
        MOV      R5,R0
        STR      R5,[R4, #+384]
        MOV      R0,#+0
        SWI      +601
        MUL      R1,R0,R5
        STR      R0,[R4, #+380]
        LSL      R0,R1,#+2
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R4, #+404]
        MOV      R0,#+0
        STR      R0,[R4, #+392]
        STR      R0,[R4, #+388]
        STR      R0,[R4, #+376]
        STR      R0,[R4, #+368]
        STR      R0,[R4, #+372]
        STR      R0,[R4, #+364]
        MOV      R5,#+396
        ADD      R0,R5,R4
        _BLF     ??MainIniInit,??MainIniInit??rA
        MOV      R0,#+0
        BL       ??GetLac_ByCh
        MOV      R6,R0
        MOV      R0,#+0
        BL       ??GetCid_ByCh
        MOV      R1,R0
        MOV      R2,R6
        ADD      R0,R5,R4
        _BLF     ??FindTownByCiLac,??FindTownByCiLac??rA
        CMP      R0,#+0
        BNE      ??MapGuiOnCreate_1
        LDR      R0,[R4, #+396]
        MOV      R1,#+0
        SWI      +429
??MapGuiOnCreate_1:
        STR      R0,[R4, #+400]
        BL       ??InitDirPng
        SWI      +361
        STR      R0,[R4, #+408]
        MOV      R0,#+1
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??MapGuiOnClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ??MapGuiOnClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ??MapGuiOnClose
        ARM
??MapGuiOnClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,[R4, #+404]
        SWI      +260
        LDR      R0,[R4, #+400]
        BL       ??DeInitDirPng
        LDR      R0,[R4, #+408]
        LDRH     R0,[R0, #+2]
        CMP      R0,#+0
        BEQ      ??MapGuiOnClose_1
??MapGuiOnClose_2:
        LDR      R0,[R4, #+408]
        MOV      R1,#+0
        SWI      +377
        _BLF     ??RemovePngListElement,??RemovePngListElement??rA
        LDR      R0,[R4, #+408]
        LDRH     R0,[R0, #+2]
        CMP      R0,#+0
        BNE      ??MapGuiOnClose_2
??MapGuiOnClose_1:
        LDR      R0,[R4, #+408]
        SWI      +362
        ADD      R0,R4,#+396
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF      ??MainIniDeInit,??MainIniDeInit??rA  ;; tailcall
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??MapGuiOnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE ??MapGuiOnRedraw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function ??MapGuiOnRedraw
        ARM
??MapGuiOnRedraw:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+136
        CFI CFA R13+156
        MOV      R4,R0
        SWI      +485
        MOV      R5,R0
        MOV      R1,SP
        SWI      +487
        LDRH     R1,[SP, #+0]
        LDR      R0,[R4, #+364]
        CMP      R0,R1
        BNE      ??MapGuiOnRedraw_1
        LDRH     R1,[SP, #+2]
        LDR      R0,[R4, #+368]
        CMP      R0,R1
        BNE      ??MapGuiOnRedraw_1
        LDRH     R1,[SP, #+4]
        LDR      R0,[R4, #+372]
        CMP      R0,R1
        BNE      ??MapGuiOnRedraw_1
        LDRH     R1,[SP, #+6]
        LDR      R0,[R4, #+376]
        CMP      R0,R1
        BEQ      ??MapGuiOnRedraw_2
??MapGuiOnRedraw_1:
        LDRH     R0,[SP, #+0]
        STR      R0,[R4, #+364]
        LDRH     R0,[SP, #+4]
        STR      R0,[R4, #+372]
        LDRH     R0,[SP, #+2]
        STR      R0,[R4, #+368]
        LDRH     R0,[SP, #+6]
        STR      R0,[R4, #+376]
        MOV      R0,R4
        BL       ??FillScreenBuffer
??MapGuiOnRedraw_2:
        MOV      R0,R5
        SWI      +488
        MOV      R6,R0
        MOV      R1,#+1
        MOV      R0,R5
        SWI      +489
        MVN      R0,#+0
        PUSH     {R0}
        CFI CFA R13+160
        PUSH     {R0}
        CFI CFA R13+164
        LDR      R3,[R4, #+376]
        LDR      R2,[R4, #+368]
        LDR      R1,[R4, #+372]
        LDR      R0,[R4, #+364]
        SWI      +492
        LDR      R0,[R4, #+404]
        ADD      SP,SP,#+8
        CFI CFA R13+156
        CMP      R0,#+0
        BEQ      ??MapGuiOnRedraw_3
        PUSH     {R0}
        CFI CFA R13+160
        LDR      R0,[R4, #+376]
        PUSH     {R0}
        CFI CFA R13+164
        LDR      R3,[R4, #+368]
        LDR      R2,[R4, #+372]
        LDR      R1,[R4, #+364]
        MOV      R0,R5
        SWI      +612
        ADD      SP,SP,#+8
        CFI CFA R13+156
??MapGuiOnRedraw_3:
        LDR      R0,??MapGuiOnRedraw_4  ;; FONT_E_20R
        LDR      R0,[R0, #+0]
        SWI      +497
        LDR      R0,[R4, #+416]
        _BLF     __floatToDouble,??__floatToDouble??rA
        PUSH     {R0,R1}
        CFI CFA R13+164
        LDR      R0,[R4, #+412]
        _BLF     __floatToDouble,??__floatToDouble??rA
        LDR      R2,??MapGuiOnRedraw_4+0x4  ;; `?<Constant L"\\x25\\x66\\x2c\\x25\\x66">`
        PUSH     {R0,R1}
        CFI CFA R13+172
        MOV      R1,#+63
        ADD      R0,SP,#+24
        POP      {R3}
        CFI CFA R13+168
        SWI      +277
        LDR      R0,??MapGuiOnRedraw_4+0x8  ;; str_id
        MVN      R1,#-1879048192
        LDR      R0,[R0, #+0]
        ADD      SP,SP,#+12
        CFI CFA R13+156
        CMP      R0,R1
        BEQ      ??MapGuiOnRedraw_5
        LDR      R0,??MapGuiOnRedraw_4+0x8  ;; str_id
        LDR      R0,[R0, #+0]
        SWI      +353
??MapGuiOnRedraw_5:
        LDR      R7,??MapGuiOnRedraw_4+0x8  ;; str_id
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        MOV      R1,#+0
        ADD      R0,SP,#+8
        SWI      +349
        STR      R0,[R7, #+0]
        LDR      R0,[R4, #+372]
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+160
        ADD      R3,R0,#+2
        MOV      R1,#-16777216
        PUSH     {R1}
        CFI CFA R13+164
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+168
        MOV      R1,#+20
        PUSH     {R1}
        CFI CFA R13+172
        ADD      R1,R0,#+82
        PUSH     {R1}
        CFI CFA R13+176
        LDR      R1,[R4, #+368]
        SUB      R1,R1,#+2
        PUSH     {R1}
        CFI CFA R13+180
        LDR      R0,[R4, #+364]
        MOV      R1,#+2
        ADD      R2,R0,#+2
        LDR      R0,[R7, #+0]
        SWI      +493
        MOV      R1,R6
        MOV      R0,R5
        SWI      +489
        ADD      SP,SP,#+160
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??MapGuiOnRedraw_4:
        DC32     FONT_E_20R
        DC32     `?<Constant L"\\x25\\x66\\x2c\\x25\\x66">`
        DC32     str_id
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??MapGuiOnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE ??MapGuiOnKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function ??MapGuiOnKey
        ARM
??MapGuiOnKey:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R5,R1
        LDR      R1,??MapGuiOnKey_1  ;; KBD_SHORT_RELEASE
        MOV      R4,R0
        LDR      R0,[SP, #+12]
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        BEQ      ??MapGuiOnKey_2
        LDR      R1,??MapGuiOnKey_1+0x4  ;; KBD_REPEAT
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        BNE      ??MapGuiOnKey_3
??MapGuiOnKey_2:
        LDR      R0,??MapGuiOnKey_1+0x8  ;; KEY_UP
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BEQ      ??MapGuiOnKey_4
        LDR      R0,??MapGuiOnKey_1+0xC  ;; KEY_DOWN
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BEQ      ??MapGuiOnKey_4
        LDR      R0,??MapGuiOnKey_1+0x10  ;; KEY_LEFT
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BEQ      ??MapGuiOnKey_4
        LDR      R0,??MapGuiOnKey_1+0x14  ;; KEY_RIGHT
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BNE      ??MapGuiOnKey_5
??MapGuiOnKey_4:
        LDR      R1,??MapGuiOnKey_1+0x8  ;; KEY_UP
        MUL      R0,R3,R3
        LDR      R1,[R1, #+0]
        CMP      R5,R1
        BNE      ??MapGuiOnKey_6
        LDR      R1,[R4, #+392]
        SUB      R0,R1,R0
        CMP      R0,#+1
        BLT      ??MapGuiOnKey_7
??MapGuiOnKey_8:
        STR      R0,[R4, #+392]
        B        ??MapGuiOnKey_9
??MapGuiOnKey_7:
        MOV      R0,#+0
        B        ??MapGuiOnKey_8
??MapGuiOnKey_6:
        LDR      R1,??MapGuiOnKey_1+0xC  ;; KEY_DOWN
        LDR      R1,[R1, #+0]
        CMP      R5,R1
        BNE      ??MapGuiOnKey_10
        LDR      R1,[R4, #+392]
        ADD      R0,R0,R1
        LDR      R1,[R4, #+400]
        LDR      R1,[R1, #+28]
        SUB      R1,R1,#+1
        CMP      R0,R1
        STRLT    R0,[R4, #+392]
        BLT      ??MapGuiOnKey_9
        LDR      R0,[R4, #+400]
        LDR      R0,[R0, #+28]
        SUB      R0,R0,#+1
        B        ??MapGuiOnKey_8
??MapGuiOnKey_10:
        LDR      R1,??MapGuiOnKey_1+0x10  ;; KEY_LEFT
        LDR      R1,[R1, #+0]
        CMP      R5,R1
        BNE      ??MapGuiOnKey_11
        LDR      R1,[R4, #+388]
        SUB      R0,R1,R0
        CMP      R0,#+1
        BGE      ??MapGuiOnKey_12
        MOV      R0,#+0
        B        ??MapGuiOnKey_12
??MapGuiOnKey_11:
        LDR      R1,??MapGuiOnKey_1+0x14  ;; KEY_RIGHT
        LDR      R1,[R1, #+0]
        CMP      R5,R1
        BNE      ??MapGuiOnKey_9
        LDR      R1,[R4, #+388]
        ADD      R0,R0,R1
        LDR      R1,[R4, #+400]
        LDR      R1,[R1, #+24]
        SUB      R1,R1,#+1
        CMP      R0,R1
        LDRGE    R0,[R4, #+400]
        LDRGE    R0,[R0, #+24]
        SUBGE    R0,R0,#+1
??MapGuiOnKey_12:
        STR      R0,[R4, #+388]
??MapGuiOnKey_9:
        MOV      R0,R4
        BL       ??FillScreenBuffer
??MapGuiOnKey_5:
        LDR      R0,??MapGuiOnKey_1+0x18  ;; KEY_DIGITAL_0
        LDR      R0,[R0, #+0]
        CMP      R5,R0
        BNE      ??MapGuiOnKey_3
        MOV      R0,R4
        BL       ??RecalkPos
        MOV      R0,R4
        BL       ??FillScreenBuffer
??MapGuiOnKey_3:
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +495
        POP      {R4,R5,PC}       ;; return
        DATA
??MapGuiOnKey_1:
        DC32     KBD_SHORT_RELEASE
        DC32     KBD_REPEAT
        DC32     KEY_UP
        DC32     KEY_DOWN
        DC32     KEY_LEFT
        DC32     KEY_RIGHT
        DC32     KEY_DIGITAL_0
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??MapGui_constr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE ??MapGui_constr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function ??MapGui_constr
        ARM
??MapGui_constr:
        LDR      R1,??MapGui_constr_1  ;; MapGuiName
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        SWI      +544
        MOV      R1,#+420
        MOV      R0,R4
        SWI      +546
        LDR      R1,??MapGui_constr_1+0x4  ;; ??MapGuiOnCreate
        MOV      R0,R4
        SWI      +548
        LDR      R1,??MapGui_constr_1+0x8  ;; ??MapGuiOnClose
        MOV      R0,R4
        SWI      +550
        LDR      R1,??MapGui_constr_1+0xC  ;; ??MapGuiOnRedraw
        MOV      R0,R4
        SWI      +552
        LDR      R1,??MapGui_constr_1+0x10  ;; ??MapGuiOnKey
        MOV      R0,R4
        SWI      +554
        POP      {R4,PC}          ;; return
        DATA
??MapGui_constr_1:
        DC32     MapGuiName
        DC32     ??MapGuiOnCreate
        DC32     ??MapGuiOnClose
        DC32     ??MapGuiOnRedraw
        DC32     ??MapGuiOnKey
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??MapGui_destr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE ??MapGui_destr

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function ??MapGui_destr
        ARM
??MapGui_destr:
        BX       LR               ;; return
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??CreateMapGUI??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE ??CreateMapGUI

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function ??CreateMapGUI
        ARM
??CreateMapGUI:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        MOV      R0,#+144
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R2,??CreateMapGUI_1  ;; ??MapGui_constr
        LDR      R1,??CreateMapGUI_1+0x4  ;; ??MapGui_destr
        MOV      R5,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+16
        PUSH     {R0}
        CFI CFA R13+20
        PUSH     {R0}
        CFI CFA R13+24
        MOV      R3,R4
        MOV      R0,R5
        SWI      +496
        CMP      R0,#+0
        ADD      SP,SP,#+12
        CFI CFA R13+12
        BNE      ??CreateMapGUI_2
        MOV      R0,R5
        _BLF     `??operator delete`,`??operator delete??rA`
        MOV      R0,#+0
        POP      {R4,R5,PC}
??CreateMapGUI_2:
        CMP      R4,#+0
        BEQ      ??CreateMapGUI_3
        MOV      R1,R5
        MOV      R0,R4
        SWI      +491
??CreateMapGUI_3:
        MOV      R1,#+3
        MOV      R0,R5
        SWI      +310
        MOV      R0,R5
        POP      {R4,R5,PC}       ;; return
        DATA
??CreateMapGUI_1:
        DC32     ??MapGui_constr
        DC32     ??MapGui_destr
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine16_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine16_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock32

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI NoFunction
        ARM
??InitPng??rA:
        LDR      R12,??Subroutine17_0  ;; ??InitPng
        BX       R12
        DATA
??Subroutine17_0:
        DC32     ??InitPng
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon1
        CFI NoFunction
        ARM
??process_data??rA:
        LDR      R12,??Subroutine18_0  ;; ??process_data
        BX       R12
        DATA
??Subroutine18_0:
        DC32     ??process_data
        CFI EndBlock cfiBlock34

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI NoFunction
        ARM
??Destr_Png??rA:
        LDR      R12,??Subroutine19_0  ;; ??Destr_Png
        BX       R12
        DATA
??Subroutine19_0:
        DC32     ??Destr_Png
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine20_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine20_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock36

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI NoFunction
        ARM
??get_png_info??rA:
        LDR      R12,??Subroutine21_0  ;; ??get_png_info
        BX       R12
        DATA
??Subroutine21_0:
        DC32     ??get_png_info
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon1
        CFI NoFunction
        ARM
??__longToFloat??rA:
        LDR      R3,??Subroutine22_0  ;; __longToFloat
        BX       R3
        DATA
??Subroutine22_0:
        DC32     __longToFloat
        CFI EndBlock cfiBlock38

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI NoFunction
        ARM
??powf??rA:
        LDR      R12,??Subroutine23_0  ;; powf
        BX       R12
        DATA
??Subroutine23_0:
        DC32     powf
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon1
        CFI NoFunction
        ARM
??__fMul??rA:
        LDR      R3,??Subroutine24_0  ;; __fMul
        BX       R3
        DATA
??Subroutine24_0:
        DC32     __fMul
        CFI EndBlock cfiBlock40

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI NoFunction
        ARM
??__fAdd??rA:
        LDR      R3,??Subroutine25_0  ;; __fAdd
        BX       R3
        DATA
??Subroutine25_0:
        DC32     __fAdd
        CFI EndBlock cfiBlock41

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon1
        CFI NoFunction
        ARM
??__fDiv??rA:
        LDR      R3,??Subroutine26_0  ;; __fDiv
        BX       R3
        DATA
??Subroutine26_0:
        DC32     __fDiv
        CFI EndBlock cfiBlock42

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI NoFunction
        ARM
??__fSub??rA:
        LDR      R3,??Subroutine27_0  ;; __fSub
        BX       R3
        DATA
??Subroutine27_0:
        DC32     __fSub
        CFI EndBlock cfiBlock43

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon1
        CFI NoFunction
        ARM
??__floatToLong??rA:
        LDR      R3,??Subroutine28_0  ;; __floatToLong
        BX       R3
        DATA
??Subroutine28_0:
        DC32     __floatToLong
        CFI EndBlock cfiBlock44

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI NoFunction
        ARM
??RemovePngListElement??rA:
        LDR      R12,??Subroutine29_0  ;; ??RemovePngListElement
        BX       R12
        DATA
??Subroutine29_0:
        DC32     ??RemovePngListElement
        CFI EndBlock cfiBlock45

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock46 Using cfiCommon1
        CFI NoFunction
        ARM
??MainIniInit??rA:
        LDR      R12,??Subroutine30_0  ;; ??MainIniInit
        BX       R12
        DATA
??Subroutine30_0:
        DC32     ??MainIniInit
        CFI EndBlock cfiBlock46

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock47 Using cfiCommon1
        CFI NoFunction
        ARM
??FindTownByCiLac??rA:
        LDR      R12,??Subroutine31_0  ;; ??FindTownByCiLac
        BX       R12
        DATA
??Subroutine31_0:
        DC32     ??FindTownByCiLac
        CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock48 Using cfiCommon1
        CFI NoFunction
        ARM
??MainIniDeInit??rA:
        LDR      R12,??Subroutine32_0  ;; ??MainIniDeInit
        BX       R12
        DATA
??Subroutine32_0:
        DC32     ??MainIniDeInit
        CFI EndBlock cfiBlock48

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock49 Using cfiCommon1
        CFI NoFunction
        ARM
??__floatToDouble??rA:
        LDR      R3,??Subroutine33_0  ;; __floatToDouble
        BX       R3
        DATA
??Subroutine33_0:
        DC32     __floatToDouble
        CFI EndBlock cfiBlock49

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock50 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine34_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine34_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock50

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for x1_map_real>`:
        DATA
        DC32 421E2129H

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for x2_map_real>`:
        DATA
        DC32 421F817CH

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for y1_map_real>`:
        DATA
        DC32 423D554DH

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for y2_map_real>`:
        DATA
        DC32 423C44C3H

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for NetData>`:
        DATA
        DC32 202EBA10H
`?<Initializer for CurNetData>`:
        DC32 2018EBE4H

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for str_id>`:
        DATA
        DC32 1879048191

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 4 356 bytes in segment CODE
//   152 bytes in segment DATA_C
//    28 bytes in segment DATA_I
//    28 bytes in segment DATA_ID
//    12 bytes in segment INITTAB
// 
// 4 064 bytes of CODE  memory (+ 304 bytes shared)
//   180 bytes of CONST memory
//    28 bytes of DATA  memory
//
//Errors: none
//Warnings: 2
