//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:41:45 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\GpsMAP\read_c /
//                       sv.c                                                /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\GpsMAP\read_c /
//                       sv.c -D NDEBUG -D OLDFUNCTIONS -lCN                 /
//                       Z:\home\perk11\www\perk11.info\svn\SE\GpsMAP\Releas /
//                       e\List\ -la Z:\home\perk11\www\perk11.info\svn\SE\G /
//                       psMAP\Release\List\ -o Z:\home\perk11\www\perk11.in /
//                       fo\svn\SE\GpsMAP\Release\Obj\ -s9 --no_unroll       /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\GpsMAP\Releas /
//                       e\List\read_csv.s79                                 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME read_csv

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

??DataTable0 EQU 0
        PUBLIC ??DestroyCsvList
        FUNCTION ??DestroyCsvList,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??DestroyCsvList??rT
        PUBLIC ??FindBSByCiLac
        FUNCTION ??FindBSByCiLac,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??FindBSByCiLac??rT
        PUBLIC ??FindTownByCiLac
        FUNCTION ??FindTownByCiLac,0203H
        LOCFRAME CSTACK, 32, STACK
        MULTWEAK ??FindTownByCiLac??rT
        PUBLIC ??FindTownById
        FUNCTION ??FindTownById,0203H
        MULTWEAK ??FindTownById??rT
        PUBLIC ??ReadCsvFile
        FUNCTION ??ReadCsvFile,0203H
        LOCFRAME CSTACK, 268, STACK
        MULTWEAK ??ReadCsvFile??rT
        MULTWEAK ??__fGreaterEqual??rA
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        MULTWEAK ??str_tof??rA
        MULTWEAK ??strtol??rA
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        




__fGreaterEqual     SYMBOL "__fGreaterEqual"
strtol              SYMBOL "strtol"

??DestroyCsvList??rT SYMBOL "??rT", ??DestroyCsvList

??FindBSByCiLac??rT SYMBOL "??rT", ??FindBSByCiLac

??FindTownByCiLac??rT SYMBOL "??rT", ??FindTownByCiLac

??FindTownById??rT  SYMBOL "??rT", ??FindTownById

??ReadCsvFile??rT   SYMBOL "??rT", ??ReadCsvFile
??__fGreaterEqual??rA SYMBOL "??rA", __fGreaterEqual
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`
??str_tof??rA       SYMBOL "??rA", ??str_tof
??strtol??rA        SYMBOL "??rA", strtol

        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN ??str_tof
        FUNCTION ??str_tof,0202H
        EXTERN __fGreaterEqual
        FUNCTION __fGreaterEqual,0202H
        EXTERN strtol
        FUNCTION strtol,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??ReadCsvFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??ReadCsvFile

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??ReadCsvFile
        ARM
??ReadCsvFile:
        PUSH     {R0,R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+40
        SUB      SP,SP,#+224
        CFI CFA R13+264
        LDR      R9,??ReadCsvFile_1  ;; `?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\`
        MOV      R0,#+16
        SWI      +261
        MOV      R3,R0
        LDR      R0,[SP, #+224]
        MOV      R8,#+0
        LDR      R0,[R0, #+0]
        MOV      R2,R9
        PUSH     {R0}
        CFI CFA R13+268
        MOV      R1,#+63
        ADD      R0,SP,#+72
        SWI      +277
        ADD      R2,SP,#+200
        ADD      R1,R9,#+28
        ADD      R0,SP,#+72
        SWI      +284
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+264
        BMI      ??ReadCsvFile_2
        LDR      R1,??ReadCsvFile_1+0x4  ;; `?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\` + 28
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+268
        MOV      R3,#+384
        MOV      R2,#+1
        ADD      R0,SP,#+72
        SWI      +278
        STR      R0,[SP, #+4]
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+264
        BMI      ??ReadCsvFile_2
        LDR      R11,[SP, #+204]
        ADD      R0,R11,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOV      R9,R0
        LDR      R0,[SP, #+0]
        MOV      R10,R9
        MOV      R2,R11
        MOV      R1,R9
        SWI      +280
        MOV      R1,#+0
        STRB     R1,[R0, +R9]
        LDR      R0,[SP, #+0]
        SWI      +279
        MOV      R0,R8
        ADD      R1,SP,#+4
        B        ??ReadCsvFile_3
??ReadCsvFile_4:
        MOV      R0,#+0
??ReadCsvFile_5:
        ADD      R1,SP,#+4
??ReadCsvFile_6:
        ADD      R10,R10,#+1
??ReadCsvFile_3:
        LDRB     R11,[R10, #+0]
        ADD      R2,SP,#+4
        SUB      R2,R1,R2
        CMP      R2,#+63
        STRBLT   R11,[R1], #+1
        CMP      R11,#+59
        CMPNE    R11,#+13
        CMPNE    R11,#+10
        CMPNE    R11,#+0
        BNE      ??ReadCsvFile_6
        MOV      R2,#+0
        STRB     R2,[R1, #-1]
        MOVS     R1,R0
        BEQ      ??ReadCsvFile_7
        SUBS     R1,R0,#+1
        BEQ      ??ReadCsvFile_8
        SUBS     R1,R1,#+1
        BEQ      ??ReadCsvFile_9
        SUBS     R1,R1,#+1
        BEQ      ??ReadCsvFile_10
        B        ??ReadCsvFile_11
??ReadCsvFile_7:
        MOV      R2,#+10
        MOV      R1,#+0
        ADD      R0,SP,#+4
        _BLF     strtol,??strtol??rA
        MOV      R4,R0
        MOV      R0,#+1
        B        ??ReadCsvFile_11
??ReadCsvFile_8:
        MOV      R2,#+10
        MOV      R1,#+0
        ADD      R0,SP,#+4
        _BLF     strtol,??strtol??rA
        MOV      R5,R0
        MOV      R0,#+2
        B        ??ReadCsvFile_11
??ReadCsvFile_9:
        MOV      R1,#+0
        ADD      R0,SP,#+4
        _BLF     ??str_tof,??str_tof??rA
        MOV      R6,R0
        MOV      R0,#+3
        B        ??ReadCsvFile_11
??ReadCsvFile_10:
        MOV      R1,#+0
        ADD      R0,SP,#+4
        _BLF     ??str_tof,??str_tof??rA
        MOV      R7,R0
        MOV      R0,#+4
??ReadCsvFile_11:
        CMP      R11,#+13
        CMPNE    R11,#+10
        CMPNE    R11,#+0
        BNE      ??ReadCsvFile_5
        CMP      R0,#+4
        BNE      ??ReadCsvFile_12
        MOV      R0,#+12
        _BLF     `??operator new`,`??operator new??rA`
        STRH     R4,[R0, #+0]
        STRH     R5,[R0, #+2]
        STR      R6,[R0, #+4]
        STR      R7,[R0, #+8]
        MOV      R1,R0
        LDR      R0,[SP, #+224]
        ADD      R8,R8,#+1
        LDR      R0,[R0, #+48]
        SWI      +432
??ReadCsvFile_12:
        CMP      R11,#+0
        BNE      ??ReadCsvFile_4
        MOV      R0,R9
        _BLF     `??operator delete`,`??operator delete??rA`
??ReadCsvFile_2:
        MOV      R0,R8
        ADD      SP,SP,#+228
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??ReadCsvFile_1:
        DC32     `?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\`
        DC32     `?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\` + 28
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??DestroyCsvList??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??DestroyCsvList

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??DestroyCsvList
        ARM
??DestroyCsvList:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,[R4, #+48]
        LDRH     R0,[R0, #+2]
        CMP      R0,#+0
        POPEQ    {R4,PC}
??DestroyCsvList_1:
        LDR      R0,[R4, #+48]
        MOV      R1,#+0
        SWI      +377
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R0,[R4, #+48]
        LDRH     R0,[R0, #+2]
        CMP      R0,#+0
        BNE      ??DestroyCsvList_1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??FindBSByCiLac??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??FindBSByCiLac

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??FindBSByCiLac
        ARM
??FindBSByCiLac:
        LDR      R3,??DataTable1  ;; 0x66666667
        PUSH     {R4}
        CFI R4 Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R2,[R1, #+0]
        SMULL    R12,R4,R3,R2
        LDRH     R3,[R0, #+0]
        ASR      R4,R4,#+2
        ADD      R2,R4,R2, LSR #+31
        CMP      R2,R3
        BNE      ??FindBSByCiLac_1
        LDRH     R0,[R0, #+2]
        LDR      R1,[R1, #+4]
        CMP      R1,R0
        MOVEQ    R0,#+0
        BEQ      ??FindBSByCiLac_2
??FindBSByCiLac_1:
        MOV      R0,#+1
??FindBSByCiLac_2:
        POP      {R4}
        CFI R4 SameValue
        CFI CFA R13+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??FindTownById??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??FindTownById

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??FindTownById
        ARM
??FindTownById:
        LDR      R0,[R0, #+4]
        CMP      R1,R0
        MOVEQ    R0,#+0
        BXEQ     LR
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??FindTownByCiLac??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??FindTownByCiLac

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??FindTownByCiLac
        ARM
??FindTownByCiLac:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
        MOV      R7,#+0
        B        ??FindTownByCiLac_1
??FindTownByCiLac_2:
        MOV      R0,R8
        BL       ??DestroyCsvList
??FindTownByCiLac_3:
        ADD      R7,R7,#+1
??FindTownByCiLac_1:
        LDR      R0,[R4, #+0]
        LDRH     R0,[R0, #+2]
        CMP      R7,R0
        BGE      ??FindTownByCiLac_4
        LDR      R0,[R4, #+0]
        MOV      R1,R7
        SWI      +429
        MOV      R8,R0
        BL       ??ReadCsvFile
        CMP      R0,#+0
        BEQ      ??FindTownByCiLac_3
        MOV      R9,#+0
        B        ??FindTownByCiLac_5
??FindTownByCiLac_6:
        ADD      R9,R9,#+1
??FindTownByCiLac_5:
        LDR      R0,[R8, #+48]
        LDRH     R0,[R0, #+2]
        CMP      R9,R0
        BGE      ??FindTownByCiLac_2
        LDR      R0,[R8, #+48]
        MOV      R1,R9
        SWI      +429
        LDR      R1,??DataTable1  ;; 0x66666667
        MOV      R10,R0
        LDRH     R0,[R10, #+0]
        SMULL    R2,R3,R1,R5
        ASR      R3,R3,#+2
        ADD      R1,R3,R5, LSR #+31
        CMP      R0,R1
        LDRHEQ   R0,[R10, #+2]
        CMPEQ    R0,R6
        BNE      ??FindTownByCiLac_6
        LDR      R0,[R10, #+4]
        LDR      R1,[R8, #+8]
        _BLF     __fGreaterEqual,??__fGreaterEqual??rA
        CMP      R0,#+0
        BEQ      ??FindTownByCiLac_6
        LDR      R0,[R8, #+16]
        LDR      R1,[R10, #+4]
        _BLF     __fGreaterEqual,??__fGreaterEqual??rA
        CMP      R0,#+0
        BEQ      ??FindTownByCiLac_6
        LDR      R0,[R10, #+8]
        LDR      R1,[R8, #+12]
        _BLF     __fGreaterEqual,??__fGreaterEqual??rA
        CMP      R0,#+0
        BEQ      ??FindTownByCiLac_6
        LDR      R0,[R8, #+20]
        LDR      R1,[R10, #+8]
        _BLF     __fGreaterEqual,??__fGreaterEqual??rA
        CMP      R0,#+0
        BEQ      ??FindTownByCiLac_6
        MOV      R0,R8
        POP      {R4-R10,PC}
??FindTownByCiLac_4:
        MOV      R0,#+0
        POP      {R4-R10,PC}      ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     0x66666667

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine5_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine5_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI NoFunction
        ARM
??strtol??rA:
        LDR      R12,??Subroutine6_0  ;; strtol
        BX       R12
        DATA
??Subroutine6_0:
        DC32     strtol
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI NoFunction
        ARM
??str_tof??rA:
        LDR      R12,??Subroutine7_0  ;; ??str_tof
        BX       R12
        DATA
??Subroutine7_0:
        DC32     ??str_tof
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine8_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine8_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine9_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine9_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        ARM
??__fGreaterEqual??rA:
        LDR      R3,??Subroutine10_0  ;; __fGreaterEqual
        BX       R3
        DATA
??Subroutine10_0:
        DC32     __fGreaterEqual
        CFI EndBlock cfiBlock15

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x25\\x6c\\x73\\x2f\\x47\\x70\\x73\\x4d\\`:
        DATA
        DC8 25H, 0, 6CH, 0, 73H, 0, 2FH, 0
        DC8 47H, 0, 70H, 0, 73H, 0, 4DH, 0
        DC8 41H, 0, 50H, 0, 2FH, 0, 25H, 0
        DC8 73H, 0, 0, 0
        DC8 62H, 0, 73H, 0, 5FH, 0, 64H, 0
        DC8 61H, 0, 74H, 0, 2EH, 0, 63H, 0
        DC8 73H, 0, 76H, 0, 0, 0
        DC8 0, 0

        END
// 
// 996 bytes in segment CODE
//  52 bytes in segment DATA_C
// 
// 904 bytes of CODE  memory (+ 92 bytes shared)
//  52 bytes of CONST memory
//
//Errors: none
//Warnings: none
