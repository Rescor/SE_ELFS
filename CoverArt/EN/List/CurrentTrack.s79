//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  23:02:56 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\Curr /
//                       entTrack.c                                          /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\Curr /
//                       entTrack.c -D NDEBUG -D OLDFUNCTIONS -lC            /
//                       Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\EN\L /
//                       ist\ -lA Z:\home\perk11\www\perk11.info\svn\SE\Cove /
//                       rArt\EN\List\ -o Z:\home\perk11\www\perk11.info\svn /
//                       \SE\CoverArt\EN\Obj\ -s9 --cpu_mode arm --endian    /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork -e --enable_multibytes --fpu None       /
//                       --eec++ --dlib_config Z:\home\perk11\IAR2\arm\LIB\d /
//                       l5tpainl8n.h --preinclude                           /
//                       Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\LNG- /
//                       EN.h -I Z:\home\perk11\IAR2\arm\INC\                /
//                       --inline_threshold=2                                /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\EN\L /
//                       ist\CurrentTrack.s79                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME CurrentTrack

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??TrackDesc_Compare
        FUNCTION ??TrackDesc_Compare,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??TrackDesc_Compare??rT
        PUBLIC ??TrackDesc_Free
        FUNCTION ??TrackDesc_Free,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??TrackDesc_Free??rT
        PUBLIC ??TrackDesc_Get
        FUNCTION ??TrackDesc_Get,0203H
        LOCFRAME CSTACK, 32, STACK
        MULTWEAK ??TrackDesc_Get??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        




??TrackDesc_Compare??rT SYMBOL "??rT", ??TrackDesc_Compare

??TrackDesc_Free??rT SYMBOL "??rT", ??TrackDesc_Free

??TrackDesc_Get??rT SYMBOL "??rT", ??TrackDesc_Get
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??TrackDesc_Free??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??TrackDesc_Free
// Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\CurrentTrack.c
//    1 #include "..\include\Lib_Clara.h"
//    2 #include "..\include\dir.h"
//    3 #include "structs.h"
//    4 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??TrackDesc_Free
        ARM
//    5 void TrackDesc_Free(TRACK_DESC *track_desc)
//    6 {
??TrackDesc_Free:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
//    7   if (track_desc)
        POPEQ    {R4,PC}
//    8   {
//    9     if (track_desc->path)
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        BEQ      ??TrackDesc_Free_1
//   10     {
//   11       delete(track_desc->path);
        _BLF     `??operator delete`,`??operator delete??rA`
//   12     }
//   13     if (track_desc->name)
??TrackDesc_Free_1:
        LDR      R0,[R4, #+4]
        CMP      R0,#+0
        BEQ      ??TrackDesc_Free_2
//   14     {
//   15       delete(track_desc->name);
        _BLF     `??operator delete`,`??operator delete??rA`
//   16     }
//   17     delete(track_desc);
??TrackDesc_Free_2:
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
//   18   }
//   19 };
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??TrackDesc_Compare??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??TrackDesc_Compare
//   20 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??TrackDesc_Compare
        ARM
//   21 bool TrackDesc_Compare(TRACK_DESC *t1, TRACK_DESC *t2)
//   22 {
??TrackDesc_Compare:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//   23   if (t1 && t2)
        CMP      R4,#+0
        MOV      R5,R1
        CMPNE    R5,#+0
        BEQ      ??TrackDesc_Compare_1
//   24   {
//   25     if (wstrcmp(t1->path,t2->path)==0 && wstrcmp(t1->name,t2->name)==0 && t1->fulltime==t2->fulltime)
        LDR      R0,[R4, #+0]
        LDR      R1,[R5, #+0]
        SWI      +342
        CMP      R0,#+0
        BNE      ??TrackDesc_Compare_1
        LDR      R0,[R4, #+4]
        LDR      R1,[R5, #+4]
        SWI      +342
        CMP      R0,#+0
        BNE      ??TrackDesc_Compare_1
        LDR      R0,[R4, #+8]
        LDR      R1,[R5, #+8]
        CMP      R0,R1
//   26     {
//   27       return 1;
        MOVEQ    R0,#+1
        POPEQ    {R4,R5,PC}
//   28     }
//   29     else
//   30     {
//   31       return 0;
??TrackDesc_Compare_1:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock3
//   32     }
//   33   }
//   34   else
//   35   {
//   36     return 0;
//   37   }
//   38 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??TrackDesc_Get??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??TrackDesc_Get
//   39 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??TrackDesc_Get
        ARM
//   40 TRACK_DESC * TrackDesc_Get(BOOK *bk)
//   41 {
??TrackDesc_Get:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+12
        CFI CFA R13+32
        MOVS     R4,R0
//   42   if (bk)
        BEQ      ??TrackDesc_Get_1
//   43   {
//   44     int platform=0;
//   45     switch (GetChipID()&CHIPID_MASK)
        SWI      +590
        AND      R0,R0,#0xFE00
        SUBS     R0,R0,#+28672
        SUBSNE   R0,R0,#+4096
        BEQ      ??TrackDesc_Get_2
        SUBS     R0,R0,#+6144
        BNE      ??TrackDesc_Get_1
//   46     {
//   47       case CHIPID_DB2000:
//   48       case CHIPID_DB2010:
//   49         platform = 2010;
//   50         break;
//   51       case CHIPID_DB2020:
//   52         platform = 2020;
//   53         break;
//   54     }
//   55     if (platform==2010)
//   56     {
//   57       BOOK_PLAYER_2010 *bkp=(BOOK_PLAYER_2010*)bk;
//   58       TRACK_DESC *track_desc=new TRACK_DESC;
//   59       memset(track_desc,0,sizeof(TRACK_DESC));
//   60       wchar_t *path=bkp->dsc->path;
//   61       wchar_t *name=bkp->dsc->name;
//   62       track_desc->path=new wchar_t[wstrlen(path)+1];
//   63       wstrcpy(track_desc->path,path);
//   64       track_desc->name=new wchar_t[wstrlen(name)+1];
//   65       wstrcpy(track_desc->name,name);
//   66       track_desc->fulltime=bkp->dsc->fulltime;
//   67       if (bkp->tracks_count)
//   68       {
//   69         track_desc->tracks_count=bkp->tracks_count;
//   70       }
//   71       else
//   72       {
//   73         track_desc->tracks_count=bkp->tracks_count2;
//   74       }
//   75       if (bkp->pos>10000)
//   76       {
//   77         track_desc->pos=bkp->pos2+1;
//   78       }
//   79       else
//   80       {
//   81         track_desc->pos=bkp->pos+1;
//   82       }
//   83       return track_desc;
//   84     }
//   85     else if (platform==2020)
//   86     {
//   87       BOOK_PLAYER_2020 *bkp=(BOOK_PLAYER_2020*)bk;
//   88       TRACK_DESC *track_desc=new TRACK_DESC;
        MOV      R0,#+20
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R5,R0
//   89       memset(track_desc,0,sizeof(TRACK_DESC));
        MOV      R2,#+20
        MOV      R1,#+0
        SWI      +274
//   90       wchar_t *path=bkp->dsc->path;
        LDR      R0,[R4, #+116]
        LDR      R6,[R0, #+4]
//   91       wchar_t *name=bkp->dsc->name;
        LDR      R7,[R0, #+8]
//   92       track_desc->path=new wchar_t[wstrlen(path)+1];
        MOV      R0,R6
        SWI      +343
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R5, #+0]
//   93       wstrcpy(track_desc->path,path);
        MOV      R1,R6
        SWI      +338
//   94       track_desc->name=new wchar_t[wstrlen(name)+1];
        MOV      R0,R7
        SWI      +343
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R5, #+4]
//   95       wstrcpy(track_desc->name,name);
        MOV      R1,R7
        SWI      +338
//   96       track_desc->fulltime=bkp->dsc->fulltime;
        LDR      R0,[R4, #+116]
        LDR      R0,[R0, #+16]
        STR      R0,[R5, #+8]
//   97       track_desc->tracks_count=bkp->tracks_count;
        LDR      R0,[R4, #+148]
        STR      R0,[R5, #+16]
//   98       track_desc->pos=bkp->pos2+1;
        LDRH     R0,[R4, #+122]
        ADD      R0,R0,#+1
        STR      R0,[R5, #+12]
        MOV      R0,R5
        POP      {R1-R7,PC}
//   99       return track_desc;
//  100     }
??TrackDesc_Get_2:
        MOV      R0,#+20
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R5,R0
        MOV      R2,#+20
        MOV      R1,#+0
        SWI      +274
        MOV      R0,#+0
        MOV      R1,SP
??TrackDesc_Get_3:
        ADD      R2,R4,#+108
        LDRB     R2,[R0, +R2]
        STRB     R2,[R0, +R1]
        ADD      R0,R0,#+1
        CMP      R0,#+4
        BLT      ??TrackDesc_Get_3
        LDR      R0,[SP, #+0]
        ADD      R1,SP,#+4
        LDR      R6,[R0, #+4]
        MOV      R0,#+0
??TrackDesc_Get_4:
        ADD      R2,R4,#+108
        LDRB     R2,[R0, +R2]
        STRB     R2,[R0, +R1]
        ADD      R0,R0,#+1
        CMP      R0,#+4
        BLT      ??TrackDesc_Get_4
        LDR      R0,[SP, #+4]
        LDR      R7,[R0, #+8]
        MOV      R0,R6
        SWI      +343
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R5, #+0]
        MOV      R1,R6
        SWI      +338
        MOV      R0,R7
        SWI      +343
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R5, #+4]
        MOV      R1,R7
        SWI      +338
        MOV      R0,#+0
        ADD      R1,SP,#+8
??TrackDesc_Get_5:
        ADD      R2,R4,#+108
        LDRB     R2,[R0, +R2]
        STRB     R2,[R0, +R1]
        ADD      R0,R0,#+1
        CMP      R0,#+4
        BLT      ??TrackDesc_Get_5
        LDR      R0,[SP, #+8]
        LDR      R0,[R0, #+16]
        STR      R0,[R5, #+8]
        LDRB     R0,[R4, #+129]
        LDRB     R1,[R4, #+128]
        ORRS     R0,R1,R0, LSL #+8
        LDRBNE   R0,[R4, #+129]
        LDRBEQ   R1,[R4, #+132]
        LDRBEQ   R0,[R4, #+133]
        ORR      R0,R1,R0, LSL #+8
        STR      R0,[R5, #+16]
        LDRB     R0,[R4, #+93]
        LDRB     R1,[R4, #+92]
        ORR      R0,R1,R0, LSL #+8
        MOV      R1,#+17
        ORR      R1,R1,#0x2700
        CMP      R0,R1
        LDRBCS   R0,[R4, #+115]
        LDRBCS   R1,[R4, #+114]
        LDRBCC   R0,[R4, #+93]
        LDRBCC   R1,[R4, #+92]
        ORR      R0,R1,R0, LSL #+8
        ADD      R0,R0,#+1
        STR      R0,[R5, #+12]
        MOV      R0,R5
        POP      {R1-R7,PC}
//  101   }
//  102   return 0;
??TrackDesc_Get_1:
        MOV      R0,#+0
        POP      {R1-R7,PC}       ;; return
        CFI EndBlock cfiBlock5
//  103 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine3_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine3_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine4_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine4_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine5_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine5_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock8

        END
//  104 
//  105 
// 
// 692 bytes in segment CODE
// 
// 644 bytes of CODE memory (+ 48 bytes shared)
//
//Errors: none
//Warnings: none
