//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  23:03:43 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\stri /
//                       ng.c                                                /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\stri /
//                       ng.c -D NDEBUG -D OLDFUNCTIONS -lC                  /
//                       Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\EN\L /
//                       ist\ -lA Z:\home\perk11\www\perk11.info\svn\SE\Cove /
//                       rArt\EN\List\ -o Z:\home\perk11\www\perk11.info\svn /
//                       \SE\CoverArt\EN\Obj\ -s9 --cpu_mode arm --endian    /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork -e --enable_multibytes --fpu None       /
//                       --eec++ --dlib_config Z:\home\perk11\IAR2\arm\LIB\d /
//                       l5tpainl8n.h --preinclude                           /
//                       Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\LNG- /
//                       EN.h -I Z:\home\perk11\IAR2\arm\INC\                /
//                       --inline_threshold=2                                /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\EN\L /
//                       ist\string.s79                                      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME string

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??c2anim
        FUNCTION ??c2anim,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??c2anim??rT
        PUBLIC ??c2i
        FUNCTION ??c2i,0203H
        MULTWEAK ??c2i??rT
        PUBLIC ??getint
        FUNCTION ??getint,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??getint??rT
        PUBLIC ??h2i
        FUNCTION ??h2i,0203H
        MULTWEAK ??h2i??rT
        MULTWEAK `??operator new??rA`
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        


??c2anim??rT        SYMBOL "??rT", ??c2anim

??c2i??rT           SYMBOL "??rT", ??c2i

??getint??rT        SYMBOL "??rT", ??getint

??h2i??rT           SYMBOL "??rT", ??h2i
`??operator new??rA` SYMBOL "??rA", `??operator new`

        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN anlst


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??c2i??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??c2i
// Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\string.c
//    1 #include "..\\include\Lib_Clara.h"
//    2 #include "..\\include\Dir.h"
//    3 #include "structs.h"
//    4 #include "Externals.h"
//    5 
//    6 extern ANIM_LIST anlst;
//    7 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??c2i
        ARM
//    8 int c2i(char *prt)
//    9 {
//   10   int res=0; while (prt[0]!=';') { res=res * 10 + (prt[0]-0x30); *prt++; } return res;
??c2i:
        LDRB     R2,[R0, #+0]
        MOV      R1,#+0
        MOV      R3,#+10
        CMP      R2,#+59
        BEQ      ??c2i_1
??c2i_2:
        LDRB     R2,[R0], #+1
        MLA      R1,R3,R1,R2
        LDRB     R2,[R0, #+0]
        SUB      R1,R1,#+48
        CMP      R2,#+59
        BNE      ??c2i_2
??c2i_1:
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//   11 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??getint??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??getint
//   12 
//   13 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??getint
        ARM
//   14 int getint(char *line, int *pos,char end)
//   15 {
??getint:
        PUSH     {R4-R6}
        CFI R6 Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   16   bool minus=false;
//   17   if (line[pos[0]]=='-')
        LDR      R3,[R1, #+0]
        MOV      R12,#+0
        LDRB     R4,[R3, +R0]
//   18   {
//   19     minus=true;
//   20     pos[0]++;
//   21   }
//   22   int ret=0;
        MOV      R6,#+10
        CMP      R4,#+45
        ADDEQ    R3,R3,#+1
        STREQ    R3,[R1, #+0]
        LDR      R4,[R1, #+0]
        MOVEQ    R12,#+1
        LDRB     R4,[R4, +R0]
        MOV      R3,#+0
        CMP      R4,R2
        BEQ      ??getint_1
//   23   while (line[pos[0]]!=end)
//   24   {
//   25     ret=(ret*10)+(line[pos[0]]-0x30);
??getint_2:
        LDR      R4,[R1, #+0]
        LDRB     R5,[R4, +R0]
//   26     pos[0]++;
        ADD      R4,R4,#+1
        STR      R4,[R1, #+0]
//   27   }
        LDRB     R4,[R4, +R0]
        MLA      R3,R6,R3,R5
        CMP      R4,R2
        SUB      R3,R3,#+48
        BNE      ??getint_2
//   28   pos[0]++;
??getint_1:
        LDR      R0,[R1, #+0]
//   29   if (minus)ret=-ret;
        CMP      R12,#+0
        ADD      R0,R0,#+1
        STR      R0,[R1, #+0]
//   30   return ret;
        POP      {R4-R6}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI CFA R13+0
        RSBNE    R3,R3,#+0
        MOV      R0,R3
        BX       LR               ;; return
        CFI EndBlock cfiBlock3
//   31 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??c2anim??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??c2anim
//   32 
//   33 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??c2anim
        ARM
//   34 void c2anim(char *line)
//   35 {
??c2anim:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB      SP,SP,#+4
        CFI CFA R13+16
        MOV      R4,R0
//   36   // Добавляем анимацию в список
//   37   ANIM_ELEM *anel=new ANIM_ELEM;
        MOV      R0,#+40
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R5,R0
//   38   memset(anel,0,sizeof(ANIM_ELEM));
        MOV      R2,#+40
        MOV      R1,#+0
        SWI      +274
//   39   int pos=0;
        MOV      R1,#+0
        STR      R1,[SP, #+0]
//   40   anel->lblID=getint(line, &pos, ':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        BL       ??getint
        STR      R0,[R5, #+0]
//   41   anel->X=getint(line, &pos, ':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        BL       ??getint
        STR      R0,[R5, #+4]
//   42   anel->Y=getint(line, &pos, ':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        BL       ??getint
        STR      R0,[R5, #+8]
//   43   anel->maxX=getint(line, &pos, ':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        BL       ??getint
        STR      R0,[R5, #+12]
//   44   anel->maxY=getint(line, &pos, ':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        BL       ??getint
        STR      R0,[R5, #+16]
//   45   anel->Color=getint(line, &pos, ':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        BL       ??getint
        STR      R0,[R5, #+28]
//   46   anel->Color2=getint(line, &pos, ':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        BL       ??getint
        STR      R0,[R5, #+32]
//   47   anel->Font=getint(line, &pos, ':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        BL       ??getint
        STR      R0,[R5, #+24]
//   48   anel->CT=getint(line, &pos, ':');
        MOV      R2,#+58
        MOV      R1,SP
        MOV      R0,R4
        BL       ??getint
        STR      R0,[R5, #+20]
//   49   anel->DrawWithNext=getint(line, &pos, ';');
        MOV      R2,#+59
        MOV      R1,SP
        MOV      R0,R4
        BL       ??getint
        STR      R0,[R5, #+36]
//   50   List_InsertLast(anlst.lst,anel);
        LDR      R0,??c2anim_1    ;; anlst
        MOV      R1,R5
        LDR      R0,[R0, #+0]
        SWI      +432
//   51 };
        POP      {R0,R4,R5,PC}    ;; return
        DATA
??c2anim_1:
        DC32     anlst
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??h2i??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??h2i
//   52 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??h2i
        ARM
//   53 int h2i(char * h)
//   54 {
//   55   char c;
//   56   int res=0;
??h2i:
        MOV      R1,#+0
//   57   while((*h++)!='X');
??h2i_1:
        LDRB     R2,[R0], #+1
        CMP      R2,#+88
        BNE      ??h2i_1
//   58   do
//   59   {
//   60     c=*h++;
??h2i_2:
        LDRB     R2,[R0], #+1
//   61     if (c>0x60) c-=0x20; else c-=0x30;
        CMP      R2,#+97
        ADDCS    R2,R2,#+224
        ADDCC    R2,R2,#+208
        AND      R2,R2,#0xFF
//   62     if (c>9) c-=7;
        CMP      R2,#+10
        ADDCS    R2,R2,#+249
        ANDCS    R2,R2,#0xFF
//   63     res<<=4;
//   64     res|=c;
        ORR      R1,R2,R1, LSL #+4
//   65   }
//   66   while(*h!='\0' || *h!=0);
        LDRB     R2,[R0, #+0]
        CMP      R2,#+0
        BNE      ??h2i_2
//   67   return(res);
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock7
//   68 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine4_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine4_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock8

        END
// 
// 544 bytes in segment CODE
// 
// 516 bytes of CODE memory (+ 28 bytes shared)
//
//Errors: none
//Warnings: none
