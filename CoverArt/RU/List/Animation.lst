##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  23:01:47 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\Anima #
#                       tion.c                                               #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\Anima #
#                       tion.c -D NDEBUG -D OLDFUNCTIONS -lC                 #
#                       Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\RU\Li #
#                       st\ -lA Z:\home\perk11\www\perk11.info\svn\SE\CoverA #
#                       rt\RU\List\ -o Z:\home\perk11\www\perk11.info\svn\SE #
#                       \CoverArt\RU\Obj\ -s9 --cpu_mode arm --endian        #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --enable_multibytes --fpu None --eec++            #
#                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8 #
#                       n.h --preinclude Z:\home\perk11\www\perk11.info\svn\ #
#                       SE\CoverArt\LNG-RU.h -I Z:\home\perk11\IAR2\arm\INC\ #
#                        --inline_threshold=2                                #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\RU\Li #
#                       st\Animation.lst                                     #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\RU\Ob #
#                       j\Animation.r79                                      #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\Animation.c
      1          #include "..\\include\Lib_Clara.h"
      2          #include "..\\include\Dir.h"
      3          #include "config_data.h"
      4          #include "structs.h"
      5          #include "Externals.h"
      6          #include "string.h"
      7          
      8          extern LABEL labels[10];
      9          extern UI_IMG img;
     10          

   \                                 In segment DATA_I, align 4, align-sorted
     11          ANIM_LIST anlst;
   \                     anlst:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for anlst>`
     12          int AnimUpdateTime=1000;
   \                     AnimUpdateTime:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for AnimUpdateTime>`

   \                                 In segment DATA_Z, align 4, align-sorted
     13          int AnimYPlus=0;
   \                     AnimYPlus:
   \   00000000                      DS8 4
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          void MakeUsed(char *line)
     16          {
   \                     ??MakeUsed:
   \   00000000   10002DE9           PUSH     {R4}
     17            int x=0;
   \   00000004   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   9BCFA0E3           MOV      R12,#+620
   \   00000010   3B0052E3           CMP      R2,#+59
   \   00000014   0800001A           BNE      ??MakeUsed_1
   \   00000018   0A0000EA           B        ??MakeUsed_2
     18            while (line[x]!=';')
     19            {
     20              labels[line[x]-0x30].UsedInAnim=true;
   \                     ??MakeUsed_3:
   \   0000001C   0030D1E7           LDRB     R3,[R1, +R0]
   \   00000020   ........           LDR      R4,??DataTable5  ;; labels
   \   00000024   D720E0E3           MVN      R2,#+215
   \   00000028   9C4323E0           MLA      R3,R12,R3,R4
   \   0000002C   712CC2E3           BIC      R2,R2,#0x7100
   \   00000030   0140A0E3           MOV      R4,#+1
   \   00000034   0340C2E7           STRB     R4,[R2, +R3]
     21              x++;
   \   00000038   011081E2           ADD      R1,R1,#+1
     22            }
   \                     ??MakeUsed_1:
   \   0000003C   0020D1E7           LDRB     R2,[R1, +R0]
   \   00000040   3B0052E3           CMP      R2,#+59
   \   00000044   F4FFFF1A           BNE      ??MakeUsed_3
     23          };
   \                     ??MakeUsed_2:
   \   00000048   1000BDE8           POP      {R4}
   \   0000004C   1EFF2FE1           BX       LR               ;; return
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          void MakeHidden(char *line)
     26          {
   \                     ??MakeHidden:
   \   00000000   10002DE9           PUSH     {R4}
     27            int x=0;
   \   00000004   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   9BCFA0E3           MOV      R12,#+620
   \   00000010   3B0052E3           CMP      R2,#+59
   \   00000014   0800001A           BNE      ??MakeHidden_1
   \   00000018   0A0000EA           B        ??MakeHidden_2
     28            while (line[x]!=';')
     29            {
     30              labels[line[x]-0x30].Hide=true;
   \                     ??MakeHidden_3:
   \   0000001C   0030D1E7           LDRB     R3,[R1, +R0]
   \   00000020   ........           LDR      R4,??DataTable5  ;; labels
   \   00000024   D620E0E3           MVN      R2,#+214
   \   00000028   9C4323E0           MLA      R3,R12,R3,R4
   \   0000002C   712CC2E3           BIC      R2,R2,#0x7100
   \   00000030   0140A0E3           MOV      R4,#+1
   \   00000034   0340C2E7           STRB     R4,[R2, +R3]
     31              x++;
   \   00000038   011081E2           ADD      R1,R1,#+1
     32            }
   \                     ??MakeHidden_1:
   \   0000003C   0020D1E7           LDRB     R2,[R1, +R0]
   \   00000040   3B0052E3           CMP      R2,#+59
   \   00000044   F4FFFF1A           BNE      ??MakeHidden_3
     33          };
   \                     ??MakeHidden_2:
   \   00000048   1000BDE8           POP      {R4}
   \   0000004C   1EFF2FE1           BX       LR               ;; return
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          void Anim_Init()
     36          {
   \                     ??Anim_Init:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     37            //Создадим список анимационных экшнов
     38            anlst.lst=List_Create();
   \   00000004   ........           LDR      R4,??DataTable3  ;; anlst
   \   00000008   9CD04DE2           SUB      SP,SP,#+156
     39            int Count=0;
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   690100EF           SWI      +361
   \   00000014   000084E5           STR      R0,[R4, #+0]
     40            anlst.index=-1;
   \   00000018   0500E0E1           MVN      R0,R5
   \   0000001C   040084E5           STR      R0,[R4, #+4]
     41            if (AllowAnim==true)
   \   00000020   C0019FE5           LDR      R0,??Anim_Init_1+0x4  ;; AllowAnim
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   010050E3           CMP      R0,#+1
   \   0000002C   6A00001A           BNE      ??Anim_Init_2
     42            {
     43              int file;
     44              FSTAT fst;
     45              wchar_t *name=new wchar_t[strlen(ANIM_NAME)+strlen(".cas")+1];
   \   00000030   B4819FE5           LDR      R8,??Anim_Init_1+0x8  ;; ANIM_NAME
   \   00000034   B4619FE5           LDR      R6,??Anim_Init_1+0xC  ;; `?<Constant ".cas">`
   \   00000038   0800A0E1           MOV      R0,R8
   \   0000003C   5A0100EF           SWI      +346
   \   00000040   0070A0E1           MOV      R7,R0
   \   00000044   0600A0E1           MOV      R0,R6
   \   00000048   5A0100EF           SWI      +346
   \   0000004C   070080E0           ADD      R0,R0,R7
   \   00000050   010080E2           ADD      R0,R0,#+1
   \   00000054   8000A0E1           LSL      R0,R0,#+1
   \   00000058   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   0000005C   0070A0E1           MOV      R7,R0
     46              char2unicode(name, ANIM_NAME,strlen(ANIM_NAME));
   \   00000060   0800A0E1           MOV      R0,R8
   \   00000064   5A0100EF           SWI      +346
   \   00000068   0020A0E1           MOV      R2,R0
   \   0000006C   0810A0E1           MOV      R1,R8
   \   00000070   0700A0E1           MOV      R0,R7
   \   00000074   ........           _BLF     ??char2unicode,??char2unicode??rA
     47              wstrcat(name,L".cas");
   \   00000078   081086E2           ADD      R1,R6,#+8
   \   0000007C   0700A0E1           MOV      R0,R7
   \   00000080   540100EF           SWI      +340
     48              if (fstat(checkfile(name),name,&fst)==0)
   \   00000084   0700A0E1           MOV      R0,R7
   \   00000088   ........           _BLF     ??checkfile,??checkfile??rA
   \   0000008C   0D20A0E1           MOV      R2,SP
   \   00000090   0710A0E1           MOV      R1,R7
   \   00000094   1C0100EF           SWI      +284
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   4C00001A           BNE      ??Anim_Init_3
     49              {
     50                  if ((file=_fopen(checkfile(name),name,FSX_O_RDONLY,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
   \   000000A0   0700A0E1           MOV      R0,R7
   \   000000A4   ........           _BLF     ??checkfile,??checkfile??rA
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   02002DE9           PUSH     {R1}
   \   000000B0   603FA0E3           MOV      R3,#+384
   \   000000B4   0120A0E3           MOV      R2,#+1
   \   000000B8   0710A0E1           MOV      R1,R7
   \   000000BC   160100EF           SWI      +278
   \   000000C0   0090B0E1           MOVS     R9,R0
   \   000000C4   04D08DE2           ADD      SP,SP,#+4
   \   000000C8   4100004A           BMI      ??Anim_Init_3
     51                  {
     52                    char * buf;
     53                    char * param;
     54                    buf=new char[fst.fsize+1];
   \   000000CC   08009DE5           LDR      R0,[SP, #+8]
   \   000000D0   010080E2           ADD      R0,R0,#+1
   \   000000D4   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
     55                    fread(file,buf,fst.fsize);
   \   000000D8   08209DE5           LDR      R2,[SP, #+8]
   \   000000DC   0080A0E1           MOV      R8,R0
   \   000000E0   0810A0E1           MOV      R1,R8
   \   000000E4   0900A0E1           MOV      R0,R9
   \   000000E8   180100EF           SWI      +280
     56                    
     57                    if (param=manifest_GetParam(buf,"[ACTIONS_COUNT]",0))
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   141086E2           ADD      R1,R6,#+20
   \   000000F4   0800A0E1           MOV      R0,R8
   \   000000F8   750100EF           SWI      +373
   \   000000FC   0090B0E1           MOVS     R9,R0
   \   00000100   0300000A           BEQ      ??Anim_Init_4
     58                    {   
     59                      Count=c2i(param);
   \   00000104   ........           _BLF     ??c2i,??c2i??rA
   \   00000108   0050A0E1           MOV      R5,R0
     60                      mfree(param);
   \   0000010C   0900A0E1           MOV      R0,R9
   \   00000110   040100EF           SWI      +260
     61                    }
     62                    if (param=manifest_GetParam(buf,"[UPDATE_TIME]",0))
   \                     ??Anim_Init_4:
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   241086E2           ADD      R1,R6,#+36
   \   0000011C   0800A0E1           MOV      R0,R8
   \   00000120   750100EF           SWI      +373
   \   00000124   0090B0E1           MOVS     R9,R0
   \   00000128   0300000A           BEQ      ??Anim_Init_5
     63                    {
     64                      AnimUpdateTime=c2i(param);
   \   0000012C   ........           _BLF     ??c2i,??c2i??rA
   \   00000130   080084E5           STR      R0,[R4, #+8]
     65                      mfree(param);
   \   00000134   0900A0E1           MOV      R0,R9
   \   00000138   040100EF           SWI      +260
     66                    }
     67                    if (param=manifest_GetParam(buf,"[USED_LABELS]",0))
   \                     ??Anim_Init_5:
   \   0000013C   0020A0E3           MOV      R2,#+0
   \   00000140   341086E2           ADD      R1,R6,#+52
   \   00000144   0800A0E1           MOV      R0,R8
   \   00000148   750100EF           SWI      +373
   \   0000014C   0040B0E1           MOVS     R4,R0
   \   00000150   0200000A           BEQ      ??Anim_Init_6
     68                    {
     69                      MakeUsed(param);
   \   00000154   ........           BL       ??MakeUsed
     70                      mfree(param);
   \   00000158   0400A0E1           MOV      R0,R4
   \   0000015C   040100EF           SWI      +260
     71                    }
     72                    if (param=manifest_GetParam(buf,"[HIDE_WHEN_ISNT_IN_STANDBY]",0))
   \                     ??Anim_Init_6:
   \   00000160   0020A0E3           MOV      R2,#+0
   \   00000164   441086E2           ADD      R1,R6,#+68
   \   00000168   0800A0E1           MOV      R0,R8
   \   0000016C   750100EF           SWI      +373
   \   00000170   0040B0E1           MOVS     R4,R0
   \   00000174   0200000A           BEQ      ??Anim_Init_7
     73                    {
     74                      MakeHidden(param);
   \   00000178   ........           BL       ??MakeHidden
     75                      mfree(param);
   \   0000017C   0400A0E1           MOV      R0,R4
   \   00000180   040100EF           SWI      +260
     76                    }
     77                    int x=0;
     78                    for (x=0;x<Count;x++)
   \                     ??Anim_Init_7:
   \   00000184   0060A0E3           MOV      R6,#+0
   \   00000188   010055E3           CMP      R5,#+1
   \   0000018C   0E0000AA           BGE      ??Anim_Init_8
   \   00000190   0F0000EA           B        ??Anim_Init_3
     79                    {
     80                       char pattern[128];
     81                       sprintf(pattern,"%d)",x);
   \                     ??Anim_Init_9:
   \   00000194   0620A0E1           MOV      R2,R6
   \   00000198   111F8FE2           ADR      R1,??Anim_Init_1  ;; "%d)"
   \   0000019C   1C008DE2           ADD      R0,SP,#+28
   \   000001A0   140100EF           SWI      +276
     82                       if (param=manifest_GetParam(buf,pattern,0))
   \   000001A4   0020A0E3           MOV      R2,#+0
   \   000001A8   1C108DE2           ADD      R1,SP,#+28
   \   000001AC   0800A0E1           MOV      R0,R8
   \   000001B0   750100EF           SWI      +373
   \   000001B4   0040B0E1           MOVS     R4,R0
   \   000001B8   0200000A           BEQ      ??Anim_Init_10
     83                       {
     84                         c2anim(param);
   \   000001BC   ........           _BLF     ??c2anim,??c2anim??rA
     85                         mfree(param);
   \   000001C0   0400A0E1           MOV      R0,R4
   \   000001C4   040100EF           SWI      +260
     86                       }
     87                    }
   \                     ??Anim_Init_10:
   \   000001C8   016086E2           ADD      R6,R6,#+1
   \                     ??Anim_Init_8:
   \   000001CC   050056E1           CMP      R6,R5
   \   000001D0   EFFFFFBA           BLT      ??Anim_Init_9
     88                  }
     89              }
     90              delete(name);
   \                     ??Anim_Init_3:
   \   000001D4   0700A0E1           MOV      R0,R7
   \   000001D8   ........           _BLF     `??operator delete`,`??operator delete??rA`
     91            }
     92          };
   \                     ??Anim_Init_2:
   \   000001DC   9CD08DE2           ADD      SP,SP,#+156      ;; stack cleaning
   \   000001E0   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??Anim_Init_1:
   \   000001E4   25642900           DC8      "%d)"
   \   000001E8   ........           DC32     AllowAnim
   \   000001EC   ........           DC32     ANIM_NAME
   \   000001F0   ........           DC32     `?<Constant ".cas">`
     93          

   \                                 In segment CODE, align 4, keep-with-next
     94          void Anim_Free()
     95          {
   \                     ??Anim_Free:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R5,??DataTable3  ;; anlst
   \   00000008   000095E5           LDR      R0,[R5, #+0]
   \   0000000C   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0700000A           BEQ      ??Anim_Free_1
     96            //Удалим список экшнов
     97            ANIM_ELEM *anel;
     98            while (anlst.lst->FirstFree)
     99            {
    100              anel=(ANIM_ELEM*)List_RemoveAt(anlst.lst,0);
   \                     ??Anim_Free_2:
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   790100EF           SWI      +377
    101              delete(anel);
   \   00000024   ........           _BLF     `??operator delete`,`??operator delete??rA`
    102            }
   \   00000028   000095E5           LDR      R0,[R5, #+0]
   \   0000002C   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   F7FFFF1A           BNE      ??Anim_Free_2
    103            anlst.index=0;
    104            List_Destroy(anlst.lst);
   \                     ??Anim_Free_1:
   \   00000038   000095E5           LDR      R0,[R5, #+0]
   \   0000003C   0040A0E3           MOV      R4,#+0
   \   00000040   044085E5           STR      R4,[R5, #+4]
   \   00000044   6A0100EF           SWI      +362
    105            int x;
    106            for (x=0;x<10;x++)
   \   00000048   0000A0E3           MOV      R0,#+0
    107            {
    108              labels[x].UsedInAnim=false;
   \                     ??Anim_Free_3:
   \   0000004C   ........           LDR      R1,??DataTable5  ;; labels
   \   00000050   9B2FA0E3           MOV      R2,#+620
   \   00000054   921021E0           MLA      R1,R2,R0,R1
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   6822C1E5           STRB     R2,[R1, #+616]
    109              labels[x].Hide=false;
   \   00000060   6922C1E5           STRB     R2,[R1, #+617]
    110            }
   \   00000064   010080E2           ADD      R0,R0,#+1
   \   00000068   0A0050E3           CMP      R0,#+10
   \   0000006C   F6FFFFBA           BLT      ??Anim_Free_3
    111          };
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
    112          

   \                                 In segment CODE, align 4, keep-with-next
    113          int Anim_NextFrame()
    114          {
    115            //Следующий анимационный "кадр"
    116            ANIM_ELEM *anel=0;
    117            if (anlst.index==(anlst.lst->FirstFree))
   \                     ??Anim_NextFrame:
   \   00000000   64219FE5           LDR      R2,??Anim_NextFrame_1  ;; anlst
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   000092E5           LDR      R0,[R2, #+0]
   \   0000000C   041092E5           LDR      R1,[R2, #+4]
   \   00000010   B230D0E1           LDRH     R3,[R0, #+2]
   \   00000014   030051E1           CMP      R1,R3
    118            {
    119              anlst.index=0;
   \   00000018   0010A003           MOVEQ    R1,#+0
    120              anel=(ANIM_ELEM*)List_Get(anlst.lst, 0);
    121            }
    122            else
    123            {
    124              anlst.index++;
   \   0000001C   01108112           ADDNE    R1,R1,#+1
   \   00000020   041082E5           STR      R1,[R2, #+4]
    125              anel=(ANIM_ELEM*)List_Get(anlst.lst, anlst.index);
   \   00000024   AD0100EF           SWI      +429
   \   00000028   0040A0E1           MOV      R4,R0
    126            }
    127            if (anel)
   \   0000002C   000054E3           CMP      R4,#+0
   \   00000030   4B00000A           BEQ      ??Anim_NextFrame_2
    128            {
    129              if (anel->lblID<10)
   \   00000034   001094E5           LDR      R1,[R4, #+0]
   \   00000038   040094E5           LDR      R0,[R4, #+4]
   \   0000003C   0A0051E3           CMP      R1,#+10
   \   00000040   2D0000AA           BGE      ??Anim_NextFrame_3
    130              {
    131                labels[anel->lblID].X=anel->X;
   \   00000044   ........           LDR      R5,??DataTable5  ;; labels
   \   00000048   9B2FA0E3           MOV      R2,#+620
   \   0000004C   925121E0           MLA      R1,R2,R1,R5
   \   00000050   080281E5           STR      R0,[R1, #+520]
    132                labels[anel->lblID].Y=anel->Y;
   \   00000054   000094E5           LDR      R0,[R4, #+0]
   \   00000058   081094E5           LDR      R1,[R4, #+8]
   \   0000005C   925020E0           MLA      R0,R2,R0,R5
   \   00000060   0C1280E5           STR      R1,[R0, #+524]
    133                labels[anel->lblID].MaxX=anel->maxX;
   \   00000064   000094E5           LDR      R0,[R4, #+0]
   \   00000068   0C1094E5           LDR      R1,[R4, #+12]
   \   0000006C   925020E0           MLA      R0,R2,R0,R5
   \   00000070   101280E5           STR      R1,[R0, #+528]
    134                labels[anel->lblID].MaxY=anel->maxY;
   \   00000074   000094E5           LDR      R0,[R4, #+0]
   \   00000078   101094E5           LDR      R1,[R4, #+16]
   \   0000007C   925020E0           MLA      R0,R2,R0,R5
   \   00000080   141280E5           STR      R1,[R0, #+532]
    135              
    136                if (anel->CT!=3)
   \   00000084   140094E5           LDR      R0,[R4, #+20]
   \   00000088   030050E3           CMP      R0,#+3
    137                {
    138                  labels[anel->lblID].CT=anel->CT;
   \   0000008C   00109415           LDRNE    R1,[R4, #+0]
   \   00000090   92512110           MLANE    R1,R2,R1,R5
   \   00000094   18028115           STRNE    R0,[R1, #+536]
    139                }
    140                if (anel->Font!=0)
   \   00000098   180094E5           LDR      R0,[R4, #+24]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0800000A           BEQ      ??Anim_NextFrame_4
    141                {
    142                  labels[anel->lblID].Font=anel->Font;
   \   000000A4   001094E5           LDR      R1,[R4, #+0]
   \   000000A8   925121E0           MLA      R1,R2,R1,R5
   \   000000AC   1C0281E5           STR      R0,[R1, #+540]
    143                  labels[anel->lblID].FONT_SIZE=Font_GetHeight(anel->Font);
   \   000000B0   180094E5           LDR      R0,[R4, #+24]
   \   000000B4   ........           _BLF     ??Font_GetHeight,??Font_GetHeight??rA
   \   000000B8   001094E5           LDR      R1,[R4, #+0]
   \   000000BC   9B2FA0E3           MOV      R2,#+620
   \   000000C0   925121E0           MLA      R1,R2,R1,R5
   \   000000C4   640281E5           STR      R0,[R1, #+612]
    144                }
    145                if (anel->Color!=0)
   \                     ??Anim_NextFrame_4:
   \   000000C8   1C0094E5           LDR      R0,[R4, #+28]
   \   000000CC   000050E3           CMP      R0,#+0
    146                {
    147                  labels[anel->lblID].Color=anel->Color;
   \   000000D0   00109415           LDRNE    R1,[R4, #+0]
   \   000000D4   92512110           MLANE    R1,R2,R1,R5
   \   000000D8   20028115           STRNE    R0,[R1, #+544]
    148                }
    149                if (anel->Color2!=0)
   \   000000DC   200094E5           LDR      R0,[R4, #+32]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   1C00000A           BEQ      ??Anim_NextFrame_5
    150                {
    151                  labels[anel->lblID].borderColor=anel->Color2;
   \   000000E8   001094E5           LDR      R1,[R4, #+0]
   \   000000EC   925121E0           MLA      R1,R2,R1,R5
   \   000000F0   240281E5           STR      R0,[R1, #+548]
   \   000000F4   240094E5           LDR      R0,[R4, #+36]
   \   000000F8   3080BDE8           POP      {R4,R5,PC}
    152                }
    153              }
    154              else
    155              {
    156                if (anel->lblID==10)
   \                     ??Anim_NextFrame_3:
   \   000000FC   0700001A           BNE      ??Anim_NextFrame_6
    157                {
    158                  img.x=anel->X;
   \   00000100   68109FE5           LDR      R1,??Anim_NextFrame_1+0x4  ;; img
   \   00000104   040081E5           STR      R0,[R1, #+4]
    159                  img.y=anel->Y;
   \   00000108   080094E5           LDR      R0,[R4, #+8]
   \   0000010C   080081E5           STR      R0,[R1, #+8]
    160                  img.mx=anel->maxX;
   \   00000110   0C0094E5           LDR      R0,[R4, #+12]
   \   00000114   0C0081E5           STR      R0,[R1, #+12]
    161                  img.my=anel->maxY;
   \   00000118   100094E5           LDR      R0,[R4, #+16]
   \   0000011C   100081E5           STR      R0,[R1, #+16]
    162                }
    163                if (anel->lblID==11)
   \                     ??Anim_NextFrame_6:
   \   00000120   000094E5           LDR      R0,[R4, #+0]
   \   00000124   0B0050E3           CMP      R0,#+11
   \   00000128   0B00001A           BNE      ??Anim_NextFrame_5
    164                {
    165                  locCover_X=anel->X;
   \   0000012C   40009FE5           LDR      R0,??Anim_NextFrame_1+0x8  ;; locCover_X
   \   00000130   041094E5           LDR      R1,[R4, #+4]
   \   00000134   001080E5           STR      R1,[R0, #+0]
    166                  locCover_Y=anel->Y;
   \   00000138   38009FE5           LDR      R0,??Anim_NextFrame_1+0xC  ;; locCover_Y
   \   0000013C   081094E5           LDR      R1,[R4, #+8]
   \   00000140   001080E5           STR      R1,[R0, #+0]
    167                  locCover_MaxX=anel->maxX;
   \   00000144   30009FE5           LDR      R0,??Anim_NextFrame_1+0x10  ;; locCover_MaxX
   \   00000148   0C1094E5           LDR      R1,[R4, #+12]
   \   0000014C   001080E5           STR      R1,[R0, #+0]
    168                  locCover_MaxY=anel->maxY;
   \   00000150   28009FE5           LDR      R0,??Anim_NextFrame_1+0x14  ;; locCover_MaxY
   \   00000154   101094E5           LDR      R1,[R4, #+16]
   \   00000158   001080E5           STR      R1,[R0, #+0]
    169                }
    170              }
    171              return anel->DrawWithNext;
   \                     ??Anim_NextFrame_5:
   \   0000015C   240094E5           LDR      R0,[R4, #+36]
   \   00000160   3080BDE8           POP      {R4,R5,PC}
    172            }
    173            return 0;
   \                     ??Anim_NextFrame_2:
   \   00000164   0000A0E3           MOV      R0,#+0
   \   00000168   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??Anim_NextFrame_1:
   \   0000016C   ........           DC32     anlst
   \   00000170   ........           DC32     img
   \   00000174   ........           DC32     locCover_X
   \   00000178   ........           DC32     locCover_Y
   \   0000017C   ........           DC32     locCover_MaxX
   \   00000180   ........           DC32     locCover_MaxY
    174          };

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     anlst

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     labels

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for anlst>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for AnimUpdateTime>`:
   \   00000008   E8030000           DC32 1000

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ".cas">`:
   \   00000000   2E63617300         DC8 ".cas"
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   2E0063006100       DC8 2EH, 0, 63H, 0, 61H, 0, 73H, 0
   \              7300        
   \   00000010   0000               DC8 0, 0
   \   00000012   0000               DC8 0, 0
   \   00000014   5B414354494F       DC8 "[ACTIONS_COUNT]"
   \              4E535F434F55
   \              4E545D00    
   \   00000024   5B5550444154       DC8 "[UPDATE_TIME]"
   \              455F54494D45
   \              5D00        
   \   00000032   0000               DC8 0, 0
   \   00000034   5B555345445F       DC8 "[USED_LABELS]"
   \              4C4142454C53
   \              5D00        
   \   00000042   0000               DC8 0, 0
   \   00000044   5B484944455F       DC8 "[HIDE_WHEN_ISNT_IN_STANDBY]"
   \              5748454E5F49
   \              534E545F494E
   \              5F5354414E44
   \              42595D00    

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   25642900           DC8 "%d)"

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     Anim_Free()           12
     Anim_Init()          188
     Anim_NextFrame()      12
     MakeHidden(char *)     4
     MakeUsed(char *)       4


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     anlst                      12
     AnimYPlus                   4
     MakeUsed(char *)           80
     MakeHidden(char *)         80
     Anim_Init()               500
     Anim_Free()               116
     Anim_NextFrame()          388
     ??DataTable3                4
     ??DataTable5                4
     ?<Initializer for anlst>   12
     ?<Constant ".cas">         96
     ?<Constant "%d)">           4
      Others                   128

 
 1 276 bytes in segment CODE
   100 bytes in segment DATA_C
    12 bytes in segment DATA_I
    12 bytes in segment DATA_ID
     4 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 1 172 bytes of CODE  memory (+ 128 bytes shared)
   112 bytes of CONST memory
    16 bytes of DATA  memory

Errors: none
Warnings: none
