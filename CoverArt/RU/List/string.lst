##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  23:02:36 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\strin #
#                       g.c                                                  #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\strin #
#                       g.c -D NDEBUG -D OLDFUNCTIONS -lC                    #
#                       Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\RU\Li #
#                       st\ -lA Z:\home\perk11\www\perk11.info\svn\SE\CoverA #
#                       rt\RU\List\ -o Z:\home\perk11\www\perk11.info\svn\SE #
#                       \CoverArt\RU\Obj\ -s9 --cpu_mode arm --endian        #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --enable_multibytes --fpu None --eec++            #
#                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8 #
#                       n.h --preinclude Z:\home\perk11\www\perk11.info\svn\ #
#                       SE\CoverArt\LNG-RU.h -I Z:\home\perk11\IAR2\arm\INC\ #
#                        --inline_threshold=2                                #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\RU\Li #
#                       st\string.lst                                        #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\RU\Ob #
#                       j\string.r79                                         #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\CoverArt\string.c
      1          #include "..\\include\Lib_Clara.h"
      2          #include "..\\include\Dir.h"
      3          #include "structs.h"
      4          #include "Externals.h"
      5          
      6          extern ANIM_LIST anlst;
      7          

   \                                 In segment CODE, align 4, keep-with-next
      8          int c2i(char *prt)
      9          {
     10            int res=0; while (prt[0]!=';') { res=res * 10 + (prt[0]-0x30); *prt++; } return res;
   \                     ??c2i:
   \   00000000   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   0A30A0E3           MOV      R3,#+10
   \   0000000C   3B0052E3           CMP      R2,#+59
   \   00000010   0500000A           BEQ      ??c2i_1
   \                     ??c2i_2:
   \   00000014   ........           LDRB     R2,[R0], #+1
   \   00000018   932121E0           MLA      R1,R3,R1,R2
   \   0000001C   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000020   301041E2           SUB      R1,R1,#+48
   \   00000024   3B0052E3           CMP      R2,#+59
   \   00000028   F9FFFF1A           BNE      ??c2i_2
   \                     ??c2i_1:
   \   0000002C   0100A0E1           MOV      R0,R1
   \   00000030   1EFF2FE1           BX       LR               ;; return
     11          };
     12          
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          int getint(char *line, int *pos,char end)
     15          {
   \                     ??getint:
   \   00000000   70002DE9           PUSH     {R4-R6}
     16            bool minus=false;
     17            if (line[pos[0]]=='-')
   \   00000004   003091E5           LDR      R3,[R1, #+0]
   \   00000008   00C0A0E3           MOV      R12,#+0
   \   0000000C   0040D3E7           LDRB     R4,[R3, +R0]
     18            {
     19              minus=true;
     20              pos[0]++;
     21            }
     22            int ret=0;
   \   00000010   0A60A0E3           MOV      R6,#+10
   \   00000014   2D0054E3           CMP      R4,#+45
   \   00000018   01308302           ADDEQ    R3,R3,#+1
   \   0000001C   00308105           STREQ    R3,[R1, #+0]
   \   00000020   004091E5           LDR      R4,[R1, #+0]
   \   00000024   01C0A003           MOVEQ    R12,#+1
   \   00000028   0040D4E7           LDRB     R4,[R4, +R0]
   \   0000002C   0030A0E3           MOV      R3,#+0
   \   00000030   020054E1           CMP      R4,R2
   \   00000034   0800000A           BEQ      ??getint_1
     23            while (line[pos[0]]!=end)
     24            {
     25              ret=(ret*10)+(line[pos[0]]-0x30);
   \                     ??getint_2:
   \   00000038   004091E5           LDR      R4,[R1, #+0]
   \   0000003C   0050D4E7           LDRB     R5,[R4, +R0]
     26              pos[0]++;
   \   00000040   014084E2           ADD      R4,R4,#+1
   \   00000044   004081E5           STR      R4,[R1, #+0]
     27            }
   \   00000048   0040D4E7           LDRB     R4,[R4, +R0]
   \   0000004C   965323E0           MLA      R3,R6,R3,R5
   \   00000050   020054E1           CMP      R4,R2
   \   00000054   303043E2           SUB      R3,R3,#+48
   \   00000058   F6FFFF1A           BNE      ??getint_2
     28            pos[0]++;
   \                     ??getint_1:
   \   0000005C   000091E5           LDR      R0,[R1, #+0]
     29            if (minus)ret=-ret;
   \   00000060   00005CE3           CMP      R12,#+0
   \   00000064   010080E2           ADD      R0,R0,#+1
   \   00000068   000081E5           STR      R0,[R1, #+0]
     30            return ret;
   \   0000006C   7000BDE8           POP      {R4-R6}
   \   00000070   00306312           RSBNE    R3,R3,#+0
   \   00000074   0300A0E1           MOV      R0,R3
   \   00000078   1EFF2FE1           BX       LR               ;; return
     31          };
     32          
     33          

   \                                 In segment CODE, align 4, keep-with-next
     34          void c2anim(char *line)
     35          {
   \                     ??c2anim:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
     36            // Добавляем анимацию в список
     37            ANIM_ELEM *anel=new ANIM_ELEM;
   \   0000000C   2800A0E3           MOV      R0,#+40
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   0050A0E1           MOV      R5,R0
     38            memset(anel,0,sizeof(ANIM_ELEM));
   \   00000018   2820A0E3           MOV      R2,#+40
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   120100EF           SWI      +274
     39            int pos=0;
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   00108DE5           STR      R1,[SP, #+0]
     40            anel->lblID=getint(line, &pos, ':');
   \   0000002C   3A20A0E3           MOV      R2,#+58
   \   00000030   0D10A0E1           MOV      R1,SP
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       ??getint
   \   0000003C   000085E5           STR      R0,[R5, #+0]
     41            anel->X=getint(line, &pos, ':');
   \   00000040   3A20A0E3           MOV      R2,#+58
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       ??getint
   \   00000050   040085E5           STR      R0,[R5, #+4]
     42            anel->Y=getint(line, &pos, ':');
   \   00000054   3A20A0E3           MOV      R2,#+58
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       ??getint
   \   00000064   080085E5           STR      R0,[R5, #+8]
     43            anel->maxX=getint(line, &pos, ':');
   \   00000068   3A20A0E3           MOV      R2,#+58
   \   0000006C   0D10A0E1           MOV      R1,SP
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           BL       ??getint
   \   00000078   0C0085E5           STR      R0,[R5, #+12]
     44            anel->maxY=getint(line, &pos, ':');
   \   0000007C   3A20A0E3           MOV      R2,#+58
   \   00000080   0D10A0E1           MOV      R1,SP
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       ??getint
   \   0000008C   100085E5           STR      R0,[R5, #+16]
     45            anel->Color=getint(line, &pos, ':');
   \   00000090   3A20A0E3           MOV      R2,#+58
   \   00000094   0D10A0E1           MOV      R1,SP
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       ??getint
   \   000000A0   1C0085E5           STR      R0,[R5, #+28]
     46            anel->Color2=getint(line, &pos, ':');
   \   000000A4   3A20A0E3           MOV      R2,#+58
   \   000000A8   0D10A0E1           MOV      R1,SP
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       ??getint
   \   000000B4   200085E5           STR      R0,[R5, #+32]
     47            anel->Font=getint(line, &pos, ':');
   \   000000B8   3A20A0E3           MOV      R2,#+58
   \   000000BC   0D10A0E1           MOV      R1,SP
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   ........           BL       ??getint
   \   000000C8   180085E5           STR      R0,[R5, #+24]
     48            anel->CT=getint(line, &pos, ':');
   \   000000CC   3A20A0E3           MOV      R2,#+58
   \   000000D0   0D10A0E1           MOV      R1,SP
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   ........           BL       ??getint
   \   000000DC   140085E5           STR      R0,[R5, #+20]
     49            anel->DrawWithNext=getint(line, &pos, ';');
   \   000000E0   3B20A0E3           MOV      R2,#+59
   \   000000E4   0D10A0E1           MOV      R1,SP
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           BL       ??getint
   \   000000F0   240085E5           STR      R0,[R5, #+36]
     50            List_InsertLast(anlst.lst,anel);
   \   000000F4   0C009FE5           LDR      R0,??c2anim_1    ;; anlst
   \   000000F8   0510A0E1           MOV      R1,R5
   \   000000FC   000090E5           LDR      R0,[R0, #+0]
   \   00000100   B00100EF           SWI      +432
     51          };
   \   00000104   3180BDE8           POP      {R0,R4,R5,PC}    ;; return
   \                     ??c2anim_1:
   \   00000108   ........           DC32     anlst
     52          

   \                                 In segment CODE, align 4, keep-with-next
     53          int h2i(char * h)
     54          {
     55            char c;
     56            int res=0;
   \                     ??h2i:
   \   00000000   0010A0E3           MOV      R1,#+0
     57            while((*h++)!='X');
   \                     ??h2i_1:
   \   00000004   ........           LDRB     R2,[R0], #+1
   \   00000008   580052E3           CMP      R2,#+88
   \   0000000C   FCFFFF1A           BNE      ??h2i_1
     58            do
     59            {
     60              c=*h++;
   \                     ??h2i_2:
   \   00000010   ........           LDRB     R2,[R0], #+1
     61              if (c>0x60) c-=0x20; else c-=0x30;
   \   00000014   610052E3           CMP      R2,#+97
   \   00000018   E0208222           ADDCS    R2,R2,#+224
   \   0000001C   D0208232           ADDCC    R2,R2,#+208
   \   00000020   FF2002E2           AND      R2,R2,#0xFF
     62              if (c>9) c-=7;
   \   00000024   0A0052E3           CMP      R2,#+10
   \   00000028   F9208222           ADDCS    R2,R2,#+249
   \   0000002C   FF200222           ANDCS    R2,R2,#0xFF
     63              res<<=4;
     64              res|=c;
   \   00000030   011282E1           ORR      R1,R2,R1, LSL #+4
     65            }
     66            while(*h!='\0' || *h!=0);
   \   00000034   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   F3FFFF1A           BNE      ??h2i_2
     67            return(res);
   \   00000040   0100A0E1           MOV      R0,R1
   \   00000044   1EFF2FE1           BX       LR               ;; return
     68          };

   Maximum stack usage in bytes:

     Function                    CSTACK
     --------                    ------
     c2anim(char *)                 16
     c2i(char *)                     0
     getint(char *, int *, char)    12
     h2i(char *)                     0


   Segment part sizes:

     Function/Label              Bytes
     --------------              -----
     c2i(char *)                   52
     getint(char *, int *, char)  124
     c2anim(char *)               268
     h2i(char *)                   72
      Others                       28

 
 544 bytes in segment CODE
 
 516 bytes of CODE memory (+ 28 bytes shared)

Errors: none
Warnings: none
