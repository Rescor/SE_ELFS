##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:40:59 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\SystemTemp\mai #
#                       n.c                                                  #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\SystemTemp\mai #
#                       n.c -D NDEBUG -D OLDFUNCTIONS -lC                    #
#                       Z:\home\perk11\www\perk11.info\svn\SE\SystemTemp\Rel #
#                       ease\List\ -lA Z:\home\perk11\www\perk11.info\svn\SE #
#                       \SystemTemp\Release\List\ -o                         #
#                       Z:\home\perk11\www\perk11.info\svn\SE\SystemTemp\Rel #
#                       ease\Obj\ -s9 --no_unroll --no_inline --cpu_mode     #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 --interwork -e --fpu None --eec++ --dlib_config    #
#                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I         #
#                       Z:\home\perk11\IAR2\arm\INC\                         #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\SystemTemp\Rel #
#                       ease\List\main.lst                                   #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\SystemTemp\Rel #
#                       ease\Obj\main.r79                                    #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\SystemTemp\main.c
      1          #include "..\\include\Lib_Clara.h"
      2          #include "..\\include\Dir.h"
      3          

   \                                 In segment DATA_Z, align 4, align-sorted
      4          BATT  bat;
   \                     bat:
   \   00000000                      DS8 52
      5          wchar_t   ws[193];
   \                     ws:
   \   00000034                      DS8 388
      6          

   \                                 In segment CODE, align 4, keep-with-next
      7          void elf_exit(void)
      8          {
   \                     ??elf_exit:
   \   00000000   00402DE9           PUSH     {LR}
      9            kill_data(&ELF_BEGIN, (void(*)(void*))mfree_adr());
   \   00000004   048100EF           SWI      +33028
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??elf_exit_1  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??elf_exit_1:
   \   00000018   ........           DC32     ELF_BEGIN
     10          }
     11          

   \                                 In segment CODE, align 4, keep-with-next
     12          int main(u16 *exename,u16 *filename)
     13          {
   \                     main:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     14            GetBatteryState(NULL , &bat);
   \   00000004   6C409FE5           LDR      R4,??main_0      ;; bat
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   E40100EF           SWI      +484
     15            snwprintf(ws,193,L"Temp = %d C",bat.SystemTemperature);
   \   00000014   183094E5           LDR      R3,[R4, #+24]
   \   00000018   5C209FE5           LDR      R2,??main_0+0x4  ;; `?<Constant L"\\x54\\x65\\x6d\\x70\\x20\\x3d\\x20\\x25\\`
   \   0000001C   C110A0E3           MOV      R1,#+193
   \   00000020   340084E2           ADD      R0,R4,#+52
   \   00000024   150100EF           SWI      +277
     16            MessageBox(EMPTY_TEXTID,TextID_Create(ws,ENC_UCS2,TEXTID_ANY_LEN), NOIMAGE, 1, 5000 , 0);
   \   00000028   FF50A0E3           MOV      R5,#+255
   \   0000002C   FF5C85E3           ORR      R5,R5,#0xFF00
   \   00000030   0520A0E1           MOV      R2,R5
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   340084E2           ADD      R0,R4,#+52
   \   0000003C   5D0100EF           SWI      +349
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   02002DE9           PUSH     {R1}
   \   00000048   0130A0E3           MOV      R3,#+1
   \   0000004C   0520A0E1           MOV      R2,R5
   \   00000050   8810A0E3           MOV      R1,#+136
   \   00000054   4C1D81E3           ORR      R1,R1,#0x1300
   \   00000058   02002DE9           PUSH     {R1}
   \   0000005C   0010A0E1           MOV      R1,R0
   \   00000060   9004E0E3           MVN      R0,#-1879048192
   \   00000064   570200EF           SWI      +599
     17            SUBPROC(elf_exit);
   \   00000068   10009FE5           LDR      R0,??main_0+0x8  ;; ??elf_exit
   \   0000006C   080100EF           SWI      +264
     18            return(0);
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   3680BDE8           POP      {R1,R2,R4,R5,PC}  ;; return
   \                     ??main_0:
   \   00000078   ........           DC32     bat
   \   0000007C   ........           DC32     `?<Constant L"\\x54\\x65\\x6d\\x70\\x20\\x3d\\x20\\x25\\`
   \   00000080   ........           DC32     ??elf_exit
     19          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x54\\x65\\x6d\\x70\\x20\\x3d\\x20\\x25\\`:
   \   00000000   540065006D00       DC8 54H, 0, 65H, 0, 6DH, 0, 70H, 0
   \              7000        
   \   00000008   20003D002000       DC8 20H, 0, 3DH, 0, 20H, 0, 25H, 0
   \              2500        
   \   00000010   640020004300       DC8 64H, 0, 20H, 0, 43H, 0, 0, 0
   \              0000        

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     elf_exit()             4
     main(u16 *, u16 *)    20


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     bat                             440
     elf_exit()                       28
     main(u16 *, u16 *)              132
     ?<Constant L"\x54\x65\x6d\x70\x20\x3d\x20\x25\
                                      24
      Others                          32

 
 180 bytes in segment CODE
  24 bytes in segment DATA_C
 440 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 160 bytes of CODE  memory (+ 32 bytes shared)
  24 bytes of CONST memory
 440 bytes of DATA  memory

Errors: none
Warnings: none
