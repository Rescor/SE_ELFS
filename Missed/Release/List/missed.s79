//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  23:01:11 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\Missed\missed /
//                       .c                                                  /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\Missed\missed /
//                       .c -D NDEBUG -lC Z:\home\perk11\www\perk11.info\svn /
//                       \SE\Missed\Release\List\ -lA                        /
//                       Z:\home\perk11\www\perk11.info\svn\SE\Missed\Releas /
//                       e\List\ -o Z:\home\perk11\www\perk11.info\svn\SE\Mi /
//                       ssed\Release\Obj\ -s9 --cpu_mode arm --endian       /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork -e --fpu None --eec++ -I                /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\Missed\Releas /
//                       e\List\missed.s79                                   /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME missed

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
        PUBLIC ??OnCallManagerEvent
        FUNCTION ??OnCallManagerEvent,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??OnCallManagerEvent??rT
        PUBLIC ??bookOnDestroy
        FUNCTION ??bookOnDestroy,0603H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??bookOnDestroy??rT
        PUBLIC ??elf_exit
        FUNCTION ??elf_exit,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??elf_exit??rT
        PUBLIC ??extractdir
        FUNCTION ??extractdir,0203H
        LOCFRAME CSTACK, 576, STACK
        MULTWEAK ??extractdir??rT
        PUBLIC ??getcfg
        FUNCTION ??getcfg,0203H
        LOCFRAME CSTACK, 56, STACK
        MULTWEAK ??getcfg??rT
        PUBLIC ??isOurBook
        FUNCTION ??isOurBook,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??isOurBook??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        PUBLIC ??onAbout
        FUNCTION ??onAbout,0603H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??onAbout??rT
        PUBLIC ??onExit
        FUNCTION ??onExit,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??onExit??rT
        PUBLIC ??onTimer
        FUNCTION ??onTimer,0603H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??onTimer??rT
        PUBLIC ??splitfilename
        FUNCTION ??splitfilename,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??splitfilename??rT
        PUBLIC ??str2int
        FUNCTION ??str2int,0203H
        MULTWEAK ??str2int??rT
        MULTWEAK ??strncmpi??rA
        PUBWEAK ?init?tab?DATA_I
        PUBLIC cfg_filename
        PUBLIC cfg_filepath
        PUBLIC cfg_period
        PUBLIC cfgmacro
        PUBLIC checkevents
        PUBLIC disabled
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 588, STACK
        PUBLIC skipevents
        PUBLIC timer
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        

kill_data           SYMBOL "kill_data"

??OnCallManagerEvent??rT SYMBOL "??rT", ??OnCallManagerEvent

??bookOnDestroy??rT SYMBOL "??rT", ??bookOnDestroy

??elf_exit??rT      SYMBOL "??rT", ??elf_exit

??extractdir??rT    SYMBOL "??rT", ??extractdir

??getcfg??rT        SYMBOL "??rT", ??getcfg

??isOurBook??rT     SYMBOL "??rT", ??isOurBook
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main

??onAbout??rT       SYMBOL "??rT", ??onAbout

??onExit??rT        SYMBOL "??rT", ??onExit

??onTimer??rT       SYMBOL "??rT", ??onTimer

??splitfilename??rT SYMBOL "??rT", ??splitfilename

??str2int??rT       SYMBOL "??rT", ??str2int
??strncmpi??rA      SYMBOL "??rA", ??strncmpi

        EXTERN ??strncmpi
        FUNCTION ??strncmpi,0202H
        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??str2int??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??str2int
// Z:\home\perk11\www\perk11.info\svn\SE\Missed\missed.c
//    1 //#define DEBUG
//    2 
//    3 #include "..\\include\Lib_Clara.h"
//    4 #include "..\\include\Dir.h"
//    5 #include "string.h"
//    6 #include "util.h"

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??str2int
        ARM
// __??Code32?? __code __interwork __atpcs int str2int(char *)
??str2int:
        LDRB     R3,[R0, #+0]
        MOV      R2,#+10
        MOV      R1,#+0
        CMP      R3,#+36
        MOVEQ    R2,#+16
        ADDEQ    R0,R0,#+1
        BEQ      ??str2int_1
        CMP      R3,#+48
        LDRBEQ   R3,[R0, #+1]
        CMPEQ    R3,#+120
        BNE      ??str2int_1
        MOV      R2,#+16
        ADD      R0,R0,#+2
        B        ??str2int_1
??str2int_2:
        LDRB     R3,[R0], #+1
        MUL      R1,R2,R1
        SUB      R3,R3,#+48
        ORR      R1,R3,R1
??str2int_1:
        LDRB     R3,[R0, #+0]
        CMP      R3,#+48
        BCC      ??str2int_3
        CMP      R3,#+58
        BCC      ??str2int_2
??str2int_3:
        CMP      R2,#+16
        BNE      ??str2int_4
        CMP      R3,#+0
        ORRSNE   R3,R3,#0x1
        BEQ      ??str2int_4
        LDRB     R3,[R0], #+1
        MVN      R12,#+54
        ORR      R3,R12,R3
        ORR      R1,R3,R1, LSL #+4
        B        ??str2int_1
??str2int_4:
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??splitfilename??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??splitfilename

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??splitfilename
        ARM
// __??Code32?? __code __interwork __atpcs void splitfilename(wchar_t *, wchar_t *, wchar_t *)
??splitfilename:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
        MOV      R1,#+47
        SWI      +430
        MOV      R7,R0
        LSR      R0,R7,#+1
        SUB      R2,R0,R4, LSR #+1
        MOV      R1,R4
        MOV      R0,R5
        SWI      +339
        ADD      R1,R7,#+2
        MOV      R0,R6
        SWI      +338
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??extractdir??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??extractdir

        RSEG DATA_I:DATA:SORT:NOROOT(2)
// <unnamed> __data cfgmacro[9]
cfgmacro:
        DS8 72
        REQUIRE `?<Initializer for cfgmacro>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??extractdir
        ARM
// __??Code32?? __code __interwork __atpcs void extractdir(wchar_t *, wchar_t *, char *)
??extractdir:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        SUB      SP,SP,#+544
        CFI CFA R13+576
        LDR      R9,??extractdir_1  ;; `?<Constant "%%%s_INT%%">`
        LDR      R10,??extractdir_1+0x4  ;; cfgmacro
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
        MOV      R8,#+0
        B        ??extractdir_2
??extractdir_3:
        ADD      R8,R8,#+1
??extractdir_2:
        CMP      R8,#+9
        BCS      ??extractdir_4
        LDR      R2,[R10, +R8, LSL #+3]
        MOV      R1,R9
        MOV      R0,SP
        SWI      +276
        MOV      R7,R0
        MOV      R2,R7
        MOV      R1,SP
        MOV      R0,R6
        _BLF     ??strncmpi,??strncmpi??rA
        CMP      R0,#+0
        BNE      ??extractdir_5
        ADD      R0,R10,R8, LSL #+3
        LDR      R0,[R0, #+4]
        ORR      R0,R0,#0x1
        B        ??extractdir_6
??extractdir_5:
        LDR      R2,[R10, +R8, LSL #+3]
        ADD      R1,R9,#+12
        MOV      R0,SP
        SWI      +276
        MOV      R7,R0
        MOV      R2,R7
        MOV      R1,SP
        MOV      R0,R6
        _BLF     ??strncmpi,??strncmpi??rA
        CMP      R0,#+0
        BNE      ??extractdir_3
        ADD      R0,R10,R8, LSL #+3
        LDR      R0,[R0, #+4]
??extractdir_6:
        ADD      R6,R7,R6
        CMN      R0,#+1
        BEQ      ??extractdir_4
        SWI      +261
        MOV      R1,R0
        ADD      R0,SP,#+32
        SWI      +338
        B        ??extractdir_7
??extractdir_4:
        MOV      R1,#+0
        STRH     R1,[SP, #+32]
??extractdir_7:
        ADD      R0,SP,#+32
        SWI      +343
        MOV      R1,R6
        ADD      R2,SP,#+32
        ADD      R0,R2,R0, LSL #+1
        SWI      +344
        MOV      R2,R5
        MOV      R1,R4
        ADD      R0,SP,#+32
        BL       ??splitfilename
        ADD      SP,SP,#+544
        CFI CFA R13+32
        POP      {R4-R10,PC}      ;; return
        DATA
??extractdir_1:
        DC32     `?<Constant "%%%s_INT%%">`
        DC32     cfgmacro
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??onTimer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??onTimer
//    7 
//    8 #define ELFNAME "missed events"
//    9 #define LELFNAME L"missed events"
//   10 #define LELFVERSION L" v0.5\nby den_po"
//   11 #define LINIFILENAME _T("missed.ini")
//   12 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   13 static char myappname[]=ELFNAME;
//   14 
//   15 bool disabled=false;
//   16 int cfg_period=30;
//   17 wchar_t cfg_filepath[256];
//   18 wchar_t cfg_filename[256];
//   19 
//   20 u16 timer;
timer:
        DS8 2
        REQUIRE `?<Initializer for timer>`
        DS8 2
cfg_period:
        DS8 4
        REQUIRE `?<Initializer for cfg_period>`
//   21 
//   22 int skipevents;
skipevents:
        DS8 4
        REQUIRE `?<Initializer for skipevents>`
//   23 int checkevents;
checkevents:
        DS8 4
        REQUIRE `?<Initializer for checkevents>`
disabled:
        DS8 1
        REQUIRE `?<Initializer for disabled>`
        DS8 3
        DS8 16
        REQUIRE `?<Initializer for myappname>`
cfg_filepath:
        DS8 512
        REQUIRE `?<Initializer for cfg_filepath>`
cfg_filename:
        DS8 512
        REQUIRE `?<Initializer for cfg_filename>`
//   24 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??onTimer
        ARM
//   25 void onTimer(u16 timerID, LPARAM lparam)
//   26 {
??onTimer:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   27 	if(!disabled)
        LDR      R4,??DataTable9  ;; timer
        SUB      SP,SP,#+4
        CFI CFA R13+16
        LDRB     R0,[R4, #+16]
        MOV      R5,R1
        CMP      R0,#+0
        BNE      ??onTimer_1
//   28 	{
//   29 		char* me=MissedEvents();
        SWI      +33191
//   30 		char mestatus=*me;//some FWs use char :(
//   31 		if( mestatus & checkevents )
        LDRB     R0,[R0, #+0]
        LDR      R1,[R4, #+12]
        TST      R1,R0
        BEQ      ??onTimer_1
//   32 		{
//   33 			if(!GetSilent())
        SWI      +587
        CMP      R0,#+0
        BNE      ??onTimer_2
//   34 			{
//   35 				char vol;
//   36 				GetAudioSettings(2,&vol);
        MOV      R1,SP
        MOV      R0,#+2
        SWI      +589
//   37 				PlayFileV(cfg_filepath,cfg_filename,vol);
        LDRB     R2,[SP, #+0]
        ADD      R1,R4,#+548
        ADD      R0,R4,#+36
        SWI      +586
//   38 			}
//   39 			if(GetVibrator(0,0))
??onTimer_2:
        MOV      R1,#+0
        MOV      R0,#+0
        SWI      +588
        CMP      R0,#+0
        BEQ      ??onTimer_1
//   40 			{
//   41 				PAudioControl pAC=*GetAudioControlPtr();
        SWI      +33233
        LDR      R0,[R0, #+0]
//   42 				AudioControl_Vibrate(pAC,450,50,1500);
        MOV      R3,#+220
        ORR      R3,R3,#0x500
        MOV      R2,#+50
        ADD      R1,R2,#+400
        SWI      +466
//   43 			}
//   44 		}
//   45 #ifdef DEBUG
//   46 		if( mestatus & ~(skipevents|checkevents))
//   47 		{
//   48 			wchar_t temp[256];
//   49 			snwprintf(temp, MAXELEMS(temp), _T("unknown event status\n%x: %x"), me, mestatus &~(skipevents|checkevents));
//   50 			MessageBox(EMPTY_TEXTID, TextID_Create(temp,ENC_UCS2,MAXELEMS(temp)), NOIMAGE, 1, 0, 0);
//   51 			skipevents|=mestatus;
//   52 		}
//   53 #endif
//   54 	}
//   55 	Timer_ReSet(&timer,cfg_period*1000,onTimer,lparam);
??onTimer_1:
        LDR      R0,[R4, #+4]
        LDR      R2,??DataTable10  ;; ??onTimer
        MOV      R3,R5
        MOV      R5,#+1000
        MUL      R1,R5,R0
        MOV      R0,R4
        SWI      +296
//   56 }
        POP      {R0,R4,R5,PC}    ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??getcfg??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??getcfg
//   57 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??getcfg
        ARM
//   58 int getcfg()
//   59 {
??getcfg:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        SUB      SP,SP,#+28
        CFI CFA R13+52
//   60 	int fcfg;
//   61 	char* pcfg=NULL;
//   62 
//   63 	if( (fcfg=_fopen(GetDir(DIR_INI), LINIFILENAME , FSX_O_RDONLY, FSX_S_IREAD|FSX_S_IWRITE, 0))>=0)
        LDR      R4,??DataTable8  ;; `?<Constant "[FILE]">`
        MOV      R0,#+22
        SWI      +261
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+56
        MOV      R3,#+384
        MOV      R2,#+1
        ADD      R1,R4,#+20
        SWI      +278
        MOVS     R5,R0
        ADD      SP,SP,#+4
        CFI CFA R13+52
        BMI      ??getcfg_1
//   64 	{
//   65 		FSTAT _fstat;
//   66 		if (fstat(GetDir(DIR_INI), LINIFILENAME ,&_fstat)==0)
        MOV      R0,#+22
        SWI      +261
        MOV      R2,SP
        ADD      R1,R4,#+20
        SWI      +284
        CMP      R0,#+0
        BNE      ??getcfg_2
//   67 		{
//   68 			pcfg=(char*)malloc(_fstat.fsize+1);
        LDR      R0,[SP, #+8]
//   69 			fread(fcfg,pcfg,_fstat.fsize);
//   70 
//   71 			if(char* pfilepath=manifest_GetParam(pcfg,"[FILE]",0))
        LDR      R8,??getcfg_3    ;; timer
        ADD      R0,R0,#+1
        SWI      +259
        LDR      R2,[SP, #+8]
        MOV      R6,R0
        MOV      R1,R6
        MOV      R0,R5
        SWI      +280
        MOV      R2,#+0
        MOV      R1,R4
        MOV      R0,R6
        SWI      +373
        MOVS     R7,R0
        BEQ      ??getcfg_4
//   72 			{
//   73 				extractdir(cfg_filepath,cfg_filename,pfilepath);
        MOV      R2,R7
        ADD      R1,R8,#+548
        ADD      R0,R8,#+36
        BL       ??extractdir
//   74 				mfree(pfilepath);
        MOV      R0,R7
        SWI      +260
//   75 			}
//   76 			if(char* pperiod=manifest_GetParam(pcfg,"[PERIOD]",0))
??getcfg_4:
        MOV      R2,#+0
        ADD      R1,R4,#+8
        MOV      R0,R6
        SWI      +373
        MOVS     R4,R0
        BEQ      ??getcfg_5
//   77 			{
//   78 				cfg_period=str2int(pperiod);
        BL       ??str2int
        STR      R0,[R8, #+4]
//   79 				mfree(pperiod);
        MOV      R0,R4
        SWI      +260
//   80 			}
//   81 			mfree(pcfg);
??getcfg_5:
        MOV      R0,R6
        SWI      +260
//   82 		}
//   83 		fclose(fcfg);
??getcfg_2:
        MOV      R0,R5
        SWI      +279
//   84 		return 1;
        MOV      R0,#+1
        ADD      SP,SP,#+28
        CFI CFA R13+24
        POP      {R4-R8,PC}
        CFI CFA R13+52
//   85 	}
//   86 	return 0;
??getcfg_1:
        MOV      R0,#+0
        ADD      SP,SP,#+28
        CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
        DATA
??getcfg_3:
        DC32     timer
        CFI EndBlock cfiBlock9
//   87 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??elf_exit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??elf_exit
//   88 
//   89 
//   90 //-------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??elf_exit
        ARM
//   91 void elf_exit(void)
//   92 {
??elf_exit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   93 	kill_data(&ELF_BEGIN, (void(*)(void*))mfree_adr());
        SWI      +33028
        MOV      R1,R0
        LDR      R0,??elf_exit_1  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??elf_exit_1:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock11
//   94 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??bookOnDestroy??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??bookOnDestroy
//   95 
//   96 //////////////////////////////////////////////////////////////////////////////////////////
//   97 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??bookOnDestroy
        ARM
//   98 void bookOnDestroy(BOOK * book)
//   99 {
//  100 	Timer_Kill(&timer);
??bookOnDestroy:
        LDR      R0,??DataTable9  ;; timer
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SWI      +298
//  101 	MessageBox(EMPTY_TEXTID,TextID_Create( LELFNAME L" has been stopped",ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE,1,5000,0);
        LDR      R0,??bookOnDestroy_1  ;; `?<Constant L"\\x6d\\x69\\x73\\x73\\x65\\x64\\x20\\x65\\_1`
        MOV      R4,#+255
        ORR      R4,R4,#0xFF00
        MOV      R2,R4
        MOV      R1,#+0
        SWI      +349
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+12
        MOV      R3,#+1
        MOV      R2,R4
        MOV      R1,#+136
        ORR      R1,R1,#0x1300
        PUSH     {R1}
        CFI CFA R13+16
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
//  102 	SUBPROC(elf_exit);
        LDR      R0,??DataTable7  ;; ??elf_exit
        SWI      +264
//  103 }
        POP      {R0,R1,R4,PC}    ;; return
        DATA
??bookOnDestroy_1:
        DC32     `?<Constant L"\\x6d\\x69\\x73\\x73\\x65\\x64\\x20\\x65\\_1`
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??onExit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??onExit
//  104 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??onExit
        ARM
//  105 int onExit(void* r0,BOOK* b)
//  106 {
??onExit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,R1
//  107 	FreeBook(b);
        SWI      +303
//  108 	return 1;
        MOV      R0,#+1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock15
//  109 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??onAbout??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??onAbout
//  110 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??onAbout
        ARM
//  111 int onAbout(void* mess,BOOK* b)
//  112 {
??onAbout:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  113 	MessageBox(EMPTY_TEXTID,TextID_Create( LELFNAME LELFVERSION,ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE, 1 ,5000, *(BOOK**)mess);
        MOV      R1,#+0
        MOV      R4,R0
        LDR      R0,??onAbout_1   ;; `?<Constant L"\\x6d\\x69\\x73\\x73\\x65\\x64\\x20\\x65\\_2`
        MOV      R5,#+255
        ORR      R5,R5,#0xFF00
        MOV      R2,R5
        SWI      +349
        LDR      R1,[R4, #+0]
        MOV      R3,#+1
        PUSH     {R1}
        CFI CFA R13+16
        MOV      R2,R5
        MOV      R1,#+136
        ORR      R1,R1,#0x1300
        PUSH     {R1}
        CFI CFA R13+20
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
//  114 	return 1;
        MOV      R0,#+1
        POP      {R1,R2,R4,R5,PC}  ;; return
        DATA
??onAbout_1:
        DC32     `?<Constant L"\\x6d\\x69\\x73\\x73\\x65\\x64\\x20\\x65\\_2`
        CFI EndBlock cfiBlock17
//  115 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnCallManagerEvent??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??OnCallManagerEvent
//  116 
//  117 enum
//  118 {
//  119 	CALLMANAGER_IDLE            =0,
//  120 	CALLMANAGER_CALL_CONNECTED  =1,
//  121 	CALLMANAGER_CALL_SETUP      =2,
//  122 	CALLMANAGER_CALL_ALERT      =4,
//  123 	CALLMANAGER_CALL_WAITING    =5,
//  124 	CALLMANAGER_CALL_TERMINATED =6
//  125 };
//  126 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??OnCallManagerEvent
        ARM
//  127 int OnCallManagerEvent(void* r0,BOOK* b)
//  128 {
??OnCallManagerEvent:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  129 	switch(((CALLMANAGER_EVENT_DATA*)r0)->CallState)
        LDRB     R0,[R0, #+2]
        LDR      R4,??DataTable9  ;; timer
        SUBS     R0,R0,#+2
        SUBSNE   R0,R0,#+2
        BEQ      ??OnCallManagerEvent_1
        SUBS     R0,R0,#+2
        BEQ      ??OnCallManagerEvent_2
        B        ??OnCallManagerEvent_3
//  130 	{
//  131 	case CALLMANAGER_CALL_SETUP:
//  132 	case CALLMANAGER_CALL_ALERT:
//  133 		disabled=true;
??OnCallManagerEvent_1:
        MOV      R0,#+1
        STRB     R0,[R4, #+16]
??OnCallManagerEvent_3:
        MOV      R0,#+1
        POP      {R4,PC}
//  134 		break;
//  135 	case CALLMANAGER_CALL_TERMINATED:
//  136 		Timer_ReSet(&timer,cfg_period*1000,onTimer, 0);
??OnCallManagerEvent_2:
        LDR      R0,[R4, #+4]
        LDR      R2,??DataTable10  ;; ??onTimer
        MOV      R3,#+0
        MOV      R12,#+1000
        MUL      R1,R12,R0
        MOV      R0,R4
        SWI      +296
//  137 		disabled=false;
        MOV      R0,#+0
        STRB     R0,[R4, #+16]
//  138 		break;
//  139 	}
//  140 	return 1;
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock19
//  141 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??isOurBook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ??isOurBook
//  142 

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
//  143 const PAGE_MSG evtlist[] @ "DYN_PAGE"=
evtlist:
        DATA
        DC32 997, ??onExit, 998, ??onAbout, 442, ??OnCallManagerEvent, 64, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "AUDIO">`:
        DATA
        DC8 "AUDIO"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "IMAGE">`:
        DATA
        DC8 "IMAGE"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "VIDEO">`:
        DATA
        DC8 "VIDEO"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "THEME">`:
        DATA
        DC8 "THEME"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "OTHER">`:
        DATA
        DC8 "OTHER"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ELFS">`:
        DATA
        DC8 "ELFS"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ELFS_DAEMONS">`:
        DATA
        DC8 "ELFS_DAEMONS"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ELFS_CONFIG">`:
        DATA
        DC8 "ELFS_CONFIG"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "INI">`:
        DATA
        DC8 "INI"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "defaultpage">`:
        DATA
        DC8 "defaultpage"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "%%%s_INT%%">`:
        DATA
        DC8 "%%%s_INT%%"
        DC8 0
        DC8 "%%%s_EXT%%"
        DC8 0
//  144 {
//  145 	ELF_TERMINATE_EVENT     ,onExit,
//  146 	ELF_SHOW_INFO_EVENT     ,onAbout,
//  147 	ON_CALLMANAGER_EVENT_TAG,OnCallManagerEvent,
//  148 	NIL_EVENT_TAG           ,NULL
//  149 };
//  150 

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "[FILE]">`:
        DATA
        DC8 "[FILE]"
        DC8 0
        DC8 "[PERIOD]"
        DC8 0, 0, 0
        DC8 6DH, 0, 69H, 0, 73H, 0, 73H, 0
        DC8 65H, 0, 64H, 0, 2EH, 0, 69H, 0
        DC8 6EH, 0, 69H, 0, 0, 0
        DC8 0, 0
        DC8 62H, 0, 61H, 0, 64H, 0, 20H, 0
        DC8 27H, 0, 25H, 0, 73H, 0, 27H, 0
        DC8 0AH, 0, 63H, 0, 6FH, 0, 6EH, 0
        DC8 66H, 0, 69H, 0, 67H, 0, 3AH, 0
        DC8 0AH, 0, 70H, 0, 61H, 0, 74H, 0
        DC8 68H, 0, 3AH, 0, 25H, 0, 6CH, 0
        DC8 73H, 0, 0AH, 0, 6EH, 0, 61H, 0
        DC8 6DH, 0, 65H, 0, 3AH, 0, 25H, 0
        DC8 6CH, 0, 73H, 0, 0AH, 0, 74H, 0
        DC8 69H, 0, 6DH, 0, 65H, 0, 3AH, 0
        DC8 25H, 0, 64H, 0, 0, 0
        DC8 0, 0
        DC8 6DH, 0, 69H, 0, 73H, 0, 73H, 0
        DC8 65H, 0, 64H, 0, 20H, 0, 65H, 0
        DC8 76H, 0, 65H, 0, 6EH, 0, 74H, 0
        DC8 73H, 0, 20H, 0, 68H, 0, 61H, 0
        DC8 73H, 0, 20H, 0, 62H, 0, 65H, 0
        DC8 65H, 0, 6EH, 0, 20H, 0, 73H, 0
        DC8 74H, 0, 61H, 0, 72H, 0, 74H, 0
        DC8 65H, 0, 64H, 0, 0, 0
        DC8 0, 0
        DC32 `?<Constant "defaultpage">`, 0H, evtlist

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x6d\\x69\\x73\\x73\\x65\\x64\\x20\\x65\\_1`:
        DATA
        DC8 6DH, 0, 69H, 0, 73H, 0, 73H, 0
        DC8 65H, 0, 64H, 0, 20H, 0, 65H, 0
        DC8 76H, 0, 65H, 0, 6EH, 0, 74H, 0
        DC8 73H, 0, 20H, 0, 68H, 0, 61H, 0
        DC8 73H, 0, 20H, 0, 62H, 0, 65H, 0
        DC8 65H, 0, 6EH, 0, 20H, 0, 73H, 0
        DC8 74H, 0, 6FH, 0, 70H, 0, 70H, 0
        DC8 65H, 0, 64H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x6d\\x69\\x73\\x73\\x65\\x64\\x20\\x65\\_2`:
        DATA
        DC8 6DH, 0, 69H, 0, 73H, 0, 73H, 0
        DC8 65H, 0, 64H, 0, 20H, 0, 65H, 0
        DC8 76H, 0, 65H, 0, 6EH, 0, 74H, 0
        DC8 73H, 0, 20H, 0, 76H, 0, 30H, 0
        DC8 2EH, 0, 35H, 0, 0AH, 0, 62H, 0
        DC8 79H, 0, 20H, 0, 64H, 0, 65H, 0
        DC8 6EH, 0, 5FH, 0, 70H, 0, 6FH, 0
        DC8 0, 0
        DC8 0, 0
//  151 const PAGE_DESC defaultpage = {"defaultpage",0,evtlist};
//  152 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ??isOurBook
        ARM
//  153 int isOurBook(BOOK * book)
//  154 {
//  155 	if(!strcmp(book->xbook->name,myappname)) return true;
??isOurBook:
        LDR      R1,??isOurBook_1  ;; timer + 20
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R0, #+0]
        LDR      R0,[R0, #+4]
        SWI      +345
        CMP      R0,#+0
        MOVEQ    R0,#+1
        POPEQ    {PC}
//  156 	return false;
        MOV      R0,#+0
        POP      {PC}             ;; return
        DATA
??isOurBook_1:
        DC32     timer + 20
        CFI EndBlock cfiBlock21
//  157 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE main
//  158 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function main
        ARM
//  159 int main(wchar_t* filename)
//  160 {
main:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
//  161 	BOOK* alreadyrunned=FindBook(isOurBook);
//  162 	if(alreadyrunned)
        LDR      R8,??DataTable7  ;; ??elf_exit
        MOV      R5,R0
        LDR      R0,??main_0+0x4  ;; ??isOurBook
        SUB      SP,SP,#+540
        CFI CFA R13+568
        SWI      +304
        CMP      R0,#+0
        BEQ      ??main_1
//  163 	{
//  164 		FreeBook(alreadyrunned);
        SWI      +303
//  165 		SUBPROC(elf_exit);
        MOV      R0,R8
        SWI      +264
        MOV      R0,#+0
        B        ??main_2
//  166 	}else
//  167 	{
//  168 		wchar_t temp[256];
//  169 		//check cfg params------
//  170 		char* badarg=NULL;
//  171 		FSTAT _fstat;
//  172 		if(!getcfg())
??main_1:
        LDR      R6,??DataTable8  ;; `?<Constant "[FILE]">`
        LDR      R7,??DataTable9  ;; timer
        MOV      R4,#+255
        ORR      R4,R4,#0xFF00
        MOV      R9,#+548
        BL       ??getcfg
        CMP      R0,#+0
//  173 			badarg="INI";
        ADREQ    R3,??main_0      ;; "INI"
        BEQ      ??main_3
//  174 		else
//  175 			if(fstat(cfg_filepath,cfg_filename,&_fstat)!=0)
        ADD      R2,SP,#+512
        ADD      R1,R9,R7
        ADD      R0,R7,#+36
        SWI      +284
        CMP      R0,#+0
//  176 				badarg="[FILE]";
        MOVNE    R3,R6
        BNE      ??main_3
//  177 			else
//  178 				if(cfg_period<3)badarg="[PERIOD]";
        LDR      R0,[R7, #+4]
        CMP      R0,#+3
        BGE      ??main_4
        ADD      R3,R6,#+8
//  179 		if(badarg)
??main_3:
        CMP      R3,#+0
        BEQ      ??main_4
//  180 		{
//  181 			snwprintf(temp, MAXELEMS(temp), _T("bad '%s'\nconfig:\npath:%ls\nname:%ls\ntime:%d"),badarg
//  182 				,cfg_filepath,cfg_filename,cfg_period);
        LDR      R0,[R7, #+4]
        ADD      R2,R6,#+44
        PUSH     {R0}
        CFI CFA R13+572
        MOV      R1,#+256
        ADD      R0,R9,R7
        PUSH     {R0}
        CFI CFA R13+576
        ADD      R0,R7,#+36
        PUSH     {R0}
        CFI CFA R13+580
        ADD      R0,SP,#+12
        SWI      +277
//  183 			MessageBox(EMPTY_TEXTID,TextID_Create(temp,ENC_UCS2,MAXELEMS(temp)),NOIMAGE,1,0,0);
        MOV      R2,#+256
        MOV      R1,#+0
        ADD      R0,SP,#+12
        SWI      +349
        MOV      R1,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+584
        PUSH     {R0}
        CFI CFA R13+588
        MOV      R3,#+1
        MOV      R2,R4
        MVN      R0,#-1879048192
        SWI      +599
//  184 			SUBPROC(elf_exit);
        MOV      R0,R8
        SWI      +264
//  185 			return 0;
        MOV      R0,#+0
        ADD      SP,SP,#+20
        CFI CFA R13+568
??main_2:
        ADD      SP,SP,#+540
        CFI CFA R13+28
        POP      {R4-R9,PC}
        CFI CFA R13+568
//  186 		}
//  187 		//---------------------
//  188 		switch(GetChipID()&CHIPID_MASK)
??main_4:
        MOV      R8,#+0
        SWI      +590
        AND      R0,R0,#0xFE00
        MOV      R0,R0, LSL #+16
        MOV      R0,R0, ASR #+16
        CMN      R0,#+32768
        BEQ      ??main_5
        CMN      R0,#+26624
        CMNNE    R0,#+14336
        CMNNE    R0,#+10240
        CMNNE    R0,#+6144
        CMNNE    R0,#+4096
        BEQ      ??main_6
        CMP      R0,#+28672
        BNE      ??main_7
//  189 		{
//  190                 case CHIPID_DB2000:
//  191                 case CHIPID_DB2010:
//  192 			skipevents=0;
??main_5:
        STR      R8,[R7, #+8]
//  193 			checkevents=1|2|4|8;//MISSED_CALL|MISSED_SMS|MISSED_EMAIL|MISSED_MMS
        MOV      R0,#+15
        B        ??main_8
//  194 			break;
//  195                 case CHIPID_DB2020:
//  196                 case CHIPID_DB3150:
//  197                 case CHIPID_DB3200:
//  198                 case CHIPID_DB3210:
//  199                 case CHIPID_DB3350:
//  200 			skipevents=1|2;//KEYLOCKED|NOSOUND
??main_6:
        MOV      R0,#+3
        STR      R0,[R7, #+8]
//  201 			checkevents=4|8|0x10|0x20;//MISSED_CALL|MISSED_SMS|MISSED_EMAIL|MISSED_MMS
        MOV      R0,#+60
??main_8:
        STR      R0,[R7, #+12]
//  202 		}
//  203 
//  204 		BOOK *myBook=(BOOK*)malloc(sizeof(BOOK));
??main_7:
        MOV      R0,#+24
        SWI      +259
        MOV      R9,R0
//  205 		memset(myBook,0,sizeof(BOOK));
        MOV      R2,#+24
        MOV      R1,#+0
        SWI      +274
//  206 		CreateBook(myBook,bookOnDestroy,&defaultpage,myappname,-1,0);
        LDR      R1,??main_0+0x8  ;; ??bookOnDestroy
        MOV      R0,R8
        PUSH     {R0}
        CFI CFA R13+572
        ADD      R3,R7,#+20
        ADD      R2,R6,#+196
        MVN      R0,R0
        PUSH     {R0}
        CFI CFA R13+576
        MOV      R0,R9
        SWI      +299
//  207 
//  208 		timer=Timer_Set(cfg_period*1000, onTimer, 0);
        LDR      R0,[R7, #+4]
        LDR      R1,??DataTable10  ;; ??onTimer
        MOV      R3,#+1000
        MUL      R0,R3,R0
        MOV      R2,R8
        SWI      +297
        STRH     R0,[R7, #+0]
//  209 
//  210 		if(!wstrwstr(filename,GetDir(DIR_ELFS_DAEMONS)))
        MOV      R0,#+18
        SWI      +261
        MOV      R1,R0
        MOV      R0,R5
        SWI      +670
        CMP      R0,#+0
        ADD      SP,SP,#+8
        CFI CFA R13+568
        BNE      ??main_9
//  211 			MessageBox(EMPTY_TEXTID,TextID_Create( LELFNAME L" has been started",ENC_UCS2,TEXTID_ANY_LEN),NOIMAGE,1,5000,0);
        MOV      R2,R4
        MOV      R1,#+0
        ADD      R0,R6,#+132
        SWI      +349
        MOV      R1,R8
        PUSH     {R1}
        CFI CFA R13+572
        MOV      R3,#+1
        MOV      R2,R4
        MOV      R1,#+136
        ORR      R1,R1,#0x1300
        PUSH     {R1}
        CFI CFA R13+576
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
        ADD      SP,SP,#+8
        CFI CFA R13+568
//  212 	}
//  213 
//  214 	return 0;
??main_9:
        MOV      R0,#+0
        ADD      SP,SP,#+540
        CFI CFA R13+28
        POP      {R4-R9,PC}       ;; return
        DATA
??main_0:
        DC8      "INI"
        DC32     ??isOurBook
        DC32     ??bookOnDestroy
        CFI EndBlock cfiBlock23
//  215 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     ??elf_exit

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     `?<Constant "[FILE]">`

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     timer

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable10:
        DC32     ??onTimer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI NoFunction
        ARM
??strncmpi??rA:
        LDR      R12,??Subroutine12_0  ;; ??strncmpi
        BX       R12
        DATA
??Subroutine12_0:
        DC32     ??strncmpi
        CFI EndBlock cfiBlock24

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine13_0  ;; kill_data
        BX       R12
        DATA
??Subroutine13_0:
        DC32     kill_data
        CFI EndBlock cfiBlock25

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for cfgmacro>`:
        DATA
        DC32 `?<Constant "AUDIO">`, 0, `?<Constant "IMAGE">`, 2
        DC32 `?<Constant "VIDEO">`, 4, `?<Constant "THEME">`, 6
        DC32 `?<Constant "OTHER">`, 8, `?<Constant "ELFS">`, 16
        DC32 `?<Constant "ELFS_DAEMONS">`, 18, `?<Constant "ELFS_CONFIG">`, 20
        DC32 `?<Constant "INI">`, 22

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for timer>`:
        DATA
        DC8 0, 0
        DC8 0, 0
`?<Initializer for cfg_period>`:
        DC32 30
`?<Initializer for skipevents>`:
        DC8 0, 0, 0, 0
`?<Initializer for checkevents>`:
        DC8 0, 0, 0, 0
`?<Initializer for disabled>`:
        DC8 0
        DC8 0, 0, 0
`?<Initializer for myappname>`:
        DC8 "missed events"
        DC8 0, 0
`?<Initializer for cfg_filepath>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for cfg_filename>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 1 876 bytes in segment CODE
//   448 bytes in segment DATA_C
// 1 132 bytes in segment DATA_I
// 1 132 bytes in segment DATA_ID
//    32 bytes in segment DYN_PAGE
//    12 bytes in segment INITTAB
// 
// 1 804 bytes of CODE  memory (+ 84 bytes shared)
// 1 612 bytes of CONST memory
// 1 132 bytes of DATA  memory
//
//Errors: none
//Warnings: none
