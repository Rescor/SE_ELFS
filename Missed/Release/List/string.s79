//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  23:01:16 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\Missed\string /
//                       .cpp                                                /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\Missed\string /
//                       .cpp -D NDEBUG -lC Z:\home\perk11\www\perk11.info\s /
//                       vn\SE\Missed\Release\List\ -lA                      /
//                       Z:\home\perk11\www\perk11.info\svn\SE\Missed\Releas /
//                       e\List\ -o Z:\home\perk11\www\perk11.info\svn\SE\Mi /
//                       ssed\Release\Obj\ -s9 --cpu_mode arm --endian       /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork -e --fpu None --eec++ -I                /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\Missed\Releas /
//                       e\List\string.s79                                   /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME string

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??strchr
        FUNCTION ??strchr,0203H
        MULTWEAK ??strchr??rT
        PUBLIC ??strncmp
        FUNCTION ??strncmp,0203H
        MULTWEAK ??strncmp??rT
        PUBLIC ??strncmpi
        FUNCTION ??strncmpi,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??strncmpi??rT
        PUBLIC ??strncpy
        FUNCTION ??strncpy,0203H
        MULTWEAK ??strncpy??rT
        PUBLIC ??strrchr
        FUNCTION ??strrchr,0203H
        MULTWEAK ??strrchr??rT
        PUBLIC ??upper
        FUNCTION ??upper,0203H
        MULTWEAK ??upper??rT
        PUBLIC ??wstrncmp
        FUNCTION ??wstrncmp,0203H
        MULTWEAK ??wstrncmp??rT
        PUBLIC ??wstrstr
        FUNCTION ??wstrstr,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??wstrstr??rT
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        

??strchr??rT        SYMBOL "??rT", ??strchr

??strncmp??rT       SYMBOL "??rT", ??strncmp

??strncmpi??rT      SYMBOL "??rT", ??strncmpi

??strncpy??rT       SYMBOL "??rT", ??strncpy

??strrchr??rT       SYMBOL "??rT", ??strrchr

??upper??rT         SYMBOL "??rT", ??upper

??wstrncmp??rT      SYMBOL "??rT", ??wstrncmp

??wstrstr??rT       SYMBOL "??rT", ??wstrstr


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??strchr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??strchr
// Z:\home\perk11\www\perk11.info\svn\SE\Missed\string.cpp
//    1 #include "..\\include\Lib_Clara.h"
//    2 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??strchr
        ARM
//    3 char* strchr(char* str,char c)
//    4 {
??strchr:
        B        ??strchr_1
//    5 	for(;*str;str++)if(*str==c)return str;
??strchr_2:
        ADD      R0,R0,#+1
??strchr_1:
        LDRB     R2,[R0, #+0]
        CMP      R2,#+0
        BEQ      ??strchr_3
        CMP      R2,R1
        BNE      ??strchr_2
        BX       LR
//    6 	return NULL;
??strchr_3:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//    7 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??strrchr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??strrchr
//    8 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??strrchr
        ARM
//    9 char* strrchr(char* str,char c)
//   10 {
//   11 	char* retpos=NULL;
??strrchr:
        LDRB     R3,[R0, #+0]
        MOV      R2,#+0
        CMP      R3,#+0
        BEQ      ??strrchr_1
//   12 	for(;*str;str++)if(*str==c)retpos=str;
??strrchr_2:
        LDRB     R3,[R0, #+0]
        CMP      R3,R1
        MOVEQ    R2,R0
        LDRB     R3,[R0, #+1]!
        CMP      R3,#+0
        BNE      ??strrchr_2
//   13 	return retpos;
??strrchr_1:
        MOV      R0,R2
        BX       LR               ;; return
        CFI EndBlock cfiBlock3
//   14 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??strncpy??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??strncpy
//   15 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??strncpy
        ARM
//   16 char* strncpy(char* dest,char* src,size_t len)
//   17 {
??strncpy:
        B        ??strncpy_1
//   18 	for(; *src && len; len--)*dest++=*src++;
??strncpy_2:
        LDRB     R3,[R1], #+1
        SUB      R2,R2,#+1
        STRB     R3,[R0], #+1
??strncpy_1:
        LDRB     R3,[R1, #+0]
        CMP      R3,#+0
        CMPNE    R2,#+0
        BNE      ??strncpy_2
//   19 	if(len)*dest=0;
        CMP      R2,#+0
        MOVNE    R1,#+0
        STRBNE   R1,[R0, #+0]
//   20 	return dest;
        BX       LR               ;; return
        CFI EndBlock cfiBlock5
//   21 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??strncmp??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??strncmp
//   22 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??strncmp
        ARM
//   23 int strncmp(char* s1,char* s2,size_t len)
//   24 {
??strncmp:
        B        ??strncmp_1
//   25 	for(; *s1 && *s2 && len; len--, s1++, s2++)if(*s1-*s2)return *s1-*s2;
??strncmp_2:
        SUB      R2,R2,#+1
        ADD      R0,R0,#+1
        ADD      R1,R1,#+1
??strncmp_1:
        LDRB     R3,[R0, #+0]
        CMP      R3,#+0
        LDRBNE   R12,[R1, #+0]
        CMPNE    R12,#+0
        CMPNE    R2,#+0
        BEQ      ??strncmp_3
        SUBS     R3,R3,R12
        BEQ      ??strncmp_2
        LDRB     R0,[R0, #+0]
        SUB      R0,R0,R12
        BX       LR
//   26 	if(len)return *s1-*s2;
??strncmp_3:
        CMP      R2,#+0
        LDRBNE   R1,[R1, #+0]
        SUBNE    R0,R3,R1
        BXNE     LR
//   27 	return 0;
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock7
//   28 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??wstrncmp??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??wstrncmp
//   29 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??wstrncmp
        ARM
//   30 int wstrncmp(wchar_t* s1,wchar_t* s2,size_t len)
//   31 {
??wstrncmp:
        B        ??wstrncmp_1
//   32 	for(; *s1 && *s2 && len; len--, s1++, s2++)if(*s1-*s2)return *s1-*s2;
??wstrncmp_2:
        SUB      R2,R2,#+1
        ADD      R0,R0,#+2
        ADD      R1,R1,#+2
??wstrncmp_1:
        LDRH     R3,[R0, #+0]
        CMP      R3,#+0
        LDRHNE   R12,[R1, #+0]
        CMPNE    R12,#+0
        CMPNE    R2,#+0
        BEQ      ??wstrncmp_3
        SUBS     R3,R3,R12
        BEQ      ??wstrncmp_2
        LDRH     R0,[R0, #+0]
        SUB      R0,R0,R12
        BX       LR
//   33 	if(len)return *s1-*s2;
??wstrncmp_3:
        CMP      R2,#+0
        LDRHNE   R1,[R1, #+0]
        SUBNE    R0,R3,R1
        BXNE     LR
//   34 	return 0;
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock9
//   35 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??upper??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??upper
//   36 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??upper
        ARM
//   37 char upper(char c)
//   38 {
//   39 	if(c>='a' && c<='z')c-='a'-'A';
??upper:
        CMP      R0,#+97
        BCC      ??upper_1
        CMP      R0,#+123
        ADDCC    R0,R0,#+224
//   40 	return c;
??upper_1:
        AND      R0,R0,#0xFF
        BX       LR               ;; return
        CFI EndBlock cfiBlock11
//   41 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??strncmpi??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??strncmpi
//   42 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??strncmpi
        ARM
//   43 int strncmpi(char* s1,char* s2,size_t len)
//   44 {
??strncmpi:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
        B        ??strncmpi_1
//   45 	char c1, c2;
//   46 	for(; *s1 && *s2 && len; len--, s1++, s2++)
??strncmpi_2:
        SUB      R6,R6,#+1
??strncmpi_1:
        LDRB     R1,[R4, #+0]
        CMP      R1,#+0
        LDRBNE   R1,[R5, #+0]
        CMPNE    R1,#+0
        CMPNE    R6,#+0
        BEQ      ??strncmpi_3
//   47 	{
//   48 		c1=upper(*s1);
        LDRB     R0,[R4], #+1
        BL       ??upper
        MOV      R7,R0
//   49 		c2=upper(*s2);
        LDRB     R0,[R5], #+1
        BL       ??upper
//   50 		if(c1-c2)return c1-c2;
        SUBS     R1,R7,R0
        BEQ      ??strncmpi_2
        MOV      R0,R1
        POP      {R4-R7,PC}
//   51 	}
//   52 	if(len)return c1-c2;
??strncmpi_3:
        CMP      R6,#+0
        BEQ      ??strncmpi_4
        AND      R7,R7,#0xFF
        AND      R0,R0,#0xFF
        SUB      R0,R7,R0
        POP      {R4-R7,PC}
//   53 	return 0;
??strncmpi_4:
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock13
//   54 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??wstrstr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??wstrstr
//   55 
//   56 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??wstrstr
        ARM
//   57 wchar_t* wstrstr (const wchar_t * str1, const wchar_t * str2)
//   58 {
??wstrstr:
        PUSH     {R4}
        CFI R4 Frame(CFA, -4)
        CFI CFA R13+4
//   59 	wchar_t *cp = (wchar_t *) str1;
//   60 	const wchar_t *s1, *s2;
//   61 	if ( !*str2 )
        LDRH     R2,[R1, #+0]
        CMP      R2,#+0
        BNE      ??wstrstr_1
//   62 		return((wchar_t *)str1);
        B        ??wstrstr_2
//   63 	while (*cp)
//   64 	{
//   65 		s1 = cp;
//   66 		s2 = str2;
//   67 		while ( *s1 && *s2 && !(*s1-*s2) )
//   68 			s1++, s2++;
//   69 		if (!*s2)
//   70 			return(cp);
//   71 		cp++;
??wstrstr_3:
        ADD      R0,R0,#+2
??wstrstr_1:
        LDRH     R2,[R0, #+0]
        CMP      R2,#+0
        BEQ      ??wstrstr_4
        MOV      R2,R0
        MOV      R3,R1
        B        ??wstrstr_5
??wstrstr_6:
        ADD      R3,R3,#+2
??wstrstr_5:
        LDRH     R12,[R2, #+0]
        CMP      R12,#+0
        LDRHNE   R12,[R3, #+0]
        CMPNE    R12,#+0
        BEQ      ??wstrstr_7
        LDRH     R4,[R2], #+2
        SUBS     R4,R4,R12
        BEQ      ??wstrstr_6
??wstrstr_7:
        LDRH     R2,[R3, #+0]
        CMP      R2,#+0
        BNE      ??wstrstr_3
??wstrstr_2:
        POP      {R4}
        CFI R4 SameValue
        CFI CFA R13+0
        BX       LR
        CFI R4 Frame(CFA, -4)
        CFI CFA R13+4
//   72 	}
//   73 	return(NULL);
??wstrstr_4:
        POP      {R4}
        CFI R4 SameValue
        CFI CFA R13+0
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock15
//   74 }

        END
// 
// 592 bytes in segment CODE
// 
// 560 bytes of CODE memory (+ 32 bytes shared)
//
//Errors: none
//Warnings: none
