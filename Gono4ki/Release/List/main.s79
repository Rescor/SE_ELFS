//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:59:05 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\Gono4ki\main. /
//                       c                                                   /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\Gono4ki\main. /
//                       c -D NDEBUG -D OLDFUNCTIONS -lC                     /
//                       Z:\home\perk11\www\perk11.info\svn\SE\Gono4ki\Relea /
//                       se\List\ -lA Z:\home\perk11\www\perk11.info\svn\SE\ /
//                       Gono4ki\Release\List\ -o                            /
//                       Z:\home\perk11\www\perk11.info\svn\SE\Gono4ki\Relea /
//                       se\Obj\ -s9 --no_unroll --no_inline --cpu_mode arm  /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --enable_multibytes --fpu None       /
//                       --eec++ --dlib_config Z:\home\perk11\IAR2\arm\LIB\d /
//                       l5tpainl8n.h -I Z:\home\perk11\IAR2\arm\INC\        /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\Gono4ki\Relea /
//                       se\List\main.s79                                    /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)
        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        MULTWEAK ??CheckResurs??rA
??DataTable0 EQU 0
??DataTable1 EQU 0
        PUBLIC ??FreeElf
        FUNCTION ??FreeElf,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??FreeElf??rT
        PUBLIC ??GetBookID
        FUNCTION ??GetBookID,0203H
        MULTWEAK ??GetBookID??rT
        MULTWEAK ??ImagesDel??rA
        MULTWEAK ??MyBK??rA
        MULTWEAK ??OpenSettings??rA
        MULTWEAK ??SaveSettings??rA
        PUBLIC ??elf_exit
        FUNCTION ??elf_exit,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??elf_exit??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        FUNCTION ??onMyBookClose,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK `??operator new??rA`
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Game
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 32, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        






kill_data           SYMBOL "kill_data"
??CheckResurs??rA   SYMBOL "??rA", ??CheckResurs

??FreeElf??rT       SYMBOL "??rT", ??FreeElf

??GetBookID??rT     SYMBOL "??rT", ??GetBookID
??ImagesDel??rA     SYMBOL "??rA", ??ImagesDel
??MyBK??rA          SYMBOL "??rA", ??MyBK
??OpenSettings??rA  SYMBOL "??rA", ??OpenSettings
??SaveSettings??rA  SYMBOL "??rA", ??SaveSettings

??elf_exit??rT      SYMBOL "??rT", ??elf_exit
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
`??operator new??rA` SYMBOL "??rA", `??operator new`

        EXTERN ??CheckResurs
        FUNCTION ??CheckResurs,0202H
        EXTERN ??CreateGM
        FUNCTION ??CreateGM,0602H
        EXTERN ??ImagesDel
        FUNCTION ??ImagesDel,0202H
        EXTERN ??MyBK
        FUNCTION ??MyBK,0202H
        EXTERN ??OpenSettings
        FUNCTION ??OpenSettings,0202H
        EXTERN ??SaveSettings
        FUNCTION ??SaveSettings,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN FONT_D_7R
        EXTERN FONT_E_12R
        EXTERN FONT_E_14R
        EXTERN FONT_E_18R
        EXTERN FONT_E_30R
        EXTERN FONT_E_40R
        EXTERN kill_data
        FUNCTION kill_data,0202H

// Z:\home\perk11\www\perk11.info\svn\SE\Gono4ki\main.c
//    1 #include "..\\include\Lib_Clara.h"
//    2 #include "..\\include\Dir.h"
//    3 #include "..\\include\var_arg.h"
//    4 #include "..\\include\cfg_items.h"
//    5 #include "Menu.h"
//    6 #include "StructBook.h"
//    7 #include "Rec_Check.h"
//    8 #include "OpenNastroiki.h"
//    9 #include "Menu.h"
//   10 #include "ErrorIAR.h"
//   11 #include "MyFUNC.h"
//   12 #define del(a) if(a) delete a;
//   13 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   14 MyBook*Game;
Game:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetBookID??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??GetBookID
//   15 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??GetBookID
        ARM
//   16 MyBook * GetBookID()
//   17 {
//   18   return Game;
??GetBookID:
        LDR      R0,??DataTable3  ;; Game
        LDR      R0,[R0, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//   19 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??FreeElf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??FreeElf
//   20 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??FreeElf
        ARM
//   21 int FreeElf(void*, BOOK*bk)
//   22 {
??FreeElf:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,R1
//   23   FreeBook(bk);
        SWI      +303
//   24   return 0;
        MOV      R0,#+0
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock3
//   25 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??elf_exit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??elf_exit
//   26 

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
//   27 const PAGE_MSG bk_msglst_gm[] @ "DYN_PAGE"  = 
bk_msglst_gm:
        DATA
        DC32 66, ??CreateGM, 64, 0H
//   28 {
//   29   PAGE_ENTER_EVENT_TAG,    CreateGM,
//   30   NIL_EVENT_TAG,           NULL
//   31 };
//   32 
//   33 const PAGE_DESC bk_gm = {"Game_GuiMenu_Page",0,bk_msglst_gm};
//   34 

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
//   35 const PAGE_MSG bk_msglst_base[] @ "DYN_PAGE"  = 
bk_msglst_base:
        DATA
        DC32 997, ??FreeElf, 64, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Game_GuiMenu_Page">`:
        DATA
        DC8 "Game_GuiMenu_Page"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Game_Base_Page">`:
        DATA
        DC8 "Game_Base_Page"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x73\\x74\\x61\\x72\\x74\\x2e\\x6d\\x70\\`:
        DATA
        DC8 73H, 0, 74H, 0, 61H, 0, 72H, 0
        DC8 74H, 0, 2EH, 0, 6DH, 0, 70H, 0
        DC8 33H, 0, 0, 0
        DC8 4FH, 0, 4BH, 0, 2EH, 0, 6DH, 0
        DC8 70H, 0, 33H, 0, 0, 0
        DC8 0, 0
        DC8 67H, 0, 61H, 0, 6DH, 0, 65H, 0
        DC8 6FH, 0, 76H, 0, 65H, 0, 72H, 0
        DC8 2EH, 0, 6DH, 0, 70H, 0, 33H, 0
        DC8 0, 0
        DC8 0, 0
        DC8 6EH, 0, 65H, 0, 77H, 0, 72H, 0
        DC8 65H, 0, 63H, 0, 6FH, 0, 72H, 0
        DC8 64H, 0, 2EH, 0, 6DH, 0, 70H, 0
        DC8 33H, 0, 0, 0
        DC8 70H, 0, 61H, 0, 75H, 0, 73H, 0
        DC8 65H, 0, 2EH, 0, 6DH, 0, 70H, 0
        DC8 33H, 0, 0, 0
        DC8 68H, 0, 69H, 0, 64H, 0, 65H, 0
        DC8 2EH, 0, 6DH, 0, 70H, 0, 33H, 0
        DC8 0, 0
        DC8 0, 0
        DC8 66H, 0, 6FH, 0, 6EH, 0, 2EH, 0
        DC8 70H, 0, 6EH, 0, 67H, 0, 0, 0
        DC8 66H, 0, 6FH, 0, 6EH, 0, 67H, 0
        DC8 61H, 0, 6DH, 0, 65H, 0, 2EH, 0
        DC8 70H, 0, 6EH, 0, 67H, 0, 0, 0
        DC8 63H, 0, 75H, 0, 62H, 0, 2EH, 0
        DC8 70H, 0, 6EH, 0, 67H, 0, 0, 0
        DC8 55H, 0, 6EH, 0, 6BH, 0, 6EH, 0
        DC8 6FH, 0, 77H, 0, 0, 0
        DC8 0, 0
        DC8 "Gono4ki"
        DC32 `?<Constant "Game_GuiMenu_Page">`, 0H, bk_msglst_gm
        DC32 `?<Constant "Game_Base_Page">`, 0H, bk_msglst_base
//   36 {
//   37   ELF_TERMINATE_EVENT,     FreeElf,
//   38   NIL_EVENT_TAG,           NULL
//   39 };
//   40 
//   41 const PAGE_DESC bk_base = {"Game_Base_Page",0,bk_msglst_base};
//   42 
//   43 #pragma segment="ELFBEGIN"

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??elf_exit
        ARM
//   44 void elf_exit(void){
??elf_exit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   45   kill_data(__segment_begin("ELFBEGIN"), (void(*)(void*))mfree_adr());
        SWI      +33028
        MOV      R1,R0
        LDR      R0,??elf_exit_1  ;; SFB(ELFBEGIN)
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??elf_exit_1:
        DC32     SFB(ELFBEGIN)
        CFI EndBlock cfiBlock5
//   46 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??onMyBookClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??onMyBookClose
//   47 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??onMyBookClose
        ARM
//   48 static void onMyBookClose(BOOK * bk)
//   49 {
??onMyBookClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   50   SaveSettings(((MyBook*)bk)->nast->sound, ((MyBook*)bk)->nast->im, ((MyBook*)bk)->nast->rez);
        LDR      R0,[R4, #+820]
        LDR      R2,[R0, #+8]
        LDR      R1,[R0, #+4]
        LDR      R0,[R0, #+0]
        _BLF     ??SaveSettings,??SaveSettings??rA
//   51   ImagesDel(bk);
        MOV      R0,R4
        _BLF     ??ImagesDel,??ImagesDel??rA
//   52   SUBPROC(elf_exit);
        LDR      R0,??DataTable2  ;; ??elf_exit
        SWI      +264
//   53 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE main
//   54 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function main
        ARM
//   55 int main()
//   56 {
main:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
//   57   if((BOOK*)MyBK())
        _BLF     ??MyBK,??MyBK??rA
        CMP      R0,#+0
        BEQ      ??main_0
//   58   {
//   59     BookObj_SetFocus((BOOK*)MyBK(),0);    
        _BLF     ??MyBK,??MyBK??rA
        MOV      R1,#+0
        SWI      +306
//   60     SUBPROC(elf_exit);
        LDR      R0,??DataTable2  ;; ??elf_exit
        SWI      +264
        MOV      R0,#+0
        POP      {R4-R8,PC}
//   61   }
//   62   else
//   63   {
//   64   int j, i;
//   65   Game=new MyBook;
??main_0:
        LDR      R4,??DataTable3  ;; Game
//   66   memset(Game,0,sizeof(MyBook));
//   67   CreateBook((BOOK*)Game,onMyBookClose,&bk_base,NameMyElf,-1,0);
        LDR      R5,??main_1      ;; `?<Constant L"\\x73\\x74\\x61\\x72\\x74\\x2e\\x6d\\x70\\`
        MOV      R0,#+864
        _BLF     `??operator new`,`??operator new??rA`
        STR      R0,[R4, #+0]
        MOV      R2,#+864
        MOV      R1,#+0
        SWI      +274
        LDR      R1,??main_1+0x4  ;; ??onMyBookClose
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+28
        ADD      R3,R5,#+204
        ADD      R2,R5,#+224
//   68   Game->guido=0;
        MOV      R6,#+0
        MVN      R0,R0
        PUSH     {R0}
        CFI CFA R13+32
        LDR      R0,[R4, #+0]
        SWI      +299
        LDR      R0,[R4, #+0]
        STR      R6,[R0, #+388]
//   69   Game->gui=0;
        LDR      R0,[R4, #+0]
        STR      R6,[R0, #+396]
//   70   for(i=0; i<10; i++)
        MOV      R0,#+0
        ADD      SP,SP,#+8
        CFI CFA R13+24
//   71   {
//   72     for(j=0; j<10; j++)
??main_2:
        MOV      R1,#+0
//   73     {
//   74       Game->cub[i][j]=0;
??main_3:
        LDR      R3,[R4, #+0]
        MOV      R2,#+40
        MLA      R3,R2,R0,R3
        ADD      R2,R3,R1, LSL #+2
        STR      R6,[R2, #+400]
//   75     }
        ADD      R1,R1,#+1
        CMP      R1,#+10
        BLT      ??main_3
//   76   }
        ADD      R0,R0,#+1
        CMP      R0,#+10
        BLT      ??main_2
//   77   Game->tank=new COORDINAT;
        MOV      R0,#+8
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R1,[R4, #+0]
//   78   Game->tank->x=0;
//   79   Game->tank->y=0;
//   80   Game->image=new IMAGES;
//   81   for(i=0; i<3; i++)
        MOV      R7,#+0
        STR      R0,[R1, #+800]
        LDR      R0,[R4, #+0]
        LDR      R0,[R0, #+800]
        STR      R6,[R0, #+0]
        LDR      R0,[R4, #+0]
        LDR      R0,[R0, #+800]
        STR      R6,[R0, #+4]
        MOV      R0,#+24
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R1,[R4, #+0]
        STR      R0,[R1, #+804]
//   82   {
//   83     Game->image->im[i]=new IMG;
??main_4:
        MOV      R0,#+24
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R1,[R4, #+0]
        LDR      R1,[R1, #+804]
        STR      R0,[R1, +R7, LSL #+2]
//   84     Game->image->fi[i]=0;
        LDR      R0,[R4, #+0]
        LDR      R0,[R0, #+804]
        ADD      R0,R0,R7, LSL #+2
        STR      R6,[R0, #+12]
//   85   }
        ADD      R7,R7,#+1
        CMP      R7,#+3
        BLT      ??main_4
//   86   Game->lvl=0;
        LDR      R0,[R4, #+0]
//   87   Game->speed=0;
//   88   Game->point=0;
//   89   Game->nast=new NASTROIKI;
//   90   Game->nast->im=new IMGN;
//   91   Game->nast->sound=new SOUND;
//   92   Game->nast->rez=new TAB;
//   93   for(i=0; i<6; i++)
        MOV      R7,#+1
        STR      R6,[R0, #+808]
        LDR      R0,[R4, #+0]
        STR      R6,[R0, #+812]
        LDR      R0,[R4, #+0]
        STR      R6,[R0, #+816]
        MOV      R0,#+12
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R1,[R4, #+0]
        STR      R0,[R1, #+820]
        MOV      R0,#+772
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R1,[R4, #+0]
        LDR      R1,[R1, #+820]
        STR      R0,[R1, #+4]
        MOV      R0,#+28
        ORR      R0,R0,#0xC00
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R1,[R4, #+0]
        LDR      R1,[R1, #+820]
        STR      R0,[R1, #+0]
        MOV      R0,#+12
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R1,[R4, #+0]
        LDR      R1,[R1, #+820]
        STR      R0,[R1, #+8]
        MOV      R0,#+0
//   94   {
//   95     Game->nast->sound->status[i]=1;
??main_5:
        LDR      R1,[R4, #+0]
        LDR      R1,[R1, #+820]
        LDR      R1,[R1, #+0]
        ADD      R1,R1,R0, LSL #+2
        STR      R7,[R1, #+3072]
//   96   }
        ADD      R0,R0,#+1
        CMP      R0,#+6
        BLT      ??main_5
//   97   Game->nast->sound->sound=1;
        LDR      R0,[R4, #+0]
//   98   wstrcpy(Game->nast->sound->names[0], L"start.mp3");
        MOV      R1,R5
        LDR      R0,[R0, #+820]
//   99   wstrcpy(Game->nast->sound->names[1], L"OK.mp3");
        MOV      R8,#+512
        LDR      R0,[R0, #+0]
        STR      R7,[R0, #+3096]
        LDR      R0,[R4, #+0]
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+0]
        SWI      +338
        LDR      R0,[R4, #+0]
        ADD      R1,R5,#+20
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+0]
        ADD      R0,R8,R0
        SWI      +338
//  100   wstrcpy(Game->nast->sound->names[2], L"gameover.mp3");
        LDR      R0,[R4, #+0]
        ADD      R1,R5,#+36
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+0]
        ADD      R0,R0,#+1024
        SWI      +338
//  101   wstrcpy(Game->nast->sound->names[3], L"newrecord.mp3");
        LDR      R0,[R4, #+0]
        ADD      R1,R5,#+64
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+0]
        ADD      R0,R0,#+1536
        SWI      +338
//  102   wstrcpy(Game->nast->sound->names[4], L"pause.mp3");
        LDR      R0,[R4, #+0]
        ADD      R1,R5,#+92
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+0]
        ADD      R0,R0,#+2048
        SWI      +338
//  103   wstrcpy(Game->nast->sound->names[5], L"hide.mp3");
        LDR      R0,[R4, #+0]
        ADD      R1,R5,#+112
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+0]
        ADD      R0,R0,#+2560
        SWI      +338
//  104   wstrcpy(Game->nast->im->names[0], L"fon.png");
        LDR      R0,[R4, #+0]
        ADD      R1,R5,#+132
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+4]
        SWI      +338
//  105   wstrcpy(Game->nast->im->names[1], L"fongame.png");
        LDR      R0,[R4, #+0]
        ADD      R1,R5,#+148
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+4]
        ADD      R0,R0,#+256
        SWI      +338
//  106   wstrcpy(Game->nast->im->names[2], L"cub.png");
        LDR      R0,[R4, #+0]
        ADD      R1,R5,#+172
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+4]
        ADD      R0,R8,R0
        SWI      +338
//  107   Game->nast->rez->te=new TABL;
        MOV      R0,#+200
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R1,[R4, #+0]
//  108   Game->megaspeed=1;
//  109   Game->nast->im->on=0;
//  110   Game->nast->rez->tn=new TABL;
//  111   Game->nast->rez->th=new TABL;
//  112   for(i=0; i<10; i++)
        MOV      R8,#+0
        LDR      R1,[R1, #+820]
        LDR      R1,[R1, #+8]
        STR      R0,[R1, #+0]
        LDR      R0,[R4, #+0]
        STR      R7,[R0, #+856]
        LDR      R0,[R4, #+0]
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+4]
        STR      R6,[R0, #+768]
        MOV      R0,#+200
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R1,[R4, #+0]
        LDR      R1,[R1, #+820]
        LDR      R1,[R1, #+8]
        STR      R0,[R1, #+4]
        MOV      R0,#+200
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R1,[R4, #+0]
        LDR      R1,[R1, #+820]
        LDR      R1,[R1, #+8]
        STR      R0,[R1, #+8]
//  113   {
//  114     Game->nast->rez->te->rezultat[i]=0;
??main_6:
        LDR      R0,[R4, #+0]
//  115     Game->nast->rez->tn->rezultat[i]=0;
//  116     Game->nast->rez->th->rezultat[i]=0;
//  117     wstrcpy(Game->nast->rez->te->name[i], L"Unknow");
        ADD      R1,R5,#+188
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+8]
        LDR      R0,[R0, #+0]
        ADD      R0,R0,R8, LSL #+2
        STR      R6,[R0, #+160]
        LDR      R0,[R4, #+0]
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+8]
        LDR      R0,[R0, #+4]
        ADD      R0,R0,R8, LSL #+2
        STR      R6,[R0, #+160]
        LDR      R0,[R4, #+0]
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+8]
        LDR      R0,[R0, #+8]
        ADD      R0,R0,R8, LSL #+2
        STR      R6,[R0, #+160]
        LDR      R0,[R4, #+0]
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+8]
        LDR      R0,[R0, #+0]
        ADD      R0,R0,R8, LSL #+4
        SWI      +338
//  118     wstrcpy(Game->nast->rez->tn->name[i], L"Unknow");
        LDR      R0,[R4, #+0]
        ADD      R1,R5,#+188
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+8]
        LDR      R0,[R0, #+4]
        ADD      R0,R0,R8, LSL #+4
        SWI      +338
//  119     wstrcpy(Game->nast->rez->th->name[i], L"Unknow");
        LDR      R0,[R4, #+0]
        ADD      R1,R5,#+188
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+8]
        LDR      R0,[R0, #+8]
        ADD      R0,R0,R8, LSL #+4
        SWI      +338
//  120   }
        ADD      R8,R8,#+1
        CMP      R8,#+10
        BLT      ??main_6
//  121   Game->dis[0]=new DISPLAY;
        MOV      R0,#+20
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R2,[R4, #+0]
        MOV      R1,#+828
        STR      R0,[R1, +R2]
//  122   Game->dis[0]->x=176;
        LDR      R0,[R4, #+0]
        MOV      R2,#+176
        LDR      R0,[R1, +R0]
        STR      R2,[R0, #+0]
//  123   Game->dis[0]->y=220;
        LDR      R0,[R4, #+0]
        MOV      R2,#+220
        LDR      R0,[R1, +R0]
        STR      R2,[R0, #+4]
//  124   Game->dis[0]->cub=10;
        LDR      R0,[R4, #+0]
        MOV      R2,#+10
        LDR      R0,[R1, +R0]
        STR      R2,[R0, #+8]
//  125   Game->dis[0]->FP=FONT_E_30R;
        LDR      R0,[R4, #+0]
        LDR      R2,??main_1+0x8  ;; FONT_E_30R
        LDR      R0,[R1, +R0]
        LDR      R2,[R2, #+0]
        STR      R2,[R0, #+12]
//  126   Game->dis[0]->FS=FONT_E_12R;
        LDR      R0,[R4, #+0]
        LDR      R0,[R1, +R0]
        LDR      R1,??main_1+0xC  ;; FONT_E_12R
        LDR      R1,[R1, #+0]
        STR      R1,[R0, #+16]
//  127   Game->dis[1]=new DISPLAY;
        MOV      R0,#+20
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R2,[R4, #+0]
        MOV      R1,#+832
        STR      R0,[R1, +R2]
//  128   Game->dis[1]->x=240;
        LDR      R0,[R4, #+0]
        MOV      R2,#+240
        LDR      R0,[R1, +R0]
        STR      R2,[R0, #+0]
//  129   Game->dis[1]->y=320;
        LDR      R0,[R4, #+0]
        MOV      R2,#+320
        LDR      R0,[R1, +R0]
        STR      R2,[R0, #+4]
//  130   Game->dis[1]->cub=14;
        LDR      R0,[R4, #+0]
        MOV      R2,#+14
        LDR      R0,[R1, +R0]
        STR      R2,[R0, #+8]
//  131   Game->dis[1]->FP=FONT_E_40R;
        LDR      R0,[R4, #+0]
        LDR      R2,??main_1+0x10  ;; FONT_E_40R
        LDR      R0,[R1, +R0]
        LDR      R2,[R2, #+0]
        STR      R2,[R0, #+12]
//  132   Game->dis[1]->FS=FONT_E_14R;
        LDR      R0,[R4, #+0]
        LDR      R0,[R1, +R0]
        LDR      R1,??main_1+0x14  ;; FONT_E_14R
        LDR      R1,[R1, #+0]
        STR      R1,[R0, #+16]
//  133   Game->dis[2]=new DISPLAY;
        MOV      R0,#+20
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R2,[R4, #+0]
        MOV      R1,#+836
        STR      R0,[R1, +R2]
//  134   Game->dis[2]->x=128;
        LDR      R0,[R4, #+0]
        MOV      R2,#+128
        LDR      R0,[R1, +R0]
        STR      R2,[R0, #+0]
//  135   Game->dis[2]->y=168;
        LDR      R0,[R4, #+0]
        MOV      R2,#+168
        LDR      R0,[R1, +R0]
        STR      R2,[R0, #+4]
//  136   Game->dis[2]->cub=7;
        LDR      R0,[R4, #+0]
        MOV      R2,#+7
        LDR      R0,[R1, +R0]
        STR      R2,[R0, #+8]
//  137   Game->dis[2]->FP=FONT_E_18R;
        LDR      R0,[R4, #+0]
        LDR      R2,??main_1+0x18  ;; FONT_E_18R
        LDR      R0,[R1, +R0]
        LDR      R2,[R2, #+0]
        STR      R2,[R0, #+12]
//  138   Game->dis[2]->FS=FONT_D_7R;
        LDR      R0,[R4, #+0]
        LDR      R0,[R1, +R0]
        LDR      R1,??main_1+0x1C  ;; FONT_D_7R
        LDR      R1,[R1, #+0]
        STR      R1,[R0, #+16]
//  139   Game->pause=0;
        LDR      R0,[R4, #+0]
        STR      R6,[R0, #+824]
//  140   Game->p[0]=new PREGRADA;
        MOV      R0,#+20
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R1,[R4, #+0]
        STR      R0,[R1, #+848]
//  141   Game->p[1]=new PREGRADA;
        MOV      R0,#+20
        _BLF     `??operator new`,`??operator new??rA`
        LDR      R1,[R4, #+0]
        STR      R0,[R1, #+852]
//  142   for(i=0; i<2; i++)
        MOV      R0,#+0
//  143   {
//  144     Game->p[i]->y=0;
??main_7:
        LDR      R1,[R4, #+0]
        ADD      R1,R1,R0, LSL #+2
        LDR      R1,[R1, #+848]
        STR      R6,[R1, #+16]
//  145     for(j=0; j<4; j++)
        MOV      R1,#+0
//  146     {
//  147       Game->p[i]->x[j]=1;
??main_8:
        LDR      R2,[R4, #+0]
        ADD      R2,R2,R0, LSL #+2
        LDR      R2,[R2, #+848]
        STR      R7,[R2, +R1, LSL #+2]
//  148     }
        ADD      R1,R1,#+1
        CMP      R1,#+4
        BLT      ??main_8
//  149   }
        ADD      R0,R0,#+1
        CMP      R0,#+2
        BLT      ??main_7
//  150   OpenSettings(Game);
        LDR      R0,[R4, #+0]
        _BLF     ??OpenSettings,??OpenSettings??rA
//  151   CheckResurs(Game);
        LDR      R0,[R4, #+0]
        _BLF     ??CheckResurs,??CheckResurs??rA
//  152   BookObj_GotoPage((BOOK *)Game,&bk_gm);
        LDR      R0,[R4, #+0]
        ADD      R1,R5,#+212
        SWI      +301
//  153   }
//  154   return 0;
        MOV      R0,#+0
        POP      {R4-R8,PC}       ;; return
        DATA
??main_1:
        DC32     `?<Constant L"\\x73\\x74\\x61\\x72\\x74\\x2e\\x6d\\x70\\`
        DC32     ??onMyBookClose
        DC32     FONT_E_30R
        DC32     FONT_E_12R
        DC32     FONT_E_40R
        DC32     FONT_E_14R
        DC32     FONT_E_18R
        DC32     FONT_D_7R
        CFI EndBlock cfiBlock9
//  155 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     ??elf_exit

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     Game

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine5_0  ;; kill_data
        BX       R12
        DATA
??Subroutine5_0:
        DC32     kill_data
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI NoFunction
        ARM
??SaveSettings??rA:
        LDR      R12,??Subroutine6_0  ;; ??SaveSettings
        BX       R12
        DATA
??Subroutine6_0:
        DC32     ??SaveSettings
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI NoFunction
        ARM
??ImagesDel??rA:
        LDR      R12,??Subroutine7_0  ;; ??ImagesDel
        BX       R12
        DATA
??Subroutine7_0:
        DC32     ??ImagesDel
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI NoFunction
        ARM
??MyBK??rA:
        LDR      R12,??Subroutine8_0  ;; ??MyBK
        BX       R12
        DATA
??Subroutine8_0:
        DC32     ??MyBK
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine9_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine9_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        ARM
??OpenSettings??rA:
        LDR      R12,??Subroutine10_0  ;; ??OpenSettings
        BX       R12
        DATA
??Subroutine10_0:
        DC32     ??OpenSettings
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
??CheckResurs??rA:
        LDR      R12,??Subroutine11_0  ;; ??CheckResurs
        BX       R12
        DATA
??Subroutine11_0:
        DC32     ??CheckResurs
        CFI EndBlock cfiBlock16

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        END
// 
// 1 652 bytes in segment CODE
//   272 bytes in segment DATA_C
//     4 bytes in segment DATA_Z
//    32 bytes in segment DYN_PAGE
//    12 bytes in segment INITTAB
// 
// 1 548 bytes of CODE  memory (+ 116 bytes shared)
//   304 bytes of CONST memory
//     4 bytes of DATA  memory
//
//Errors: none
//Warnings: none
