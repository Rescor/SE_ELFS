//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:58:53 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\Gono4ki\Rec_C /
//                       heck.c                                              /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\Gono4ki\Rec_C /
//                       heck.c -D NDEBUG -D OLDFUNCTIONS -lC                /
//                       Z:\home\perk11\www\perk11.info\svn\SE\Gono4ki\Relea /
//                       se\List\ -lA Z:\home\perk11\www\perk11.info\svn\SE\ /
//                       Gono4ki\Release\List\ -o                            /
//                       Z:\home\perk11\www\perk11.info\svn\SE\Gono4ki\Relea /
//                       se\Obj\ -s9 --no_unroll --no_inline --cpu_mode arm  /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --enable_multibytes --fpu None       /
//                       --eec++ --dlib_config Z:\home\perk11\IAR2\arm\LIB\d /
//                       l5tpainl8n.h -I Z:\home\perk11\IAR2\arm\INC\        /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\Gono4ki\Relea /
//                       se\List\Rec_Check.s79                               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME Rec_Check

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??CheckResurs
        FUNCTION ??CheckResurs,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??CheckResurs??rT
??DataTable0 EQU 0
        MULTWEAK ??FindFile??rA
        MULTWEAK ??GetConfigPath??rA
        PUBLIC ??ImageHandler_Free
        FUNCTION ??ImageHandler_Free,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??ImageHandler_Free??rT
        PUBLIC ??ImagesDel
        FUNCTION ??ImagesDel,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??ImagesDel??rT
        PUBLIC ??OpenRes
        FUNCTION ??OpenRes,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??OpenRes??rT
        PUBLIC ??RegisterImage
        FUNCTION ??RegisterImage,0203H
        LOCFRAME CSTACK, 40, STACK
        MULTWEAK ??RegisterImage??rT
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        



??CheckResurs??rT   SYMBOL "??rT", ??CheckResurs
??FindFile??rA      SYMBOL "??rA", ??FindFile
??GetConfigPath??rA SYMBOL "??rA", ??GetConfigPath

??ImageHandler_Free??rT SYMBOL "??rT", ??ImageHandler_Free

??ImagesDel??rT     SYMBOL "??rT", ??ImagesDel

??OpenRes??rT       SYMBOL "??rT", ??OpenRes

??RegisterImage??rT SYMBOL "??rT", ??RegisterImage

        EXTERN ??FindFile
        FUNCTION ??FindFile,0202H
        EXTERN ??GetConfigPath
        FUNCTION ??GetConfigPath,0202H
        EXTERN SYNC


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??ImageHandler_Free??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??ImageHandler_Free
// Z:\home\perk11\www\perk11.info\svn\SE\Gono4ki\Rec_Check.c
//    1 #include "..\\include\Lib_Clara.h"
//    2 #include "..\\include\Dir.h"
//    3 #include "..\\include\var_arg.h"
//    4 #include "..\\include\cfg_items.h"
//    5 #include "MyFUNC.h"
//    6 #include "StructBook.h"
//    7 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??ImageHandler_Free
        ARM
//    8 wchar_t ImageHandler_Free(IMG*i)
//    9 {
??ImageHandler_Free:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+4
        CFI CFA R13+12
//   10   char error_code;
//   11   REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER(SYNC,i->ImageHandle,0,0,i->ImageID,1,&error_code);
        MOV      R3,#+0
        MOV      R4,R0
        MOV      R0,SP
        PUSH     {R0}
        CFI CFA R13+16
        MOV      R2,#+0
        MOV      R0,#+1
        PUSH     {R0}
        CFI CFA R13+20
        LDRH     R0,[R4, #+0]
        PUSH     {R0}
        CFI CFA R13+24
        LDRH     R1,[R4, #+2]
        LDR      R0,??DataTable1  ;; SYNC
        LDR      R0,[R0, #+0]
        SWI      +644
//   12   i->ImageID=NOIMAGE;
        MOV      R0,#+255
        ORR      R0,R0,#0xFF00
        STRH     R0,[R4, #+0]
//   13   i->ImageHandle=NOIMAGE;
        STRH     R0,[R4, #+2]
//   14   i->isImage=false;
        MOV      R0,#+0
        STRB     R0,[R4, #+20]
//   15   return 0;
        ADD      SP,SP,#+16
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock1
//   16 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??ImagesDel??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??ImagesDel
//   17 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??ImagesDel
        ARM
//   18 void ImagesDel(BOOK*bk)
//   19 {
??ImagesDel:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//   20   for(int i=0; i<3; i++)
        MOV      R5,#+0
//   21   {
//   22     if(((MyBook*)bk)->image->fi[i]) ImageHandler_Free(((MyBook*)bk)->image->im[i]);
??ImagesDel_1:
        LDR      R0,[R4, #+804]
        ADD      R0,R0,R5, LSL #+2
        LDR      R0,[R0, #+12]
        CMP      R0,#+0
        BEQ      ??ImagesDel_2
        LDR      R0,[R4, #+804]
        LDR      R0,[R0, +R5, LSL #+2]
        BL       ??ImageHandler_Free
//   23   }
??ImagesDel_2:
        ADD      R5,R5,#+1
        CMP      R5,#+3
        BLT      ??ImagesDel_1
//   24 }
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??RegisterImage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??RegisterImage
//   25 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??RegisterImage
        ARM
//   26 u16 RegisterImage(IMG * i , wchar_t * path, wchar_t fname[256]) 
//   27 {
??RegisterImage:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
//   28   char error_code;
//   29   i->ImageID=NOIMAGE;
//   30   i->ImageHandle=NOIMAGE;
//   31   if (!REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE(SYNC,&i->ImageHandle,&error_code))
        LDR      R8,??DataTable1  ;; SYNC
        SUB      SP,SP,#+4
        CFI CFA R13+28
        MOV      R4,R0
        MOV      R5,#+255
        ORR      R5,R5,#0xFF00
        STRH     R5,[R4, #+0]
        STRH     R5,[R4, #+2]
        LDR      R0,[R8, #+0]
        MOV      R6,R1
        MOV      R7,R2
        MOV      R2,SP
        ADD      R1,R4,#+2
        SWI      +365
        CMP      R0,#+0
        BNE      ??RegisterImage_1
//   32   {
//   33     if (!REQUEST_IMAGEHANDLER_INTERNAL_REGISTER(SYNC,i->ImageHandle,path, fname,0,&i->ImageID,&error_code))
        MOV      R0,SP
        PUSH     {R0}
        CFI CFA R13+32
        MOV      R3,R7
        MOV      R2,R6
        MOV      R0,R4
        PUSH     {R0}
        CFI CFA R13+36
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+40
        LDRH     R1,[R4, #+2]
        LDR      R0,[R8, #+0]
        SWI      +643
        CMP      R0,#+0
        ADD      SP,SP,#+12
        CFI CFA R13+28
        BNE      ??RegisterImage_1
//   34     {
//   35       if (error_code)
        LDRB     R0,[SP, #+0]
        CMP      R0,#+0
//   36       {
//   37         i->ImageHandle=NOIMAGE;
        STRHNE   R5,[R4, #+2]
//   38       }
//   39     }
//   40   }
//   41   return(i->ImageID);
??RegisterImage_1:
        LDRH     R0,[R4, #+0]
        POP      {R1,R4-R8,PC}    ;; return
        CFI EndBlock cfiBlock5
//   42 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     SYNC

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??OpenRes??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??OpenRes
//   43 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??OpenRes
        ARM
//   44 void OpenRes(IMGN*i, MyBook*bk)
//   45 {
??OpenRes:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
//   46   for(int j=0; j<3; j++)
        MOV      R6,#+0
//   47   {
//   48     if(!FindFile(GetConfigPath(), i->names[j]))
??OpenRes_1:
        _BLF     ??GetConfigPath,??GetConfigPath??rA
        ADD      R7,R4,R6, LSL #+8
        MOV      R1,R7
        _BLF     ??FindFile,??FindFile??rA
        CMP      R0,#+0
        BNE      ??OpenRes_2
//   49     {
//   50       RegisterImage(bk->image->im[j], GetConfigPath(), i->names[j]);
        _BLF     ??GetConfigPath,??GetConfigPath??rA
        MOV      R1,R0
        LDR      R0,[R5, #+804]
        MOV      R2,R7
        LDR      R0,[R0, +R6, LSL #+2]
        BL       ??RegisterImage
//   51       bk->image->fi[j]=1;
        LDR      R0,[R5, #+804]
        MOV      R1,#+1
        ADD      R0,R0,R6, LSL #+2
        STR      R1,[R0, #+12]
//   52     }
//   53   }
??OpenRes_2:
        ADD      R6,R6,#+1
        CMP      R6,#+3
        BLT      ??OpenRes_1
//   54 }
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??CheckResurs??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??CheckResurs
//   55 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??CheckResurs
        ARM
//   56 int CheckResurs(MyBook*bk)
//   57 {
??CheckResurs:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   58   OpenRes(bk->nast->im, bk);
        MOV      R1,R0
        LDR      R0,[R0, #+820]
        LDR      R0,[R0, #+4]
        BL       ??OpenRes
//   59   return 1;
        MOV      R0,#+1
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock9
//   60 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI NoFunction
        ARM
??GetConfigPath??rA:
        LDR      R12,??Subroutine5_0  ;; ??GetConfigPath
        BX       R12
        DATA
??Subroutine5_0:
        DC32     ??GetConfigPath
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI NoFunction
        ARM
??FindFile??rA:
        LDR      R12,??Subroutine6_0  ;; ??FindFile
        BX       R12
        DATA
??Subroutine6_0:
        DC32     ??FindFile
        CFI EndBlock cfiBlock11

        END
// 
// 464 bytes in segment CODE
// 
// 420 bytes of CODE memory (+ 44 bytes shared)
//
//Errors: none
//Warnings: none
