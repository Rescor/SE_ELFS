//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:50:37 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\StatusClock\c /
//                       onf_loader.cpp                                      /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\StatusClock\c /
//                       onf_loader.cpp -D NDEBUG -D OLDFUNCTIONS -lC        /
//                       Z:\home\perk11\www\perk11.info\svn\SE\StatusClock\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\StatusClock\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\StatusClock\R /
//                       elease\Obj\ -s9 --cpu_mode arm --endian little      /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\StatusClock\R /
//                       elease\List\conf_loader.s79                         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME conf_loader

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CONFIG_C:DATA:REORDER:NOROOT(0)
        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
        PUBLIC ??InitConfig
        FUNCTION ??InitConfig,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??InitConfig??rT
        PUBLIC ??LoadConfigData
        FUNCTION ??LoadConfigData,0203H
        LOCFRAME CSTACK, 64, STACK
        MULTWEAK ??LoadConfigData??rT
        PUBLIC ??SaveConfigData
        FUNCTION ??SaveConfigData,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??SaveConfigData??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new[]??rA`
        PUBWEAK ?init?tab?DATA_I
        PUBLIC successed_config_name
        PUBLIC successed_config_path
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        



??InitConfig??rT    SYMBOL "??rT", ??InitConfig

??LoadConfigData??rT SYMBOL "??rT", ??LoadConfigData

??SaveConfigData??rT SYMBOL "??rT", ??SaveConfigData
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H

// Z:\home\perk11\www\perk11.info\svn\SE\StatusClock\conf_loader.cpp
//    1 #include "..\\include\Lib_Clara.h"
//    2 #include "..\\include\Dir.h"
//    3 #include "..\\include\cfg_items.h"
//    4 #include "conf_loader.h"
//    5 
//    6 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//    7 const wchar_t *successed_config_path=L"";
successed_config_path:
        DS8 4
        REQUIRE `?<Initializer for successed_config_path>`
//    8 const wchar_t *successed_config_name=L"";
successed_config_name:
        DS8 4
        REQUIRE `?<Initializer for successed_config_name>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??SaveConfigData??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??SaveConfigData
//    9 
//   10 #pragma segment="CONFIG_C"
//   11 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??SaveConfigData
        ARM
//   12 int SaveConfigData(const wchar_t *path,const wchar_t *fname)
//   13 {
//   14   int result=-1;
//   15   void *cfg=(char *)__segment_begin("CONFIG_C");
//   16   unsigned int len=(char *)__segment_end("CONFIG_C")-(char *)__segment_begin("CONFIG_C");
??SaveConfigData:
        LDR      R2,??DataTable3  ;; SFE(CONFIG_C)
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        LDR      R5,??DataTable2  ;; SFB(CONFIG_C)
        MVN      R4,#+0
        SUB      R6,R2,R5
//   17   int f;
//   18   if ((f=_fopen(path,fname,FSX_O_RDWR|FSX_O_TRUNC,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
        MOV      R2,#+0
        PUSH     {R2}
        CFI CFA R13+24
        MOV      R3,#+384
        MOV      R2,#+516
        SWI      +278
        MOVS     R7,R0
        ADD      SP,SP,#+4
        CFI CFA R13+20
        BMI      ??SaveConfigData_1
//   19   {
//   20     if (fwrite(f,cfg,len)==len) result=0;
        MOV      R2,R6
        MOV      R1,R5
        SWI      +281
        CMP      R0,R6
        MOVEQ    R4,#+0
//   21     fclose(f);
        MOV      R0,R7
        SWI      +279
//   22   }
//   23   return result;
??SaveConfigData_1:
        MOV      R0,R4
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock1
//   24 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??LoadConfigData??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??LoadConfigData

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??LoadConfigData
        ARM
//   25 int LoadConfigData(const wchar_t *path,const wchar_t *fname)
//   26 {
??LoadConfigData:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
//   27   int f;
//   28   char *buf;
//   29   int result=-1;
//   30   void *cfg;
//   31   FSTAT _fstat;
//   32   unsigned int rlen;
//   33 
//   34   cfg=(char *)__segment_begin("CONFIG_C");
//   35 
//   36   unsigned int len=(char *)__segment_end("CONFIG_C")-(char *)__segment_begin("CONFIG_C");
        LDR      R7,??DataTable2  ;; SFB(CONFIG_C)
        MOV      R4,R0
        LDR      R0,??DataTable3  ;; SFE(CONFIG_C)
        SUB      SP,SP,#+28
        CFI CFA R13+60
        MOV      R5,R1
        MVN      R6,#+0
        SUB      R8,R0,R7
//   37 
//   38   if ((buf=new char[len]))
        MOV      R0,R8
        _BLF     `??operator new[]`,`??operator new[]??rA`
        MOVS     R9,R0
        BEQ      ??LoadConfigData_1
//   39   {
//   40     if (fstat(path,fname,&_fstat)!=-1)
        MOV      R2,SP
        MOV      R1,R5
        MOV      R0,R4
        SWI      +284
        CMN      R0,#+1
        BEQ      ??LoadConfigData_2
//   41     {
//   42       if ((f=_fopen(path,fname,FSX_O_RDONLY,FSX_S_IREAD|FSX_S_IWRITE,0))>=0)
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+64
        MOV      R3,#+384
        MOV      R2,#+1
        MOV      R1,R5
        MOV      R0,R4
        SWI      +278
        MOVS     R10,R0
        ADD      SP,SP,#+4
        CFI CFA R13+60
        BMI      ??LoadConfigData_3
//   43       {
//   44         rlen=fread(f,buf,len);
        MOV      R2,R8
        MOV      R1,R9
        SWI      +280
        MOV      R6,R0
//   45         fclose(f);
        MOV      R0,R10
        SWI      +279
//   46         if (rlen!=_fstat.fsize || rlen!=len)  goto L_SAVENEWCFG;
        LDR      R0,[SP, #+8]
        CMP      R6,R0
        CMPEQ    R6,R8
        BNE      ??LoadConfigData_2
//   47         memcpy(cfg,buf,len);
        MOV      R2,R8
        MOV      R1,R9
        MOV      R0,R7
        SWI      +275
//   48         result=0;
        MOV      R6,#+0
        B        ??LoadConfigData_3
//   49       }
//   50     }
//   51     else
//   52     {
//   53     L_SAVENEWCFG:
//   54       result=-2;
??LoadConfigData_2:
        MVN      R6,#+1
//   55     }
//   56     delete buf;
??LoadConfigData_3:
        MOV      R0,R9
        _BLF     `??operator delete`,`??operator delete??rA`
//   57   }
//   58   if (result>=0)
        CMP      R6,#+0
//   59   {
//   60     successed_config_path=path;
        LDRPL    R0,??LoadConfigData_4  ;; successed_config_path
        STRPL    R4,[R0, #+0]
//   61     successed_config_name=fname;
        STRPL    R5,[R0, #+4]
//   62   }
//   63   return(result);
??LoadConfigData_1:
        MOV      R0,R6
        ADD      SP,SP,#+28
        CFI CFA R13+32
        POP      {R4-R10,PC}      ;; return
        DATA
??LoadConfigData_4:
        DC32     successed_config_path
        CFI EndBlock cfiBlock3
//   64 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     SFB(CONFIG_C)

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     SFE(CONFIG_C)

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??InitConfig??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??InitConfig
//   65 
//   66 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??InitConfig
        ARM
//   67 void InitConfig(void)
//   68 {
??InitConfig:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   69   if (LoadConfigData(GetDir(DIR_ELFS_CONFIG|MEM_EXTERNAL),L"StatusClock.bcfg")<0)
        LDR      R4,??InitConfig_1  ;; `?<Constant L"\\x53\\x74\\x61\\x74\\x75\\x73\\x43\\x6c\\`
        MOV      R0,#+20
        SWI      +261
        MOV      R1,R4
        BL       ??LoadConfigData
        CMP      R0,#+0
        POPPL    {R4,PC}
//   70   {
//   71     if (LoadConfigData(GetDir(DIR_ELFS_CONFIG|MEM_INTERNAL),L"StatusClock.bcfg")<0)
        MOV      R0,#+21
        SWI      +261
        MOV      R1,R4
        BL       ??LoadConfigData
        CMP      R0,#+0
        POPPL    {R4,PC}
//   72     {
//   73       if (SaveConfigData(GetDir(DIR_ELFS_CONFIG|MEM_EXTERNAL),L"StatusClock.bcfg")<0)
        MOV      R0,#+20
        SWI      +261
        MOV      R1,R4
        BL       ??SaveConfigData
        CMP      R0,#+0
        POPPL    {R4,PC}
//   74       {
//   75         SaveConfigData(GetDir(DIR_ELFS_CONFIG|MEM_INTERNAL),L"StatusClock.bcfg");
        MOV      R0,#+21
        SWI      +261
        MOV      R1,R4
        BL       ??SaveConfigData
//   76       }
//   77     }
//   78   }
//   79 };
        POP      {R4,PC}          ;; return
        DATA
??InitConfig_1:
        DC32     `?<Constant L"\\x53\\x74\\x61\\x74\\x75\\x73\\x43\\x6c\\`
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine3_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine3_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine4_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine4_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock7

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for successed_config_path>`:
        DATA
        DC32 `?<Constant L"">`
`?<Initializer for successed_config_name>`:
        DC32 `?<Constant L"">`

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG CONFIG_C:DATA:REORDER:NOROOT(0)

        RSEG DATA_C:CONST:SORT:NOROOT(1)
`?<Constant L"">`:
        DATA
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x53\\x74\\x61\\x74\\x75\\x73\\x43\\x6c\\`:
        DATA
        DC8 53H, 0, 74H, 0, 61H, 0, 74H, 0
        DC8 75H, 0, 73H, 0, 43H, 0, 6CH, 0
        DC8 6FH, 0, 63H, 0, 6BH, 0, 2EH, 0
        DC8 62H, 0, 63H, 0, 66H, 0, 67H, 0
        DC8 0, 0
        DC8 0, 0

        END
// 
// 456 bytes in segment CODE
//  38 bytes in segment DATA_C
//   8 bytes in segment DATA_I
//   8 bytes in segment DATA_ID
//  12 bytes in segment INITTAB
// 
// 420 bytes of CODE  memory (+ 48 bytes shared)
//  46 bytes of CONST memory
//   8 bytes of DATA  memory
//
//Errors: none
//Warnings: none
