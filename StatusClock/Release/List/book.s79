//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:50:33 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\StatusClock\b /
//                       ook.cpp                                             /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\StatusClock\b /
//                       ook.cpp -D NDEBUG -D OLDFUNCTIONS -lC               /
//                       Z:\home\perk11\www\perk11.info\svn\SE\StatusClock\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\StatusClock\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\StatusClock\R /
//                       elease\Obj\ -s9 --cpu_mode arm --endian little      /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\StatusClock\R /
//                       elease\List\book.s79                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME book

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
        MULTWEAK ??InitConfig??rA
        PUBLIC ??MyBook_Create
        FUNCTION ??MyBook_Create,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??MyBook_Create??rT
        PUBLIC ??MyBook_OnClose
        FUNCTION ??MyBook_OnClose,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??MyBook_OnClose??rT
        PUBLIC ??MyBook_OnShowAuthorInfo
        FUNCTION ??MyBook_OnShowAuthorInfo,0603H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??MyBook_OnShowAuthorInfo??rT
        PUBLIC ??MyBook_OnTerminate
        FUNCTION ??MyBook_OnTerminate,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??MyBook_OnTerminate??rT
        FUNCTION ??OnReconfig,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC ??Send_REDRAW_RELEASE
        FUNCTION ??Send_REDRAW_RELEASE,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??Send_REDRAW_RELEASE??rT
        PUBLIC ??elf_exit
        FUNCTION ??elf_exit,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??elf_exit??rT
        MULTWEAK ??kill_data??rA
        PUBLIC ??onElfKilled
        FUNCTION ??onElfKilled,0203H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??onElfKilled??rT
        MULTWEAK `??operator new??rA`
        PUBWEAK ?init?tab?DATA_I
        PUBLIC base_page
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        


kill_data           SYMBOL "kill_data"
??InitConfig??rA    SYMBOL "??rA", ??InitConfig

??MyBook_Create??rT SYMBOL "??rT", ??MyBook_Create

??MyBook_OnClose??rT SYMBOL "??rT", ??MyBook_OnClose

??MyBook_OnShowAuthorInfo??rT SYMBOL "??rT", ??MyBook_OnShowAuthorInfo

??MyBook_OnTerminate??rT SYMBOL "??rT", ??MyBook_OnTerminate

??Send_REDRAW_RELEASE??rT SYMBOL "??rT", ??Send_REDRAW_RELEASE

??elf_exit??rT      SYMBOL "??rT", ??elf_exit
??kill_data??rA     SYMBOL "??rA", kill_data

??onElfKilled??rT   SYMBOL "??rT", ??onElfKilled
`??operator new??rA` SYMBOL "??rA", `??operator new`

        EXTERN ??DispDraw
        FUNCTION ??DispDraw,0602H
        EXTERN ??InitConfig
        FUNCTION ??InitConfig,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN DREDRAW
        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0202H
        EXTERN successed_config_name
        EXTERN successed_config_path
        EXTERN timer


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??elf_exit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??elf_exit
// Z:\home\perk11\www\perk11.info\svn\SE\StatusClock\book.cpp
//    1 #include "..\\include\Lib_Clara.h"
//    2 #include "..\\include\Dir.h"
//    3 #include "..\\include\cfg_items.h"
//    4 #include "conf_loader.h"
//    5 #define AuthorInfo L"StatusClock v1.0\n© UltraShot\n"
//    6 
//    7 extern DISP_OBJ_ONREDRAW_METHOD DREDRAW;
//    8 extern u16 timer;
//    9 void DispDraw(DISP_OBJ* DO,int a,int b,int c);
//   10 void Send_REDRAW_RELEASE();
//   11 
//   12 typedef struct
//   13 {
//   14   BOOK * book;
//   15 }MSG;
//   16 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??elf_exit
        ARM
//   17 void elf_exit()
//   18 {
??elf_exit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   19   kill_data(&ELF_BEGIN, (void(*)(void*))mfree_adr());
        SWI      +33028
        MOV      R1,R0
        LDR      R0,??elf_exit_1  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??elf_exit_1:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock1
//   20 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyBook_OnTerminate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??MyBook_OnTerminate
//   21 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??MyBook_OnTerminate
        ARM
//   22 int MyBook_OnTerminate(void * ,BOOK* book)
//   23 {
??MyBook_OnTerminate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
//   24   Send_REDRAW_RELEASE();
        BL       ??Send_REDRAW_RELEASE
//   25   FreeBook(book);
        MOV      R0,R4
        SWI      +303
//   26   return(1);
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3
//   27 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyBook_OnShowAuthorInfo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??MyBook_OnShowAuthorInfo
//   28 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??MyBook_OnShowAuthorInfo
        ARM
//   29 int MyBook_OnShowAuthorInfo(void *mess ,BOOK* book)
//   30 {
??MyBook_OnShowAuthorInfo:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   31   MSG * msg = (MSG*)mess;
//   32   MessageBox(EMPTY_TEXTID,TextID_Create(AuthorInfo,ENC_UCS2,TEXTID_ANY_LEN), NOIMAGE, 1 ,5000,msg->book);
        MOV      R1,#+0
        MOV      R4,R0
        LDR      R0,??MyBook_OnShowAuthorInfo_1  ;; `?<Constant L"\\x53\\x74\\x61\\x74\\x75\\x73\\x43\\x6c\\`
        MOV      R5,#+255
        ORR      R5,R5,#0xFF00
        MOV      R2,R5
        SWI      +349
        LDR      R1,[R4, #+0]
        MOV      R3,#+1
        PUSH     {R1}
        CFI CFA R13+16
        MOV      R2,R5
        MOV      R1,#+136
        ORR      R1,R1,#0x1300
        PUSH     {R1}
        CFI CFA R13+20
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
//   33   return(1);
        MOV      R0,#+1
        POP      {R1,R2,R4,R5,PC}  ;; return
        DATA
??MyBook_OnShowAuthorInfo_1:
        DC32     `?<Constant L"\\x53\\x74\\x61\\x74\\x75\\x73\\x43\\x6c\\`
        CFI EndBlock cfiBlock5
//   34 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnReconfig??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??OnReconfig
//   35 
//   36 //--------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??OnReconfig
        ARM
//   37 static int OnReconfig(void *mess ,BOOK *book)
//   38 {
??OnReconfig:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   39   
//   40   RECONFIG_EVENT_DATA *reconf=(RECONFIG_EVENT_DATA *)mess;
//   41   if (wstrcmpi(reconf->path,successed_config_path)==0 && wstrcmpi(reconf->name,successed_config_name)==0)
        LDR      R0,??OnReconfig_1  ;; successed_config_path
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        SWI      +671
        CMP      R0,#+0
        BNE      ??OnReconfig_2
        LDR      R0,??OnReconfig_1+0x4  ;; successed_config_name
        LDR      R1,[R0, #+0]
        ADD      R0,R4,#+128
        SWI      +671
        CMP      R0,#+0
        BNE      ??OnReconfig_2
//   42   {
//   43     InitConfig();
        _BLF     ??InitConfig,??InitConfig??rA
//   44     DispObject_InvalidateRect(*StatusRow_p(),0);
        SWI      +33266
        LDR      R0,[R0, #+0]
        MOV      R1,#+0
        SWI      +495
//   45     return 1;
        MOV      R0,#+1
        POP      {R4,PC}
//   46   }
//   47   return 0;
??OnReconfig_2:
        MOV      R0,#+0
        POP      {R4,PC}          ;; return
        DATA
??OnReconfig_1:
        DC32     successed_config_path
        DC32     successed_config_name
        CFI EndBlock cfiBlock7
//   48 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??Send_REDRAW_RELEASE??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??Send_REDRAW_RELEASE
//   49 //--------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??Send_REDRAW_RELEASE
        ARM
//   50 void Send_REDRAW_RELEASE()
//   51 {
??Send_REDRAW_RELEASE:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   52   REDRAW_RELEASE_MESSAGE * sbm= new REDRAW_RELEASE_MESSAGE;
        MOV      R0,#+24
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R4,R0
//   53   memset(sbm,0,sizeof(REDRAW_RELEASE_MESSAGE));
        MOV      R2,#+24
        MOV      R1,#+0
        SWI      +274
//   54   sbm->SI_OldOnRedraw=DREDRAW;
        LDR      R0,??DataTable4  ;; DREDRAW
        LDR      R0,[R0, #+0]
        STR      R0,[R4, #+8]
//   55   sbm->SI_NewOnRedraw=DispDraw;
        LDR      R0,??DataTable3  ;; ??DispDraw
        STR      R0,[R4, #+12]
//   56   UI_Event_wData(SBY_REDRAW_RELEASE_EVENT ,sbm,(void (*)(void*))mfree_adr());
        SWI      +33028
        MOV      R2,R0
        MOV      R1,R4
        MOV      R0,#+227
        ORR      R0,R0,#0x300
        SWI      +425
//   57 };
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??onElfKilled??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??onElfKilled
//   58 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??onElfKilled
        ARM
//   59 int onElfKilled(void *mess ,BOOK* book)
//   60 {
??onElfKilled:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//   61   REDRAW_RELEASE_MESSAGE * sbm=(REDRAW_RELEASE_MESSAGE*)mess;
//   62   if (sbm->SK_NewOnRedraw==DREDRAW)
        LDR      R5,??DataTable4  ;; DREDRAW
        MOV      R4,R0
        LDR      R0,[R4, #+20]
        LDR      R1,[R5, #+0]
        CMP      R0,R1
        BNE      ??onElfKilled_1
//   63   {
//   64     REDRAW_RELEASE_MESSAGE * ms= new REDRAW_RELEASE_MESSAGE;
        MOV      R0,#+24
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R6,R0
//   65     memcpy(ms,sbm,sizeof(REDRAW_RELEASE_MESSAGE));
        MOV      R2,#+24
        MOV      R1,R4
        SWI      +275
//   66     if (sbm->SK_OldOnRedraw!=EMPTY_REDRAW_METHOD) DREDRAW=sbm->SK_OldOnRedraw;
        LDR      R0,[R4, #+16]
//   67 
//   68     DISP_DESC_SetOnRedraw(DispObject_GetDESC(*StatusRow_p()),DispDraw);
        LDR      R4,??DataTable3  ;; ??DispDraw
        MVN      R7,#+0
        CMP      R0,R7
        STRNE    R0,[R5, #+0]
        SWI      +33266
        LDR      R0,[R0, #+0]
        SWI      +543
        MOV      R1,R4
        SWI      +552
//   69 
//   70     ms->SI_OldOnRedraw=EMPTY_REDRAW_METHOD;
        STR      R7,[R6, #+8]
//   71     ms->SI_NewOnRedraw=DispDraw;
        STR      R4,[R6, #+12]
//   72 
//   73     UI_Event_wData(SBY_REDRAW_RELEASE_EVENT ,ms,(void (*)(void*))mfree_adr());
        SWI      +33028
        MOV      R2,R0
        MOV      R1,R6
        MOV      R0,#+227
        ORR      R0,R0,#0x300
        SWI      +425
//   74     return BLOCK_EVENT_GLOBALLY;
        MOV      R0,#+154
        ORR      R0,R0,#0x200
        POP      {R4-R7,PC}
//   75   }
//   76   return 0;
??onElfKilled_1:
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock11
//   77 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     ??DispDraw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyBook_OnClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??MyBook_OnClose
//   78 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??MyBook_OnClose
        ARM
//   79 void MyBook_OnClose(BOOK * book)
//   80 {
??MyBook_OnClose:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   81   if (book)
        CMP      R0,#+0
        POPEQ    {PC}
//   82   {
//   83     Timer_Kill(&timer);
        LDR      R0,??MyBook_OnClose_1  ;; timer
        SWI      +298
//   84     DISP_OBJ *si=*StatusRow_p();
        SWI      +33266
        LDR      R0,[R0, #+0]
//   85     DISP_DESC_SetOnRedraw(DispObject_GetDESC(si), DREDRAW);
        SWI      +543
        LDR      R1,??DataTable4  ;; DREDRAW
        LDR      R1,[R1, #+0]
        SWI      +552
//   86     SUBPROC(elf_exit);
        LDR      R0,??MyBook_OnClose_1+0x4  ;; ??elf_exit
        SWI      +264
//   87   }
//   88 };
        POP      {PC}             ;; return
        DATA
??MyBook_OnClose_1:
        DC32     timer
        DC32     ??elf_exit
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     DREDRAW

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyBook_Create??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??MyBook_Create
//   89 

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
//   90 const PAGE_MSG HW_PageEvents[]@ "DYN_PAGE" ={
HW_PageEvents:
        DATA
        DC32 997, ??MyBook_OnTerminate, 998, ??MyBook_OnShowAuthorInfo, 996
        DC32 ??OnReconfig, 64, 0H
//   91   ELF_TERMINATE_EVENT , MyBook_OnTerminate,
//   92   ELF_SHOW_INFO_EVENT  , MyBook_OnShowAuthorInfo,
//   93   ELF_RECONFIG_EVENT,     OnReconfig,
//   94   NIL_EVENT_TAG,            NULL
//   95 };
//   96 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   97 PAGE_DESC base_page ={"StatusClockPage",0,HW_PageEvents};
base_page:
        DS8 12
        REQUIRE `?<Initializer for base_page>`
//   98 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??MyBook_Create
        ARM
//   99 BOOK * MyBook_Create()
//  100 {
??MyBook_Create:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  101   BOOK * MyBook= new BOOK;
        MOV      R0,#+24
        _BLF     `??operator new`,`??operator new??rA`
//  102   CreateBook(MyBook,MyBook_OnClose,&base_page,"StatusClock",-1,0);
        LDR      R3,??MyBook_Create_1  ;; `?<Constant "StatusClock">`
        LDR      R2,??MyBook_Create_1+0x4  ;; base_page
        LDR      R1,??MyBook_Create_1+0x8  ;; ??MyBook_OnClose
        MOV      R4,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+12
        MVN      R0,R0
        PUSH     {R0}
        CFI CFA R13+16
        MOV      R0,R4
        SWI      +299
//  103   return(MyBook);
        MOV      R0,R4
        POP      {R1,R2,R4,PC}    ;; return
        DATA
??MyBook_Create_1:
        DC32     `?<Constant "StatusClock">`
        DC32     base_page
        DC32     ??MyBook_OnClose
        CFI EndBlock cfiBlock15
//  104 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine8_0  ;; kill_data
        BX       R12
        DATA
??Subroutine8_0:
        DC32     kill_data
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
??InitConfig??rA:
        LDR      R12,??Subroutine9_0  ;; ??InitConfig
        BX       R12
        DATA
??Subroutine9_0:
        DC32     ??InitConfig
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine10_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine10_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock18

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for base_page>`:
        DATA
        DC32 `?<Constant "StatusClockPage">`, 0H, HW_PageEvents

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "StatusClockPage">`:
        DATA
        DC8 "StatusClockPage"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x53\\x74\\x61\\x74\\x75\\x73\\x43\\x6c\\`:
        DATA
        DC8 53H, 0, 74H, 0, 61H, 0, 74H, 0
        DC8 75H, 0, 73H, 0, 43H, 0, 6CH, 0
        DC8 6FH, 0, 63H, 0, 6BH, 0, 20H, 0
        DC8 76H, 0, 31H, 0, 2EH, 0, 30H, 0
        DC8 0AH, 0, 0A9H, 0, 20H, 0, 55H, 0
        DC8 6CH, 0, 74H, 0, 72H, 0, 61H, 0
        DC8 53H, 0, 68H, 0, 6FH, 0, 74H, 0
        DC8 0AH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "StatusClock">`:
        DATA
        DC8 "StatusClock"

        END
//  105 
// 
// 672 bytes in segment CODE
//  88 bytes in segment DATA_C
//  12 bytes in segment DATA_I
//  12 bytes in segment DATA_ID
//  32 bytes in segment DYN_PAGE
//  12 bytes in segment INITTAB
// 
// 604 bytes of CODE  memory (+ 80 bytes shared)
// 132 bytes of CONST memory
//  12 bytes of DATA  memory
//
//Errors: none
//Warnings: none
