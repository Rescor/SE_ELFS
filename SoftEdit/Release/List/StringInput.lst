##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:51:13 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\SoftEdit\Strin #
#                       gInput.c                                             #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\SoftEdit\Strin #
#                       gInput.c -D NDEBUG -lC Z:\home\perk11\www\perk11.inf #
#                       o\svn\SE\SoftEdit\Release\List\ -o                   #
#                       Z:\home\perk11\www\perk11.info\svn\SE\SoftEdit\Relea #
#                       se\Obj\ -s9 --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --eec++ --dlib_config                           #
#                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I         #
#                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2    #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\SoftEdit\Relea #
#                       se\List\StringInput.lst                              #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\SoftEdit\Relea #
#                       se\Obj\StringInput.r79                               #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\SoftEdit\StringInput.c
      1          #include "..\\include\Lib_Clara.h" 
      2          #include "..\\include\Dir.h" 
      3          #include "header\structs.h"
      4          #include "header\extern.h"
      5          #include "..\\include\var_arg.h"
      6          #include <errno.h>
      7          
      8          extern const PAGE_DESC bk_StringInput;
      9          extern "C" unsigned long wcstoul(const wchar_t *, wchar_t **, int);
     10          
     11          int GetStrID(wchar_t *txt);
     12          

   \                                 In segment CODE, align 4, keep-with-next
     13          void OnBackCreateTextInputGui(BOOK * bk, u16 *string, int len)
     14          {
     15            BookObj_ReturnPage(bk, PREVIOUS_EVENT);
   \                     ??OnBackCreateTextInputGui:
   \   00000000   ........           LDR      R1,??DataTable1  ;; PREVIOUS_EVENT
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001091E5           LDR      R1,[R1, #+0]
   \   0000000C   2E0100EF           SWI      +302
     16          };
   \   00000010   0080BDE8           POP      {PC}             ;; return
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          char *unicode2win1251(char *s, wchar_t *ws, int len)
     19          {
   \                     ??unicode2win1251:
   \   00000000   10002DE9           PUSH     {R4}
     20            char *d=s;
   \   00000004   0030A0E1           MOV      R3,R0
   \   00000008   060000EA           B        ??unicode2win1251_1
     21            int c;
     22            while((c=*ws++)&&((len--)>0))
     23            {
     24              if (c==0x401) c=0xA8;
     25              if (c==0x404) c=0xAA;
     26              if (c==0x407) c=0xAF;
     27              if (c==0x451) c=0xB8;
     28              if (c==0x454) c=0xBA;
     29              if (c==0x457) c=0xBF;
     30              if ((c>=0x410)&&(c<0x450)) c-=0x350;
   \                     ??unicode2win1251_2:
   \   0000000C   410E5CE3           CMP      R12,#+1040
   \   00000010   030000BA           BLT      ??unicode2win1251_3
   \   00000014   450E5CE3           CMP      R12,#+1104
   \   00000018   4F40E0B3           MVNLT    R4,#+79
   \   0000001C   C04FC4B3           BICLT    R4,R4,#0x300
   \   00000020   0CC084B0           ADDLT    R12,R4,R12
     31              *s++=c;
   \                     ??unicode2win1251_3:
   \   00000024   ........           STRB     R12,[R0], #+1
   \                     ??unicode2win1251_1:
   \   00000028   ........           LDRH     R12,[R1], #+2
   \   0000002C   00005CE3           CMP      R12,#+0
   \   00000030   1D00000A           BEQ      ??unicode2win1251_4
   \   00000034   0240A0E1           MOV      R4,R2
   \   00000038   012044E2           SUB      R2,R4,#+1
   \   0000003C   010054E3           CMP      R4,#+1
   \   00000040   190000BA           BLT      ??unicode2win1251_4
   \   00000044   0140A0E3           MOV      R4,#+1
   \   00000048   404E84E3           ORR      R4,R4,#0x400
   \   0000004C   04005CE1           CMP      R12,R4
   \   00000050   A8C0A003           MOVEQ    R12,#+168
   \   00000054   F2FFFF0A           BEQ      ??unicode2win1251_3
   \   00000058   034084E2           ADD      R4,R4,#+3
   \   0000005C   04005CE1           CMP      R12,R4
   \   00000060   AAC0A003           MOVEQ    R12,#+170
   \   00000064   EEFFFF0A           BEQ      ??unicode2win1251_3
   \   00000068   034084E3           ORR      R4,R4,#0x3
   \   0000006C   04005CE1           CMP      R12,R4
   \   00000070   AFC0A003           MOVEQ    R12,#+175
   \   00000074   EAFFFF0A           BEQ      ??unicode2win1251_3
   \   00000078   4A4084E2           ADD      R4,R4,#+74
   \   0000007C   04005CE1           CMP      R12,R4
   \   00000080   B8C0A003           MOVEQ    R12,#+184
   \   00000084   E6FFFF0A           BEQ      ??unicode2win1251_3
   \   00000088   034084E2           ADD      R4,R4,#+3
   \   0000008C   04005CE1           CMP      R12,R4
   \   00000090   BAC0A003           MOVEQ    R12,#+186
   \   00000094   E2FFFF0A           BEQ      ??unicode2win1251_3
   \   00000098   034084E3           ORR      R4,R4,#0x3
   \   0000009C   04005CE1           CMP      R12,R4
   \   000000A0   D9FFFF1A           BNE      ??unicode2win1251_2
   \   000000A4   BFC0A0E3           MOV      R12,#+191
   \   000000A8   DDFFFFEA           B        ??unicode2win1251_3
     32            }
     33            *s=0;
   \                     ??unicode2win1251_4:
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   0010C0E5           STRB     R1,[R0, #+0]
     34            return(d);
   \   000000B4   1000BDE8           POP      {R4}
   \   000000B8   0300A0E1           MOV      R0,R3
   \   000000BC   1EFF2FE1           BX       LR               ;; return
     35          };
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          void kickbadsymbols(wchar_t *string, int len)
     38          {
     39            char *str=(char*)string;
     40            if (len>0)
   \                     ??kickbadsymbols:
   \   00000000   010051E3           CMP      R1,#+1
   \   00000004   1EFF2FB1           BXLT     LR
     41            {
     42              int x;
     43              for (x=0;x<(len*2);x++)
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   8110A0E1           LSL      R1,R1,#+1
   \   00000010   010051E3           CMP      R1,#+1
   \   00000014   060000AA           BGE      ??kickbadsymbols_1
   \   00000018   1EFF2FE1           BX       LR
     44              {
     45                if (str[x]==0xFE || str[x]==0xFF)
   \                     ??kickbadsymbols_2:
   \   0000001C   0030D2E7           LDRB     R3,[R2, +R0]
   \   00000020   FE0053E3           CMP      R3,#+254
   \   00000024   FF005313           CMPNE    R3,#+255
     46                {
     47                  str[x]=' ';
   \   00000028   2030A003           MOVEQ    R3,#+32
   \   0000002C   0030C207           STRBEQ   R3,[R2, +R0]
     48                }
     49              }
   \   00000030   012082E2           ADD      R2,R2,#+1
   \                     ??kickbadsymbols_1:
   \   00000034   010052E1           CMP      R2,R1
   \   00000038   F7FFFFBA           BLT      ??kickbadsymbols_2
     50            }
     51          };
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     52          

   \                                 In segment CODE, align 4, keep-with-next
     53          void OnOkCreateWinOrPassGui(BOOK * bk, wchar_t *string, int len)
     54          {
   \                     ??OnOkCreateWinOrPassGui:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
     55            MyBOOK * mbk=(MyBOOK *)bk;
     56            kickbadsymbols(string,len);
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           BL       ??kickbadsymbols
     57            if (mbk->StringInputType==0)
   \   0000001C   010086E2           ADD      R0,R6,#+1
   \   00000020   8070A0E1           LSL      R7,R0,#+1
   \   00000024   380094E5           LDR      R0,[R4, #+56]
   \   00000028   0080A0E3           MOV      R8,#+0
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   1A00001A           BNE      ??OnOkCreateWinOrPassGui_1
     58            {
     59              DELETE(mbk->curit->name);
   \   00000034   280094E5           LDR      R0,[R4, #+40]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0400000A           BEQ      ??OnOkCreateWinOrPassGui_2
   \   00000044   280094E5           LDR      R0,[R4, #+40]
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   00000050   280094E5           LDR      R0,[R4, #+40]
   \   00000054   008080E5           STR      R8,[R0, #+0]
     60              if (len>0)
   \                     ??OnOkCreateWinOrPassGui_2:
   \   00000058   010056E3           CMP      R6,#+1
   \   0000005C   0D0000BA           BLT      ??OnOkCreateWinOrPassGui_3
     61              {
     62                mbk->curit->name=new wchar_t[len+1];
   \   00000060   0700A0E1           MOV      R0,R7
   \   00000064   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000068   281094E5           LDR      R1,[R4, #+40]
     63                wstrncpy(mbk->curit->name,string, len);
   \   0000006C   0620A0E1           MOV      R2,R6
   \   00000070   000081E5           STR      R0,[R1, #+0]
   \   00000074   280094E5           LDR      R0,[R4, #+40]
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   530100EF           SWI      +339
     64                mbk->curit->name[len]=L'\0';
   \   00000084   280094E5           LDR      R0,[R4, #+40]
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   860080E0           ADD      R0,R0,R6, LSL #+1
   \   00000090   B080C0E1           STRH     R8,[R0, #+0]
   \   00000094   010000EA           B        ??OnOkCreateWinOrPassGui_1
     65              }
     66              else
     67              {
     68                mbk->curit->name=0;
   \                     ??OnOkCreateWinOrPassGui_3:
   \   00000098   280094E5           LDR      R0,[R4, #+40]
   \   0000009C   008080E5           STR      R8,[R0, #+0]
     69              }
     70            }
     71            if (mbk->StringInputType==1)
   \                     ??OnOkCreateWinOrPassGui_1:
   \   000000A0   380094E5           LDR      R0,[R4, #+56]
   \   000000A4   010050E3           CMP      R0,#+1
   \   000000A8   1A00001A           BNE      ??OnOkCreateWinOrPassGui_4
     72            {
     73              DELETE(mbk->curit->lsi);
   \   000000AC   280094E5           LDR      R0,[R4, #+40]
   \   000000B0   040090E5           LDR      R0,[R0, #+4]
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0400000A           BEQ      ??OnOkCreateWinOrPassGui_5
   \   000000BC   280094E5           LDR      R0,[R4, #+40]
   \   000000C0   040090E5           LDR      R0,[R0, #+4]
   \   000000C4   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   000000C8   280094E5           LDR      R0,[R4, #+40]
   \   000000CC   048080E5           STR      R8,[R0, #+4]
     74              if (len>0)
   \                     ??OnOkCreateWinOrPassGui_5:
   \   000000D0   010056E3           CMP      R6,#+1
   \   000000D4   0D0000BA           BLT      ??OnOkCreateWinOrPassGui_6
     75              {
     76                mbk->curit->lsi=new wchar_t[len+1];
   \   000000D8   0700A0E1           MOV      R0,R7
   \   000000DC   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   000000E0   281094E5           LDR      R1,[R4, #+40]
     77                wstrncpy(mbk->curit->lsi,string, len);
   \   000000E4   0620A0E1           MOV      R2,R6
   \   000000E8   040081E5           STR      R0,[R1, #+4]
   \   000000EC   280094E5           LDR      R0,[R4, #+40]
   \   000000F0   0510A0E1           MOV      R1,R5
   \   000000F4   040090E5           LDR      R0,[R0, #+4]
   \   000000F8   530100EF           SWI      +339
     78                mbk->curit->lsi[len]=L'\0';
   \   000000FC   280094E5           LDR      R0,[R4, #+40]
   \   00000100   040090E5           LDR      R0,[R0, #+4]
   \   00000104   860080E0           ADD      R0,R0,R6, LSL #+1
   \   00000108   B080C0E1           STRH     R8,[R0, #+0]
   \   0000010C   010000EA           B        ??OnOkCreateWinOrPassGui_4
     79              }
     80              else
     81              {
     82                mbk->curit->lsi=0;
   \                     ??OnOkCreateWinOrPassGui_6:
   \   00000110   280094E5           LDR      R0,[R4, #+40]
   \   00000114   048080E5           STR      R8,[R0, #+4]
     83              }
     84            }
     85            if (mbk->StringInputType==2)
   \                     ??OnOkCreateWinOrPassGui_4:
   \   00000118   380094E5           LDR      R0,[R4, #+56]
   \   0000011C   020050E3           CMP      R0,#+2
   \   00000120   1A00001A           BNE      ??OnOkCreateWinOrPassGui_7
     86            {
     87              DELETE(mbk->curit->msi);
   \   00000124   280094E5           LDR      R0,[R4, #+40]
   \   00000128   080090E5           LDR      R0,[R0, #+8]
   \   0000012C   000050E3           CMP      R0,#+0
   \   00000130   0400000A           BEQ      ??OnOkCreateWinOrPassGui_8
   \   00000134   280094E5           LDR      R0,[R4, #+40]
   \   00000138   080090E5           LDR      R0,[R0, #+8]
   \   0000013C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   00000140   280094E5           LDR      R0,[R4, #+40]
   \   00000144   088080E5           STR      R8,[R0, #+8]
     88              if (len>0)
   \                     ??OnOkCreateWinOrPassGui_8:
   \   00000148   010056E3           CMP      R6,#+1
   \   0000014C   0D0000BA           BLT      ??OnOkCreateWinOrPassGui_9
     89              {
     90                mbk->curit->msi=new wchar_t[len+1];
   \   00000150   0700A0E1           MOV      R0,R7
   \   00000154   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000158   281094E5           LDR      R1,[R4, #+40]
     91                wstrncpy(mbk->curit->msi,string, len);
   \   0000015C   0620A0E1           MOV      R2,R6
   \   00000160   080081E5           STR      R0,[R1, #+8]
   \   00000164   280094E5           LDR      R0,[R4, #+40]
   \   00000168   0510A0E1           MOV      R1,R5
   \   0000016C   080090E5           LDR      R0,[R0, #+8]
   \   00000170   530100EF           SWI      +339
     92                mbk->curit->msi[len]=L'\0';
   \   00000174   280094E5           LDR      R0,[R4, #+40]
   \   00000178   080090E5           LDR      R0,[R0, #+8]
   \   0000017C   860080E0           ADD      R0,R0,R6, LSL #+1
   \   00000180   B080C0E1           STRH     R8,[R0, #+0]
   \   00000184   010000EA           B        ??OnOkCreateWinOrPassGui_7
     93              }
     94              else
     95              {
     96                mbk->curit->msi=0;
   \                     ??OnOkCreateWinOrPassGui_9:
   \   00000188   280094E5           LDR      R0,[R4, #+40]
   \   0000018C   088080E5           STR      R8,[R0, #+8]
     97              }
     98            }
     99            if (mbk->StringInputType==3)
   \                     ??OnOkCreateWinOrPassGui_7:
   \   00000190   380094E5           LDR      R0,[R4, #+56]
   \   00000194   030050E3           CMP      R0,#+3
   \   00000198   1A00001A           BNE      ??OnOkCreateWinOrPassGui_10
    100            {
    101              DELETE(mbk->curit->rsi);
   \   0000019C   280094E5           LDR      R0,[R4, #+40]
   \   000001A0   0C0090E5           LDR      R0,[R0, #+12]
   \   000001A4   000050E3           CMP      R0,#+0
   \   000001A8   0400000A           BEQ      ??OnOkCreateWinOrPassGui_11
   \   000001AC   280094E5           LDR      R0,[R4, #+40]
   \   000001B0   0C0090E5           LDR      R0,[R0, #+12]
   \   000001B4   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   000001B8   280094E5           LDR      R0,[R4, #+40]
   \   000001BC   0C8080E5           STR      R8,[R0, #+12]
    102              if (len>0)
   \                     ??OnOkCreateWinOrPassGui_11:
   \   000001C0   010056E3           CMP      R6,#+1
   \   000001C4   0D0000BA           BLT      ??OnOkCreateWinOrPassGui_12
    103              {
    104                mbk->curit->rsi=new wchar_t[len+1];
   \   000001C8   0700A0E1           MOV      R0,R7
   \   000001CC   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   000001D0   281094E5           LDR      R1,[R4, #+40]
    105                wstrncpy(mbk->curit->rsi,string,len);
   \   000001D4   0620A0E1           MOV      R2,R6
   \   000001D8   0C0081E5           STR      R0,[R1, #+12]
   \   000001DC   280094E5           LDR      R0,[R4, #+40]
   \   000001E0   0510A0E1           MOV      R1,R5
   \   000001E4   0C0090E5           LDR      R0,[R0, #+12]
   \   000001E8   530100EF           SWI      +339
    106                mbk->curit->rsi[len]=L'\0';
   \   000001EC   280094E5           LDR      R0,[R4, #+40]
   \   000001F0   0C0090E5           LDR      R0,[R0, #+12]
   \   000001F4   860080E0           ADD      R0,R0,R6, LSL #+1
   \   000001F8   B080C0E1           STRH     R8,[R0, #+0]
   \   000001FC   010000EA           B        ??OnOkCreateWinOrPassGui_10
    107              }
    108              else
    109              {
    110                mbk->curit->rsi=0;
   \                     ??OnOkCreateWinOrPassGui_12:
   \   00000200   280094E5           LDR      R0,[R4, #+40]
   \   00000204   0C8080E5           STR      R8,[R0, #+12]
    111              }
    112            }
    113            BookObj_ReturnPage(bk, PREVIOUS_EVENT);
   \                     ??OnOkCreateWinOrPassGui_10:
   \   00000208   ........           LDR      R0,??DataTable1  ;; PREVIOUS_EVENT
   \   0000020C   001090E5           LDR      R1,[R0, #+0]
   \   00000210   0400A0E1           MOV      R0,R4
   \   00000214   2E0100EF           SWI      +302
    114          };
   \   00000218   F081BDE8           POP      {R4-R8,PC}       ;; return
    115          

   \                                 In segment CODE, align 4, keep-with-next
    116          int get_curstrid(MyBOOK *mbk)
    117          {
   \                     ??get_curstrid:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0010A0E1           MOV      R1,R0
    118            switch (mbk->StringInputType)
   \   00000008   283091E5           LDR      R3,[R1, #+40]
   \   0000000C   381091E5           LDR      R1,[R1, #+56]
   \   00000010   240F8FE2           ADR      R0,??get_curstrid_1  ;; 0x00, 0x00
   \   00000014   FF20A0E3           MOV      R2,#+255
   \   00000018   FF2C82E3           ORR      R2,R2,#0xFF00
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   0700000A           BEQ      ??get_curstrid_2
   \   00000024   011051E2           SUBS     R1,R1,#+1
   \   00000028   0B00000A           BEQ      ??get_curstrid_3
   \   0000002C   011051E2           SUBS     R1,R1,#+1
   \   00000030   0F00000A           BEQ      ??get_curstrid_4
   \   00000034   011051E2           SUBS     R1,R1,#+1
   \   00000038   1400000A           BEQ      ??get_curstrid_5
   \   0000003C   9004E0E3           MVN      R0,#-1879048192
   \   00000040   0080BDE8           POP      {PC}
    119            {
    120            case 0:
    121              if (mbk->curit->name)
   \                     ??get_curstrid_2:
   \   00000044   001093E5           LDR      R1,[R3, #+0]
   \   00000048   000051E3           CMP      R1,#+0
    122              {
    123                return TextID_Create(mbk->curit->name,ENC_UCS2,TEXTID_ANY_LEN);
   \   0000004C   00009315           LDRNE    R0,[R3, #+0]
   \   00000050   0010A0E3           MOV      R1,#+0
    124              }
    125              else
    126              {
    127                return TextID_Create(L"",ENC_UCS2,TEXTID_ANY_LEN);
   \                     ??get_curstrid_6:
   \   00000054   5D0100EF           SWI      +349
   \   00000058   0080BDE8           POP      {PC}
    128              }
    129            case 1:
    130              if (mbk->curit->lsi)
   \                     ??get_curstrid_3:
   \   0000005C   041093E5           LDR      R1,[R3, #+4]
   \   00000060   000051E3           CMP      R1,#+0
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   F9FFFF0A           BEQ      ??get_curstrid_6
    131              {
    132                return TextID_Create(mbk->curit->lsi,ENC_UCS2,TEXTID_ANY_LEN);
   \   0000006C   040093E5           LDR      R0,[R3, #+4]
   \   00000070   040000EA           B        ??get_curstrid_7
    133              }
    134              else
    135              {
    136                return TextID_Create(L"",ENC_UCS2,TEXTID_ANY_LEN);
    137              }
    138            case 2:
    139              if (mbk->curit->msi)
   \                     ??get_curstrid_4:
   \   00000074   081093E5           LDR      R1,[R3, #+8]
   \   00000078   000051E3           CMP      R1,#+0
   \   0000007C   0010A0E3           MOV      R1,#+0
   \   00000080   F3FFFF0A           BEQ      ??get_curstrid_6
    140              {
    141                return TextID_Create(mbk->curit->msi,ENC_UCS2,TEXTID_ANY_LEN);
   \   00000084   080093E5           LDR      R0,[R3, #+8]
   \                     ??get_curstrid_7:
   \   00000088   5D0100EF           SWI      +349
   \   0000008C   0080BDE8           POP      {PC}
    142              }
    143              else
    144              {
    145                return TextID_Create(L"",ENC_UCS2,TEXTID_ANY_LEN);
    146              }
    147            case 3:
    148              if (mbk->curit->rsi)
   \                     ??get_curstrid_5:
   \   00000090   0C1093E5           LDR      R1,[R3, #+12]
   \   00000094   000051E3           CMP      R1,#+0
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   ECFFFF0A           BEQ      ??get_curstrid_6
    149              {
    150                return TextID_Create(mbk->curit->rsi,ENC_UCS2,TEXTID_ANY_LEN);
   \   000000A0   0C0093E5           LDR      R0,[R3, #+12]
   \   000000A4   F7FFFFEA           B        ??get_curstrid_7
   \                     ??get_curstrid_1:
   \   000000A8   00000000           DC8      0x00, 0x00,+0,+0
    151              }
    152              else
    153              {
    154                return TextID_Create(L"",ENC_UCS2,TEXTID_ANY_LEN);
    155              }
    156            }
    157            return EMPTY_TEXTID;
    158          };
    159          

   \                                 In segment CODE, align 4, keep-with-next
    160          int getnumwidth(unsigned int num)
    161          {
    162            int i=1;
   \                     ??getnumwidth:
   \   00000000   28209FE5           LDR      R2,??getnumwidth_1  ;; 0xffffffffcccccccd
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   0A0050E3           CMP      R0,#+10
   \   0000000C   0500003A           BCC      ??getnumwidth_2
    163            while(num>=10)
    164            {
    165              num/=10;
   \                     ??getnumwidth_3:
   \   00000010   92308CE0           UMULL    R3,R12,R2,R0
    166              i++;
   \   00000014   011081E2           ADD      R1,R1,#+1
   \   00000018   ACC1A0E1           LSR      R12,R12,#+3
   \   0000001C   0C00A0E1           MOV      R0,R12
    167            }
   \   00000020   0A0050E3           CMP      R0,#+10
   \   00000024   F9FFFF2A           BCS      ??getnumwidth_3
    168            return (i);
   \                     ??getnumwidth_2:
   \   00000028   0100A0E1           MOV      R0,R1
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   \                     ??getnumwidth_1:
   \   00000030   CDCCCCCC           DC32     0xffffffffcccccccd
    169          };
    170          

   \                                 In segment CODE, align 4, keep-with-next
    171          void CreateTextInput(MyBOOK *myBook)
    172          {
   \                     ??CreateTextInput:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    173            int text=EMPTY_TEXTID;
    174            int type=myBook->inputType;
   \   00000008   3C5094E5           LDR      R5,[R4, #+60]
    175            int size=0;
    176            text=get_curstrid(myBook);
   \   0000000C   ........           BL       ??get_curstrid
   \   00000010   0060A0E1           MOV      R6,R0
    177            if (myBook->inputType==IT_UNSIGNED_DIGIT)
   \   00000014   3C0094E5           LDR      R0,[R4, #+60]
   \   00000018   090050E3           CMP      R0,#+9
   \   0000001C   0300001A           BNE      ??CreateTextInput_1
    178            {
    179              size=getnumwidth(myBook->maxint);
   \   00000020   400094E5           LDR      R0,[R4, #+64]
   \   00000024   ........           BL       ??getnumwidth
   \   00000028   0070A0E1           MOV      R7,R0
   \   0000002C   000000EA           B        ??CreateTextInput_2
    180            }
    181            else
    182            {
    183              size=myBook->maxint;
   \                     ??CreateTextInput_1:
   \   00000030   407094E5           LDR      R7,[R4, #+64]
    184            }
    185            int en=0;
    186            if (myBook->StringInputType>0)
   \                     ??CreateTextInput_2:
   \   00000034   380094E5           LDR      R0,[R4, #+56]
    187            {
    188              en=1;
    189            }
    190            myBook->StringInput = CreateStringInputVA(0,
    191                                                        VAR_HEADER_TEXT(GetStrID(L"WAP_ENTER_SK")),
    192                                                        VAR_STRINP_FIXED_TEXT(GetStrID(L"EC_TEXTP_TXT")),
    193                                                        VAR_STRINP_ENABLE_EMPTY_STR(en),
    194                                                        VAR_STRINP_MAX_LEN(size),
    195                                                        VAR_STRINP_MODE(type),
    196                                                        VAR_STRINP_TEXT(text),
    197                                                        VAR_BOOK(myBook),
    198                                                        VAR_PREV_ACTION_PROC(OnBackCreateTextInputGui),
    199                                                        VAR_OK_PROC(OnOkCreateWinOrPassGui),
    200                                                        0);
   \   00000038   A8A09FE5           LDR      R10,??CreateTextInput_3  ;; `?<Constant L"\\x57\\x41\\x50\\x5f\\x45\\x4e\\x54\\x45\\`
   \   0000003C   0080A0E3           MOV      R8,#+0
   \   00000040   010050E3           CMP      R0,#+1
   \   00000044   0180A0A3           MOVGE    R8,#+1
   \   00000048   1C008AE2           ADD      R0,R10,#+28
   \   0000004C   ........           _BLF     ??GetStrID,??GetStrID??rA
   \   00000050   0090A0E1           MOV      R9,R0
   \   00000054   0A00A0E1           MOV      R0,R10
   \   00000058   ........           _BLF     ??GetStrID,??GetStrID??rA
   \   0000005C   88309FE5           LDR      R3,??CreateTextInput_3+0x4  ;; VAR_ARG_STRINP_FIXED_TEXT
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   02002DE9           PUSH     {R1}
   \   00000068   80109FE5           LDR      R1,??CreateTextInput_3+0x8  ;; ??OnOkCreateWinOrPassGui
   \   0000006C   0020A0E1           MOV      R2,R0
   \   00000070   02002DE9           PUSH     {R1}
   \   00000074   78109FE5           LDR      R1,??CreateTextInput_3+0xC  ;; VAR_ARG_CALL_BACK_OK
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   02002DE9           PUSH     {R1}
   \   00000080   70109FE5           LDR      R1,??CreateTextInput_3+0x10  ;; ??OnBackCreateTextInputGui
   \   00000084   02002DE9           PUSH     {R1}
   \   00000088   6C109FE5           LDR      R1,??CreateTextInput_3+0x14  ;; VAR_ARG_CALL_BACK_PREV_ACT
   \   0000008C   02002DE9           PUSH     {R1}
   \   00000090   0410A0E1           MOV      R1,R4
   \   00000094   02002DE9           PUSH     {R1}
   \   00000098   60109FE5           LDR      R1,??CreateTextInput_3+0x18  ;; VAR_ARG_BOOK
   \   0000009C   02002DE9           PUSH     {R1}
   \   000000A0   5C109FE5           LDR      R1,??CreateTextInput_3+0x1C  ;; VAR_ARG_STRINP_TEXT
   \   000000A4   40002DE9           PUSH     {R6}
   \   000000A8   02002DE9           PUSH     {R1}
   \   000000AC   54109FE5           LDR      R1,??CreateTextInput_3+0x20  ;; VAR_ARG_STRINP_MODE
   \   000000B0   20002DE9           PUSH     {R5}
   \   000000B4   02002DE9           PUSH     {R1}
   \   000000B8   4C109FE5           LDR      R1,??CreateTextInput_3+0x24  ;; VAR_ARG_STRINP_MAX_LEN
   \   000000BC   80002DE9           PUSH     {R7}
   \   000000C0   02002DE9           PUSH     {R1}
   \   000000C4   44109FE5           LDR      R1,??CreateTextInput_3+0x28  ;; VAR_ARG_STRINP_EMPTY_STR_EN
   \   000000C8   00012DE9           PUSH     {R8}
   \   000000CC   02002DE9           PUSH     {R1}
   \   000000D0   3C109FE5           LDR      R1,??CreateTextInput_3+0x2C  ;; VAR_ARG_HTEXT
   \   000000D4   00022DE9           PUSH     {R9}
   \   000000D8   440100EF           SWI      +324
   \   000000DC   40D08DE2           ADD      SP,SP,#+64
   \   000000E0   180084E5           STR      R0,[R4, #+24]
    201          };
   \   000000E4   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??CreateTextInput_3:
   \   000000E8   ........           DC32     `?<Constant L"\\x57\\x41\\x50\\x5f\\x45\\x4e\\x54\\x45\\`
   \   000000EC   ........           DC32     VAR_ARG_STRINP_FIXED_TEXT
   \   000000F0   ........           DC32     ??OnOkCreateWinOrPassGui
   \   000000F4   ........           DC32     VAR_ARG_CALL_BACK_OK
   \   000000F8   ........           DC32     ??OnBackCreateTextInputGui
   \   000000FC   ........           DC32     VAR_ARG_CALL_BACK_PREV_ACT
   \   00000100   ........           DC32     VAR_ARG_BOOK
   \   00000104   ........           DC32     VAR_ARG_STRINP_TEXT
   \   00000108   ........           DC32     VAR_ARG_STRINP_MODE
   \   0000010C   ........           DC32     VAR_ARG_STRINP_MAX_LEN
   \   00000110   ........           DC32     VAR_ARG_STRINP_EMPTY_STR_EN
   \   00000114   ........           DC32     VAR_ARG_HTEXT
    202          
    203          
    204          //____________________

   \                                 In segment CODE, align 4, keep-with-next
    205          static int StringInputPage_OnEnter(void *,BOOK * bk)
    206          {
   \                     ??StringInputPage_OnEnter:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0100A0E1           MOV      R0,R1
    207            CreateTextInput((MyBOOK*)bk);
   \   00000008   ........           BL       ??CreateTextInput
    208            return (1);
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   0080BDE8           POP      {PC}             ;; return
    209          };
    210          

   \                                 In segment CODE, align 4, keep-with-next
    211          static int StringInputPage_OnExit(void *, BOOK * bk)
    212          {
   \                     ??StringInputPage_OnExit:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    213            MyBOOK *mbk=(MyBOOK *)bk;
    214            FREE_GUI(mbk->StringInput);
   \   00000008   180094E5           LDR      R0,[R4, #+24]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0100000A           BEQ      ??StringInputPage_OnExit_1
   \   00000014   CE0100EF           SWI      +462
   \   00000018   180084E5           STR      R0,[R4, #+24]
    215            return (1);  
   \                     ??StringInputPage_OnExit_1:
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
    216          };
    217          

   \                                 In segment DYN_PAGE, align 4, align-sorted
    218          const PAGE_MSG bk_msglst_StringInput[] @ "DYN_PAGE"  = 
   \                     bk_msglst_StringInput:
   \   00000000   42000000....       DC32 66, ??StringInputPage_OnEnter, 67, ??StringInputPage_OnExit, 64
   \              ....43000000
   \              ........4000
   \              0000        
   \   00000014   00000000           DC32 0H
    219          {
    220            PAGE_ENTER_EVENT_TAG,    StringInputPage_OnEnter,
    221            PAGE_EXIT_EVENT_TAG,     StringInputPage_OnExit,
    222            NIL_EVENT_TAG,           NULL
    223          };
    224          

   \                                 In segment DATA_C, align 4, align-sorted
    225          const PAGE_DESC bk_StringInput = {"SoftEdit_StringInput_Page",0,bk_msglst_StringInput};
   \                     bk_StringInput:
   \   00000000   ........0000       DC32 `?<Constant "SoftEdit_StringInput_...">`, 0H
   \              0000        
   \   00000008   ........           DC32 bk_msglst_StringInput

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     PREVIOUS_EVENT

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "SoftEdit_StringInput_...">`:
   \   00000000   536F66744564       DC8 "SoftEdit_StringInput_Page"
   \              69745F537472
   \              696E67496E70
   \              75745F506167
   \              6500        
   \   0000001A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 2, align-sorted
   \   00000000   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x57\\x41\\x50\\x5f\\x45\\x4e\\x54\\x45\\`:
   \   00000000   570041005000       DC8 57H, 0, 41H, 0, 50H, 0, 5FH, 0
   \              5F00        
   \   00000008   45004E005400       DC8 45H, 0, 4EH, 0, 54H, 0, 45H, 0
   \              4500        
   \   00000010   52005F005300       DC8 52H, 0, 5FH, 0, 53H, 0, 4BH, 0
   \              4B00        
   \   00000018   0000               DC8 0, 0
   \   0000001A   0000               DC8 0, 0
   \   0000001C   450043005F00       DC8 45H, 0, 43H, 0, 5FH, 0, 54H, 0
   \              5400        
   \   00000024   450058005400       DC8 45H, 0, 58H, 0, 54H, 0, 50H, 0
   \              5000        
   \   0000002C   5F0054005800       DC8 5FH, 0, 54H, 0, 58H, 0, 54H, 0
   \              5400        
   \   00000034   0000               DC8 0, 0
   \   00000036   0000               DC8 0, 0
    226          //____________________

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     CreateTextInput(MyBOOK *)         96
     OnBackCreateTextInputGui(BOOK *, u16 *, int)
                                        4
     OnOkCreateWinOrPassGui(BOOK *, wchar_t *, int)
                                       24
     StringInputPage_OnEnter(void *, BOOK *)
                                        4
     StringInputPage_OnExit(void *, BOOK *)
                                        8
     get_curstrid(MyBOOK *)             4
     getnumwidth(unsigned int)          0
     kickbadsymbols(wchar_t *, int)     0
     unicode2win1251(char *, wchar_t *, int)
                                        4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     OnBackCreateTextInputGui(BOOK *, u16 *, int)
                                      20
     unicode2win1251(char *, wchar_t *, int)
                                     192
     kickbadsymbols(wchar_t *, int)   64
     OnOkCreateWinOrPassGui(BOOK *, wchar_t *, int)
                                     540
     get_curstrid(MyBOOK *)          172
     getnumwidth(unsigned int)        52
     CreateTextInput(MyBOOK *)       280
     StringInputPage_OnEnter(void *, BOOK *)
                                      20
     StringInputPage_OnExit(void *, BOOK *)
                                      36
     bk_msglst_StringInput            24
     bk_StringInput                   12
     ??DataTable1                      4
     ?<Constant "SoftEdit_StringInput_...">
                                      28
     ?<Constant L"">                   2
     ?<Constant L"\x57\x41\x50\x5f\x45\x4e\x54\x45\
                                      56
      Others                          72

 
 1 452 bytes in segment CODE
    98 bytes in segment DATA_C
    24 bytes in segment DYN_PAGE
 
 1 380 bytes of CODE  memory (+ 72 bytes shared)
   122 bytes of CONST memory

Errors: none
Warnings: none
