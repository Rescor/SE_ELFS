//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:54:32 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\EvtDesk\main. /
//                       cpp                                                 /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\EvtDesk\main. /
//                       cpp -D NDEBUG -lC Z:\home\perk11\www\perk11.info\sv /
//                       n\SE\EvtDesk\Release\List\ -lA                      /
//                       Z:\home\perk11\www\perk11.info\svn\SE\EvtDesk\Relea /
//                       se\List\ -o Z:\home\perk11\www\perk11.info\svn\SE\E /
//                       vtDesk\Release\Obj\ -s9 --cpu_mode arm --endian     /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork -e --fpu None --eec++ --dlib_config     /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\EvtDesk\Relea /
//                       se\List\main.s79                                    /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ??div32_a
        EXTERN ??ldr32h_a

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??CreateEvtDeskBook??rA
??DataTable0 EQU 0
??DataTable1 EQU 0
        PUBLIC ??Display_ReDraw
        FUNCTION ??Display_ReDraw,0603H
        LOCFRAME CSTACK, 128, STACK
        MULTWEAK ??Display_ReDraw??rT
        PUBLIC ??DrawGradient
        FUNCTION ??DrawGradient,0203H
        LOCFRAME CSTACK, 64, STACK
        MULTWEAK ??DrawGradient??rT
        PUBLIC ??DrawGradientVert
        FUNCTION ??DrawGradientVert,0203H
        LOCFRAME CSTACK, 64, STACK
        MULTWEAK ??DrawGradientVert??rT
        PUBLIC ??DrawLine
        FUNCTION ??DrawLine,0203H
        LOCFRAME CSTACK, 40, STACK
        MULTWEAK ??DrawLine??rT
        MULTWEAK ??InitConfig??rA
        PUBLIC ??InitVar
        FUNCTION ??InitVar,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??InitVar??rT
        PUBLIC ??cmpdate
        FUNCTION ??cmpdate,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??cmpdate??rT
        PUBLIC ??elf_exit
        FUNCTION ??elf_exit,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??elf_exit??rT
        PUBLIC ??isEvtBook
        FUNCTION ??isEvtBook,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??isEvtBook??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        PUBLIC ??onTimer
        FUNCTION ??onTimer,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??onTimer??rT
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new[]??rA`
        MULTWEAK ??rA??div32_a
        MULTWEAK ??rA??ldr32h_a
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Display_desc
        PUBLIC Display_oldReDraw
        PUBLIC GUI_display
        PUBLIC Height
        PUBLIC Width
        PUBLIC _dx
        PUBLIC _dy
        PUBLIC _x
        PUBLIC _y
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC timer
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        




kill_data           SYMBOL "kill_data"
??CreateEvtDeskBook??rA SYMBOL "??rA", ??CreateEvtDeskBook

??Display_ReDraw??rT SYMBOL "??rT", ??Display_ReDraw

??DrawGradient??rT  SYMBOL "??rT", ??DrawGradient

??DrawGradientVert??rT SYMBOL "??rT", ??DrawGradientVert

??DrawLine??rT      SYMBOL "??rT", ??DrawLine
??InitConfig??rA    SYMBOL "??rA", ??InitConfig

??InitVar??rT       SYMBOL "??rT", ??InitVar

??cmpdate??rT       SYMBOL "??rT", ??cmpdate

??elf_exit??rT      SYMBOL "??rT", ??elf_exit

??isEvtBook??rT     SYMBOL "??rT", ??isEvtBook
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main

??onTimer??rT       SYMBOL "??rT", ??onTimer
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

        EXTERN ??CreateEvtDeskBook
        FUNCTION ??CreateEvtDeskBook,0202H
        EXTERN ??InitConfig
        FUNCTION ??InitConfig,0202H
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN ELF_BEGIN
        EXTERN ev_color
        EXTERN ev_font
        EXTERN kill_data
        FUNCTION kill_data,0202H
        EXTERN low_color
        EXTERN miss_color
        EXTERN rc
        EXTERN rc2
        EXTERN str_events
        EXTERN str_noevents
        EXTERN str_off
        EXTERN text_color
        EXTERN text_font
        EXTERN time_color
        EXTERN time_font
        EXTERN upp_color

// Z:\home\perk11\www\perk11.info\svn\SE\EvtDesk\main.cpp
//    1 #include "..\\include\Lib_Clara.h"
//    2 #include "..\\include\Dir.h"
//    3 #include "config_data.h"
//    4 
//    5 typedef struct
//    6 {
//    7     BOOK bk;
//    8     void * update;
//    9     wchar_t *path;
//   10     wchar_t *name;
//   11     GUI *remind;
//   12     LIST *lst;
//   13     LIST *remlst;
//   14     GUI_LIST *g_test;
//   15     GUI_FEEDBACK *g_mbox;
//   16 }EVTBOOK;
//   17 
//   18   typedef struct
//   19   {
//   20     bool done;
//   21     signed int tm_start;
//   22     signed int tm_end;
//   23     signed int ask_before;
//   24     signed int ask_after;
//   25     int remdays[7];
//   26     int remdays2[7];
//   27     bool after_done;
//   28     bool before_done;
//   29     //-------------------
//   30     int type;
//   31     int AskBefore;
//   32     bool isMinusInBefore;
//   33     int AskAfter;
//   34     bool isGps;
//   35     bool isMinusInAfter;
//   36     int dtype;
//   37     DATE date;
//   38     DATE date2;
//   39     int days[7];
//   40     int ttype;
//   41     TIME time;
//   42     TIME time2;
//   43     wchar_t *param;
//   44     wchar_t *txt;
//   45     char *gps;
//   46     DATE date_0;
//   47     DATE date_1;
//   48     int d_shift_0;
//   49     int d_shift_1;
//   50     int day_1;
//   51     int day_2;
//   52     int rem;
//   53 }EVENT;
//   54   
//   55 typedef struct
//   56 {
//   57     wchar_t *text;
//   58     wchar_t *utext;
//   59     wchar_t *time;
//   60     bool checked;
//   61 }REMIND;
//   62 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   63 DISP_OBJ_ONREDRAW_METHOD Display_oldReDraw = 0;
//   64 DISP_OBJ * GUI_display = 0;
//   65 DISP_DESC * Display_desc = 0;
//   66 
//   67 int Height,Width;
//   68 u16 timer;
timer:
        DS8 2
        DS8 2
Display_oldReDraw:
        DS8 4
GUI_display:
        DS8 4
Display_desc:
        DS8 4
Height:
        DS8 4
Width:
        DS8 4
//   69 BOOK * CreateEvtDeskBook();
//   70 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   71 int _x=100;
_x:
        DS8 4
        REQUIRE `?<Initializer for _x>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   72 int _y=100;
_y:
        DS8 4
        REQUIRE `?<Initializer for _y>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   73 int _dx=2;
_dx:
        DS8 4
        REQUIRE `?<Initializer for _dx>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   74 int _dy=3;
_dy:
        DS8 4
        REQUIRE `?<Initializer for _dy>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??elf_exit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??elf_exit
//   75 
//   76 #define GET_BLUE(x) ((unsigned int)x&0xFF)
//   77 #define GET_GREEN(x) (((unsigned int)x>>8)&0xFF)
//   78 #define GET_RED(x) (((unsigned int)x>>16)&0xFF)
//   79 #define GET_ALPHA(x) (((unsigned int)x>>24)&0xFF)
//   80 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??elf_exit
        ARM
//   81 void elf_exit(void)
//   82 {
??elf_exit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   83   kill_data(&ELF_BEGIN, (void(*)(void*))mfree_adr());
        SWI      +33028
        MOV      R1,R0
        LDR      R0,??elf_exit_1  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??elf_exit_1:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock1
//   84 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??onTimer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??onTimer
//   85 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??onTimer
        ARM
//   86 void onTimer (u16 tmr , LPARAM)
//   87 {
??onTimer:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   88   DispObject_InvalidateRect(GUI_display,0);
        LDR      R4,??DataTable3  ;; timer
        MOV      R1,#+0
        LDR      R0,[R4, #+8]
        SWI      +495
//   89   Timer_ReSet(&timer,1000,onTimer,0);
        LDR      R2,??DataTable2  ;; ??onTimer
        MOV      R3,#+0
        MOV      R1,#+1000
        MOV      R0,R4
        SWI      +296
//   90 };
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??DrawGradient??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??DrawGradient
//   91 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??DrawGradient
        ARM
//   92 void DrawGradient(int x, int y, int x2, int y2, int upc, int loc)
//   93 {
??DrawGradient:
        PUSH     {R0,R1,R3-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+48
        SUB      SP,SP,#+8
        CFI CFA R13+56
        LDR      R0,[SP, #+56]
        LDR      R1,[SP, #+60]
//   94   int r1=GET_RED(upc),g1=GET_GREEN(upc),b1=GET_BLUE(upc);
        MOV      R3,#+255
        AND      R4,R3,R0, LSR #+16
        AND      R5,R3,R0, LSR #+8
        AND      R6,R0,#0xFF
//   95   int r2=GET_RED(loc),g2=GET_GREEN(loc),b2=GET_BLUE(loc);
//   96   int a1=GET_ALPHA(upc),a2=GET_ALPHA(loc);
        LSR      R8,R0,#+24
//   97   int i;
//   98   for(i=0;i<x2-x;i++)
        LDR      R0,[SP, #+8]
        AND      R7,R3,R1, LSR #+16
        STR      R7,[SP, #+0]
        AND      R7,R3,R1, LSR #+8
        STR      R7,[SP, #+4]
        AND      R7,R1,#0xFF
        LSR      R9,R1,#+24
        MOV      R10,#+0
        SUB      R11,R2,R0
        CMP      R11,#+1
        BGE      ??DrawGradient_1
        ADD      SP,SP,#+20
        CFI CFA R13+36
        POP      {R4-R11,PC}
        CFI CFA R13+56
//   99   { 
//  100     int r,g,b,a;
//  101     r = r1 + (i * (r2-r1) / (x2-x));
//  102     g = g1 + (i * (g2-g1) / (x2-x));
//  103     b = b1 + (i * (b2-b1) / (x2-x));
//  104     a = a1 + (i * (a2-a1) / (x2-x));
//  105     int cl=a*0x1000000 + r * 0x10000 + g *0x100 + b;
??DrawGradient_2:
        LDR      R0,[SP, #+4]
        SUB      R1,R0,R5
        MUL      R0,R1,R10
        MOV      R1,R11
        _BLF     ??div32_a,??rA??div32_a
        ADD      R0,R1,R5
        ADD      R2,R6,R0, LSL #+8
        SUB      R1,R9,R8
        MUL      R0,R1,R10
        MOV      R1,R11
        _BLF     ??div32_a,??rA??div32_a
        ADD      R0,R1,R8
        ADD      R2,R2,R0, LSL #+24
        LDR      R0,[SP, #+0]
        SUB      R1,R0,R4
        MUL      R0,R1,R10
        MOV      R1,R11
        _BLF     ??div32_a,??rA??div32_a
        ADD      R0,R1,R4
        ADD      R2,R2,R0, LSL #+16
        SUB      R1,R7,R6
        MUL      R0,R1,R10
        MOV      R1,R11
        _BLF     ??div32_a,??rA??div32_a
//  106     DrawRect(x+i,y,x+i+1,y2,cl,cl);
        LDR      R0,[SP, #+8]
        ADD      R1,R1,R2
        MOV      R2,R1
        PUSH     {R2}
        CFI CFA R13+60
        PUSH     {R1}
        CFI CFA R13+64
        LDR      R3,[SP, #+24]
        LDR      R1,[SP, #+20]
        ADD      R0,R10,R0
        ADD      R2,R0,#+1
        SWI      +492
//  107   }
        ADD      R10,R10,#+1
        ADD      SP,SP,#+8
        CFI CFA R13+56
??DrawGradient_1:
        CMP      R10,R11
        BLT      ??DrawGradient_2
//  108 };
        ADD      SP,SP,#+20       ;; stack cleaning
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??DrawGradientVert??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??DrawGradientVert
//  109 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??DrawGradientVert
        ARM
//  110 void DrawGradientVert(int x, int y, int x2, int y2, int upc, int loc)
//  111 {
??DrawGradientVert:
        PUSH     {R0-R2,R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+48
        SUB      SP,SP,#+8
        CFI CFA R13+56
        LDR      R0,[SP, #+56]
        LDR      R1,[SP, #+60]
//  112   int r1=GET_RED(upc),g1=GET_GREEN(upc),b1=GET_BLUE(upc);
        MOV      R2,#+255
        AND      R4,R2,R0, LSR #+16
        AND      R5,R2,R0, LSR #+8
        AND      R6,R0,#0xFF
//  113   int r2=GET_RED(loc),g2=GET_GREEN(loc),b2=GET_BLUE(loc);
//  114   int a1=GET_ALPHA(upc),a2=GET_ALPHA(loc);
        LSR      R8,R0,#+24
//  115   int i;
//  116   for(i=0;i<y2-y;i++)
        LDR      R0,[SP, #+12]
        AND      R7,R2,R1, LSR #+16
        STR      R7,[SP, #+0]
        AND      R7,R2,R1, LSR #+8
        STR      R7,[SP, #+4]
        AND      R7,R1,#0xFF
        LSR      R9,R1,#+24
        MOV      R10,#+0
        SUB      R11,R3,R0
        CMP      R11,#+1
        BGE      ??DrawGradientVert_1
        ADD      SP,SP,#+20
        CFI CFA R13+36
        POP      {R4-R11,PC}
        CFI CFA R13+56
//  117   { 
//  118     int r,g,b,a;
//  119     r = r1 + (i * (r2-r1) / (y2-y));
//  120     g = g1 + (i * (g2-g1) / (y2-y));
//  121     b = b1 + (i * (b2-b1) / (y2-y));
//  122     a = a1 + (i * (a2-a1) / (y2-y));
//  123     int cl=a*0x1000000 + r * 0x10000 + g *0x100 + b;
??DrawGradientVert_2:
        LDR      R0,[SP, #+4]
        SUB      R1,R0,R5
        MUL      R0,R1,R10
        MOV      R1,R11
        _BLF     ??div32_a,??rA??div32_a
        ADD      R0,R1,R5
        ADD      R2,R6,R0, LSL #+8
        SUB      R1,R9,R8
        MUL      R0,R1,R10
        MOV      R1,R11
        _BLF     ??div32_a,??rA??div32_a
        ADD      R0,R1,R8
        ADD      R2,R2,R0, LSL #+24
        LDR      R0,[SP, #+0]
        SUB      R1,R0,R4
        MUL      R0,R1,R10
        MOV      R1,R11
        _BLF     ??div32_a,??rA??div32_a
        ADD      R0,R1,R4
        ADD      R2,R2,R0, LSL #+16
        SUB      R1,R7,R6
        MUL      R0,R1,R10
        MOV      R1,R11
        _BLF     ??div32_a,??rA??div32_a
        ADD      R0,R1,R2
//  124     DrawRect(x, y+i, x2, y+i+1, cl, cl);
        LDR      R1,[SP, #+12]
        MOV      R2,R0
        PUSH     {R2}
        CFI CFA R13+60
        PUSH     {R0}
        CFI CFA R13+64
        LDR      R2,[SP, #+24]
        LDR      R0,[SP, #+16]
        ADD      R1,R10,R1
        ADD      R3,R1,#+1
        SWI      +492
//  125   }
        ADD      R10,R10,#+1
        ADD      SP,SP,#+8
        CFI CFA R13+56
??DrawGradientVert_1:
        CMP      R10,R11
        BLT      ??DrawGradientVert_2
//  126 };
        ADD      SP,SP,#+20       ;; stack cleaning
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??DrawLine??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??DrawLine

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??DrawLine
        ARM
//  127 void DrawLine(int str, int ct, int x, int y, int x2, int y2, int between, int c)
//  128 {
??DrawLine:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R12,[SP, #+20]
        LDR      R5,[SP, #+28]
        LDR      LR,[SP, #+24]
        MOV      R4,R0
        LDR      R0,[SP, #+16]
//  129   DrawString(str,ct,x,y,x2,y2,between,3,c,c);
        MOV      R6,R5
        PUSH     {R6}
        CFI CFA R13+20
        PUSH     {R5}
        CFI CFA R13+24
        MOV      R5,#+3
        PUSH     {R5}
        CFI CFA R13+28
        PUSH     {LR}
        CFI CFA R13+32
        PUSH     {R12}
        CFI CFA R13+36
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R0,R4
        SWI      +493
//  130   TextID_Destroy(str);
        MOV      R0,R4
        SWI      +353
//  131 };
        ADD      SP,SP,#+24
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??isEvtBook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??isEvtBook
//  132 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??isEvtBook
        ARM
//  133 int isEvtBook(BOOK *bk)
//  134 {
//  135   if (strcmp(bk->xbook->name,"EventControl")==0)return 1;
??isEvtBook:
        LDR      R1,??isEvtBook_1  ;; `?<Constant "EventControl">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R0, #+0]
        LDR      R0,[R0, #+4]
        SWI      +345
        CMP      R0,#+0
        MOVEQ    R0,#+1
        POPEQ    {PC}
//  136   return 0;
        MOV      R0,#+0
        POP      {PC}             ;; return
        DATA
??isEvtBook_1:
        DC32     `?<Constant "EventControl">`
        CFI EndBlock cfiBlock11
//  137 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??cmpdate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??cmpdate
//  138 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??cmpdate
        ARM
//  139   int cmpdate(DATE d1, DATE d2)
//  140 {
??cmpdate:
        PUSH     {R0,R1}
        CFI CFA R13+8
//  141   if      (d1.year<d2.year)return 2;
        LDRH     R0,[SP, #+0]
        LDRH     R1,[SP, #+4]
        CMP      R0,R1
        BCS      ??cmpdate_1
??cmpdate_2:
        POP      {R1,R2}
        CFI CFA R13+0
        MOV      R0,#+2
        BX       LR
        CFI CFA R13+8
//  142   else if (d1.year>d2.year)return 0;
??cmpdate_1:
        MOV      R0,R1
        LDRH     R1,[SP, #+0]
        CMP      R0,R1
        BCS      ??cmpdate_3
??cmpdate_4:
        POP      {R1,R2}
        CFI CFA R13+0
        MOV      R0,#+0
        BX       LR
        CFI CFA R13+8
//  143   else
//  144   {
//  145     if      (d1.mon<d2.mon) return 2;
??cmpdate_3:
        LDRB     R0,[SP, #+6]
        LDRB     R1,[SP, #+2]
        CMP      R1,R0
        BCC      ??cmpdate_2
//  146     else if (d1.mon>d2.mon) return 0;
        CMP      R0,R1
        BCC      ??cmpdate_4
//  147     else
//  148     {
//  149       if (d1.day<d2.day)return 2;
        LDRB     R0,[SP, #+7]
        LDRB     R1,[SP, #+3]
        CMP      R1,R0
        BCC      ??cmpdate_2
//  150       else if (d1.day>d2.day)return 0;
        CMP      R0,R1
//  151       else return 1;
        POP      {R1,R2}
        CFI CFA R13+0
        MOVCC    R0,#+0
        MOVCS    R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock13
//  152     }
//  153   }
//  154 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??Display_ReDraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??Display_ReDraw
//  155 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??Display_ReDraw
        ARM
//  156 void Display_ReDraw(DISP_OBJ * db,int r1, int r2,int r3)
//  157 {
??Display_ReDraw:
        PUSH     {R0-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+52
        SUB      SP,SP,#+36
        CFI CFA R13+88
//  158   DATETIME dt;
//  159   REQUEST_DATEANDTIME_GET(0,&dt);
        ADD      R1,SP,#+20
        MOV      R0,#+0
        SWI      +366
//  160   int now=(dt.time.hour*3600) + (dt.time.min*60) + dt.time.sec;
        LDRB     R1,[SP, #+24]
        LDRB     R3,[SP, #+25]
        MOV      R2,#+3600
        MOV      R4,#+60
        MUL      R3,R4,R3
//  161   char day;
//  162   DATE_GetWeekDay(&dt.date, &day);
        ADD      R0,SP,#+20
        MLA      R1,R2,R1,R3
        LDRB     R2,[SP, #+26]
//  163   SetFont(ev_font);
//  164   DrawGradientVert(rc.x1, rc.y1, rc.x2, rc.y2, upp_color, low_color);
//  165   DrawLine(TextID_Create(str_events,ENC_UCS2,TEXTID_ANY_LEN), 0, rc.x1,rc.y1,rc.x2,rc.y2,40, ev_color);
        MOV      R4,#+255
        ORR      R4,R4,#0xFF00
        ADD      R1,R2,R1
        STR      R1,[SP, #+32]
        ADD      R1,SP,#+28
        SWI      +668
        LDR      R0,??Display_ReDraw_1  ;; ev_font
        LDR      R0,[R0, #+0]
        SWI      +497
        LDR      R1,??Display_ReDraw_1+0x4  ;; low_color
        LDR      R0,??Display_ReDraw_1+0x8  ;; rc
        LDR      R1,[R1, #+0]
        LDRH     R5,[R0, #+4]
        LDRH     R7,[R0, #+2]
        LDRH     R6,[R0, #+6]
        LDRH     R8,[R0, #+0]
        STR      R1,[SP, #+4]
        MOV      R0,R1
        PUSH     {R0}
        CFI CFA R13+92
        LDR      R0,??Display_ReDraw_1+0xC  ;; upp_color
        MOV      R3,R6
        LDR      R0,[R0, #+0]
        MOV      R2,R7
        PUSH     {R0}
        CFI CFA R13+96
        MOV      R1,R5
        MOV      R0,R8
        BL       ??DrawGradientVert
        LDR      R0,??Display_ReDraw_1+0x10  ;; str_events
        MOV      R2,R4
        MOV      R1,#+0
        SWI      +349
        MOV      R9,R0
        LDR      R0,??Display_ReDraw_1+0x14  ;; ev_color
        MOV      R3,R5
        LDR      R0,[R0, #+0]
//  166   EVTBOOK *bk=(EVTBOOK*)FindBook(isEvtBook);
//  167   int pos=rc.y2;
//  168   if (!bk)
        LDR      R5,??Display_ReDraw_1+0x18  ;; rc2
        MOV      R1,R0
        PUSH     {R1}
        CFI CFA R13+100
        PUSH     {R0}
        CFI CFA R13+104
        MOV      R2,R8
        MOV      R1,#+0
        MOV      R0,#+3
        PUSH     {R0}
        CFI CFA R13+108
        MOV      R0,#+40
        PUSH     {R0}
        CFI CFA R13+112
        MOV      R0,R6
        PUSH     {R0}
        CFI CFA R13+116
        PUSH     {R7}
        CFI CFA R13+120
        MOV      R0,R9
        SWI      +493
        MOV      R0,R9
        SWI      +353
        LDR      R0,??Display_ReDraw_1+0x1C  ;; ??isEvtBook
        SWI      +304
        STR      R0,[SP, #+40]
        CMP      R0,#+0
        ADD      SP,SP,#+32
        CFI CFA R13+88
        BNE      ??Display_ReDraw_2
//  169   {
//  170     DrawGradientVert(rc2.x1, pos, rc2.x2, pos+rc2.y2, low_color, low_color);
        LDRH     R0,[R5, #+6]
        LDRH     R8,[R5, #+2]
        LDRH     R9,[R5, #+0]
        ADD      R7,R0,R6
        LDR      R0,[SP, #+4]
        MOV      R3,R7
        PUSH     {R0}
        CFI CFA R13+92
        PUSH     {R0}
        CFI CFA R13+96
        MOV      R2,R8
        MOV      R1,R6
        MOV      R0,R9
        BL       ??DrawGradientVert
//  171     DrawLine(TextID_Create(str_off,ENC_UCS2,TEXTID_ANY_LEN), 2, rc2.x1, pos, rc2.x2, pos+rc2.y2, 40, clWhite);
        LDR      R0,??Display_ReDraw_1+0x20  ;; str_off
        MOV      R2,R4
        MOV      R1,#+0
        SWI      +349
        MOV      R4,R0
        MVN      R0,#+0
        PUSH     {R0}
        CFI CFA R13+100
        PUSH     {R0}
        CFI CFA R13+104
        MOV      R3,R6
        MOV      R2,R9
        MOV      R1,#+2
        MOV      R0,#+3
        PUSH     {R0}
        CFI CFA R13+108
        MOV      R0,#+40
        PUSH     {R0}
        CFI CFA R13+112
        PUSH     {R7}
        CFI CFA R13+116
        PUSH     {R8}
        CFI CFA R13+120
        MOV      R0,R4
        SWI      +493
        MOV      R0,R4
        SWI      +353
//  172     return;
        ADD      SP,SP,#+32
        CFI CFA R13+88
        ADD      SP,SP,#+52
        CFI CFA R13+36
        POP      {R4-R11,PC}
        CFI CFA R13+88
//  173   }
//  174   SetFont(text_font);
??Display_ReDraw_2:
        LDR      R1,??Display_ReDraw_1+0x24  ;; text_font
//  175   int x=0;
        MOV      R10,#+0
        LDR      R1,[R1, #+0]
        STR      R1,[SP, #+16]
        MOV      R0,R1
        SWI      +497
//  176   int res=0;
//  177   if (bk->remlst && bk->remlst->FirstFree)
        LDR      R0,[SP, #+8]
        MOV      R7,#+0
        LDR      R0,[R0, #+44]
        CMP      R0,#+0
        BEQ      ??Display_ReDraw_3
        LDRH     R0,[R0, #+2]
        CMP      R0,#+0
        BNE      ??Display_ReDraw_4
        B        ??Display_ReDraw_3
//  178   {
//  179     while (x<bk->remlst->FirstFree)
//  180     {
//  181       REMIND *rem=(REMIND*)bk->remlst->listdata[x++];
??Display_ReDraw_5:
        LDR      R0,[R0, #+4]
//  182       DrawGradientVert(rc2.x1, pos, rc2.x2, pos+rc2.y2, miss_color, miss_color);
//  183       DrawLine(TextID_Create(rem->text,ENC_UCS2,TEXTID_ANY_LEN), 0, rc2.x1, pos, rc2.x2, pos+rc2.y2, 40, text_color);
//  184       pos+=rc2.y2;
//  185       res++;
        ADD      R7,R7,#+1
        LDR      R0,[R0, +R10, LSL #+2]
        ADD      R10,R10,#+1
        STR      R0,[SP, #+0]
        LDRH     R0,[R5, #+6]
        LDRH     R8,[R5, #+2]
        LDRH     R9,[R5, #+0]
        ADD      R11,R0,R6
        LDR      R0,??Display_ReDraw_1+0x28  ;; miss_color
        MOV      R3,R11
        LDR      R0,[R0, #+0]
        MOV      R2,R8
        MOV      R1,R0
        PUSH     {R1}
        CFI CFA R13+92
        PUSH     {R0}
        CFI CFA R13+96
        MOV      R1,R6
        MOV      R0,R9
        BL       ??DrawGradientVert
        LDR      R0,[SP, #+8]
        MOV      R2,R4
        LDR      R0,[R0, #+0]
        MOV      R1,#+0
        SWI      +349
        LDR      R1,??Display_ReDraw_1+0x2C  ;; text_color
        MOV      R3,R6
        LDR      R1,[R1, #+0]
        STR      R0,[SP, #+8]
        MOV      R0,R1
        PUSH     {R0}
        CFI CFA R13+100
        PUSH     {R1}
        CFI CFA R13+104
        MOV      R2,R9
        MOV      R0,#+3
        PUSH     {R0}
        CFI CFA R13+108
        MOV      R1,#+0
        MOV      R6,R11
        MOV      R0,#+40
        PUSH     {R0}
        CFI CFA R13+112
        MOV      R0,R11
        PUSH     {R0}
        CFI CFA R13+116
        PUSH     {R8}
        CFI CFA R13+120
        LDR      R0,[SP, #+32]
        SWI      +493
        LDR      R0,[SP, #+32]
        SWI      +353
        ADD      SP,SP,#+32
        CFI CFA R13+88
//  186     }
??Display_ReDraw_4:
        LDR      R0,[SP, #+8]
        LDR      R0,[R0, #+44]
        LDRH     R1,[R0, #+2]
        CMP      R10,R1
        BLT      ??Display_ReDraw_5
//  187   }
//  188   x=0;
??Display_ReDraw_3:
        MOV      R1,#+0
        STR      R1,[SP, #+12]
//  189   if (bk->lst)
        LDR      R0,[SP, #+8]
        LDR      R0,[R0, #+40]
        CMP      R0,#+0
        BEQ      ??Display_ReDraw_6
        B        ??Display_ReDraw_7
//  190   {
//  191     while (x<bk->lst->FirstFree)
//  192     {
//  193       EVENT *ev=(EVENT*)bk->lst->listdata[x++];
??Display_ReDraw_8:
        LDR      R0,[R0, #+4]
        LDR      R10,[R0, +R1, LSL #+2]
        ADD      R1,R1,#+1
        STR      R1,[SP, #+12]
//  194       if (now<ev->tm_start)
        LDR      R0,[SP, #+32]
        LDR      R1,[R10, #+4]
        CMP      R0,R1
        BGE      ??Display_ReDraw_7
//  195       {
//  196         wchar_t *txt=0;
//  197         if (ev->txt && (ev->days[day] || cmpdate(ev->date, dt.date)==1) && ev->done!=true)
        LDR      R0,[R10, #+156]
        CMP      R0,#+0
        BEQ      ??Display_ReDraw_7
        LDRB     R0,[SP, #+28]
        ADD      R0,R10,R0, LSL #+2
        LDR      R0,[R0, #+112]
        CMP      R0,#+0
        BNE      ??Display_ReDraw_9
        ADD      R3,SP,#+20
        _BLF     ??ldr32h_a,??rA??ldr32h_a
        MOV      R1,R0
        ADD      R3,R10,#+104
        _BLF     ??ldr32h_a,??rA??ldr32h_a
        BL       ??cmpdate
        CMP      R0,#+1
        BNE      ??Display_ReDraw_7
??Display_ReDraw_9:
        LDRB     R0,[R10, #+0]
        CMP      R0,#+0
        BNE      ??Display_ReDraw_7
//  198         {
//  199           SetFont(text_font);
        LDR      R0,[SP, #+16]
//  200           txt=ev->txt;
//  201           DrawGradientVert(rc2.x1, pos, rc2.x2, pos+rc2.y2, low_color, low_color);
//  202           DrawLine(TextID_Create(txt,ENC_UCS2,TEXTID_ANY_LEN), 0, rc2.x1, pos, rc2.x2, pos+rc2.y2, 40, text_color);
//  203           txt=new wchar_t[50];
//  204           snwprintf(txt,49,L"%02d:%02d:%02d", ev->time.hour, ev->time.min, ev->time.sec);
//  205           SetFont(time_font);
//  206           DrawLine(TextID_Create(txt,ENC_UCS2,TEXTID_ANY_LEN), 1, rc2.x1, pos, rc2.x2, pos+rc2.y2, 40, time_color);
//  207           delete(txt);
//  208           pos+=rc2.y2;
//  209           res++;
        ADD      R7,R7,#+1
        SWI      +497
        LDRH     R0,[R5, #+6]
        LDR      R11,[R10, #+156]
        MOV      R1,R6
        ADD      R0,R0,R6
        STR      R0,[SP, #+0]
        LDRH     R8,[R5, #+2]
        LDRH     R9,[R5, #+0]
        LDR      R0,[SP, #+4]
        MOV      R2,R8
        PUSH     {R0}
        CFI CFA R13+92
        PUSH     {R0}
        CFI CFA R13+96
        LDR      R3,[SP, #+8]
        MOV      R0,R9
        BL       ??DrawGradientVert
        MOV      R2,R4
        MOV      R1,#+0
        MOV      R0,R11
        SWI      +349
        LDR      R1,??Display_ReDraw_1+0x2C  ;; text_color
        MOV      R11,R0
        LDR      R1,[R1, #+0]
        MOV      R3,R6
        MOV      R0,R1
        PUSH     {R0}
        CFI CFA R13+100
        PUSH     {R1}
        CFI CFA R13+104
        MOV      R2,R9
        MOV      R0,#+3
        PUSH     {R0}
        CFI CFA R13+108
        MOV      R1,#+0
        MOV      R0,#+40
        PUSH     {R0}
        CFI CFA R13+112
        LDR      R0,[SP, #+24]
        PUSH     {R0}
        CFI CFA R13+116
        MOV      R0,R8
        PUSH     {R0}
        CFI CFA R13+120
        MOV      R0,R11
        SWI      +493
        MOV      R0,R11
        SWI      +353
        MOV      R0,#+100
        _BLF     `??operator new[]`,`??operator new[]??rA`
        LDR      R2,??Display_ReDraw_1+0x30  ;; `?<Constant L"\\x25\\x30\\x32\\x64\\x3a\\x25\\x30\\x32\\`
        MOV      R11,R0
        LDRB     R0,[R10, #+146]
        MOV      R1,#+49
        PUSH     {R0}
        CFI CFA R13+124
        LDRB     R0,[R10, #+145]
        PUSH     {R0}
        CFI CFA R13+128
        LDRB     R3,[R10, #+144]
        MOV      R0,R11
        SWI      +277
        LDR      R0,??Display_ReDraw_1+0x34  ;; time_font
        ADD      SP,SP,#+40
        CFI CFA R13+88
        LDR      R0,[R0, #+0]
        SWI      +497
        MOV      R2,R4
        MOV      R1,#+0
        MOV      R0,R11
        SWI      +349
        MOV      R10,R0
        LDR      R0,??Display_ReDraw_1+0x38  ;; time_color
        MOV      R3,R6
        LDR      R0,[R0, #+0]
        MOV      R2,R9
        MOV      R1,R0
        PUSH     {R1}
        CFI CFA R13+92
        PUSH     {R0}
        CFI CFA R13+96
        MOV      R0,#+3
        PUSH     {R0}
        CFI CFA R13+100
        MOV      R1,#+1
        MOV      R0,#+40
        PUSH     {R0}
        CFI CFA R13+104
        LDR      R0,[SP, #+16]
        PUSH     {R0}
        CFI CFA R13+108
        PUSH     {R8}
        CFI CFA R13+112
        MOV      R0,R10
        SWI      +493
        MOV      R0,R10
        SWI      +353
        MOV      R0,R11
        _BLF     `??operator delete`,`??operator delete??rA`
        LDR      R6,[SP, #+24]
        ADD      SP,SP,#+24
        CFI CFA R13+88
//  210         }
//  211       }
//  212     }
??Display_ReDraw_7:
        LDR      R0,[SP, #+8]
        LDR      R1,[SP, #+12]
        LDR      R0,[R0, #+40]
        LDRH     R2,[R0, #+2]
        CMP      R1,R2
        BLT      ??Display_ReDraw_8
//  213   }
//  214   if (res==0)
??Display_ReDraw_6:
        CMP      R7,#+0
        BNE      ??Display_ReDraw_10
//  215   {
//  216     SetFont(text_font);
        LDR      R0,[SP, #+16]
        SWI      +497
//  217     DrawGradientVert(rc2.x1, pos, rc2.x2, pos+rc2.y2, low_color, low_color);
        LDRH     R0,[R5, #+6]
        LDRH     R8,[R5, #+2]
        LDRH     R9,[R5, #+0]
        ADD      R7,R0,R6
        LDR      R0,[SP, #+4]
        MOV      R3,R7
        PUSH     {R0}
        CFI CFA R13+92
        PUSH     {R0}
        CFI CFA R13+96
        MOV      R2,R8
        MOV      R1,R6
        MOV      R0,R9
        BL       ??DrawGradientVert
//  218     DrawLine(TextID_Create(str_noevents,ENC_UCS2,TEXTID_ANY_LEN), 2, rc2.x1, pos, rc2.x2, pos+rc2.y2, 40, clWhite);
        LDR      R0,??Display_ReDraw_1+0x3C  ;; str_noevents
        MOV      R2,R4
        MOV      R1,#+0
        SWI      +349
        MOV      R4,R0
        MVN      R0,#+0
        PUSH     {R0}
        CFI CFA R13+100
        PUSH     {R0}
        CFI CFA R13+104
        MOV      R3,R6
        MOV      R2,R9
        MOV      R1,#+2
        MOV      R0,#+3
        PUSH     {R0}
        CFI CFA R13+108
        MOV      R0,#+40
        PUSH     {R0}
        CFI CFA R13+112
        PUSH     {R7}
        CFI CFA R13+116
        PUSH     {R8}
        CFI CFA R13+120
        MOV      R0,R4
        SWI      +493
        MOV      R0,R4
        SWI      +353
        ADD      SP,SP,#+32
        CFI CFA R13+88
??Display_ReDraw_10:
        LDR      R0,??Display_ReDraw_1+0x40  ;; timer + 4
        LDR      R4,[R0, #+0]
        CMP      R4,#+0
        BEQ      ??Display_ReDraw_11
//  219   }
//  220    if(Display_oldReDraw) Display_oldReDraw(db,r1,r2,r3);
        LDR      R3,[SP, #+48]
        LDR      R2,[SP, #+44]
        LDR      R1,[SP, #+40]
        LDR      R0,[SP, #+36]
        BLX      R4
??Display_ReDraw_11:
        ADD      SP,SP,#+52       ;; stack cleaning
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        DATA
??Display_ReDraw_1:
        DC32     ev_font
        DC32     low_color
        DC32     rc
        DC32     upp_color
        DC32     str_events
        DC32     ev_color
        DC32     rc2
        DC32     ??isEvtBook
        DC32     str_off
        DC32     text_font
        DC32     miss_color
        DC32     text_color
        DC32     `?<Constant L"\\x25\\x30\\x32\\x64\\x3a\\x25\\x30\\x32\\`
        DC32     time_font
        DC32     time_color
        DC32     str_noevents
        DC32     timer + 4
        CFI EndBlock cfiBlock15
//  221 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??InitVar??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??InitVar
//  222 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??InitVar
        ARM
//  223 void InitVar()
//  224 {
??InitVar:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  225   Height=Display_GetHeight(0);
        LDR      R4,??InitVar_1   ;; timer
        MOV      R0,#+0
        SWI      +600
        STR      R0,[R4, #+16]
//  226   Width=Display_GetWidth(0);
        MOV      R0,#+0
        SWI      +601
        STR      R0,[R4, #+20]
//  227   
//  228   if(!GUI_display)
        LDR      R0,[R4, #+8]
        CMP      R0,#+0
        POPNE    {R4,PC}
//  229     {
//  230       GUI_display = GUIObject_GetDispObject( SBY_GetStatusIndication(Find_StandbyBook()) );
        SWI      +305
        SWI      +536
        SWI      +360
        STR      R0,[R4, #+8]
//  231       Display_oldReDraw = DispObject_GetOnRedraw(GUI_display);
        SWI      +553
        STR      R0,[R4, #+4]
//  232       Display_desc = DispObject_GetDESC (GUI_display);
        LDR      R0,[R4, #+8]
        SWI      +543
//  233       DISP_DESC_SetOnRedraw(Display_desc, Display_ReDraw);
        LDR      R1,??InitVar_1+0x4  ;; ??Display_ReDraw
        STR      R0,[R4, #+12]
        SWI      +552
//  234     }
//  235 }
        POP      {R4,PC}          ;; return
        DATA
??InitVar_1:
        DC32     timer
        DC32     ??Display_ReDraw
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE main
//  236 
//  237 #include "conf_loader.h"

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function main
        ARM
//  238 int main (void)
//  239 {
main:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  240   InitVar();
        BL       ??InitVar
//  241   InitConfig();
        _BLF     ??InitConfig,??InitConfig??rA
//  242   
//  243   CreateEvtDeskBook();
        _BLF     ??CreateEvtDeskBook,??CreateEvtDeskBook??rA
//  244   
//  245   timer=Timer_Set(1000,onTimer,0);
        LDR      R1,??DataTable2  ;; ??onTimer
        MOV      R2,#+0
        MOV      R0,#+1000
        SWI      +297
        LDR      R1,??DataTable3  ;; timer
        STRH     R0,[R1, #+0]
//  246   return(0);
        MOV      R0,#+0
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock19
//  247 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     ??onTimer

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     timer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine10_0  ;; kill_data
        BX       R12
        DATA
??Subroutine10_0:
        DC32     kill_data
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI NoFunction
        ARM
??rA??div32_a:
        LDR      R12,??Subroutine11_0  ;; ??div32_a
        MOV      PC,R12
        DATA
??Subroutine11_0:
        DC32     ??div32_a
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
??rA??ldr32h_a:
        LDR      R12,??Subroutine12_0  ;; ??ldr32h_a
        MOV      PC,R12
        DATA
??Subroutine12_0:
        DC32     ??ldr32h_a
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine13_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine13_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine14_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine14_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock24

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI NoFunction
        ARM
??InitConfig??rA:
        LDR      R12,??Subroutine15_0  ;; ??InitConfig
        BX       R12
        DATA
??Subroutine15_0:
        DC32     ??InitConfig
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon1
        CFI NoFunction
        ARM
??CreateEvtDeskBook??rA:
        LDR      R12,??Subroutine16_0  ;; ??CreateEvtDeskBook
        BX       R12
        DATA
??Subroutine16_0:
        DC32     ??CreateEvtDeskBook
        CFI EndBlock cfiBlock26

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for _x>`:
        DATA
        DC32 100

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for _y>`:
        DATA
        DC32 100

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for _dx>`:
        DATA
        DC32 2

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for _dy>`:
        DATA
        DC32 3

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "EventControl">`:
        DATA
        DC8 "EventControl"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x25\\x30\\x32\\x64\\x3a\\x25\\x30\\x32\\`:
        DATA
        DC8 25H, 0, 30H, 0, 32H, 0, 64H, 0
        DC8 3AH, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 64H, 0, 3AH, 0, 25H, 0, 30H, 0
        DC8 32H, 0, 64H, 0, 0, 0
        DC8 0, 0

        END
//  248 
//  249 
// 
// 2 552 bytes in segment CODE
//    48 bytes in segment DATA_C
//    16 bytes in segment DATA_I
//    16 bytes in segment DATA_ID
//    24 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 2 428 bytes of CODE  memory (+ 148 bytes shared)
//    64 bytes of CONST memory
//    40 bytes of DATA  memory
//
//Errors: none
//Warnings: none
