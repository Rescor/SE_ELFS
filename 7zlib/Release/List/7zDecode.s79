//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:44:35 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\7zlib\7zDecod /
//                       e.c                                                 /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\7zlib\7zDecod /
//                       e.c -D NDEBUG -D OLDFUNCTIONS -lcN                  /
//                       Z:\home\perk11\www\perk11.info\svn\SE\7zlib\Release /
//                       \List\ -la Z:\home\perk11\www\perk11.info\svn\SE\7z /
//                       lib\Release\List\ -o Z:\home\perk11\www\perk11.info /
//                       \svn\SE\7zlib\Release\Obj\ -s9 --no_unroll          /
//                       --no_code_motion --cpu_mode thumb --endian little   /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --library_module -I                      /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\7zlib\Release /
//                       \List\7zDecode.s79                                  /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        MODULE `7zDecode`

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??AreMethodsEqual??rT
        MULTWEAK ??LzmaDecode??rT
        MULTWEAK ??LzmaDecodeProperties??rT
        MULTWEAK ??SzDecode??rA
        PUBWEAK ?init?tab?DATA_I
        PUBLIC SzDecode
        FUNCTION SzDecode,0203H
        LOCFRAME CSTACK, 68, STACK
        PUBLIC k_Copy
        PUBLIC k_LZMA
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
AreMethodsEqual     SYMBOL "AreMethodsEqual"
LzmaDecode          SYMBOL "LzmaDecode"
LzmaDecodeProperties SYMBOL "LzmaDecodeProperties"
??AreMethodsEqual??rT SYMBOL "??rT", AreMethodsEqual
??LzmaDecode??rT    SYMBOL "??rT", LzmaDecode
??LzmaDecodeProperties??rT SYMBOL "??rT", LzmaDecodeProperties
SzDecode            SYMBOL "SzDecode"
??SzDecode??rA      SYMBOL "??rA", SzDecode

        EXTERN AreMethodsEqual
        FUNCTION AreMethodsEqual,0202H
        EXTERN LzmaDecode
        FUNCTION LzmaDecode,0202H
        EXTERN LzmaDecodeProperties
        FUNCTION LzmaDecodeProperties,0202H


        RSEG DATA_I:DATA:SORT:NOROOT(2)
k_Copy:
        DS8 16
        REQUIRE `?<Initializer for k_Copy>`
k_LZMA:
        DS8 16
        REQUIRE `?<Initializer for k_LZMA>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        ARM
??SzDecode??rA:
        ADD      R12,PC,#+1
        BX       R12
        CFI EndBlock cfiBlock0
        REQUIRE SzDecode

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function SzDecode
        THUMB
SzDecode:
        PUSH     {R0,R2-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+32
        SUB      SP,SP,#+24
        CFI CFA R13+56
        LDR      R0,[R1, #+16]
        LDR      R4,[SP, #+56]
        LDR      R5,[SP, #+60]
        MOVS     R7,#+0
        CMP      R0,#+1
        BEQ      ??SzDecode_0
??SzDecode_1:
        MOVS     R0,#+4
        B        ??SzDecode_2
??SzDecode_0:
        LDR      R0,[R1, #+0]
        CMP      R0,#+1
        BNE      ??SzDecode_1
        LDR      R6,[R1, #+4]
        MOVS     R0,#+0
        STR      R0,[R5, #+0]
        LDR      R2,[R1, #+16]
        CMP      R2,#+0
        BNE      ??SzDecode_3
        B        ??SzDecode_4
??SzDecode_5:
        LDR      R3,[SP, #+24]
        LSLS     R2,R0,#+2
        LDR      R2,[R3, R2]
        ADDS     R0,R0,#+1
        ADDS     R7,R7,R2
??SzDecode_3:
        LDR      R2,[R1, #+16]
        CMP      R0,R2
        BCC      ??SzDecode_5
??SzDecode_4:
        LDR      R1,??SzDecode_6  ;; k_Copy
        MOVS     R0,R6
        ADDS     R0,R0,#+8
        _BLF     AreMethodsEqual,??AreMethodsEqual??rT
        CMP      R0,#+0
        BEQ      ??SzDecode_7
        CMP      R7,R4
        BEQ      ??SzDecode_8
??SzDecode_9:
        MOVS     R0,#+1
        B        ??SzDecode_2
??SzDecode_8:
        MOVS     R0,#+0
        CMP      R7,#+0
        BNE      ??SzDecode_10
        B        ??SzDecode_11
??SzDecode_12:
        LDR      R2,[SP, #+28]
        LDR      R1,[SP, #+32]
        LDRB     R2,[R2, R0]
        STRB     R2,[R1, R0]
        ADDS     R0,R0,#+1
??SzDecode_10:
        CMP      R0,R7
        BCC      ??SzDecode_12
??SzDecode_11:
        STR      R7,[R5, #+0]
        B.N      ??SzDecode_13
??SzDecode_7:
        LDR      R1,??SzDecode_6+0x4  ;; k_Copy + 16
        MOVS     R0,R6
        ADDS     R0,R0,#+8
        _BLF     AreMethodsEqual,??AreMethodsEqual??rT
        CMP      R0,#+0
        BEQ      ??SzDecode_1
        LDR      R2,[R6, #+24]
        LDR      R1,[R6, #+28]
        ADD      R0,SP,#+4
        _BLF     LzmaDecodeProperties,??LzmaDecodeProperties??rT
        CMP      R0,#+0
        BEQ      ??SzDecode_14
??SzDecode_15:
        MOVS     R0,#+5
        B        ??SzDecode_2
??SzDecode_14:
        LDR      R1,[SP, #+4]
        LDR      R2,[SP, #+8]
        MOVS     R0,#+192
        LSLS     R0,R0,#+2
        ADDS     R1,R1,R2
        LSLS     R0,R0,R1
        LDR      R1,??SzDecode_6+0x8  ;; 0x736
        ADDS     R0,R0,R1
        LDR      R1,[SP, #+64]
        LSLS     R0,R0,#+1
        LDR      R1,[R1, #+0]
        BLX      R1
        STR      R0,[SP, #+16]
        CMP      R0,#+0
        BNE      ??SzDecode_16
        MOVS     R0,#+2
        B        ??SzDecode_2
??SzDecode_16:
        LDR      R0,[SP, #+32]
        MOV      R2,SP
        MOVS     R1,R4
        PUSH     {R0-R2}
        CFI CFA R13+68
        LDR      R1,[SP, #+40]
        ADD      R3,SP,#+32
        ADD      R0,SP,#+16
        MOVS     R2,R7
        _BLF     LzmaDecode,??LzmaDecode??rT
        MOVS     R4,R0
        LDR      R0,[SP, #+12]
        STR      R0,[R5, #+0]
        LDR      R1,[SP, #+76]
        LDR      R0,[SP, #+28]
        LDR      R1,[R1, #+4]
        BLX      R1
        ADD      SP,SP,#+12
        CFI CFA R13+56
        CMP      R4,#+1
        BEQ      ??SzDecode_9
        CMP      R4,#+0
        BNE      ??SzDecode_15
??SzDecode_13:
        MOVS     R0,#+0
??SzDecode_2:
        ADD      SP,SP,#+36
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??SzDecode_6:
        DC32     k_Copy
        DC32     k_Copy + 16
        DC32     0x736
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon1
        CFI NoFunction
        THUMB
??AreMethodsEqual??rT:
        LDR      R3,??Subroutine1_0  ;; AreMethodsEqual
        BX       R3
        DATA
??Subroutine1_0:
        DC32     AreMethodsEqual
        CFI EndBlock cfiBlock2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI NoFunction
        THUMB
??LzmaDecodeProperties??rT:
        LDR      R3,??Subroutine2_0  ;; LzmaDecodeProperties
        BX       R3
        DATA
??Subroutine2_0:
        DC32     LzmaDecodeProperties
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon1
        CFI NoFunction
        THUMB
??LzmaDecode??rT:
        PUSH     {R3}
        CFI CFA R13+4
        LDR      R3,??Subroutine3_0  ;; LzmaDecode
        MOV      R12,R3
        POP      {R3}
        CFI CFA R13+0
        BX       R12
        Nop      
        DATA
??Subroutine3_0:
        DC32     LzmaDecode
        CFI EndBlock cfiBlock4

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for k_Copy>`:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
`?<Initializer for k_LZMA>`:
        DC8 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 272 bytes in segment CODE
//  32 bytes in segment DATA_I
//  32 bytes in segment DATA_ID
//  12 bytes in segment INITTAB
// 
// 232 bytes of CODE  memory (+ 52 bytes shared)
//  32 bytes of CONST memory
//  32 bytes of DATA  memory
//
//Errors: none
//Warnings: none
