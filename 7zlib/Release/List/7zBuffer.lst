##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  22:44:28 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\7zlib\7zBuffer #
#                       .c                                                   #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\7zlib\7zBuffer #
#                       .c -D NDEBUG -D OLDFUNCTIONS -lcN                    #
#                       Z:\home\perk11\www\perk11.info\svn\SE\7zlib\Release\ #
#                       List\ -la Z:\home\perk11\www\perk11.info\svn\SE\7zli #
#                       b\Release\List\ -o Z:\home\perk11\www\perk11.info\sv #
#                       n\SE\7zlib\Release\Obj\ -s9 --no_unroll              #
#                       --no_code_motion --cpu_mode thumb --endian little    #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --library_module -I                       #
#                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2    #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\7zlib\Release\ #
#                       List\7zBuffer.lst                                    #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\7zlib\Release\ #
#                       Obj\7zBuffer.r79                                     #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\7zlib\7zBuffer.c
      1          /* 7zBuffer.c */
      2          
      3          #include "7zBuffer.h"
      4          #include "7zAlloc.h"
      5          
      6          void SzByteBufferInit(CSzByteBuffer *buffer)
      7          {
      8            buffer->Capacity = 0;
      9            buffer->Items = 0;
     10          }
     11          
     12          int SzByteBufferCreate(CSzByteBuffer *buffer, size_t newCapacity, void * (*allocFunc)(size_t size))
     13          {
     14            buffer->Capacity = newCapacity;
     15            if (newCapacity == 0)
     16            {
     17              buffer->Items = 0;
     18              return 1;
     19            }
     20            buffer->Items = (Byte *)allocFunc(newCapacity);
     21            return (buffer->Items != 0);
     22          }
     23          
     24          void SzByteBufferFree(CSzByteBuffer *buffer, void (*freeFunc)(void *))
     25          {
     26            freeFunc(buffer->Items);
     27            buffer->Items = 0;
     28            buffer->Capacity = 0;
     29          }

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     SzByteBufferCreate     8
     SzByteBufferFree       8
     SzByteBufferInit       0


   Segment part sizes:

     Function/Label     Bytes
     --------------     -----
     SzByteBufferInit      8
     SzByteBufferCreate   36
     SzByteBufferFree     16
      Others              24

 
 84 bytes in segment CODE
 
 60 bytes of CODE memory (+ 24 bytes shared)

Errors: none
Warnings: none
