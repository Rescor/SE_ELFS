//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:44:28 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\7zlib\7zBuffe /
//                       r.c                                                 /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\7zlib\7zBuffe /
//                       r.c -D NDEBUG -D OLDFUNCTIONS -lcN                  /
//                       Z:\home\perk11\www\perk11.info\svn\SE\7zlib\Release /
//                       \List\ -la Z:\home\perk11\www\perk11.info\svn\SE\7z /
//                       lib\Release\List\ -o Z:\home\perk11\www\perk11.info /
//                       \svn\SE\7zlib\Release\Obj\ -s9 --no_unroll          /
//                       --no_code_motion --cpu_mode thumb --endian little   /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --library_module -I                      /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\7zlib\Release /
//                       \List\7zBuffer.s79                                  /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        MODULE `7zBuffer`

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??SzByteBufferCreate??rA
        MULTWEAK ??SzByteBufferFree??rA
        MULTWEAK ??SzByteBufferInit??rA
        PUBLIC SzByteBufferCreate
        FUNCTION SzByteBufferCreate,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC SzByteBufferFree
        FUNCTION SzByteBufferFree,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC SzByteBufferInit
        FUNCTION SzByteBufferInit,0203H
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
SzByteBufferCreate  SYMBOL "SzByteBufferCreate"
??SzByteBufferCreate??rA SYMBOL "??rA", SzByteBufferCreate
SzByteBufferFree    SYMBOL "SzByteBufferFree"
??SzByteBufferFree??rA SYMBOL "??rA", SzByteBufferFree
SzByteBufferInit    SYMBOL "SzByteBufferInit"
??SzByteBufferInit??rA SYMBOL "??rA", SzByteBufferInit


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        ARM
??SzByteBufferInit??rA:
        ADD      R12,PC,#+1
        BX       R12
        CFI EndBlock cfiBlock0
        REQUIRE SzByteBufferInit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function SzByteBufferInit
        THUMB
SzByteBufferInit:
        MOVS     R1,#+0
        STR      R1,[R0, #+0]
        STR      R1,[R0, #+4]
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        ARM
??SzByteBufferCreate??rA:
        ADD      R12,PC,#+1
        BX       R12
        CFI EndBlock cfiBlock2
        REQUIRE SzByteBufferCreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function SzByteBufferCreate
        THUMB
SzByteBufferCreate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
        STR      R1,[R4, #+0]
        CMP      R1,#+0
        BNE      ??SzByteBufferCreate_0
        MOVS     R0,#+0
        STR      R0,[R4, #+4]
        MOVS     R0,#+1
        POP      {R4,PC}
??SzByteBufferCreate_0:
        MOVS     R0,R1
        BLX      R2
        STR      R0,[R4, #+4]
        CMP      R0,#+0
        BEQ      ??SzByteBufferCreate_1
        MOVS     R0,#+1
        POP      {R4,PC}
??SzByteBufferCreate_1:
        MOVS     R0,#+0
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        ARM
??SzByteBufferFree??rA:
        ADD      R12,PC,#+1
        BX       R12
        CFI EndBlock cfiBlock4
        REQUIRE SzByteBufferFree

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function SzByteBufferFree
        THUMB
SzByteBufferFree:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
        LDR      R0,[R4, #+4]
        BLX      R1
        MOVS     R0,#+0
        STR      R0,[R4, #+4]
        STR      R0,[R4, #+0]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock5

        END
// 
// 84 bytes in segment CODE
// 
// 60 bytes of CODE memory (+ 24 bytes shared)
//
//Errors: none
//Warnings: none
