##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Jun/2013  23:06:49 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\MiniGPS\utils. #
#                       c                                                    #
#    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\MiniGPS\utils. #
#                       c -D NDEBUG -D LANG_CN -D OLDFUNCTIONS -lCN          #
#                       Z:\home\perk11\www\perk11.info\svn\SE\MiniGPS\Releas #
#                       e_CN\List\ -la Z:\home\perk11\www\perk11.info\svn\SE #
#                       \MiniGPS\Release_CN\List\ -o                         #
#                       Z:\home\perk11\www\perk11.info\svn\SE\MiniGPS\Releas #
#                       e_CN\Obj\ -s9 --no_unroll --no_code_motion           #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --enable_multibytes   #
#                       --fpu None --eec++ --dlib_config                     #
#                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I         #
#                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2    #
#    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\MiniGPS\Releas #
#                       e_CN\List\utils.lst                                  #
#    Object file     =  Z:\home\perk11\www\perk11.info\svn\SE\MiniGPS\Releas #
#                       e_CN\Obj\utils.r79                                   #
#                                                                            #
#                                                                            #
##############################################################################

Z:\home\perk11\www\perk11.info\svn\SE\MiniGPS\utils.c
      1          #include "util.h"
      2          #include "..\include\Lib_Clara.h"
      3          #include "..\include\Dir.h"
      4          
      5          struct
      6          {
      7                  wchar_t* name;
      8                  int value;

   \                                 In segment DATA_I, align 4, align-sorted
      9          }cfgmacro []=
   \                     cfgmacro:
   \   00000000                      DS8 72
   \   00000048                      REQUIRE `?<Initializer for cfgmacro>`
     10          {
     11                  L"AUDIO",        DIR_AUDIO,
     12                  L"IMAGE",        DIR_IMAGE,
     13                  L"VIDEO",        DIR_VIDEO,
     14                  L"THEME",        DIR_THEME,
     15                  L"OTHER",        DIR_OTHER,
     16                  L"ELFS",         DIR_ELFS,
     17                  L"ELFS_DAEMONS", DIR_ELFS_DAEMONS,
     18                  L"ELFS_CONFIG",  DIR_ELFS_CONFIG,
     19                  L"INI",          DIR_INI
     20          };
     21          

   \                                 In segment CODE, align 4, keep-with-next
     22          void splitfilename(const wchar_t* src, wchar_t* destpath, wchar_t* destname)
     23          {
   \                     ??splitfilename:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0240A0E1           MOV      R4,R2
     24                  wchar_t* fname=wstrrchr(src,'/');
   \   00000010   2F10A0E3           MOV      R1,#+47
   \   00000014   AE0100EF           SWI      +430
   \   00000018   0070B0E1           MOVS     R7,R0
     25                  if(fname)
   \   0000001C   0C00000A           BEQ      ??splitfilename_1
     26                  {
     27                    wstrncpy(destpath,src,fname-src);
   \   00000020   A700A0E1           LSR      R0,R7,#+1
   \   00000024   A58040E0           SUB      R8,R0,R5, LSR #+1
   \   00000028   0820A0E1           MOV      R2,R8
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   530100EF           SWI      +339
     28                    destpath[fname-src] = 0;
   \   00000038   880086E0           ADD      R0,R6,R8, LSL #+1
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   B010C0E1           STRH     R1,[R0, #+0]
     29                    wstrcpy(destname,fname+1);
   \   00000044   021087E2           ADD      R1,R7,#+2
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   520100EF           SWI      +338
   \   00000050   F081BDE8           POP      {R4-R8,PC}
     30                  }
     31                  else
     32                  {
     33                    destpath[0] = 0;
   \                     ??splitfilename_1:
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   B000C6E1           STRH     R0,[R6, #+0]
     34                    wstrcpy(destname,src);
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   520100EF           SWI      +338
     35                  }
     36          }
   \   00000068   F081BDE8           POP      {R4-R8,PC}       ;; return
     37          

   \                                 In segment CODE, align 4, keep-with-next
     38          void extractdir(wchar_t* path,wchar_t* name, const wchar_t* src)
     39          {
   \                     ??extractdir:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   90DF4DE2           SUB      SP,SP,#+576
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
     40                  int dir=-1;
     41                  wchar_t dest[256];
     42          
     43                  for(int i=0;i<sizeof(cfgmacro)/sizeof(cfgmacro[0]);i++)
   \   00000014   0070A0E3           MOV      R7,#+0
   \   00000018   000000EA           B        ??extractdir_1
   \                     ??extractdir_2:
   \   0000001C   017087E2           ADD      R7,R7,#+1
   \                     ??extractdir_1:
   \   00000020   090057E3           CMP      R7,#+9
   \   00000024   2C00002A           BCS      ??extractdir_3
     44                  {
     45                          wchar_t tmp[32];
     46                          int sz;
     47                          snwprintf(tmp,MAXELEMS(tmp),L"%%%ls_INT%%",cfgmacro[i].name);
   \   00000028   ........           LDR      R0,??DataTable9  ;; cfgmacro
   \   0000002C   ........           LDR      R2,??DataTable6  ;; `?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\`
   \   00000030   873190E7           LDR      R3,[R0, +R7, LSL #+3]
   \   00000034   2010A0E3           MOV      R1,#+32
   \   00000038   800F8DE2           ADD      R0,SP,#+512
   \   0000003C   150100EF           SWI      +277
     48                          sz=wstrlen(tmp);
   \   00000040   800F8DE2           ADD      R0,SP,#+512
   \   00000044   570100EF           SWI      +343
   \   00000048   0080A0E1           MOV      R8,R0
     49                          if(!wstrncmp(src,tmp,sz))
   \   0000004C   0820A0E1           MOV      R2,R8
   \   00000050   801F8DE2           ADD      R1,SP,#+512
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   FB0100EF           SWI      +507
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   ........           LDR      R0,??DataTable9  ;; cfgmacro
   \   00000064   0300001A           BNE      ??extractdir_4
     50                          {
     51                                  dir=cfgmacro[i].value|MEM_INTERNAL;
   \   00000068   870180E0           ADD      R0,R0,R7, LSL #+3
   \   0000006C   040090E5           LDR      R0,[R0, #+4]
   \   00000070   010080E3           ORR      R0,R0,#0x1
     52                                  src+=sz;
   \   00000074   100000EA           B        ??extractdir_5
     53                                  break;
     54                          }
     55                          snwprintf(tmp,MAXELEMS(tmp),L"%%%ls_EXT%%",cfgmacro[i].name);
   \                     ??extractdir_4:
   \   00000078   873190E7           LDR      R3,[R0, +R7, LSL #+3]
   \   0000007C   ........           LDR      R2,??DataTable8  ;; `?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\` + 24
   \   00000080   2010A0E3           MOV      R1,#+32
   \   00000084   800F8DE2           ADD      R0,SP,#+512
   \   00000088   150100EF           SWI      +277
     56                          sz=wstrlen(tmp);
   \   0000008C   800F8DE2           ADD      R0,SP,#+512
   \   00000090   570100EF           SWI      +343
   \   00000094   0080A0E1           MOV      R8,R0
     57                          if(!wstrncmp(src,tmp,sz))
   \   00000098   0820A0E1           MOV      R2,R8
   \   0000009C   801F8DE2           ADD      R1,SP,#+512
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   FB0100EF           SWI      +507
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   DAFFFF1A           BNE      ??extractdir_2
     58                          {
     59                                  dir=cfgmacro[i].value|MEM_EXTERNAL;
   \   000000B0   ........           LDR      R0,??DataTable9  ;; cfgmacro
   \   000000B4   870180E0           ADD      R0,R0,R7, LSL #+3
   \   000000B8   040090E5           LDR      R0,[R0, #+4]
     60                                  src+=sz;
   \                     ??extractdir_5:
   \   000000BC   886086E0           ADD      R6,R6,R8, LSL #+1
     61                                  break;
     62                          }
     63                  }
     64                  if(dir!=-1)
   \   000000C0   010070E3           CMN      R0,#+1
   \   000000C4   0400000A           BEQ      ??extractdir_3
     65                          wstrcpy(dest,GetDir(dir));
   \   000000C8   050100EF           SWI      +261
   \   000000CC   0010A0E1           MOV      R1,R0
   \   000000D0   0D00A0E1           MOV      R0,SP
   \   000000D4   520100EF           SWI      +338
   \   000000D8   010000EA           B        ??extractdir_6
     66                  else
     67                          dest[0]=0;
   \                     ??extractdir_3:
   \   000000DC   0010A0E3           MOV      R1,#+0
   \   000000E0   B010CDE1           STRH     R1,[SP, #+0]
     68                  wstrcat(dest,src);
   \                     ??extractdir_6:
   \   000000E4   0610A0E1           MOV      R1,R6
   \   000000E8   0D00A0E1           MOV      R0,SP
   \   000000EC   540100EF           SWI      +340
     69                  splitfilename(dest,path,name);
   \   000000F0   0520A0E1           MOV      R2,R5
   \   000000F4   0410A0E1           MOV      R1,R4
   \   000000F8   0D00A0E1           MOV      R0,SP
   \   000000FC   ........           BL       ??splitfilename
     70          }
   \   00000100   90DF8DE2           ADD      SP,SP,#+576
   \   00000104   F081BDE8           POP      {R4-R8,PC}       ;; return
     71          

   \                                 In segment CODE, align 4, keep-with-next
     72          void getdir(wchar_t* path, const wchar_t* src)
     73          {
   \                     ??getdir:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
     74                  int dir=-1;
     75          
     76                  for(int i=0;i<sizeof(cfgmacro)/sizeof(cfgmacro[0]);i++)
   \   00000010   0070A0E3           MOV      R7,#+0
   \   00000014   000000EA           B        ??getdir_1
   \                     ??getdir_2:
   \   00000018   017087E2           ADD      R7,R7,#+1
   \                     ??getdir_1:
   \   0000001C   090057E3           CMP      R7,#+9
   \   00000020   2C00002A           BCS      ??getdir_3
     77                  {
     78                          wchar_t tmp[32];
     79                          int sz;
     80                          snwprintf(tmp,MAXELEMS(tmp),L"%%%ls_INT%%",cfgmacro[i].name);
   \   00000024   ........           LDR      R0,??DataTable9  ;; cfgmacro
   \   00000028   ........           LDR      R2,??DataTable6  ;; `?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\`
   \   0000002C   873190E7           LDR      R3,[R0, +R7, LSL #+3]
   \   00000030   2010A0E3           MOV      R1,#+32
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   150100EF           SWI      +277
     81                          sz=wstrlen(tmp);
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   570100EF           SWI      +343
   \   00000044   0060A0E1           MOV      R6,R0
     82                          if(!wstrncmp(src,tmp,sz))
   \   00000048   0620A0E1           MOV      R2,R6
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   FB0100EF           SWI      +507
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   ........           LDR      R0,??DataTable9  ;; cfgmacro
   \   00000060   0300001A           BNE      ??getdir_4
     83                          {
     84                                  dir=cfgmacro[i].value|MEM_INTERNAL;
   \   00000064   870180E0           ADD      R0,R0,R7, LSL #+3
   \   00000068   040090E5           LDR      R0,[R0, #+4]
   \   0000006C   010080E3           ORR      R0,R0,#0x1
     85                                  src+=sz;
   \   00000070   100000EA           B        ??getdir_5
     86                                  break;
     87                          }
     88                          snwprintf(tmp,MAXELEMS(tmp),L"%%%ls_EXT%%",cfgmacro[i].name);
   \                     ??getdir_4:
   \   00000074   873190E7           LDR      R3,[R0, +R7, LSL #+3]
   \   00000078   ........           LDR      R2,??DataTable8  ;; `?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\` + 24
   \   0000007C   2010A0E3           MOV      R1,#+32
   \   00000080   0D00A0E1           MOV      R0,SP
   \   00000084   150100EF           SWI      +277
     89                          sz=wstrlen(tmp);
   \   00000088   0D00A0E1           MOV      R0,SP
   \   0000008C   570100EF           SWI      +343
   \   00000090   0060A0E1           MOV      R6,R0
     90                          if(!wstrncmp(src,tmp,sz))
   \   00000094   0620A0E1           MOV      R2,R6
   \   00000098   0D10A0E1           MOV      R1,SP
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   FB0100EF           SWI      +507
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   DAFFFF1A           BNE      ??getdir_2
     91                          {
     92                                  dir=cfgmacro[i].value|MEM_EXTERNAL;
   \   000000AC   ........           LDR      R0,??DataTable9  ;; cfgmacro
   \   000000B0   870180E0           ADD      R0,R0,R7, LSL #+3
   \   000000B4   040090E5           LDR      R0,[R0, #+4]
     93                                  src+=sz;
   \                     ??getdir_5:
   \   000000B8   865085E0           ADD      R5,R5,R6, LSL #+1
     94                                  break;
     95                          }
     96                  }
     97                  if(dir!=-1)
   \   000000BC   010070E3           CMN      R0,#+1
   \   000000C0   0400000A           BEQ      ??getdir_3
     98                          wstrcpy(path,GetDir(dir));
   \   000000C4   050100EF           SWI      +261
   \   000000C8   0010A0E1           MOV      R1,R0
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   520100EF           SWI      +338
   \   000000D4   010000EA           B        ??getdir_6
     99                  else
    100                          path[0]=0;
   \                     ??getdir_3:
   \   000000D8   0000A0E3           MOV      R0,#+0
   \   000000DC   B000C4E1           STRH     R0,[R4, #+0]
    101                  wstrcat(path,src);
   \                     ??getdir_6:
   \   000000E0   0510A0E1           MOV      R1,R5
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   540100EF           SWI      +340
    102          }
   \   000000EC   40D08DE2           ADD      SP,SP,#+64
   \   000000F0   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     `?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     `?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\` + 24

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     cfgmacro

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for cfgmacro>`:
   \   00000000   ........0000       DC32 `?<Constant L"\\x41\\x55\\x44\\x49\\x4f">`, 0
   \              0000        
   \   00000008   ........0200       DC32 `?<Constant L"\\x49\\x4d\\x41\\x47\\x45">`, 2
   \              0000        
   \   00000010   ........0400       DC32 `?<Constant L"\\x56\\x49\\x44\\x45\\x4f">`, 4
   \              0000        
   \   00000018   ........0600       DC32 `?<Constant L"\\x54\\x48\\x45\\x4d\\x45">`, 6
   \              0000        
   \   00000020   ........0800       DC32 `?<Constant L"\\x4f\\x54\\x48\\x45\\x52">`, 8
   \              0000        
   \   00000028   ........1000       DC32 `?<Constant L"\\x45\\x4c\\x46\\x53">`, 16
   \              0000        
   \   00000030   ........1200       DC32 `?<Constant L"\\x45\\x4c\\x46\\x53\\x5f\\x44\\x41\\x45\\`, 18
   \              0000        
   \   00000038   ........1400       DC32 `?<Constant L"\\x45\\x4c\\x46\\x53\\x5f\\x43\\x4f\\x4e\\`, 20
   \              0000        
   \   00000040   ........1600       DC32 `?<Constant L"\\x49\\x4e\\x49">`, 22
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x41\\x55\\x44\\x49\\x4f">`:
   \   00000000   410055004400       DC8 41H, 0, 55H, 0, 44H, 0, 49H, 0
   \              4900        
   \   00000008   4F000000           DC8 4FH, 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x49\\x4d\\x41\\x47\\x45">`:
   \   00000000   49004D004100       DC8 49H, 0, 4DH, 0, 41H, 0, 47H, 0
   \              4700        
   \   00000008   45000000           DC8 45H, 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x56\\x49\\x44\\x45\\x4f">`:
   \   00000000   560049004400       DC8 56H, 0, 49H, 0, 44H, 0, 45H, 0
   \              4500        
   \   00000008   4F000000           DC8 4FH, 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x54\\x48\\x45\\x4d\\x45">`:
   \   00000000   540048004500       DC8 54H, 0, 48H, 0, 45H, 0, 4DH, 0
   \              4D00        
   \   00000008   45000000           DC8 45H, 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x4f\\x54\\x48\\x45\\x52">`:
   \   00000000   4F0054004800       DC8 4FH, 0, 54H, 0, 48H, 0, 45H, 0
   \              4500        
   \   00000008   52000000           DC8 52H, 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x45\\x4c\\x46\\x53">`:
   \   00000000   45004C004600       DC8 45H, 0, 4CH, 0, 46H, 0, 53H, 0
   \              5300        
   \   00000008   0000               DC8 0, 0
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x45\\x4c\\x46\\x53\\x5f\\x44\\x41\\x45\\`:
   \   00000000   45004C004600       DC8 45H, 0, 4CH, 0, 46H, 0, 53H, 0
   \              5300        
   \   00000008   5F0044004100       DC8 5FH, 0, 44H, 0, 41H, 0, 45H, 0
   \              4500        
   \   00000010   4D004F004E00       DC8 4DH, 0, 4FH, 0, 4EH, 0, 53H, 0
   \              5300        
   \   00000018   0000               DC8 0, 0
   \   0000001A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x45\\x4c\\x46\\x53\\x5f\\x43\\x4f\\x4e\\`:
   \   00000000   45004C004600       DC8 45H, 0, 4CH, 0, 46H, 0, 53H, 0
   \              5300        
   \   00000008   5F0043004F00       DC8 5FH, 0, 43H, 0, 4FH, 0, 4EH, 0
   \              4E00        
   \   00000010   460049004700       DC8 46H, 0, 49H, 0, 47H, 0, 0, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x49\\x4e\\x49">`:
   \   00000000   49004E004900       DC8 49H, 0, 4EH, 0, 49H, 0, 0, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\`:
   \   00000000   250025002500       DC8 25H, 0, 25H, 0, 25H, 0, 6CH, 0
   \              6C00        
   \   00000008   73005F004900       DC8 73H, 0, 5FH, 0, 49H, 0, 4EH, 0
   \              4E00        
   \   00000010   540025002500       DC8 54H, 0, 25H, 0, 25H, 0, 0, 0
   \              0000        
   \   00000018   250025002500       DC8 25H, 0, 25H, 0, 25H, 0, 6CH, 0
   \              6C00        
   \   00000020   73005F004500       DC8 73H, 0, 5FH, 0, 45H, 0, 58H, 0
   \              5800        
   \   00000028   540025002500       DC8 54H, 0, 25H, 0, 25H, 0, 0, 0
   \              0000        
    103          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     extractdir(wchar_t *, wchar_t *, wchar_t const *)
                                      600
     getdir(wchar_t *, wchar_t const *)
                                       84
     splitfilename(wchar_t const *, wchar_t *, wchar_t *)
                                       24


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     cfgmacro                         72
     splitfilename(wchar_t const *, wchar_t *, wchar_t *)
                                     108
     extractdir(wchar_t *, wchar_t *, wchar_t const *)
                                     264
     getdir(wchar_t *, wchar_t const *)
                                     244
     ??DataTable6                      4
     ??DataTable8                      4
     ??DataTable9                      4
     ?<Initializer for cfgmacro>      72
     ?<Constant L"\x41\x55\x44\x49\x4f">
                                      12
     ?<Constant L"\x49\x4d\x41\x47\x45">
                                      12
     ?<Constant L"\x56\x49\x44\x45\x4f">
                                      12
     ?<Constant L"\x54\x48\x45\x4d\x45">
                                      12
     ?<Constant L"\x4f\x54\x48\x45\x52">
                                      12
     ?<Constant L"\x45\x4c\x46\x53">
                                      12
     ?<Constant L"\x45\x4c\x46\x53\x5f\x44\x41\x45\
                                      28
     ?<Constant L"\x45\x4c\x46\x53\x5f\x43\x4f\x4e\
                                      24
     ?<Constant L"\x49\x4e\x49">       8
     ?<Constant L"\x25\x25\x25\x6c\x73\x5f\x49\x4e\
                                      48
      Others                          24

 
 640 bytes in segment CODE
 180 bytes in segment DATA_C
  72 bytes in segment DATA_I
  72 bytes in segment DATA_ID
  12 bytes in segment INITTAB
 
 628 bytes of CODE  memory (+ 24 bytes shared)
 252 bytes of CONST memory
  72 bytes of DATA  memory

Errors: none
Warnings: none
