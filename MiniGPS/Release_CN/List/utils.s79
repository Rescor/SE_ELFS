//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  23:06:49 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\MiniGPS\utils /
//                       .c                                                  /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\MiniGPS\utils /
//                       .c -D NDEBUG -D LANG_CN -D OLDFUNCTIONS -lCN        /
//                       Z:\home\perk11\www\perk11.info\svn\SE\MiniGPS\Relea /
//                       se_CN\List\ -la Z:\home\perk11\www\perk11.info\svn\ /
//                       SE\MiniGPS\Release_CN\List\ -o                      /
//                       Z:\home\perk11\www\perk11.info\svn\SE\MiniGPS\Relea /
//                       se_CN\Obj\ -s9 --no_unroll --no_code_motion         /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --enable_multibytes  /
//                       --fpu None --eec++ --dlib_config                    /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\ --inline_threshold=2   /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\MiniGPS\Relea /
//                       se_CN\List\utils.s79                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME utils

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable7 EQU 0
        PUBLIC ??extractdir
        FUNCTION ??extractdir,0203H
        LOCFRAME CSTACK, 600, STACK
        MULTWEAK ??extractdir??rT
        PUBLIC ??getdir
        FUNCTION ??getdir,0203H
        LOCFRAME CSTACK, 84, STACK
        MULTWEAK ??getdir??rT
        PUBLIC ??splitfilename
        FUNCTION ??splitfilename,0203H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??splitfilename??rT
        PUBWEAK ?init?tab?DATA_I
        PUBLIC cfgmacro
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        

??extractdir??rT    SYMBOL "??rT", ??extractdir

??getdir??rT        SYMBOL "??rT", ??getdir

??splitfilename??rT SYMBOL "??rT", ??splitfilename


        RSEG DATA_I:DATA:SORT:NOROOT(2)
cfgmacro:
        DS8 72
        REQUIRE `?<Initializer for cfgmacro>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??splitfilename??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??splitfilename

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??splitfilename
        ARM
??splitfilename:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        MOV      R5,R0
        MOV      R6,R1
        MOV      R4,R2
        MOV      R1,#+47
        SWI      +430
        MOVS     R7,R0
        BEQ      ??splitfilename_1
        LSR      R0,R7,#+1
        SUB      R8,R0,R5, LSR #+1
        MOV      R2,R8
        MOV      R1,R5
        MOV      R0,R6
        SWI      +339
        ADD      R0,R6,R8, LSL #+1
        MOV      R1,#+0
        STRH     R1,[R0, #+0]
        ADD      R1,R7,#+2
        MOV      R0,R4
        SWI      +338
        POP      {R4-R8,PC}
??splitfilename_1:
        MOV      R0,#+0
        STRH     R0,[R6, #+0]
        MOV      R1,R5
        MOV      R0,R4
        SWI      +338
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??extractdir??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??extractdir

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??extractdir
        ARM
??extractdir:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        SUB      SP,SP,#+576
        CFI CFA R13+600
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
        MOV      R7,#+0
        B        ??extractdir_1
??extractdir_2:
        ADD      R7,R7,#+1
??extractdir_1:
        CMP      R7,#+9
        BCS      ??extractdir_3
        LDR      R0,??DataTable9  ;; cfgmacro
        LDR      R2,??DataTable6  ;; `?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\`
        LDR      R3,[R0, +R7, LSL #+3]
        MOV      R1,#+32
        ADD      R0,SP,#+512
        SWI      +277
        ADD      R0,SP,#+512
        SWI      +343
        MOV      R8,R0
        MOV      R2,R8
        ADD      R1,SP,#+512
        MOV      R0,R6
        SWI      +507
        CMP      R0,#+0
        LDR      R0,??DataTable9  ;; cfgmacro
        BNE      ??extractdir_4
        ADD      R0,R0,R7, LSL #+3
        LDR      R0,[R0, #+4]
        ORR      R0,R0,#0x1
        B        ??extractdir_5
??extractdir_4:
        LDR      R3,[R0, +R7, LSL #+3]
        LDR      R2,??DataTable8  ;; `?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\` + 24
        MOV      R1,#+32
        ADD      R0,SP,#+512
        SWI      +277
        ADD      R0,SP,#+512
        SWI      +343
        MOV      R8,R0
        MOV      R2,R8
        ADD      R1,SP,#+512
        MOV      R0,R6
        SWI      +507
        CMP      R0,#+0
        BNE      ??extractdir_2
        LDR      R0,??DataTable9  ;; cfgmacro
        ADD      R0,R0,R7, LSL #+3
        LDR      R0,[R0, #+4]
??extractdir_5:
        ADD      R6,R6,R8, LSL #+1
        CMN      R0,#+1
        BEQ      ??extractdir_3
        SWI      +261
        MOV      R1,R0
        MOV      R0,SP
        SWI      +338
        B        ??extractdir_6
??extractdir_3:
        MOV      R1,#+0
        STRH     R1,[SP, #+0]
??extractdir_6:
        MOV      R1,R6
        MOV      R0,SP
        SWI      +340
        MOV      R2,R5
        MOV      R1,R4
        MOV      R0,SP
        BL       ??splitfilename
        ADD      SP,SP,#+576
        CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??getdir??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??getdir

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??getdir
        ARM
??getdir:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+64
        CFI CFA R13+84
        MOV      R4,R0
        MOV      R5,R1
        MOV      R7,#+0
        B        ??getdir_1
??getdir_2:
        ADD      R7,R7,#+1
??getdir_1:
        CMP      R7,#+9
        BCS      ??getdir_3
        LDR      R0,??DataTable9  ;; cfgmacro
        LDR      R2,??DataTable6  ;; `?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\`
        LDR      R3,[R0, +R7, LSL #+3]
        MOV      R1,#+32
        MOV      R0,SP
        SWI      +277
        MOV      R0,SP
        SWI      +343
        MOV      R6,R0
        MOV      R2,R6
        MOV      R1,SP
        MOV      R0,R5
        SWI      +507
        CMP      R0,#+0
        LDR      R0,??DataTable9  ;; cfgmacro
        BNE      ??getdir_4
        ADD      R0,R0,R7, LSL #+3
        LDR      R0,[R0, #+4]
        ORR      R0,R0,#0x1
        B        ??getdir_5
??getdir_4:
        LDR      R3,[R0, +R7, LSL #+3]
        LDR      R2,??DataTable8  ;; `?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\` + 24
        MOV      R1,#+32
        MOV      R0,SP
        SWI      +277
        MOV      R0,SP
        SWI      +343
        MOV      R6,R0
        MOV      R2,R6
        MOV      R1,SP
        MOV      R0,R5
        SWI      +507
        CMP      R0,#+0
        BNE      ??getdir_2
        LDR      R0,??DataTable9  ;; cfgmacro
        ADD      R0,R0,R7, LSL #+3
        LDR      R0,[R0, #+4]
??getdir_5:
        ADD      R5,R5,R6, LSL #+1
        CMN      R0,#+1
        BEQ      ??getdir_3
        SWI      +261
        MOV      R1,R0
        MOV      R0,R4
        SWI      +338
        B        ??getdir_6
??getdir_3:
        MOV      R0,#+0
        STRH     R0,[R4, #+0]
??getdir_6:
        MOV      R1,R5
        MOV      R0,R4
        SWI      +340
        ADD      SP,SP,#+64
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     `?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\`

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     `?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\` + 24

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     cfgmacro

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for cfgmacro>`:
        DATA
        DC32 `?<Constant L"\\x41\\x55\\x44\\x49\\x4f">`, 0
        DC32 `?<Constant L"\\x49\\x4d\\x41\\x47\\x45">`, 2
        DC32 `?<Constant L"\\x56\\x49\\x44\\x45\\x4f">`, 4
        DC32 `?<Constant L"\\x54\\x48\\x45\\x4d\\x45">`, 6
        DC32 `?<Constant L"\\x4f\\x54\\x48\\x45\\x52">`, 8
        DC32 `?<Constant L"\\x45\\x4c\\x46\\x53">`, 16
        DC32 `?<Constant L"\\x45\\x4c\\x46\\x53\\x5f\\x44\\x41\\x45\\`, 18
        DC32 `?<Constant L"\\x45\\x4c\\x46\\x53\\x5f\\x43\\x4f\\x4e\\`, 20
        DC32 `?<Constant L"\\x49\\x4e\\x49">`, 22

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x41\\x55\\x44\\x49\\x4f">`:
        DATA
        DC8 41H, 0, 55H, 0, 44H, 0, 49H, 0
        DC8 4FH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x49\\x4d\\x41\\x47\\x45">`:
        DATA
        DC8 49H, 0, 4DH, 0, 41H, 0, 47H, 0
        DC8 45H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x56\\x49\\x44\\x45\\x4f">`:
        DATA
        DC8 56H, 0, 49H, 0, 44H, 0, 45H, 0
        DC8 4FH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x54\\x48\\x45\\x4d\\x45">`:
        DATA
        DC8 54H, 0, 48H, 0, 45H, 0, 4DH, 0
        DC8 45H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x4f\\x54\\x48\\x45\\x52">`:
        DATA
        DC8 4FH, 0, 54H, 0, 48H, 0, 45H, 0
        DC8 52H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x45\\x4c\\x46\\x53">`:
        DATA
        DC8 45H, 0, 4CH, 0, 46H, 0, 53H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x45\\x4c\\x46\\x53\\x5f\\x44\\x41\\x45\\`:
        DATA
        DC8 45H, 0, 4CH, 0, 46H, 0, 53H, 0
        DC8 5FH, 0, 44H, 0, 41H, 0, 45H, 0
        DC8 4DH, 0, 4FH, 0, 4EH, 0, 53H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x45\\x4c\\x46\\x53\\x5f\\x43\\x4f\\x4e\\`:
        DATA
        DC8 45H, 0, 4CH, 0, 46H, 0, 53H, 0
        DC8 5FH, 0, 43H, 0, 4FH, 0, 4EH, 0
        DC8 46H, 0, 49H, 0, 47H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x49\\x4e\\x49">`:
        DATA
        DC8 49H, 0, 4EH, 0, 49H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x25\\x25\\x25\\x6c\\x73\\x5f\\x49\\x4e\\`:
        DATA
        DC8 25H, 0, 25H, 0, 25H, 0, 6CH, 0
        DC8 73H, 0, 5FH, 0, 49H, 0, 4EH, 0
        DC8 54H, 0, 25H, 0, 25H, 0, 0, 0
        DC8 25H, 0, 25H, 0, 25H, 0, 6CH, 0
        DC8 73H, 0, 5FH, 0, 45H, 0, 58H, 0
        DC8 54H, 0, 25H, 0, 25H, 0, 0, 0

        END
// 
// 640 bytes in segment CODE
// 180 bytes in segment DATA_C
//  72 bytes in segment DATA_I
//  72 bytes in segment DATA_ID
//  12 bytes in segment INITTAB
// 
// 628 bytes of CODE  memory (+ 24 bytes shared)
// 252 bytes of CONST memory
//  72 bytes of DATA  memory
//
//Errors: none
//Warnings: none
