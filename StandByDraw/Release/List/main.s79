//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  23:01:39 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\StandByDraw\m /
//                       ain.c                                               /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\StandByDraw\m /
//                       ain.c -D NDEBUG -D OLDFUNCTIONS -lC                 /
//                       Z:\home\perk11\www\perk11.info\svn\SE\StandByDraw\R /
//                       elease\List\ -lA Z:\home\perk11\www\perk11.info\svn /
//                       \SE\StandByDraw\Release\List\ -o                    /
//                       Z:\home\perk11\www\perk11.info\svn\SE\StandByDraw\R /
//                       elease\Obj\ -s9 --no_unroll --no_inline --cpu_mode  /
//                       arm --endian little --cpu ARM926EJ-S --stack_align  /
//                       4 --interwork -e --fpu None --eec++ --dlib_config   /
//                       Z:\home\perk11\IAR2\arm\LIB\dl5tpainl8n.h -I        /
//                       Z:\home\perk11\IAR2\arm\INC\                        /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\StandByDraw\R /
//                       elease\List\main.s79                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
        PUBLIC ??CreateSBDBook
        FUNCTION ??CreateSBDBook,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??CreateSBDBook??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable6 EQU 0
        PUBLIC ??Draw
        FUNCTION ??Draw,0603H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK ??Draw??rT
        PUBWEAK ??LPARAM
        FUNCTION ??LPARAM,0203H
        MULTWEAK ??LPARAM??rA
        PUBLIC ??SB_ELF_Killed
        FUNCTION ??SB_ELF_Killed,0603H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??SB_ELF_Killed??rT
        PUBLIC ??Send_REDRAW_RELEASE
        FUNCTION ??Send_REDRAW_RELEASE,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??Send_REDRAW_RELEASE??rT
        PUBLIC ??ShowAuthorInfo
        FUNCTION ??ShowAuthorInfo,0603H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??ShowAuthorInfo??rT
        PUBLIC ??TerminateSBDraw
        FUNCTION ??TerminateSBDraw,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??TerminateSBDraw??rT
        PUBLIC ??elf_exit
        FUNCTION ??elf_exit,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??elf_exit??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        PUBLIC ??onCloseMyBook
        FUNCTION ??onCloseMyBook,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??onCloseMyBook??rT
        PUBLIC ??onfTimer
        FUNCTION ??onfTimer,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??onfTimer??rT
        MULTWEAK `??operator new??rA`
        PUBWEAK ?init?tab?DATA_I
        PUBLIC Height
        PUBLIC SIonRedraw
        PUBLIC StatusIndication
        PUBLIC Width
        PUBLIC _dx
        PUBLIC _dy
        PUBLIC _x
        PUBLIC _y
        PUBLIC base_page
        PUBLIC ftimer
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 12, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        

kill_data           SYMBOL "kill_data"

??CreateSBDBook??rT SYMBOL "??rT", ??CreateSBDBook

??Draw??rT          SYMBOL "??rT", ??Draw

??LPARAM??rA        SYMBOL "??rA", ??LPARAM

??SB_ELF_Killed??rT SYMBOL "??rT", ??SB_ELF_Killed

??Send_REDRAW_RELEASE??rT SYMBOL "??rT", ??Send_REDRAW_RELEASE

??ShowAuthorInfo??rT SYMBOL "??rT", ??ShowAuthorInfo

??TerminateSBDraw??rT SYMBOL "??rT", ??TerminateSBDraw

??elf_exit??rT      SYMBOL "??rT", ??elf_exit
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main

??onCloseMyBook??rT SYMBOL "??rT", ??onCloseMyBook

??onfTimer??rT      SYMBOL "??rT", ??onfTimer
`??operator new??rA` SYMBOL "??rA", `??operator new`

        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0202H

// Z:\home\perk11\www\perk11.info\svn\SE\StandByDraw\main.c
//    1 #include "..\\include\Lib_Clara.h"

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ??LPARAM
        ARM
// __??Code32?? __code __interwork __atpcs LPARAM::LPARAM(int)
??LPARAM:
        STR      R1,[R0, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock0

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI NoFunction
        THUMB
??Send_REDRAW_RELEASE??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock1
        REQUIRE ??Send_REDRAW_RELEASE
//    2 #include "..\\include\Dir.h"
//    3 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//    4 DISP_OBJ * StatusIndication;
//    5 int Height,Width;
//    6 u16 ftimer;
ftimer:
        DS8 2
        REQUIRE `?<Initializer for ftimer>`
        DS8 2
StatusIndication:
        DS8 4
        REQUIRE `?<Initializer for StatusIndication>`
Height:
        DS8 4
        REQUIRE `?<Initializer for Height>`
Width:
        DS8 4
        REQUIRE `?<Initializer for Width>`
//    7 
//    8 int _x=100;
_x:
        DS8 4
        REQUIRE `?<Initializer for _x>`
//    9 int _y=100;
_y:
        DS8 4
        REQUIRE `?<Initializer for _y>`
//   10 int _dx=2;
_dx:
        DS8 4
        REQUIRE `?<Initializer for _dx>`
//   11 int _dy=3;
_dy:
        DS8 4
        REQUIRE `?<Initializer for _dy>`
//   12 
//   13 void (*SIonRedraw)(DISP_OBJ *,int r1,int r2,int r3);
SIonRedraw:
        DS8 4
        REQUIRE `?<Initializer for SIonRedraw>`
//   14 void Draw(DISP_OBJ * db,int r1, int r2,int r3);
//   15 
//   16 typedef struct
//   17 {
//   18   BOOK * book;
//   19 }MSG;
//   20 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ??Send_REDRAW_RELEASE
        ARM
//   21 void Send_REDRAW_RELEASE()
//   22 {
??Send_REDRAW_RELEASE:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   23   // посылаем всем  мессагу со старым и своим методами Redraw
//   24   REDRAW_RELEASE_MESSAGE * sbm= new REDRAW_RELEASE_MESSAGE;
        MOV      R0,#+24
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R4,R0
//   25   memset(sbm,0,sizeof(REDRAW_RELEASE_MESSAGE));
        MOV      R2,#+24
        MOV      R1,#+0
        SWI      +274
//   26   sbm->SB_OldOnRedraw=SIonRedraw;
        LDR      R0,??Send_REDRAW_RELEASE_1  ;; ftimer + 32
        LDR      R0,[R0, #+0]
        STR      R0,[R4, #+0]
//   27   sbm->SB_NewOnRedraw=Draw;
        LDR      R0,??DataTable8  ;; ??Draw
        STR      R0,[R4, #+4]
//   28   UI_Event_wData(SBY_REDRAW_RELEASE_EVENT ,sbm,(void (*)(void*))mfree_adr());
        SWI      +33028
        MOV      R2,R0
        MOV      R1,R4
        MOV      R0,#+227
        ORR      R0,R0,#0x300
        SWI      +425
//   29 }
        POP      {R4,PC}          ;; return
        DATA
??Send_REDRAW_RELEASE_1:
        DC32     ftimer + 32
        CFI EndBlock cfiBlock2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI NoFunction
        THUMB
??TerminateSBDraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock3
        REQUIRE ??TerminateSBDraw
//   30 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function ??TerminateSBDraw
        ARM
//   31 int TerminateSBDraw(void * ,BOOK* book)
//   32 {
??TerminateSBDraw:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
//   33   Send_REDRAW_RELEASE();
        BL       ??Send_REDRAW_RELEASE
//   34   FreeBook(book);
        MOV      R0,R4
        SWI      +303
//   35   return(1);
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock4
//   36 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI NoFunction
        THUMB
??ShowAuthorInfo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock5
        REQUIRE ??ShowAuthorInfo
//   37 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ??ShowAuthorInfo
        ARM
//   38 int ShowAuthorInfo(void *mess ,BOOK* book)
//   39 {
??ShowAuthorInfo:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   40   MSG * msg = (MSG*)mess;
//   41   MessageBox(EMPTY_TEXTID,STR("StandBy Draw test..."), NOIMAGE, 1, 5000,msg->book);
        MOV      R1,#+0
        MOV      R4,R0
        LDR      R0,??ShowAuthorInfo_1  ;; `?<Constant L"\\x53\\x74\\x61\\x6e\\x64\\x42\\x79\\x20\\`
        MOV      R5,#+255
        ORR      R5,R5,#0xFF00
        MOV      R2,R5
        SWI      +349
        LDR      R1,[R4, #+0]
        MOV      R3,#+1
        PUSH     {R1}
        CFI CFA R13+16
        MOV      R2,R5
        MOV      R1,#+136
        ORR      R1,R1,#0x1300
        PUSH     {R1}
        CFI CFA R13+20
        MOV      R1,R0
        MVN      R0,#-1879048192
        SWI      +599
//   42   return(1);
        MOV      R0,#+1
        POP      {R1,R2,R4,R5,PC}  ;; return
        DATA
??ShowAuthorInfo_1:
        DC32     `?<Constant L"\\x53\\x74\\x61\\x6e\\x64\\x42\\x79\\x20\\`
        CFI EndBlock cfiBlock6
//   43 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI NoFunction
        THUMB
??SB_ELF_Killed??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock7
        REQUIRE ??SB_ELF_Killed
//   44 
//   45 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ??SB_ELF_Killed
        ARM
//   46 int SB_ELF_Killed(void *mess ,BOOK* book)
//   47 {
??SB_ELF_Killed:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//   48   // если был убит эльф рисующий на ГЭ или просто нужно перетосовать методы
//   49   REDRAW_RELEASE_MESSAGE * sbm=(REDRAW_RELEASE_MESSAGE*)mess;
//   50   // его ли метод мы используем в качестве oldRedraw?
//   51   if (sbm->SB_NewOnRedraw==SIonRedraw)
        LDR      R5,??DataTable5  ;; ftimer
        MOV      R4,R0
        LDR      R0,[R4, #+4]
        LDR      R1,[R5, #+32]
        CMP      R0,R1
        BNE      ??SB_ELF_Killed_1
//   52   {
//   53     REDRAW_RELEASE_MESSAGE *res=new REDRAW_RELEASE_MESSAGE;
        MOV      R0,#+24
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R6,R0
//   54     
//   55     // скопируем существующие методы в нашу мессагу
//   56     memcpy(res,sbm,sizeof(REDRAW_RELEASE_MESSAGE));
        MOV      R2,#+24
        MOV      R1,R4
        SWI      +275
//   57     
//   58     // если он был убит, то заменяем свой oldRedraw на его..
//   59     if (sbm->SB_OldOnRedraw!=EMPTY_REDRAW_METHOD) SIonRedraw=sbm->SB_OldOnRedraw;
        LDR      R0,[R4, #+0]
//   60 
//   61     // ставим свой метод наверх
//   62     DISP_DESC_SetOnRedraw(DispObject_GetDESC(StatusIndication),Draw);
        LDR      R4,??DataTable8  ;; ??Draw
        MVN      R7,#+0
        CMP      R0,R7
        STRNE    R0,[R5, #+32]
        LDR      R0,[R5, #+4]
        SWI      +543
        MOV      R1,R4
        SWI      +552
//   63 
//   64     // и шлём мессагу снова, чтоб следующие эльфы сделали тоже самое
//   65     res->SB_OldOnRedraw=EMPTY_REDRAW_METHOD;
        STR      R7,[R6, #+0]
//   66     res->SB_NewOnRedraw=Draw;
        STR      R4,[R6, #+4]
//   67     UI_Event_wData(SBY_REDRAW_RELEASE_EVENT ,res,(void (*)(void*))mfree_adr());
        SWI      +33028
        MOV      R2,R0
        MOV      R1,R6
        MOV      R0,#+227
        ORR      R0,R0,#0x300
        SWI      +425
//   68     return BLOCK_EVENT_GLOBALLY;
        MOV      R0,#+154
        ORR      R0,R0,#0x200
        POP      {R4-R7,PC}
//   69   }
//   70   return 0;
??SB_ELF_Killed_1:
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock8
//   71 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI NoFunction
        THUMB
??elf_exit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock9
        REQUIRE ??elf_exit
//   72 
//   73 
//   74 

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
//   75 const PAGE_MSG SBDraw_PageEvents[]@ "DYN_PAGE" ={
SBDraw_PageEvents:
        DATA
        DC32 995, ??SB_ELF_Killed, 997, ??TerminateSBDraw, 998
        DC32 ??ShowAuthorInfo, 64, 0H
//   76   SBY_REDRAW_RELEASE_EVENT  , SB_ELF_Killed,
//   77   ELF_TERMINATE_EVENT       , TerminateSBDraw,
//   78   ELF_SHOW_INFO_EVENT       , ShowAuthorInfo,
//   79   NIL_EVENT_TAG             , NULL
//   80 
//   81 };
//   82 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   83 PAGE_DESC base_page ={"SBDraw_BasePage",0,SBDraw_PageEvents};
base_page:
        DS8 12
        REQUIRE `?<Initializer for base_page>`
//   84 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function ??elf_exit
        ARM
//   85 void elf_exit(void)
//   86 {
??elf_exit:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   87   kill_data(&ELF_BEGIN, (void(*)(void*))mfree_adr());
        SWI      +33028
        MOV      R1,R0
        LDR      R0,??elf_exit_1  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??elf_exit_1:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock10
//   88 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI NoFunction
        THUMB
??onfTimer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock11
        REQUIRE ??onfTimer
//   89 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function ??onfTimer
        ARM
//   90 void onfTimer (u16 tmr , LPARAM)
//   91 {
??onfTimer:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   92   DispObject_InvalidateRect(StatusIndication,0);
        LDR      R4,??DataTable7  ;; ftimer
        SUB      SP,SP,#+4
        CFI CFA R13+12
        LDR      R0,[R4, #+4]
        MOV      R1,#+0
        SWI      +495
//   93   Timer_ReSet(&ftimer,20,onfTimer,0);
        MOV      R1,#+0
        MOV      R0,SP
        _BLF     ??LPARAM,??LPARAM??rA
        LDR      R3,[SP, #+0]
        LDR      R2,??DataTable9  ;; ??onfTimer
        MOV      R1,#+20
        MOV      R0,R4
        SWI      +296
//   94 }
        POP      {R0,R4,PC}       ;; return
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI NoFunction
        THUMB
??Draw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock13
        REQUIRE ??Draw
//   95 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function ??Draw
        ARM
//   96 void Draw(DISP_OBJ * db,int r1, int r2,int r3)
//   97 {
??Draw:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   98   // вызываем родной onRedraw.
//   99   SIonRedraw(db,r1,r2,r3);
        LDR      R4,??DataTable5  ;; ftimer
        LDR      R12,[R4, #+32]
        BLX      R12
//  100 
//  101   DrawRect(_x,_y,_x+10,_y+10,clRed,clRed);
        LDR      R0,[R4, #+16]
        LDR      R1,[R4, #+20]
        MOV      R2,#-16777216
        ORR      R2,R2,#0xFF0000
        PUSH     {R2}
        CFI CFA R13+12
        PUSH     {R2}
        CFI CFA R13+16
        ADD      R3,R1,#+10
        ADD      R2,R0,#+10
        SWI      +492
//  102   if ((_x>Width-11) && (_dx>0)) _dx=0-_dx;
        LDR      R1,[R4, #+16]
        LDR      R2,[R4, #+12]
        LDR      R0,[R4, #+24]
        SUB      R2,R2,#+11
        CMP      R2,R1
        ADD      SP,SP,#+8
        CFI CFA R13+8
        BGE      ??Draw_1
        CMP      R0,#+1
        RSBGE    R0,R0,#+0
//  103   if ((_x<9) && (_dx<0)) _dx=0-_dx;
??Draw_1:
        CMP      R1,#+9
        BGE      ??Draw_2
        CMP      R0,#+0
        RSBMI    R0,R0,#+0
//  104   if ((_y>Height-50) && (_dy>0)) _dy=0-_dy;
??Draw_2:
        LDR      R2,[R4, #+20]
        LDR      R3,[R4, #+8]
        STR      R0,[R4, #+24]
        LDR      R0,[R4, #+28]
        SUB      R3,R3,#+50
        CMP      R3,R2
        BGE      ??Draw_3
        CMP      R0,#+1
        RSBGE    R0,R0,#+0
//  105   if ((_y<20) && (_dy<0)) _dy=0-_dy;
??Draw_3:
        CMP      R2,#+20
        BGE      ??Draw_4
        CMP      R0,#+0
        RSBMI    R0,R0,#+0
//  106   _x+=_dx;
??Draw_4:
        LDR      R3,[R4, #+24]
        STR      R0,[R4, #+28]
        ADD      R1,R3,R1
        STR      R1,[R4, #+16]
//  107   _y+=_dy;
        ADD      R0,R0,R2
        STR      R0,[R4, #+20]
//  108 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable5:
        DC32     ftimer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        THUMB
??onCloseMyBook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock15
        REQUIRE ??onCloseMyBook
//  109 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function ??onCloseMyBook
        ARM
//  110 void onCloseMyBook(BOOK * book)
//  111 {
??onCloseMyBook:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  112   if (book)
        CMP      R0,#+0
        POPEQ    {R4,PC}
//  113   {
//  114     Timer_Kill(&ftimer);
        LDR      R4,??DataTable7  ;; ftimer
        MOV      R0,R4
        SWI      +298
//  115     DISP_DESC_SetOnRedraw(DispObject_GetDESC(StatusIndication),SIonRedraw);
        LDR      R0,[R4, #+4]
        SWI      +543
        LDR      R1,[R4, #+32]
        SWI      +552
//  116     SUBPROC(elf_exit);
        LDR      R0,??onCloseMyBook_1  ;; ??elf_exit
        SWI      +264
//  117   }
//  118 }
        POP      {R4,PC}          ;; return
        DATA
??onCloseMyBook_1:
        DC32     ??elf_exit
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        THUMB
??CreateSBDBook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock17
        REQUIRE ??CreateSBDBook
//  119 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function ??CreateSBDBook
        ARM
//  120 BOOK * CreateSBDBook()
//  121 {
??CreateSBDBook:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  122   BOOK * SBDBook= new BOOK;
        MOV      R0,#+24
        _BLF     `??operator new`,`??operator new??rA`
//  123   CreateBook(SBDBook,onCloseMyBook,&base_page,"SBDraw_Test",-1,0);
        LDR      R3,??CreateSBDBook_1  ;; `?<Constant "SBDraw_Test">`
        LDR      R2,??CreateSBDBook_1+0x4  ;; base_page
        LDR      R1,??CreateSBDBook_1+0x8  ;; ??onCloseMyBook
        MOV      R4,R0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+12
        MVN      R0,R0
        PUSH     {R0}
        CFI CFA R13+16
        MOV      R0,R4
        SWI      +299
//  124   return(SBDBook);
        MOV      R0,R4
        POP      {R1,R2,R4,PC}    ;; return
        DATA
??CreateSBDBook_1:
        DC32     `?<Constant "SBDraw_Test">`
        DC32     base_page
        DC32     ??onCloseMyBook
        CFI EndBlock cfiBlock18
//  125 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock19
        REQUIRE main
//  126 
//  127 //
//  128 // Исключительно пример рисования на StandBy.
//  129 // запускаем несколько копий эльфа. после запуска каждой необходимо выйти на StandBy.
//  130 //
//  131 // для рисования заменяем OnRedraw у StatusIndication на свой. старый вызываем в своём методе.
//  132 // при завершении работы посылаем сообщение(см.Send_REDRAW_RELEASE())
//  133 // так же сами обязательно обрабатываем SBY_REDRAW_RELEASE_EVENT
//  134 //

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function main
        ARM
//  135 int main (void)
//  136 {
main:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  137   Height=Display_GetHeight(0);
        LDR      R4,??DataTable7  ;; ftimer
        SUB      SP,SP,#+4
        CFI CFA R13+12
        MOV      R0,#+0
        SWI      +600
        STR      R0,[R4, #+8]
//  138   Width=Display_GetWidth(0);;
        MOV      R0,#+0
        SWI      +601
        STR      R0,[R4, #+12]
//  139   CreateSBDBook();
        BL       ??CreateSBDBook
//  140 
//  141   StatusIndication=GUIObject_GetDispObject ( SBY_GetStatusIndication(Find_StandbyBook()) );
        SWI      +305
        SWI      +536
        SWI      +360
        STR      R0,[R4, #+4]
//  142   SIonRedraw=DispObject_GetOnRedraw(StatusIndication);
        SWI      +553
        STR      R0,[R4, #+32]
//  143   DISP_DESC_SetOnRedraw(DispObject_GetDESC(StatusIndication),Draw);
        LDR      R0,[R4, #+4]
        SWI      +543
        LDR      R1,??DataTable8  ;; ??Draw
        SWI      +552
//  144   ftimer=Timer_Set(20,onfTimer,0);
        MOV      R1,#+0
        MOV      R0,SP
        _BLF     ??LPARAM,??LPARAM??rA
        LDR      R2,[SP, #+0]
        LDR      R1,??DataTable9  ;; ??onfTimer
        MOV      R0,#+20
        SWI      +297
        STRH     R0,[R4, #+0]
//  145   return(0);
        MOV      R0,#+0
        POP      {R1,R4,PC}       ;; return
        CFI EndBlock cfiBlock20
//  146 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     ftimer

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     ??Draw

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     ??onfTimer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon0
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine10_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine10_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine11_0  ;; kill_data
        BX       R12
        DATA
??Subroutine11_0:
        DC32     kill_data
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon0
        CFI NoFunction
        ARM
??LPARAM??rA:
        LDR      R12,??Subroutine12_0  ;; ??LPARAM
        BX       R12
        DATA
??Subroutine12_0:
        DC32     ??LPARAM
        CFI EndBlock cfiBlock23

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for ftimer>`:
        DATA
        DC8 0, 0
        DC8 0, 0
`?<Initializer for StatusIndication>`:
        DC8 0, 0, 0, 0
`?<Initializer for Height>`:
        DC8 0, 0, 0, 0
`?<Initializer for Width>`:
        DC8 0, 0, 0, 0
`?<Initializer for _x>`:
        DC32 100
`?<Initializer for _y>`:
        DC32 100
`?<Initializer for _dx>`:
        DC32 2
`?<Initializer for _dy>`:
        DC32 3
`?<Initializer for SIonRedraw>`:
        DC8 0, 0, 0, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for base_page>`:
        DATA
        DC32 `?<Constant "SBDraw_BasePage">`, 0H, SBDraw_PageEvents

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "SBDraw_BasePage">`:
        DATA
        DC8 "SBDraw_BasePage"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x53\\x74\\x61\\x6e\\x64\\x42\\x79\\x20\\`:
        DATA
        DC8 53H, 0, 74H, 0, 61H, 0, 6EH, 0
        DC8 64H, 0, 42H, 0, 79H, 0, 20H, 0
        DC8 44H, 0, 72H, 0, 61H, 0, 77H, 0
        DC8 20H, 0, 74H, 0, 65H, 0, 73H, 0
        DC8 74H, 0, 2EH, 0, 2EH, 0, 2EH, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "SBDraw_Test">`:
        DATA
        DC8 "SBDraw_Test"

        END
//  147 
//  148 
// 
// 952 bytes in segment CODE
//  72 bytes in segment DATA_C
//  48 bytes in segment DATA_I
//  48 bytes in segment DATA_ID
//  32 bytes in segment DYN_PAGE
//  12 bytes in segment INITTAB
// 
// 868 bytes of CODE  memory (+ 96 bytes shared)
// 152 bytes of CONST memory
//  48 bytes of DATA  memory
//
//Errors: none
//Warnings: none
