//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:42:20 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\BcfgEdit\date /
//                       time.cpp                                            /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\BcfgEdit\date /
//                       time.cpp -D NDEBUG -lCN Z:\home\perk11\www\perk11.i /
//                       nfo\svn\SE\BcfgEdit\Release\List\ -la               /
//                       Z:\home\perk11\www\perk11.info\svn\SE\BcfgEdit\Rele /
//                       ase\List\ -o Z:\home\perk11\www\perk11.info\svn\SE\ /
//                       BcfgEdit\Release\Obj\ -s9 --no_unroll               /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h -I Z:\home\perk11\IAR2\arm\INC\                /
//                       --inline_threshold=2                                /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\BcfgEdit\Rele /
//                       ase\List\datetime.s79                               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME datetime

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??AcceptDIinput
        FUNCTION ??AcceptDIinput,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??AcceptDIinput??rT
        PUBLIC ??AcceptTIinput
        FUNCTION ??AcceptTIinput,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??AcceptTIinput??rT
        PUBLIC ??CloseDIinput
        FUNCTION ??CloseDIinput,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??CloseDIinput??rT
        PUBLIC ??CloseTIinput
        FUNCTION ??CloseTIinput,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??CloseTIinput??rT
        FUNCTION ??DI_OnEnter,0603H
        LOCFRAME CSTACK, 180, STACK
        FUNCTION ??DI_OnExit,0603H
        LOCFRAME CSTACK, 8, STACK
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
        FUNCTION ??TI_OnEnter,0603H
        LOCFRAME CSTACK, 180, STACK
        FUNCTION ??TI_OnExit,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??win12512unicode??rA
        PUBLIC bk_date_input
        PUBLIC bk_time_input
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        


??AcceptDIinput??rT SYMBOL "??rT", ??AcceptDIinput

??AcceptTIinput??rT SYMBOL "??rT", ??AcceptTIinput

??CloseDIinput??rT  SYMBOL "??rT", ??CloseDIinput

??CloseTIinput??rT  SYMBOL "??rT", ??CloseTIinput
??win12512unicode??rA SYMBOL "??rA", ??win12512unicode

        EXTERN ??win12512unicode
        FUNCTION ??win12512unicode,0202H
        EXTERN ACCEPT_EVENT
        EXTERN ACTION_ACCEPT
        EXTERN ACTION_BACK
        EXTERN PREVIOUS_EVENT
        EXTERN SYNC
        EXTERN VAR_ARG_BOOK
        EXTERN VAR_ARG_DATEINP_DATE
        EXTERN VAR_ARG_DATEINP_DATE_FORMAT
        EXTERN VAR_ARG_HTEXT
        EXTERN VAR_ARG_TIMEINP_TIME
        EXTERN VAR_ARG_TIMEINP_TIME_FORMAT


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??AcceptTIinput??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??AcceptTIinput

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??AcceptTIinput
        ARM
??AcceptTIinput:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        MOV      R0,R1
        SWI      +698
        LDR      R1,[R4, #+84]
        LSR      R2,R0,#+8
        STRB     R0,[R1, #+44]
        LDR      R1,[R4, #+84]
        LSR      R0,R0,#+16
        STRB     R2,[R1, #+45]
        LDR      R1,[R4, #+84]
        STRB     R0,[R1, #+46]
        LDR      R0,??DataTable8  ;; ACCEPT_EVENT
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        SWI      +302
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??CloseTIinput??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??CloseTIinput

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??CloseTIinput
        ARM
??CloseTIinput:
        LDR      R1,??DataTable9  ;; PREVIOUS_EVENT
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R1,[R1, #+0]
        SWI      +302
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??TI_OnEnter??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??TI_OnEnter

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??TI_OnEnter
        ARM
??TI_OnEnter:
        LDR      R0,??DataTable10  ;; SYNC
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        LDR      R7,??DataTable11  ;; `?<Constant L"\\x4f\\x4b">`
        SUB      SP,SP,#+136
        CFI CFA R13+156
        LDR      R0,[R0, #+0]
        MOV      R4,R1
        MOV      R1,SP
        SWI      +445
        CMP      R0,#+0
        LDR      R0,[R4, #+84]
        MOV      R5,#+4
        LDRBEQ   R5,[SP, #+0]
        MOV      R2,#+63
        ADD      R1,R0,#+4
        ADD      R0,SP,#+8
        _BLF     ??win12512unicode,??win12512unicode??rA
        MOV      R6,#+255
        ORR      R6,R6,#0xFF00
        MOV      R2,R6
        MOV      R1,#+0
        ADD      R0,SP,#+8
        SWI      +349
        LDR      R3,??TI_OnEnter_1  ;; VAR_ARG_TIMEINP_TIME_FORMAT
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+160
        MOV      R2,R0
        MOV      R0,#+0
        MOV      R1,R4
        PUSH     {R1}
        CFI CFA R13+164
        LDR      R1,??DataTable12  ;; VAR_ARG_BOOK
        PUSH     {R1}
        CFI CFA R13+168
        LDR      R1,[R4, #+84]
        ADD      R1,R1,#+44
        PUSH     {R1}
        CFI CFA R13+172
        LDR      R1,??TI_OnEnter_1+0x4  ;; VAR_ARG_TIMEINP_TIME
        PUSH     {R1}
        CFI CFA R13+176
        LDR      R1,??DataTable13  ;; VAR_ARG_HTEXT
        PUSH     {R5}
        CFI CFA R13+180
        SWI      +694
        LDR      R2,??TI_OnEnter_1+0x8  ;; ??AcceptTIinput
        STR      R0,[R4, #+48]
        LDR      R0,??DataTable14  ;; ACTION_ACCEPT
        LDR      R5,[R0, #+0]
        LDR      R0,[R4, #+48]
        MOV      R1,R5, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
        MOV      R2,R6
        MOV      R1,#+0
        MOV      R0,R7
        SWI      +349
        MOV      R2,R0
        LDR      R0,[R4, #+48]
        MOV      R1,R5, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +332
        LDR      R0,[R4, #+48]
        MOV      R2,#+1
        MOV      R1,R5, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +336
        LDR      R0,??DataTable15  ;; ACTION_BACK
        LDR      R2,??TI_OnEnter_1+0xC  ;; ??CloseTIinput
        LDR      R1,[R0, #+0]
        LDR      R0,[R4, #+48]
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
        ADD      R2,SP,#+28
        MVN      R1,#+0
        ADD      R0,R7,#+8
        SWI      +646
        CMP      R0,#+0
        ADD      SP,SP,#+24
        CFI CFA R13+156
        BEQ      ??TI_OnEnter_2
        LDR      R1,[SP, #+4]
        LDR      R0,[R4, #+48]
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +463
??TI_OnEnter_2:
        MOV      R0,#+1
        ADD      SP,SP,#+136
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??TI_OnEnter_1:
        DC32     VAR_ARG_TIMEINP_TIME_FORMAT
        DC32     VAR_ARG_TIMEINP_TIME
        DC32     ??AcceptTIinput
        DC32     ??CloseTIinput
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??TI_OnExit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??TI_OnExit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??TI_OnExit
        ARM
??TI_OnExit:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
        LDR      R0,[R4, #+48]
        CMP      R0,#+0
        BEQ      ??TI_OnExit_1
        SWI      +462
        STR      R0,[R4, #+48]
??TI_OnExit_1:
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??AcceptDIinput??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??AcceptDIinput

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??AcceptDIinput
        ARM
??AcceptDIinput:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        MOV      R0,R1
        SWI      +697
        LDR      R1,[R4, #+84]
        LSR      R2,R0,#+16
        STRH     R0,[R1, #+44]
        LDR      R1,[R4, #+84]
        LSR      R0,R0,#+24
        STRB     R2,[R1, #+46]
        LDR      R1,[R4, #+84]
        STRB     R0,[R1, #+47]
        LDR      R0,??DataTable8  ;; ACCEPT_EVENT
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        SWI      +302
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     ACCEPT_EVENT

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??CloseDIinput??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??CloseDIinput

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??CloseDIinput
        ARM
??CloseDIinput:
        LDR      R1,??DataTable9  ;; PREVIOUS_EVENT
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R1,[R1, #+0]
        SWI      +302
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     PREVIOUS_EVENT

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??DI_OnEnter??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??DI_OnEnter

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??DI_OnEnter
        ARM
??DI_OnEnter:
        LDR      R0,??DataTable10  ;; SYNC
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        LDR      R7,??DataTable11  ;; `?<Constant L"\\x4f\\x4b">`
        SUB      SP,SP,#+136
        CFI CFA R13+156
        LDR      R0,[R0, #+0]
        MOV      R4,R1
        MOV      R1,SP
        SWI      +444
        CMP      R0,#+0
        LDR      R0,[R4, #+84]
        MOV      R5,#+4
        LDRBEQ   R5,[SP, #+0]
        MOV      R2,#+63
        ADD      R1,R0,#+4
        ADD      R0,SP,#+8
        _BLF     ??win12512unicode,??win12512unicode??rA
        MOV      R6,#+255
        ORR      R6,R6,#0xFF00
        MOV      R2,R6
        MOV      R1,#+0
        ADD      R0,SP,#+8
        SWI      +349
        LDR      R3,??DI_OnEnter_1  ;; VAR_ARG_DATEINP_DATE_FORMAT
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+160
        MOV      R2,R0
        MOV      R0,#+0
        MOV      R1,R4
        PUSH     {R1}
        CFI CFA R13+164
        LDR      R1,??DataTable12  ;; VAR_ARG_BOOK
        PUSH     {R1}
        CFI CFA R13+168
        LDR      R1,[R4, #+84]
        ADD      R1,R1,#+44
        PUSH     {R1}
        CFI CFA R13+172
        LDR      R1,??DI_OnEnter_1+0x4  ;; VAR_ARG_DATEINP_DATE
        PUSH     {R1}
        CFI CFA R13+176
        LDR      R1,??DataTable13  ;; VAR_ARG_HTEXT
        PUSH     {R5}
        CFI CFA R13+180
        SWI      +693
        LDR      R2,??DI_OnEnter_1+0x8  ;; ??AcceptDIinput
        STR      R0,[R4, #+52]
        LDR      R0,??DataTable14  ;; ACTION_ACCEPT
        LDR      R5,[R0, #+0]
        LDR      R0,[R4, #+52]
        MOV      R1,R5, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
        MOV      R2,R6
        MOV      R1,#+0
        MOV      R0,R7
        SWI      +349
        MOV      R2,R0
        LDR      R0,[R4, #+52]
        MOV      R1,R5, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +332
        LDR      R0,[R4, #+52]
        MOV      R2,#+1
        MOV      R1,R5, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +336
        LDR      R0,??DataTable15  ;; ACTION_BACK
        LDR      R2,??DI_OnEnter_1+0xC  ;; ??CloseDIinput
        LDR      R1,[R0, #+0]
        LDR      R0,[R4, #+52]
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
        ADD      R2,SP,#+28
        MVN      R1,#+0
        ADD      R0,R7,#+60
        SWI      +646
        CMP      R0,#+0
        ADD      SP,SP,#+24
        CFI CFA R13+156
        BEQ      ??DI_OnEnter_2
        LDR      R1,[SP, #+4]
        LDR      R0,[R4, #+52]
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +463
??DI_OnEnter_2:
        MOV      R0,#+1
        ADD      SP,SP,#+136
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??DI_OnEnter_1:
        DC32     VAR_ARG_DATEINP_DATE_FORMAT
        DC32     VAR_ARG_DATEINP_DATE
        DC32     ??AcceptDIinput
        DC32     ??CloseDIinput
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable10:
        DC32     SYNC

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable11:
        DC32     `?<Constant L"\\x4f\\x4b">`

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable12:
        DC32     VAR_ARG_BOOK

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable13:
        DC32     VAR_ARG_HTEXT

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable14:
        DC32     ACTION_ACCEPT

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable15:
        DC32     ACTION_BACK

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??DI_OnExit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??DI_OnExit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??DI_OnExit
        ARM
??DI_OnExit:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
        LDR      R0,[R4, #+52]
        CMP      R0,#+0
        BEQ      ??DI_OnExit_1
        SWI      +462
        STR      R0,[R4, #+52]
??DI_OnExit_1:
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
??win12512unicode??rA:
        LDR      R12,??Subroutine8_0  ;; ??win12512unicode
        BX       R12
        DATA
??Subroutine8_0:
        DC32     ??win12512unicode
        CFI EndBlock cfiBlock16

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
bk_msglst_timeinput:
        DATA
        DC32 66, ??TI_OnEnter, 67, ??TI_OnExit, 64, 0H

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
bk_msglst_dateinput:
        DATA
        DC32 66, ??DI_OnEnter, 67, ??DI_OnExit, 64, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "BcfgEdit_TimeInput_Page">`:
        DATA
        DC8 "BcfgEdit_TimeInput_Page"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "BcfgEdit_DateInput_Page">`:
        DATA
        DC8 "BcfgEdit_DateInput_Page"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x4f\\x4b">`:
        DATA
        DC8 4FH, 0, 4BH, 0, 0, 0
        DC8 0, 0
        DC8 46H, 0, 52H, 0, 5FH, 0, 49H, 0
        DC8 4EH, 0, 50H, 0, 55H, 0, 54H, 0
        DC8 5FH, 0, 47H, 0, 55H, 0, 49H, 0
        DC8 5FH, 0, 53H, 0, 45H, 0, 54H, 0
        DC8 5FH, 0, 54H, 0, 49H, 0, 4DH, 0
        DC8 45H, 0, 5FH, 0, 49H, 0, 43H, 0
        DC8 4EH, 0, 0, 0
        DC8 46H, 0, 52H, 0, 5FH, 0, 49H, 0
        DC8 4EH, 0, 50H, 0, 55H, 0, 54H, 0
        DC8 5FH, 0, 47H, 0, 55H, 0, 49H, 0
        DC8 5FH, 0, 53H, 0, 45H, 0, 54H, 0
        DC8 5FH, 0, 44H, 0, 41H, 0, 54H, 0
        DC8 45H, 0, 5FH, 0, 49H, 0, 43H, 0
        DC8 4EH, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
bk_time_input:
        DATA
        DC32 `?<Constant "BcfgEdit_TimeInput_Page">`, 0H, bk_msglst_timeinput

        RSEG DATA_C:CONST:SORT:NOROOT(2)
bk_date_input:
        DATA
        DC32 `?<Constant "BcfgEdit_DateInput_Page">`, 0H, bk_msglst_dateinput

        END
// 
// 1 020 bytes in segment CODE
//   184 bytes in segment DATA_C
//    48 bytes in segment DYN_PAGE
// 
// 976 bytes of CODE  memory (+ 44 bytes shared)
// 232 bytes of CONST memory
//
//Errors: none
//Warnings: none
