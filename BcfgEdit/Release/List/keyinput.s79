//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Jun/2013  22:42:27 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  Z:\home\perk11\www\perk11.info\svn\SE\BcfgEdit\keyi /
//                       nput.cpp                                            /
//    Command line    =  Z:\home\perk11\www\perk11.info\svn\SE\BcfgEdit\keyi /
//                       nput.cpp -D NDEBUG -lCN Z:\home\perk11\www\perk11.i /
//                       nfo\svn\SE\BcfgEdit\Release\List\ -la               /
//                       Z:\home\perk11\www\perk11.info\svn\SE\BcfgEdit\Rele /
//                       ase\List\ -o Z:\home\perk11\www\perk11.info\svn\SE\ /
//                       BcfgEdit\Release\Obj\ -s9 --no_unroll               /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config Z:\home\perk11\IAR2\arm\LIB\dl5tpainl /
//                       8n.h -I Z:\home\perk11\IAR2\arm\INC\                /
//                       --inline_threshold=2                                /
//    List file       =  Z:\home\perk11\www\perk11.info\svn\SE\BcfgEdit\Rele /
//                       ase\List\keyinput.s79                               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME keyinput

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
        PUBLIC ??GetKeyModeName
        FUNCTION ??GetKeyModeName,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??GetKeyModeName??rT
        PUBLIC ??KeyCodeSelect_OnBack
        FUNCTION ??KeyCodeSelect_OnBack,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??KeyCodeSelect_OnBack??rT
        PUBLIC ??KeyCodeSelect_OnDelete
        FUNCTION ??KeyCodeSelect_OnDelete,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??KeyCodeSelect_OnDelete??rT
        PUBLIC ??KeyCodeSelect_OnEnter
        FUNCTION ??KeyCodeSelect_OnEnter,0603H
        LOCFRAME CSTACK, 152, STACK
        MULTWEAK ??KeyCodeSelect_OnEnter??rT
        PUBLIC ??KeyCodeSelect_OnExit
        FUNCTION ??KeyCodeSelect_OnExit,0603H
        MULTWEAK ??KeyCodeSelect_OnExit??rT
        PUBLIC ??KeyCodeSelect_onEnterPressed
        FUNCTION ??KeyCodeSelect_onEnterPressed,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??KeyCodeSelect_onEnterPressed??rT
        PUBLIC ??KeyCode_KeyHook
        FUNCTION ??KeyCode_KeyHook,0603H
        LOCFRAME CSTACK, 164, STACK
        MULTWEAK ??KeyCode_KeyHook??rT
        PUBLIC ??KeyCode_OnClose
        FUNCTION ??KeyCode_OnClose,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??KeyCode_OnClose??rT
        PUBLIC ??KeyCode_OnEnter
        FUNCTION ??KeyCode_OnEnter,0603H
        LOCFRAME CSTACK, 164, STACK
        MULTWEAK ??KeyCode_OnEnter??rT
        PUBLIC ??KeyCode_OnExit
        FUNCTION ??KeyCode_OnExit,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??KeyCode_OnExit??rT
        PUBLIC ??KeyModeSelect_CreateCBoxGui
        FUNCTION ??KeyModeSelect_CreateCBoxGui,0203H
        LOCFRAME CSTACK, 164, STACK
        MULTWEAK ??KeyModeSelect_CreateCBoxGui??rT
        PUBLIC ??KeyModeSelect_OnCloseCBoxGui
        FUNCTION ??KeyModeSelect_OnCloseCBoxGui,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??KeyModeSelect_OnCloseCBoxGui??rT
        PUBLIC ??KeyModeSelect_OnSelectCBoxGui
        FUNCTION ??KeyModeSelect_OnSelectCBoxGui,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??KeyModeSelect_OnSelectCBoxGui??rT
        MULTWEAK ??win12512unicode??rA
        PUBWEAK ?init?tab?DATA_I
        PUBLIC bk_keycode_select
        PUBLIC modes
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        


??GetKeyModeName??rT SYMBOL "??rT", ??GetKeyModeName

??KeyCodeSelect_OnBack??rT SYMBOL "??rT", ??KeyCodeSelect_OnBack

??KeyCodeSelect_OnDelete??rT SYMBOL "??rT", ??KeyCodeSelect_OnDelete

??KeyCodeSelect_OnEnter??rT SYMBOL "??rT", ??KeyCodeSelect_OnEnter

??KeyCodeSelect_OnExit??rT SYMBOL "??rT", ??KeyCodeSelect_OnExit

??KeyCodeSelect_onEnterPressed??rT SYMBOL "??rT", ??KeyCodeSelect_onEnterPressed

??KeyCode_KeyHook??rT SYMBOL "??rT", ??KeyCode_KeyHook

??KeyCode_OnClose??rT SYMBOL "??rT", ??KeyCode_OnClose

??KeyCode_OnEnter??rT SYMBOL "??rT", ??KeyCode_OnEnter

??KeyCode_OnExit??rT SYMBOL "??rT", ??KeyCode_OnExit

??KeyModeSelect_CreateCBoxGui??rT SYMBOL "??rT", ??KeyModeSelect_CreateCBoxGui

??KeyModeSelect_OnCloseCBoxGui??rT SYMBOL "??rT", ??KeyModeSelect_OnCloseCBoxGui

??KeyModeSelect_OnSelectCBoxGui??rT SYMBOL "??rT", ??KeyModeSelect_OnSelectCBoxGui
??win12512unicode??rA SYMBOL "??rA", ??win12512unicode

        EXTERN ??win12512unicode
        FUNCTION ??win12512unicode,0202H
        EXTERN ACCEPT_EVENT
        EXTERN ACTION_BACK
        EXTERN ACTION_DELETE
        EXTERN ACTION_SELECT1
        EXTERN KBD_SHORT_PRESS
        EXTERN PREVIOUS_EVENT


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??KeyCode_KeyHook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE ??KeyCode_KeyHook

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function ??KeyCode_KeyHook
        ARM
??KeyCode_KeyHook:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        LDR      R0,??KeyCode_KeyHook_1  ;; KBD_SHORT_PRESS
        SUB      SP,SP,#+140
        CFI CFA R13+160
        LDR      R0,[R0, #+0]
        MOV      R5,R1
        CMP      R3,R0
        BNE      ??KeyCode_KeyHook_2
        SWI      +388
        SWI      +399
        LDR      R1,??DataTable2  ;; `?<Constant "elfpackdata">`
        SWI      +397
        LDRH     R0,[R0, #+52]
        CMP      R5,R0
        BNE      ??KeyCode_KeyHook_3
        LDR      R0,??KeyCode_KeyHook_1+0x4  ;; `?<Constant "elfpackdata">` + 12
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        MOV      R1,#+6
        SWI      +349
        MOV      R1,R0
        LDR      R0,[R4, #+60]
        MOV      R2,#+0
        SWI      +713
        ADD      SP,SP,#+140
        CFI CFA R13+20
        POP      {R4-R7,PC}
        CFI CFA R13+160
??KeyCode_KeyHook_3:
        LDR      R6,??DataTable2  ;; `?<Constant "elfpackdata">`
        MOV      R0,R5
        PUSH     {R0}
        CFI CFA R13+164
        MOV      R3,R5
        ADD      R2,R6,#+24
        MOV      R1,#+63
        ADD      R0,SP,#+16
        SWI      +277
        LDR      R0,[R4, #+84]
        MOV      R7,#+255
        STR      R5,[R0, #+44]
        ORR      R7,R7,#0xFF00
        MOV      R2,R7
        MOV      R1,#+0
        ADD      R0,R6,#+68
        SWI      +349
        STR      R0,[SP, #+4]
        MOV      R0,R5
        SWI      +715
        STR      R0,[SP, #+8]
        MOV      R2,R7
        MOV      R1,#+0
        ADD      R0,SP,#+16
        SWI      +349
        STR      R0,[SP, #+12]
        MOV      R2,#+3
        MOV      R1,#+5
        ADD      R0,SP,#+4
        SWI      +349
        MOV      R2,#+0
        MOV      R1,R0
        LDR      R0,[R4, #+60]
        SWI      +713
        LDR      R0,[R4, #+60]
        MOV      R1,#+184
        ORR      R1,R1,#0xB00
        SWI      +712
        ADD      SP,SP,#+4
        CFI CFA R13+160
??KeyCode_KeyHook_2:
        ADD      SP,SP,#+140      ;; stack cleaning
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??KeyCode_KeyHook_1:
        DC32     KBD_SHORT_PRESS
        DC32     `?<Constant "elfpackdata">` + 12
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??KeyCode_OnClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??KeyCode_OnClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??KeyCode_OnClose
        ARM
??KeyCode_OnClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,[R4, #+60]
        CMP      R0,#+0
        BEQ      ??KeyCode_OnClose_1
        SWI      +462
        STR      R0,[R4, #+60]
??KeyCode_OnClose_1:
        LDR      R0,??KeyCode_OnClose_2  ;; PREVIOUS_EVENT
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        SWI      +302
        POP      {R4,PC}          ;; return
        DATA
??KeyCode_OnClose_2:
        DC32     PREVIOUS_EVENT
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??KeyCode_OnEnter??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??KeyCode_OnEnter

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??KeyCode_OnEnter
        ARM
??KeyCode_OnEnter:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+140
        CFI CFA R13+160
        LDR      R6,??DataTable2  ;; `?<Constant "elfpackdata">`
        MOV      R4,R1
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +709
        STR      R0,[R4, #+60]
        LDR      R0,[R4, #+84]
        ADD      R2,R6,#+24
        LDR      R5,[R0, #+44]
        MOV      R1,#+63
        MOV      R0,R5
        PUSH     {R0}
        CFI CFA R13+164
        MOV      R3,R5
        MOV      R7,#+255
        ORR      R7,R7,#0xFF00
        ADD      R0,SP,#+16
        SWI      +277
        MOV      R2,R7
        MOV      R1,#+0
        ADD      R0,R6,#+68
        SWI      +349
        STR      R0,[SP, #+4]
        MOV      R0,R5
        SWI      +715
        STR      R0,[SP, #+8]
        MOV      R2,R7
        MOV      R1,#+0
        ADD      R0,SP,#+16
        SWI      +349
        STR      R0,[SP, #+12]
        MOV      R2,#+3
        MOV      R1,#+5
        ADD      R0,SP,#+4
        SWI      +349
        MOV      R2,#+0
        MOV      R1,R0
        LDR      R0,[R4, #+60]
        SWI      +713
        LDR      R0,[R4, #+60]
        MOV      R1,#+1
        SWI      +310
        LDR      R1,??KeyCode_OnEnter_1  ;; ??KeyCode_KeyHook
        LDR      R0,[R4, #+60]
        SWI      +710
        LDR      R1,??KeyCode_OnEnter_1+0x4  ;; ??KeyCode_OnClose
        LDR      R0,[R4, #+60]
        SWI      +711
        LDR      R0,[R4, #+60]
        MOV      R1,#+184
        ORR      R1,R1,#0xB00
        SWI      +712
        LDR      R0,[R4, #+60]
        SWI      +308
        MOV      R0,#+1
        ADD      SP,SP,#+144
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??KeyCode_OnEnter_1:
        DC32     ??KeyCode_KeyHook
        DC32     ??KeyCode_OnClose
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     `?<Constant "elfpackdata">`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??KeyCode_OnExit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??KeyCode_OnExit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??KeyCode_OnExit
        ARM
??KeyCode_OnExit:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
        LDR      R0,[R4, #+84]
        LDR      R0,[R0, #+44]
        SWI      +715
        MOV      R2,R0
        LDR      R0,[R4, #+64]
        MOV      R1,#+0
        SWI      +678
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetKeyModeName??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??GetKeyModeName

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
bk_msglst_keycodeinput:
        DATA
        DC32 66, ??KeyCode_OnEnter, 67, ??KeyCode_OnExit, 89, 0H, 97, 0H, 95
        DC32 0H, 96, 0H, 284, 0H, 282, 0H, 121, 0H, 122, 0H, 281, 0H, 86, 0H
        DC32 102, 0H, 103, 0H, 64, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "BcfgEdit_KeyCodeInput...">`:
        DATA
        DC8 "BcfgEdit_KeyCodeInput_Page"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x53\\x68\\x6f\\x72\\x74\\x20\\x50\\x72\\`:
        DATA
        DC8 53H, 0, 68H, 0, 6FH, 0, 72H, 0
        DC8 74H, 0, 20H, 0, 50H, 0, 72H, 0
        DC8 65H, 0, 73H, 0, 73H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x4c\\x6f\\x6e\\x67\\x20\\x50\\x72\\x65\\`:
        DATA
        DC8 4CH, 0, 6FH, 0, 6EH, 0, 67H, 0
        DC8 20H, 0, 50H, 0, 72H, 0, 65H, 0
        DC8 73H, 0, 73H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x52\\x65\\x70\\x65\\x61\\x74">`:
        DATA
        DC8 52H, 0, 65H, 0, 70H, 0, 65H, 0
        DC8 61H, 0, 74H, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x53\\x68\\x6f\\x72\\x74\\x20\\x52\\x65\\`:
        DATA
        DC8 53H, 0, 68H, 0, 6FH, 0, 72H, 0
        DC8 74H, 0, 20H, 0, 52H, 0, 65H, 0
        DC8 6CH, 0, 65H, 0, 61H, 0, 73H, 0
        DC8 65H, 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x4c\\x6f\\x6e\\x67\\x20\\x52\\x65\\x6c\\`:
        DATA
        DC8 4CH, 0, 6FH, 0, 6EH, 0, 67H, 0
        DC8 20H, 0, 52H, 0, 65H, 0, 6CH, 0
        DC8 65H, 0, 61H, 0, 73H, 0, 65H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "BcfgEdit_KeyCodeSelec...">`:
        DATA
        DC8 "BcfgEdit_KeyCodeSelect_Page"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "elfpackdata">`:
        DATA
        DC8 "elfpackdata"
        DC8 "Key blocked"
        DC8 0AH, 0, 0AH, 0, 48H, 0, 45H, 0
        DC8 58H, 0, 3AH, 0, 20H, 0, 30H, 0
        DC8 78H, 0, 25H, 0, 30H, 0, 32H, 0
        DC8 58H, 0, 0AH, 0, 44H, 0, 45H, 0
        DC8 43H, 0, 3AH, 0, 20H, 0, 25H, 0
        DC8 64H, 0, 0, 0
        DC8 43H, 0, 75H, 0, 72H, 0, 72H, 0
        DC8 65H, 0, 6EH, 0, 74H, 0, 20H, 0
        DC8 6BH, 0, 65H, 0, 79H, 0, 3AH, 0
        DC8 0AH, 0, 0AH, 0, 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant L"\\x53\\x65\\x6c\\x65\\x63\\x74\\x20\\x6b\\`:
        DATA
        DC8 53H, 0, 65H, 0, 6CH, 0, 65H, 0
        DC8 63H, 0, 74H, 0, 20H, 0, 6BH, 0
        DC8 65H, 0, 79H, 0, 0, 0
        DC8 0, 0
        DC8 4BH, 0, 65H, 0, 79H, 0, 20H, 0
        DC8 6DH, 0, 6FH, 0, 64H, 0, 65H, 0
        DC8 0, 0
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
bk_keycode_input:
        DATA
        DC32 `?<Constant "BcfgEdit_KeyCodeInput...">`, 0H
        DC32 bk_msglst_keycodeinput

        RSEG DATA_I:DATA:SORT:NOROOT(2)
modes:
        DS8 20
        REQUIRE `?<Initializer for modes>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??GetKeyModeName
        ARM
??GetKeyModeName:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        CMP      R0,#+5
        BCS      ??GetKeyModeName_1
        LDR      R3,??DataTable8  ;; modes
        MOV      R2,#+255
        LDR      R0,[R3, +R0, LSL #+2]
        ORR      R2,R2,#0xFF00
        MOV      R1,#+0
        SWI      +349
        POP      {PC}
??GetKeyModeName_1:
        MVN      R0,#-1879048192
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??KeyModeSelect_OnCloseCBoxGui??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??KeyModeSelect_OnCloseCBoxGui

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??KeyModeSelect_OnCloseCBoxGui
        ARM
??KeyModeSelect_OnCloseCBoxGui:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,[R4, #+68]
        CMP      R0,#+0
        POPEQ    {R4,PC}
        SWI      +462
        STR      R0,[R4, #+68]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??KeyModeSelect_OnSelectCBoxGui??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??KeyModeSelect_OnSelectCBoxGui

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??KeyModeSelect_OnSelectCBoxGui
        ARM
??KeyModeSelect_OnSelectCBoxGui:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,[R4, #+68]
        SWI      +329
        LDR      R1,[R4, #+84]
        LDR      R3,??DataTable8  ;; modes
        STR      R0,[R1, #+48]
        LDR      R0,[R3, +R0, LSL #+2]
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        MOV      R1,#+0
        SWI      +349
        MOV      R2,R0
        LDR      R0,[R4, #+64]
        MOV      R1,#+1
        SWI      +678
        LDR      R0,[R4, #+68]
        CMP      R0,#+0
        POPEQ    {R4,PC}
        SWI      +462
        STR      R0,[R4, #+68]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??KeyModeSelect_CreateCBoxGui??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??KeyModeSelect_CreateCBoxGui

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??KeyModeSelect_CreateCBoxGui
        ARM
??KeyModeSelect_CreateCBoxGui:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+148
        CFI CFA R13+164
        MOV      R4,R0
        MOV      R6,#+0
        SWI      +325
        MOV      R5,R0
        STR      R5,[R4, #+68]
        LDR      R0,[R4, #+84]
        MOV      R2,#+63
        ADD      R1,R0,#+4
        ADD      R0,SP,#+20
        _BLF     ??win12512unicode,??win12512unicode??rA
        MOV      R2,#+255
        ORR      R2,R2,#0xFF00
        MOV      R1,#+0
        ADD      R0,SP,#+20
        SWI      +349
        MOV      R1,R0
        MOV      R0,R5
        SWI      +307
        B        ??KeyModeSelect_CreateCBoxGui_1
??KeyModeSelect_CreateCBoxGui_2:
        MOV      R0,R6
        BL       ??GetKeyModeName
        MOV      R1,SP
        STR      R0,[R1, +R6, LSL #+2]
        ADD      R6,R6,#+1
??KeyModeSelect_CreateCBoxGui_1:
        CMP      R6,#+5
        BCC      ??KeyModeSelect_CreateCBoxGui_2
        MOV      R2,#+5
        MOV      R1,SP
        MOV      R0,R5
        SWI      +328
        LDR      R0,[R4, #+84]
        LDR      R1,[R0, #+48]
        MOV      R0,R5
        SWI      +327
        LDR      R0,??DataTable10  ;; ACTION_BACK
        LDR      R2,??KeyModeSelect_CreateCBoxGui_3  ;; ??KeyModeSelect_OnCloseCBoxGui
        LDR      R1,[R0, #+0]
        MOV      R0,R5
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
        LDR      R0,??DataTable9  ;; ACTION_SELECT1
        LDR      R2,??KeyModeSelect_CreateCBoxGui_3+0x4  ;; ??KeyModeSelect_OnSelectCBoxGui
        LDR      R1,[R0, #+0]
        MOV      R0,R5
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
        MOV      R0,R5
        SWI      +308
        ADD      SP,SP,#+148
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        DATA
??KeyModeSelect_CreateCBoxGui_3:
        DC32     ??KeyModeSelect_OnCloseCBoxGui
        DC32     ??KeyModeSelect_OnSelectCBoxGui
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??KeyCodeSelect_onEnterPressed??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??KeyCodeSelect_onEnterPressed

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??KeyCodeSelect_onEnterPressed
        ARM
??KeyCodeSelect_onEnterPressed:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,[R4, #+64]
        SWI      +318
        CMP      R0,#+0
        BEQ      ??KeyCodeSelect_onEnterPressed_1
        SUBS     R0,R0,#+1
        BEQ      ??KeyCodeSelect_onEnterPressed_2
        POP      {R4,PC}
??KeyCodeSelect_onEnterPressed_1:
        LDR      R1,??KeyCodeSelect_onEnterPressed_3  ;; bk_keycode_input
        MOV      R0,R4
        SWI      +696
        POP      {R4,PC}
??KeyCodeSelect_onEnterPressed_2:
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        B        ??KeyModeSelect_CreateCBoxGui  ;; tailcall
        DATA
??KeyCodeSelect_onEnterPressed_3:
        DC32     bk_keycode_input
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??KeyCodeSelect_OnBack??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??KeyCodeSelect_OnBack

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??KeyCodeSelect_OnBack
        ARM
??KeyCodeSelect_OnBack:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,[R4, #+64]
        CMP      R0,#+0
        BEQ      ??KeyCodeSelect_OnBack_1
        SWI      +462
        STR      R0,[R4, #+64]
??KeyCodeSelect_OnBack_1:
        LDR      R0,??KeyCodeSelect_OnBack_2  ;; ACCEPT_EVENT
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        SWI      +302
        POP      {R4,PC}          ;; return
        DATA
??KeyCodeSelect_OnBack_2:
        DC32     ACCEPT_EVENT
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??KeyCodeSelect_OnDelete??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ??KeyCodeSelect_OnDelete

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ??KeyCodeSelect_OnDelete
        ARM
??KeyCodeSelect_OnDelete:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        LDR      R0,[R4, #+64]
        SWI      +318
        CMP      R0,#+0
        BEQ      ??KeyCodeSelect_OnDelete_1
        SUBS     R0,R0,#+1
        BEQ      ??KeyCodeSelect_OnDelete_2
        POP      {R4,PC}
??KeyCodeSelect_OnDelete_1:
        LDR      R0,[R4, #+84]
        MOV      R1,#+0
        STR      R1,[R0, #+44]
        MOV      R0,#+0
        SWI      +715
        MOV      R2,R0
        LDR      R0,[R4, #+64]
        MOV      R1,#+0
        SWI      +678
        POP      {R4,PC}
??KeyCodeSelect_OnDelete_2:
        LDR      R0,[R4, #+84]
        MOV      R1,#+0
        STR      R1,[R0, #+48]
        LDR      R0,??DataTable8  ;; modes
        MOV      R2,#+255
        LDR      R0,[R0, #+0]
        ORR      R2,R2,#0xFF00
        SWI      +349
        MOV      R2,R0
        LDR      R0,[R4, #+64]
        MOV      R1,#+1
        SWI      +678
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??KeyCodeSelect_OnEnter??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE ??KeyCodeSelect_OnEnter

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function ??KeyCodeSelect_OnEnter
        ARM
??KeyCodeSelect_OnEnter:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R4,??KeyCodeSelect_OnEnter_1  ;; `?<Constant L"\\x53\\x65\\x6c\\x65\\x63\\x74\\x20\\x6b\\`
        SUB      SP,SP,#+136
        CFI CFA R13+152
        MOV      R5,R1
        MOV      R6,#+255
        ORR      R6,R6,#0xFF00
        MOV      R2,R6
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +349
        STR      R0,[SP, #+0]
        MOV      R2,R6
        MOV      R1,#+0
        ADD      R0,R4,#+24
        SWI      +349
        STR      R0,[SP, #+4]
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +448
        MOV      R4,R0
        STR      R4,[R5, #+64]
        LDR      R0,[R5, #+84]
        MOV      R2,#+63
        ADD      R1,R0,#+4
        ADD      R0,SP,#+8
        _BLF     ??win12512unicode,??win12512unicode??rA
        MOV      R2,R6
        MOV      R1,#+0
        ADD      R0,SP,#+8
        SWI      +349
        MOV      R1,R0
        MOV      R0,R4
        SWI      +307
        MOV      R1,#+2
        MOV      R0,R4
        SWI      +449
        MOV      R2,#+2
        MOV      R1,SP
        MOV      R0,R4
        SWI      +328
        LDR      R0,[R5, #+84]
        LDR      R0,[R0, #+44]
        SWI      +715
        MOV      R2,R0
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +678
        LDR      R0,[R5, #+84]
        LDR      R3,??DataTable8  ;; modes
        LDR      R0,[R0, #+48]
        MOV      R2,R6
        LDR      R0,[R3, +R0, LSL #+2]
        MOV      R1,#+0
        SWI      +349
        MOV      R2,R0
        MOV      R1,#+1
        MOV      R0,R4
        SWI      +678
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +309
        MOV      R1,#+1
        MOV      R0,R4
        SWI      +319
        LDR      R0,??DataTable9  ;; ACTION_SELECT1
        LDR      R2,??KeyCodeSelect_OnEnter_1+0x4  ;; ??KeyCodeSelect_onEnterPressed
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
        LDR      R0,??DataTable10  ;; ACTION_BACK
        LDR      R2,??KeyCodeSelect_OnEnter_1+0x8  ;; ??KeyCodeSelect_OnBack
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
        LDR      R0,??KeyCodeSelect_OnEnter_1+0xC  ;; ACTION_DELETE
        LDR      R2,??KeyCodeSelect_OnEnter_1+0x10  ;; ??KeyCodeSelect_OnDelete
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        MOV      R1,R1, LSL #+16
        MOV      R1,R1, LSR #+16
        SWI      +331
        MOV      R0,R4
        SWI      +308
        MOV      R0,#+1
        ADD      SP,SP,#+136
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        DATA
??KeyCodeSelect_OnEnter_1:
        DC32     `?<Constant L"\\x53\\x65\\x6c\\x65\\x63\\x74\\x20\\x6b\\`
        DC32     ??KeyCodeSelect_onEnterPressed
        DC32     ??KeyCodeSelect_OnBack
        DC32     ACTION_DELETE
        DC32     ??KeyCodeSelect_OnDelete
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     modes

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     ACTION_SELECT1

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable10:
        DC32     ACTION_BACK

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??KeyCodeSelect_OnExit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE ??KeyCodeSelect_OnExit

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function ??KeyCodeSelect_OnExit
        ARM
??KeyCodeSelect_OnExit:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon1
        CFI NoFunction
        ARM
??win12512unicode??rA:
        LDR      R12,??Subroutine13_0  ;; ??win12512unicode
        BX       R12
        DATA
??Subroutine13_0:
        DC32     ??win12512unicode
        CFI EndBlock cfiBlock26

        RSEG DYN_PAGE:CONST:SORT:NOROOT(2)
bk_msglst_keycodeselect:
        DATA
        DC32 66, ??KeyCodeSelect_OnEnter, 67, ??KeyCodeSelect_OnExit, 64, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
bk_keycode_select:
        DATA
        DC32 `?<Constant "BcfgEdit_KeyCodeSelec...">`, 0H
        DC32 bk_msglst_keycodeselect

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for modes>`:
        DATA
        DC32 `?<Constant L"\\x53\\x68\\x6f\\x72\\x74\\x20\\x50\\x72\\`
        DC32 `?<Constant L"\\x4c\\x6f\\x6e\\x67\\x20\\x50\\x72\\x65\\`
        DC32 `?<Constant L"\\x52\\x65\\x70\\x65\\x61\\x74">`
        DC32 `?<Constant L"\\x53\\x68\\x6f\\x72\\x74\\x20\\x52\\x65\\`
        DC32 `?<Constant L"\\x4c\\x6f\\x6e\\x67\\x20\\x52\\x65\\x6c\\`

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 1 716 bytes in segment CODE
//   344 bytes in segment DATA_C
//    20 bytes in segment DATA_I
//    20 bytes in segment DATA_ID
//   144 bytes in segment DYN_PAGE
//    12 bytes in segment INITTAB
// 
// 1 652 bytes of CODE  memory (+ 76 bytes shared)
//   508 bytes of CONST memory
//    20 bytes of DATA  memory
//
//Errors: none
//Warnings: none
